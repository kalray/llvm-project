// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang_cc1 -x cl -cl-std=CL1.2 -cl-ext=+cl_khr_fp64,+cl_khr_fp16 -Wall -triple kvx-kalray-cos -S -disable-llvm-passes -emit-llvm -o - %s | FileCheck %s

#pragma OPENCL EXTENSION cl_khr_fp64 : enable
#pragma OPENCL EXTENSION cl_khr_fp16 : enable

typedef char __attribute__((ext_vector_type(2))) char2;
typedef char __attribute__((ext_vector_type(3))) char3;
typedef char __attribute__((ext_vector_type(4))) char4;
typedef char __attribute__((ext_vector_type(8))) char8;
typedef char __attribute__((ext_vector_type(16))) char16;

typedef short __attribute__((ext_vector_type(2))) short2;
typedef short __attribute__((ext_vector_type(3))) short3;
typedef short __attribute__((ext_vector_type(4))) short4;
typedef short __attribute__((ext_vector_type(8))) short8;
typedef short __attribute__((ext_vector_type(16))) short16;

typedef int __attribute__((ext_vector_type(2))) int2;
typedef int __attribute__((ext_vector_type(3))) int3;
typedef int __attribute__((ext_vector_type(4))) int4;
typedef int __attribute__((ext_vector_type(8))) int8;
typedef int __attribute__((ext_vector_type(16))) int16;

typedef long __attribute__((ext_vector_type(2))) long2;
typedef long __attribute__((ext_vector_type(3))) long3;
typedef long __attribute__((ext_vector_type(4))) long4;
typedef long __attribute__((ext_vector_type(8))) long8;
typedef long __attribute__((ext_vector_type(16))) long16;

typedef half __attribute__((ext_vector_type(2))) half2;
typedef half __attribute__((ext_vector_type(3))) half3;
typedef half __attribute__((ext_vector_type(4))) half4;
typedef half __attribute__((ext_vector_type(8))) half8;
typedef half __attribute__((ext_vector_type(16))) half16;

typedef float __attribute__((ext_vector_type(2))) float2;
typedef float __attribute__((ext_vector_type(3))) float3;
typedef float __attribute__((ext_vector_type(4))) float4;
typedef float __attribute__((ext_vector_type(8))) float8;
typedef float __attribute__((ext_vector_type(16))) float16;

typedef double __attribute__((ext_vector_type(2))) double2;
typedef double __attribute__((ext_vector_type(3))) double3;
typedef double __attribute__((ext_vector_type(4))) double4;
typedef double __attribute__((ext_vector_type(8))) double8;
typedef double __attribute__((ext_vector_type(16))) double16;



// CHECK-LABEL: @local_memory_alignment_global(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    store volatile i8 0, ptr addrspace(3) @local_memory_alignment_global.lds_i8, align 1, !tbaa [[TBAA4:![0-9]+]]
// CHECK-NEXT:    store volatile <2 x i8> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v2i8, align 2, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x i8> <i8 0, i8 0, i8 0, i8 undef>, ptr addrspace(3) @local_memory_alignment_global.lds_v3i8, align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x i8> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v4i8, align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <8 x i8> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v8i8, align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <16 x i8> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v16i8, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile i16 0, ptr addrspace(3) @local_memory_alignment_global.lds_i16, align 2, !tbaa [[TBAA7:![0-9]+]]
// CHECK-NEXT:    store volatile <2 x i16> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v2i16, align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x i16> <i16 0, i16 0, i16 0, i16 undef>, ptr addrspace(3) @local_memory_alignment_global.lds_v3i16, align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x i16> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v4i16, align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <8 x i16> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v8i16, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <16 x i16> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v16i16, align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile i32 0, ptr addrspace(3) @local_memory_alignment_global.lds_i32, align 4, !tbaa [[TBAA9:![0-9]+]]
// CHECK-NEXT:    store volatile <2 x i32> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v2i32, align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x i32> <i32 0, i32 0, i32 0, i32 undef>, ptr addrspace(3) @local_memory_alignment_global.lds_v3i32, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x i32> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v4i32, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <8 x i32> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v8i32, align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <16 x i32> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v16i32, align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile i64 0, ptr addrspace(3) @local_memory_alignment_global.lds_i64, align 8, !tbaa [[TBAA11:![0-9]+]]
// CHECK-NEXT:    store volatile <2 x i64> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v2i64, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x i64> <i64 0, i64 0, i64 0, i64 undef>, ptr addrspace(3) @local_memory_alignment_global.lds_v3i64, align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x i64> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v4i64, align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <8 x i64> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v8i64, align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <16 x i64> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v16i64, align 128, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile half 0xH0000, ptr addrspace(3) @local_memory_alignment_global.lds_f16, align 2, !tbaa [[TBAA13:![0-9]+]]
// CHECK-NEXT:    store volatile <2 x half> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v2f16, align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x half> <half 0xH0000, half 0xH0000, half 0xH0000, half undef>, ptr addrspace(3) @local_memory_alignment_global.lds_v3f16, align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x half> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v4f16, align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <8 x half> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v8f16, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <16 x half> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v16f16, align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile float 0.000000e+00, ptr addrspace(3) @local_memory_alignment_global.lds_f32, align 4, !tbaa [[TBAA15:![0-9]+]]
// CHECK-NEXT:    store volatile <2 x float> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v2f32, align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef>, ptr addrspace(3) @local_memory_alignment_global.lds_v3f32, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x float> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v4f32, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <8 x float> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v8f32, align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <16 x float> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v16f32, align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile double 0.000000e+00, ptr addrspace(3) @local_memory_alignment_global.lds_f64, align 8, !tbaa [[TBAA17:![0-9]+]]
// CHECK-NEXT:    store volatile <2 x double> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v2f64, align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double undef>, ptr addrspace(3) @local_memory_alignment_global.lds_v3f64, align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <4 x double> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v4f64, align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <8 x double> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v8f64, align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    store volatile <16 x double> zeroinitializer, ptr addrspace(3) @local_memory_alignment_global.lds_v16f64, align 128, !tbaa [[TBAA4]]
// CHECK-NEXT:    ret void
//
kernel void local_memory_alignment_global()
{
  volatile local char lds_i8[4];
  volatile local char2 lds_v2i8[4];
  volatile local char3 lds_v3i8[4];
  volatile local char4 lds_v4i8[4];
  volatile local char8 lds_v8i8[4];
  volatile local char16 lds_v16i8[4];

  volatile local short lds_i16[4];
  volatile local short2 lds_v2i16[4];
  volatile local short3 lds_v3i16[4];
  volatile local short4 lds_v4i16[4];
  volatile local short8 lds_v8i16[4];
  volatile local short16 lds_v16i16[4];

  volatile local int lds_i32[4];
  volatile local int2 lds_v2i32[4];
  volatile local int3 lds_v3i32[4];
  volatile local int4 lds_v4i32[4];
  volatile local int8 lds_v8i32[4];
  volatile local int16 lds_v16i32[4];

  volatile local long lds_i64[4];
  volatile local long2 lds_v2i64[4];
  volatile local long3 lds_v3i64[4];
  volatile local long4 lds_v4i64[4];
  volatile local long8 lds_v8i64[4];
  volatile local long16 lds_v16i64[4];

  volatile local half lds_f16[4];
  volatile local half2 lds_v2f16[4];
  volatile local half3 lds_v3f16[4];
  volatile local half4 lds_v4f16[4];
  volatile local half8 lds_v8f16[4];
  volatile local half16 lds_v16f16[4];

  volatile local float lds_f32[4];
  volatile local float2 lds_v2f32[4];
  volatile local float3 lds_v3f32[4];
  volatile local float4 lds_v4f32[4];
  volatile local float8 lds_v8f32[4];
  volatile local float16 lds_v16f32[4];

  volatile local double lds_f64[4];
  volatile local double2 lds_v2f64[4];
  volatile local double3 lds_v3f64[4];
  volatile local double4 lds_v4f64[4];
  volatile local double8 lds_v8f64[4];
  volatile local double16 lds_v16f64[4];

  *lds_i8 = 0;
  *lds_v2i8 = 0;
  *lds_v3i8 = 0;
  *lds_v4i8 = 0;
  *lds_v8i8 = 0;
  *lds_v16i8 = 0;

  *lds_i16 = 0;
  *lds_v2i16 = 0;
  *lds_v3i16 = 0;
  *lds_v4i16 = 0;
  *lds_v8i16 = 0;
  *lds_v16i16 = 0;

  *lds_i32 = 0;
  *lds_v2i32 = 0;
  *lds_v3i32 = 0;
  *lds_v4i32 = 0;
  *lds_v8i32 = 0;
  *lds_v16i32 = 0;

  *lds_i64 = 0;
  *lds_v2i64 = 0;
  *lds_v3i64 = 0;
  *lds_v4i64 = 0;
  *lds_v8i64 = 0;
  *lds_v16i64 = 0;

  *lds_f16 = 0;
  *lds_v2f16 = 0;
  *lds_v3f16 = 0;
  *lds_v4f16 = 0;
  *lds_v8f16 = 0;
  *lds_v16f16 = 0;

  *lds_f32 = 0;
  *lds_v2f32 = 0;
  *lds_v3f32 = 0;
  *lds_v4f32 = 0;
  *lds_v8f32 = 0;
  *lds_v16f32 = 0;

  *lds_f64 = 0;
  *lds_v2f64 = 0;
  *lds_v3f64 = 0;
  *lds_v4f64 = 0;
  *lds_v8f64 = 0;
  *lds_v16f64 = 0;
}

// CHECK-LABEL: @local_memory_alignment_arg(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[LDS_I8_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V2I8_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V3I8_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V4I8_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V8I8_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V16I8_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_I16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V2I16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V3I16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V4I16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V8I16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V16I16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_I32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V2I32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V3I32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V4I32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V8I32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V16I32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_I64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V2I64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V3I64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V4I64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V8I64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V16I64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_F16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V2F16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V3F16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V4F16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V8F16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V16F16_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_F32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V2F32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V3F32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V4F32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V8F32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V16F32_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_F64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V2F64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V3F64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V4F64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V8F64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    [[LDS_V16F64_ADDR:%.*]] = alloca ptr addrspace(3), align 8
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_I8:%.*]], ptr [[LDS_I8_ADDR]], align 8, !tbaa [[TBAA24:![0-9]+]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V2I8:%.*]], ptr [[LDS_V2I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V3I8:%.*]], ptr [[LDS_V3I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V4I8:%.*]], ptr [[LDS_V4I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V8I8:%.*]], ptr [[LDS_V8I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V16I8:%.*]], ptr [[LDS_V16I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_I16:%.*]], ptr [[LDS_I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V2I16:%.*]], ptr [[LDS_V2I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V3I16:%.*]], ptr [[LDS_V3I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V4I16:%.*]], ptr [[LDS_V4I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V8I16:%.*]], ptr [[LDS_V8I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V16I16:%.*]], ptr [[LDS_V16I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_I32:%.*]], ptr [[LDS_I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V2I32:%.*]], ptr [[LDS_V2I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V3I32:%.*]], ptr [[LDS_V3I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V4I32:%.*]], ptr [[LDS_V4I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V8I32:%.*]], ptr [[LDS_V8I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V16I32:%.*]], ptr [[LDS_V16I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_I64:%.*]], ptr [[LDS_I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V2I64:%.*]], ptr [[LDS_V2I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V3I64:%.*]], ptr [[LDS_V3I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V4I64:%.*]], ptr [[LDS_V4I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V8I64:%.*]], ptr [[LDS_V8I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V16I64:%.*]], ptr [[LDS_V16I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_F16:%.*]], ptr [[LDS_F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V2F16:%.*]], ptr [[LDS_V2F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V3F16:%.*]], ptr [[LDS_V3F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V4F16:%.*]], ptr [[LDS_V4F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V8F16:%.*]], ptr [[LDS_V8F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V16F16:%.*]], ptr [[LDS_V16F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_F32:%.*]], ptr [[LDS_F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V2F32:%.*]], ptr [[LDS_V2F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V3F32:%.*]], ptr [[LDS_V3F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V4F32:%.*]], ptr [[LDS_V4F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V8F32:%.*]], ptr [[LDS_V8F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V16F32:%.*]], ptr [[LDS_V16F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_F64:%.*]], ptr [[LDS_F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V2F64:%.*]], ptr [[LDS_V2F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V3F64:%.*]], ptr [[LDS_V3F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V4F64:%.*]], ptr [[LDS_V4F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V8F64:%.*]], ptr [[LDS_V8F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store ptr addrspace(3) [[LDS_V16F64:%.*]], ptr [[LDS_V16F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr addrspace(3), ptr [[LDS_I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile i8 0, ptr addrspace(3) [[TMP0]], align 1, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr addrspace(3), ptr [[LDS_V2I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <2 x i8> zeroinitializer, ptr addrspace(3) [[TMP1]], align 2, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP2:%.*]] = load ptr addrspace(3), ptr [[LDS_V3I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x i8> <i8 0, i8 0, i8 0, i8 undef>, ptr addrspace(3) [[TMP2]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr addrspace(3), ptr [[LDS_V4I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x i8> zeroinitializer, ptr addrspace(3) [[TMP3]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP4:%.*]] = load ptr addrspace(3), ptr [[LDS_V8I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <8 x i8> zeroinitializer, ptr addrspace(3) [[TMP4]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP5:%.*]] = load ptr addrspace(3), ptr [[LDS_V16I8_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <16 x i8> zeroinitializer, ptr addrspace(3) [[TMP5]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP6:%.*]] = load ptr addrspace(3), ptr [[LDS_I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile i16 0, ptr addrspace(3) [[TMP6]], align 2, !tbaa [[TBAA7]]
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr addrspace(3), ptr [[LDS_V2I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <2 x i16> zeroinitializer, ptr addrspace(3) [[TMP7]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP8:%.*]] = load ptr addrspace(3), ptr [[LDS_V3I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x i16> <i16 0, i16 0, i16 0, i16 undef>, ptr addrspace(3) [[TMP8]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP9:%.*]] = load ptr addrspace(3), ptr [[LDS_V4I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x i16> zeroinitializer, ptr addrspace(3) [[TMP9]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP10:%.*]] = load ptr addrspace(3), ptr [[LDS_V8I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <8 x i16> zeroinitializer, ptr addrspace(3) [[TMP10]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP11:%.*]] = load ptr addrspace(3), ptr [[LDS_V16I16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <16 x i16> zeroinitializer, ptr addrspace(3) [[TMP11]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP12:%.*]] = load ptr addrspace(3), ptr [[LDS_I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile i32 0, ptr addrspace(3) [[TMP12]], align 4, !tbaa [[TBAA9]]
// CHECK-NEXT:    [[TMP13:%.*]] = load ptr addrspace(3), ptr [[LDS_V2I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <2 x i32> zeroinitializer, ptr addrspace(3) [[TMP13]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP14:%.*]] = load ptr addrspace(3), ptr [[LDS_V3I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x i32> <i32 0, i32 0, i32 0, i32 undef>, ptr addrspace(3) [[TMP14]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP15:%.*]] = load ptr addrspace(3), ptr [[LDS_V4I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x i32> zeroinitializer, ptr addrspace(3) [[TMP15]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr addrspace(3), ptr [[LDS_V8I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <8 x i32> zeroinitializer, ptr addrspace(3) [[TMP16]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP17:%.*]] = load ptr addrspace(3), ptr [[LDS_V16I32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <16 x i32> zeroinitializer, ptr addrspace(3) [[TMP17]], align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP18:%.*]] = load ptr addrspace(3), ptr [[LDS_I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile i64 0, ptr addrspace(3) [[TMP18]], align 8, !tbaa [[TBAA11]]
// CHECK-NEXT:    [[TMP19:%.*]] = load ptr addrspace(3), ptr [[LDS_V2I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <2 x i64> zeroinitializer, ptr addrspace(3) [[TMP19]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP20:%.*]] = load ptr addrspace(3), ptr [[LDS_V3I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x i64> <i64 0, i64 0, i64 0, i64 undef>, ptr addrspace(3) [[TMP20]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP21:%.*]] = load ptr addrspace(3), ptr [[LDS_V4I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x i64> zeroinitializer, ptr addrspace(3) [[TMP21]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP22:%.*]] = load ptr addrspace(3), ptr [[LDS_V8I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <8 x i64> zeroinitializer, ptr addrspace(3) [[TMP22]], align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP23:%.*]] = load ptr addrspace(3), ptr [[LDS_V16I64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <16 x i64> zeroinitializer, ptr addrspace(3) [[TMP23]], align 128, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP24:%.*]] = load ptr addrspace(3), ptr [[LDS_F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile half 0xH0000, ptr addrspace(3) [[TMP24]], align 2, !tbaa [[TBAA13]]
// CHECK-NEXT:    [[TMP25:%.*]] = load ptr addrspace(3), ptr [[LDS_V2F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <2 x half> zeroinitializer, ptr addrspace(3) [[TMP25]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP26:%.*]] = load ptr addrspace(3), ptr [[LDS_V3F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x half> <half 0xH0000, half 0xH0000, half 0xH0000, half undef>, ptr addrspace(3) [[TMP26]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP27:%.*]] = load ptr addrspace(3), ptr [[LDS_V4F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x half> zeroinitializer, ptr addrspace(3) [[TMP27]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP28:%.*]] = load ptr addrspace(3), ptr [[LDS_V8F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <8 x half> zeroinitializer, ptr addrspace(3) [[TMP28]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP29:%.*]] = load ptr addrspace(3), ptr [[LDS_V16F16_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <16 x half> zeroinitializer, ptr addrspace(3) [[TMP29]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP30:%.*]] = load ptr addrspace(3), ptr [[LDS_F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile float 0.000000e+00, ptr addrspace(3) [[TMP30]], align 4, !tbaa [[TBAA15]]
// CHECK-NEXT:    [[TMP31:%.*]] = load ptr addrspace(3), ptr [[LDS_V2F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <2 x float> zeroinitializer, ptr addrspace(3) [[TMP31]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP32:%.*]] = load ptr addrspace(3), ptr [[LDS_V3F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef>, ptr addrspace(3) [[TMP32]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP33:%.*]] = load ptr addrspace(3), ptr [[LDS_V4F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x float> zeroinitializer, ptr addrspace(3) [[TMP33]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP34:%.*]] = load ptr addrspace(3), ptr [[LDS_V8F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <8 x float> zeroinitializer, ptr addrspace(3) [[TMP34]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP35:%.*]] = load ptr addrspace(3), ptr [[LDS_V16F32_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <16 x float> zeroinitializer, ptr addrspace(3) [[TMP35]], align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP36:%.*]] = load ptr addrspace(3), ptr [[LDS_F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile double 0.000000e+00, ptr addrspace(3) [[TMP36]], align 8, !tbaa [[TBAA17]]
// CHECK-NEXT:    [[TMP37:%.*]] = load ptr addrspace(3), ptr [[LDS_V2F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <2 x double> zeroinitializer, ptr addrspace(3) [[TMP37]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP38:%.*]] = load ptr addrspace(3), ptr [[LDS_V3F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double undef>, ptr addrspace(3) [[TMP38]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP39:%.*]] = load ptr addrspace(3), ptr [[LDS_V4F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <4 x double> zeroinitializer, ptr addrspace(3) [[TMP39]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP40:%.*]] = load ptr addrspace(3), ptr [[LDS_V8F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <8 x double> zeroinitializer, ptr addrspace(3) [[TMP40]], align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP41:%.*]] = load ptr addrspace(3), ptr [[LDS_V16F64_ADDR]], align 8, !tbaa [[TBAA24]]
// CHECK-NEXT:    store volatile <16 x double> zeroinitializer, ptr addrspace(3) [[TMP41]], align 128, !tbaa [[TBAA4]]
// CHECK-NEXT:    ret void
//
kernel void local_memory_alignment_arg(
  volatile local char* lds_i8,
  volatile local char2* lds_v2i8,
  volatile local char3* lds_v3i8,
  volatile local char4* lds_v4i8,
  volatile local char8* lds_v8i8,
  volatile local char16* lds_v16i8,

  volatile local short* lds_i16,
  volatile local short2* lds_v2i16,
  volatile local short3* lds_v3i16,
  volatile local short4* lds_v4i16,
  volatile local short8* lds_v8i16,
  volatile local short16* lds_v16i16,

  volatile local int* lds_i32,
  volatile local int2* lds_v2i32,
  volatile local int3* lds_v3i32,
  volatile local int4* lds_v4i32,
  volatile local int8* lds_v8i32,
  volatile local int16* lds_v16i32,

  volatile local long* lds_i64,
  volatile local long2* lds_v2i64,
  volatile local long3* lds_v3i64,
  volatile local long4* lds_v4i64,
  volatile local long8* lds_v8i64,
  volatile local long16* lds_v16i64,

  volatile local half* lds_f16,
  volatile local half2* lds_v2f16,
  volatile local half3* lds_v3f16,
  volatile local half4* lds_v4f16,
  volatile local half8* lds_v8f16,
  volatile local half16* lds_v16f16,

  volatile local float* lds_f32,
  volatile local float2* lds_v2f32,
  volatile local float3* lds_v3f32,
  volatile local float4* lds_v4f32,
  volatile local float8* lds_v8f32,
  volatile local float16* lds_v16f32,

  volatile local double* lds_f64,
  volatile local double2* lds_v2f64,
  volatile local double3* lds_v3f64,
  volatile local double4* lds_v4f64,
  volatile local double8* lds_v8f64,
  volatile local double16* lds_v16f64)
{
  *lds_i8 = 0;
  *lds_v2i8 = 0;
  *lds_v3i8 = 0;
  *lds_v4i8 = 0;
  *lds_v8i8 = 0;
  *lds_v16i8 = 0;

  *lds_i16 = 0;
  *lds_v2i16 = 0;
  *lds_v3i16 = 0;
  *lds_v4i16 = 0;
  *lds_v8i16 = 0;
  *lds_v16i16 = 0;

  *lds_i32 = 0;
  *lds_v2i32 = 0;
  *lds_v3i32 = 0;
  *lds_v4i32 = 0;
  *lds_v8i32 = 0;
  *lds_v16i32 = 0;

  *lds_i64 = 0;
  *lds_v2i64 = 0;
  *lds_v3i64 = 0;
  *lds_v4i64 = 0;
  *lds_v8i64 = 0;
  *lds_v16i64 = 0;

  *lds_f16 = 0;
  *lds_v2f16 = 0;
  *lds_v3f16 = 0;
  *lds_v4f16 = 0;
  *lds_v8f16 = 0;
  *lds_v16f16 = 0;

  *lds_f32 = 0;
  *lds_v2f32 = 0;
  *lds_v3f32 = 0;
  *lds_v4f32 = 0;
  *lds_v8f32 = 0;
  *lds_v16f32 = 0;

  *lds_f64 = 0;
  *lds_v2f64 = 0;
  *lds_v3f64 = 0;
  *lds_v4f64 = 0;
  *lds_v8f64 = 0;
  *lds_v16f64 = 0;
}


// CHECK-LABEL: @private_memory_alignment_alloca(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[PRIVATE_I8:%.*]] = alloca [4 x i8], align 1
// CHECK-NEXT:    [[PRIVATE_V2I8:%.*]] = alloca [4 x <2 x i8>], align 2
// CHECK-NEXT:    [[PRIVATE_V3I8:%.*]] = alloca [4 x <3 x i8>], align 4
// CHECK-NEXT:    [[PRIVATE_V4I8:%.*]] = alloca [4 x <4 x i8>], align 4
// CHECK-NEXT:    [[PRIVATE_V8I8:%.*]] = alloca [4 x <8 x i8>], align 8
// CHECK-NEXT:    [[PRIVATE_V16I8:%.*]] = alloca [4 x <16 x i8>], align 16
// CHECK-NEXT:    [[PRIVATE_I16:%.*]] = alloca [4 x i16], align 2
// CHECK-NEXT:    [[PRIVATE_V2I16:%.*]] = alloca [4 x <2 x i16>], align 4
// CHECK-NEXT:    [[PRIVATE_V3I16:%.*]] = alloca [4 x <3 x i16>], align 8
// CHECK-NEXT:    [[PRIVATE_V4I16:%.*]] = alloca [4 x <4 x i16>], align 8
// CHECK-NEXT:    [[PRIVATE_V8I16:%.*]] = alloca [4 x <8 x i16>], align 16
// CHECK-NEXT:    [[PRIVATE_V16I16:%.*]] = alloca [4 x <16 x i16>], align 32
// CHECK-NEXT:    [[PRIVATE_I32:%.*]] = alloca [4 x i32], align 4
// CHECK-NEXT:    [[PRIVATE_V2I32:%.*]] = alloca [4 x <2 x i32>], align 8
// CHECK-NEXT:    [[PRIVATE_V3I32:%.*]] = alloca [4 x <3 x i32>], align 16
// CHECK-NEXT:    [[PRIVATE_V4I32:%.*]] = alloca [4 x <4 x i32>], align 16
// CHECK-NEXT:    [[PRIVATE_V8I32:%.*]] = alloca [4 x <8 x i32>], align 32
// CHECK-NEXT:    [[PRIVATE_V16I32:%.*]] = alloca [4 x <16 x i32>], align 64
// CHECK-NEXT:    [[PRIVATE_I64:%.*]] = alloca [4 x i64], align 8
// CHECK-NEXT:    [[PRIVATE_V2I64:%.*]] = alloca [4 x <2 x i64>], align 16
// CHECK-NEXT:    [[PRIVATE_V3I64:%.*]] = alloca [4 x <3 x i64>], align 32
// CHECK-NEXT:    [[PRIVATE_V4I64:%.*]] = alloca [4 x <4 x i64>], align 32
// CHECK-NEXT:    [[PRIVATE_V8I64:%.*]] = alloca [4 x <8 x i64>], align 64
// CHECK-NEXT:    [[PRIVATE_V16I64:%.*]] = alloca [4 x <16 x i64>], align 128
// CHECK-NEXT:    [[PRIVATE_F16:%.*]] = alloca [4 x half], align 2
// CHECK-NEXT:    [[PRIVATE_V2F16:%.*]] = alloca [4 x <2 x half>], align 4
// CHECK-NEXT:    [[PRIVATE_V3F16:%.*]] = alloca [4 x <3 x half>], align 8
// CHECK-NEXT:    [[PRIVATE_V4F16:%.*]] = alloca [4 x <4 x half>], align 8
// CHECK-NEXT:    [[PRIVATE_V8F16:%.*]] = alloca [4 x <8 x half>], align 16
// CHECK-NEXT:    [[PRIVATE_V16F16:%.*]] = alloca [4 x <16 x half>], align 32
// CHECK-NEXT:    [[PRIVATE_F32:%.*]] = alloca [4 x float], align 4
// CHECK-NEXT:    [[PRIVATE_V2F32:%.*]] = alloca [4 x <2 x float>], align 8
// CHECK-NEXT:    [[PRIVATE_V3F32:%.*]] = alloca [4 x <3 x float>], align 16
// CHECK-NEXT:    [[PRIVATE_V4F32:%.*]] = alloca [4 x <4 x float>], align 16
// CHECK-NEXT:    [[PRIVATE_V8F32:%.*]] = alloca [4 x <8 x float>], align 32
// CHECK-NEXT:    [[PRIVATE_V16F32:%.*]] = alloca [4 x <16 x float>], align 64
// CHECK-NEXT:    [[PRIVATE_F64:%.*]] = alloca [4 x double], align 8
// CHECK-NEXT:    [[PRIVATE_V2F64:%.*]] = alloca [4 x <2 x double>], align 16
// CHECK-NEXT:    [[PRIVATE_V3F64:%.*]] = alloca [4 x <3 x double>], align 32
// CHECK-NEXT:    [[PRIVATE_V4F64:%.*]] = alloca [4 x <4 x double>], align 32
// CHECK-NEXT:    [[PRIVATE_V8F64:%.*]] = alloca [4 x <8 x double>], align 64
// CHECK-NEXT:    [[PRIVATE_V16F64:%.*]] = alloca [4 x <16 x double>], align 128
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr [[PRIVATE_I8]]) #[[ATTR2:[0-9]+]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[PRIVATE_V2I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[PRIVATE_V3I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[PRIVATE_V4I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_V8I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V16I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[PRIVATE_I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[PRIVATE_V2I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_V3I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_V4I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V8I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr [[PRIVATE_V16I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[PRIVATE_I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_V2I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V3I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V4I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr [[PRIVATE_V8I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 256, ptr [[PRIVATE_V16I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V2I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr [[PRIVATE_V3I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr [[PRIVATE_V4I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 256, ptr [[PRIVATE_V8I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 512, ptr [[PRIVATE_V16I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[PRIVATE_F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[PRIVATE_V2F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_V3F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_V4F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V8F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr [[PRIVATE_V16F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[PRIVATE_F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_V2F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V3F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V4F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr [[PRIVATE_V8F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 256, ptr [[PRIVATE_V16F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr [[PRIVATE_F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 64, ptr [[PRIVATE_V2F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr [[PRIVATE_V3F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 128, ptr [[PRIVATE_V4F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 256, ptr [[PRIVATE_V8F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 512, ptr [[PRIVATE_V16F64]]) #[[ATTR2]]
// CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [4 x i8], ptr [[PRIVATE_I8]], i64 0, i64 0
// CHECK-NEXT:    store volatile i8 0, ptr [[ARRAYDECAY]], align 1, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY1:%.*]] = getelementptr inbounds [4 x <2 x i8>], ptr [[PRIVATE_V2I8]], i64 0, i64 0
// CHECK-NEXT:    store volatile <2 x i8> zeroinitializer, ptr [[ARRAYDECAY1]], align 2, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY2:%.*]] = getelementptr inbounds [4 x <3 x i8>], ptr [[PRIVATE_V3I8]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x i8> <i8 0, i8 0, i8 0, i8 undef>, ptr [[ARRAYDECAY2]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY3:%.*]] = getelementptr inbounds [4 x <4 x i8>], ptr [[PRIVATE_V4I8]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x i8> zeroinitializer, ptr [[ARRAYDECAY3]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY4:%.*]] = getelementptr inbounds [4 x <8 x i8>], ptr [[PRIVATE_V8I8]], i64 0, i64 0
// CHECK-NEXT:    store volatile <8 x i8> zeroinitializer, ptr [[ARRAYDECAY4]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY5:%.*]] = getelementptr inbounds [4 x <16 x i8>], ptr [[PRIVATE_V16I8]], i64 0, i64 0
// CHECK-NEXT:    store volatile <16 x i8> zeroinitializer, ptr [[ARRAYDECAY5]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY6:%.*]] = getelementptr inbounds [4 x i16], ptr [[PRIVATE_I16]], i64 0, i64 0
// CHECK-NEXT:    store volatile i16 0, ptr [[ARRAYDECAY6]], align 2, !tbaa [[TBAA7]]
// CHECK-NEXT:    [[ARRAYDECAY7:%.*]] = getelementptr inbounds [4 x <2 x i16>], ptr [[PRIVATE_V2I16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <2 x i16> zeroinitializer, ptr [[ARRAYDECAY7]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY8:%.*]] = getelementptr inbounds [4 x <3 x i16>], ptr [[PRIVATE_V3I16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x i16> <i16 0, i16 0, i16 0, i16 undef>, ptr [[ARRAYDECAY8]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY9:%.*]] = getelementptr inbounds [4 x <4 x i16>], ptr [[PRIVATE_V4I16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x i16> zeroinitializer, ptr [[ARRAYDECAY9]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY10:%.*]] = getelementptr inbounds [4 x <8 x i16>], ptr [[PRIVATE_V8I16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <8 x i16> zeroinitializer, ptr [[ARRAYDECAY10]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY11:%.*]] = getelementptr inbounds [4 x <16 x i16>], ptr [[PRIVATE_V16I16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <16 x i16> zeroinitializer, ptr [[ARRAYDECAY11]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY12:%.*]] = getelementptr inbounds [4 x i32], ptr [[PRIVATE_I32]], i64 0, i64 0
// CHECK-NEXT:    store volatile i32 0, ptr [[ARRAYDECAY12]], align 4, !tbaa [[TBAA9]]
// CHECK-NEXT:    [[ARRAYDECAY13:%.*]] = getelementptr inbounds [4 x <2 x i32>], ptr [[PRIVATE_V2I32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <2 x i32> zeroinitializer, ptr [[ARRAYDECAY13]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY14:%.*]] = getelementptr inbounds [4 x <3 x i32>], ptr [[PRIVATE_V3I32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x i32> <i32 0, i32 0, i32 0, i32 undef>, ptr [[ARRAYDECAY14]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY15:%.*]] = getelementptr inbounds [4 x <4 x i32>], ptr [[PRIVATE_V4I32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x i32> zeroinitializer, ptr [[ARRAYDECAY15]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY16:%.*]] = getelementptr inbounds [4 x <8 x i32>], ptr [[PRIVATE_V8I32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <8 x i32> zeroinitializer, ptr [[ARRAYDECAY16]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY17:%.*]] = getelementptr inbounds [4 x <16 x i32>], ptr [[PRIVATE_V16I32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <16 x i32> zeroinitializer, ptr [[ARRAYDECAY17]], align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY18:%.*]] = getelementptr inbounds [4 x i64], ptr [[PRIVATE_I64]], i64 0, i64 0
// CHECK-NEXT:    store volatile i64 0, ptr [[ARRAYDECAY18]], align 8, !tbaa [[TBAA11]]
// CHECK-NEXT:    [[ARRAYDECAY19:%.*]] = getelementptr inbounds [4 x <2 x i64>], ptr [[PRIVATE_V2I64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <2 x i64> zeroinitializer, ptr [[ARRAYDECAY19]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY20:%.*]] = getelementptr inbounds [4 x <3 x i64>], ptr [[PRIVATE_V3I64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x i64> <i64 0, i64 0, i64 0, i64 undef>, ptr [[ARRAYDECAY20]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY21:%.*]] = getelementptr inbounds [4 x <4 x i64>], ptr [[PRIVATE_V4I64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x i64> zeroinitializer, ptr [[ARRAYDECAY21]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY22:%.*]] = getelementptr inbounds [4 x <8 x i64>], ptr [[PRIVATE_V8I64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <8 x i64> zeroinitializer, ptr [[ARRAYDECAY22]], align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY23:%.*]] = getelementptr inbounds [4 x <16 x i64>], ptr [[PRIVATE_V16I64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <16 x i64> zeroinitializer, ptr [[ARRAYDECAY23]], align 128, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY24:%.*]] = getelementptr inbounds [4 x half], ptr [[PRIVATE_F16]], i64 0, i64 0
// CHECK-NEXT:    store volatile half 0xH0000, ptr [[ARRAYDECAY24]], align 2, !tbaa [[TBAA13]]
// CHECK-NEXT:    [[ARRAYDECAY25:%.*]] = getelementptr inbounds [4 x <2 x half>], ptr [[PRIVATE_V2F16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <2 x half> zeroinitializer, ptr [[ARRAYDECAY25]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY26:%.*]] = getelementptr inbounds [4 x <3 x half>], ptr [[PRIVATE_V3F16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x half> <half 0xH0000, half 0xH0000, half 0xH0000, half undef>, ptr [[ARRAYDECAY26]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY27:%.*]] = getelementptr inbounds [4 x <4 x half>], ptr [[PRIVATE_V4F16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x half> zeroinitializer, ptr [[ARRAYDECAY27]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY28:%.*]] = getelementptr inbounds [4 x <8 x half>], ptr [[PRIVATE_V8F16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <8 x half> zeroinitializer, ptr [[ARRAYDECAY28]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY29:%.*]] = getelementptr inbounds [4 x <16 x half>], ptr [[PRIVATE_V16F16]], i64 0, i64 0
// CHECK-NEXT:    store volatile <16 x half> zeroinitializer, ptr [[ARRAYDECAY29]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY30:%.*]] = getelementptr inbounds [4 x float], ptr [[PRIVATE_F32]], i64 0, i64 0
// CHECK-NEXT:    store volatile float 0.000000e+00, ptr [[ARRAYDECAY30]], align 4, !tbaa [[TBAA15]]
// CHECK-NEXT:    [[ARRAYDECAY31:%.*]] = getelementptr inbounds [4 x <2 x float>], ptr [[PRIVATE_V2F32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <2 x float> zeroinitializer, ptr [[ARRAYDECAY31]], align 8, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY32:%.*]] = getelementptr inbounds [4 x <3 x float>], ptr [[PRIVATE_V3F32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef>, ptr [[ARRAYDECAY32]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY33:%.*]] = getelementptr inbounds [4 x <4 x float>], ptr [[PRIVATE_V4F32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x float> zeroinitializer, ptr [[ARRAYDECAY33]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY34:%.*]] = getelementptr inbounds [4 x <8 x float>], ptr [[PRIVATE_V8F32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <8 x float> zeroinitializer, ptr [[ARRAYDECAY34]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY35:%.*]] = getelementptr inbounds [4 x <16 x float>], ptr [[PRIVATE_V16F32]], i64 0, i64 0
// CHECK-NEXT:    store volatile <16 x float> zeroinitializer, ptr [[ARRAYDECAY35]], align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY36:%.*]] = getelementptr inbounds [4 x double], ptr [[PRIVATE_F64]], i64 0, i64 0
// CHECK-NEXT:    store volatile double 0.000000e+00, ptr [[ARRAYDECAY36]], align 8, !tbaa [[TBAA17]]
// CHECK-NEXT:    [[ARRAYDECAY37:%.*]] = getelementptr inbounds [4 x <2 x double>], ptr [[PRIVATE_V2F64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <2 x double> zeroinitializer, ptr [[ARRAYDECAY37]], align 16, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY38:%.*]] = getelementptr inbounds [4 x <3 x double>], ptr [[PRIVATE_V3F64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double undef>, ptr [[ARRAYDECAY38]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY39:%.*]] = getelementptr inbounds [4 x <4 x double>], ptr [[PRIVATE_V4F64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <4 x double> zeroinitializer, ptr [[ARRAYDECAY39]], align 32, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY40:%.*]] = getelementptr inbounds [4 x <8 x double>], ptr [[PRIVATE_V8F64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <8 x double> zeroinitializer, ptr [[ARRAYDECAY40]], align 64, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[ARRAYDECAY41:%.*]] = getelementptr inbounds [4 x <16 x double>], ptr [[PRIVATE_V16F64]], i64 0, i64 0
// CHECK-NEXT:    store volatile <16 x double> zeroinitializer, ptr [[ARRAYDECAY41]], align 128, !tbaa [[TBAA4]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 512, ptr [[PRIVATE_V16F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 256, ptr [[PRIVATE_V8F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr [[PRIVATE_V4F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr [[PRIVATE_V3F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V2F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_F64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 256, ptr [[PRIVATE_V16F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr [[PRIVATE_V8F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V4F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V3F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_V2F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[PRIVATE_F32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr [[PRIVATE_V16F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V8F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_V4F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_V3F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[PRIVATE_V2F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[PRIVATE_F16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 512, ptr [[PRIVATE_V16I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 256, ptr [[PRIVATE_V8I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr [[PRIVATE_V4I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr [[PRIVATE_V3I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V2I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_I64]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 256, ptr [[PRIVATE_V16I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr [[PRIVATE_V8I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V4I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V3I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_V2I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[PRIVATE_I32]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 128, ptr [[PRIVATE_V16I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V8I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_V4I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_V3I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[PRIVATE_V2I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[PRIVATE_I16]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 64, ptr [[PRIVATE_V16I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 32, ptr [[PRIVATE_V8I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[PRIVATE_V4I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[PRIVATE_V3I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[PRIVATE_V2I8]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr [[PRIVATE_I8]]) #[[ATTR2]]
// CHECK-NEXT:    ret void
//
kernel void private_memory_alignment_alloca()
{
  volatile private char private_i8[4];
  volatile private char2 private_v2i8[4];
  volatile private char3 private_v3i8[4];
  volatile private char4 private_v4i8[4];
  volatile private char8 private_v8i8[4];
  volatile private char16 private_v16i8[4];

  volatile private short private_i16[4];
  volatile private short2 private_v2i16[4];
  volatile private short3 private_v3i16[4];
  volatile private short4 private_v4i16[4];
  volatile private short8 private_v8i16[4];
  volatile private short16 private_v16i16[4];

  volatile private int private_i32[4];
  volatile private int2 private_v2i32[4];
  volatile private int3 private_v3i32[4];
  volatile private int4 private_v4i32[4];
  volatile private int8 private_v8i32[4];
  volatile private int16 private_v16i32[4];

  volatile private long private_i64[4];
  volatile private long2 private_v2i64[4];
  volatile private long3 private_v3i64[4];
  volatile private long4 private_v4i64[4];
  volatile private long8 private_v8i64[4];
  volatile private long16 private_v16i64[4];

  volatile private half private_f16[4];
  volatile private half2 private_v2f16[4];
  volatile private half3 private_v3f16[4];
  volatile private half4 private_v4f16[4];
  volatile private half8 private_v8f16[4];
  volatile private half16 private_v16f16[4];

  volatile private float private_f32[4];
  volatile private float2 private_v2f32[4];
  volatile private float3 private_v3f32[4];
  volatile private float4 private_v4f32[4];
  volatile private float8 private_v8f32[4];
  volatile private float16 private_v16f32[4];

  volatile private double private_f64[4];
  volatile private double2 private_v2f64[4];
  volatile private double3 private_v3f64[4];
  volatile private double4 private_v4f64[4];
  volatile private double8 private_v8f64[4];
  volatile private double16 private_v16f64[4];

  *private_i8 = 0;
  *private_v2i8 = 0;
  *private_v3i8 = 0;
  *private_v4i8 = 0;
  *private_v8i8 = 0;
  *private_v16i8 = 0;

  *private_i16 = 0;
  *private_v2i16 = 0;
  *private_v3i16 = 0;
  *private_v4i16 = 0;
  *private_v8i16 = 0;
  *private_v16i16 = 0;

  *private_i32 = 0;
  *private_v2i32 = 0;
  *private_v3i32 = 0;
  *private_v4i32 = 0;
  *private_v8i32 = 0;
  *private_v16i32 = 0;

  *private_i64 = 0;
  *private_v2i64 = 0;
  *private_v3i64 = 0;
  *private_v4i64 = 0;
  *private_v8i64 = 0;
  *private_v16i64 = 0;

  *private_f16 = 0;
  *private_v2f16 = 0;
  *private_v3f16 = 0;
  *private_v4f16 = 0;
  *private_v8f16 = 0;
  *private_v16f16 = 0;

  *private_f32 = 0;
  *private_v2f32 = 0;
  *private_v3f32 = 0;
  *private_v4f32 = 0;
  *private_v8f32 = 0;
  *private_v16f32 = 0;

  *private_f64 = 0;
  *private_v2f64 = 0;
  *private_v3f64 = 0;
  *private_v4f64 = 0;
  *private_v8f64 = 0;
  *private_v16f64 = 0;
}
