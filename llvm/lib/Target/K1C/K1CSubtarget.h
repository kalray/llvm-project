//===--- K1CSubtarget.h - Define Subtarget for the K1C ---------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the K1C specific subclass of TargetSubtarget.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_K1C_K1CSUBTARGET_H
#define LLVM_LIB_TARGET_K1C_K1CSUBTARGET_H

#include "K1CFrameLowering.h"
#include "K1CISelLowering.h"
#include "K1CInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "K1CGenSubtargetInfo.inc"

namespace llvm {
class K1CSubtarget : public K1CGenSubtargetInfo {
  virtual void anchor();

  CodeGenOpt::Level OptLevel;
  K1CFrameLowering FrameLowering;
  K1CInstrInfo InstrInfo;
  K1CRegisterInfo RegInfo;
  K1CTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;
  InstrItineraryData InstrItins;

public:
  // Initializes the data members to match that of the specified triple.
  K1CSubtarget(const Triple &TT, StringRef CPU, const std::string &FS,
               const TargetMachine &TM);

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const K1CFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const K1CInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const K1CRegisterInfo *getRegisterInfo() const override { return &RegInfo; }
  const K1CTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }

  bool enableMachineSchedDefaultSched() const override { return false; }
  bool enablePostRAScheduler() const override { return true; }
  bool enableMachineScheduler() const override { return true; }

  bool useAA() const override {
    if (OptLevel != CodeGenOpt::None)
      return true;
    return false;
  }
};
} // namespace llvm

#endif
