; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV1
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV2

target triple = "kvx-kalray-cos"

define <16 x half> @test_ret_const() #0 {
; ALL-LABEL: 'test_ret_const'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
;
  ret <16 x half> <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>
}

define half @test_extract_0(<16 x half> %a) #0 {
; ALL-LABEL: 'test_extract_0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <16 x half> %a, i32 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 0
  ret half %e
}

define half @test_extract_1(<16 x half> %a) #0 {
; ALL-LABEL: 'test_extract_1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 1
  ret half %e
}

define half @test_extract_2(<16 x half> %a) #0 {
; ALL-LABEL: 'test_extract_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 2
  ret half %e
}

define half @test_extract_3(<16 x half> %a) #0 {
; ALL-LABEL: 'test_extract_3'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 3
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 3
  ret half %e
}

define half @test_extract_4(<16 x half> %a) #0 {
; ALL-LABEL: 'test_extract_4'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <16 x half> %a, i32 4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 4
  ret half %e
}

define half @test_extract_5(<16 x half> %a) #0 {
; ALL-LABEL: 'test_extract_5'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 5
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 5
  ret half %e
}

define half @test_extract_6(<16 x half> %a) #0 {
; ALL-LABEL: 'test_extract_6'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 6
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 6
  ret half %e
}

define half @test_extract_i(<16 x half> %a, i64 %idx) #0 {
; ALL-LABEL: 'test_extract_i'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %e = extractelement <16 x half> %a, i64 %idx
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i64 %idx
  ret half %e
}

define <16 x half> @test_fadd(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> %a, %b
  ret <16 x half> %r
}

define <16 x half> @test_fadd_imm_0(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd_imm_0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fadd_imm_1(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd_imm_1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> %a, <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>
  ret <16 x half> %r
}

define <16 x half> @test_fadd_imm_2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd_imm_2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> %a, <half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0>
  ret <16 x half> %r
}

define <16 x half> @test_fadd_imm_3(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd_imm_3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> %a, <half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0>
  ret <16 x half> %r
}

define <16 x half> @test_fsub(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fsub'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> %a, %b
  ret <16 x half> %r
}

define <16 x half> @test_fsub_imm_1(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_imm_1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_imm_1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> %a, <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>
  ret <16 x half> %r
}

define <16 x half> @test_fsub_imm_2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_imm_2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_imm_2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> %a, <half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0>
  ret <16 x half> %r
}

define <16 x half> @test_fsub_imm_3(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_imm_3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_imm_3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> %a, <half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0>
  ret <16 x half> %r
}

define <16 x half> @test_fsub_fromimm1(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_fromimm1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_fromimm1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fsub_fromimm2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_fromimm2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_fromimm2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> <half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fsub_fromimm3(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_fromimm3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_fromimm3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> <half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fneg(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fneg'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> zeroinitializer, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fneg'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <16 x half> zeroinitializer, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> <half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fmul(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fmul'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fmul <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fmul'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fmul <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fmul <16 x half> %a, %b
  ret <16 x half> %r
}

define <16 x half> @test_fmul_imm(<16 x half> %a) {
; CV1-LABEL: 'test_fmul_imm'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fmul <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fmul_imm'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fmul <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fmul <16 x half> %a, <half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0>
  ret <16 x half> %r
}

define <16 x half> @test_fdiv(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fdiv'
; ALL-NEXT:  Cost Model: Found an estimated cost of 34 for instruction: %r = fdiv <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fdiv <16 x half> %a, %b
  ret <16 x half> %r
}

define <16 x half> @test_frem(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_frem'
; ALL-NEXT:  Cost Model: Found an estimated cost of 400 for instruction: %r = frem <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = frem <16 x half> %a, %b
  ret <16 x half> %r
}

define void @test_ldst_v8f16(<16 x half>* %a, <16 x half>* %b) {
; ALL-LABEL: 'test_ldst_v8f16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %t1 = load <16 x half>, ptr %a, align 32
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: store <16 x half> %t1, ptr %b, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %t1 = load <16 x half>, <16 x half>* %a
  store <16 x half> %t1, <16 x half>* %b, align 16
  ret void
}

declare <16 x half> @test_callee(<16 x half> %a, <16 x half> %b) #0

define <16 x half> @test_call(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_call'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <16 x half> @test_callee(<16 x half> %a, <16 x half> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @test_callee(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_call_flipped(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_call_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_tailcall_flipped(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_tailcall_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = tail call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_select(<16 x half> %a, <16 x half> %b, i1 zeroext %c) #0 {
; ALL-LABEL: 'test_select'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <16 x half> %a, <16 x half> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = select i1 %c, <16 x half> %a, <16 x half> %b
  ret <16 x half> %r
}

define <16 x half> @test_select_cc(<16 x half> %a, <16 x half> %b, <16 x half> %c, <16 x half> %d) #0 {
; ALL-LABEL: 'test_select_cc'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <16 x half> %c, %d
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %cc = fcmp une <16 x half> %c, %d
  %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
  ret <16 x half> %r
}

define <16 x half> @test_select_cc_f16_f32(<16 x half> %a, <16 x half> %b, <16 x float> %c, <16 x float> %d) #0 {
; ALL-LABEL: 'test_select_cc_f16_f32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %cc = fcmp une <16 x float> %c, %d
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %cc = fcmp une <16 x float> %c, %d
  %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
  ret <16 x half> %r
}

define <16 x i1> @test_fcmp_une(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_une'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp une <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp une <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ueq(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_ueq'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ueq <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ueq <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ugt(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_ugt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ugt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ugt <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_uge(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_uge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp uge <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp uge <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ult(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_ult'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ult <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ult <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ule(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_ule'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ule <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ule <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_uno(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_uno'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp uno <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp uno <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_one(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_one'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp one <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp one <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_oeq(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_oeq'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp oeq <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp oeq <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ogt(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_ogt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ogt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ogt <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_oge(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_oge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp oge <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp oge <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_olt(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_olt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp olt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp olt <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ole(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_ole'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ole <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ole <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ord(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_fcmp_ord'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ord <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ord <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i16> @test_fptosi_i16(<16 x half> %a) #0 {
; ALL-LABEL: 'test_fptosi_i16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = fptosi <16 x half> %a to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %r
;
  %r = fptosi <16 x half> %a to <16 x i16>
  ret <16 x i16> %r
}

define <16 x half> @test_uitofp_8xi16(<16 x i16> %a) #0 {
; ALL-LABEL: 'test_uitofp_8xi16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = uitofp <16 x i16> %a to <16 x half>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = uitofp <16 x i16> %a to <16 x half>
  ret <16 x half> %r
}

define <16 x half> @test_uitofp_8xi32(<16 x i32> %a) #0 {
; ALL-LABEL: 'test_uitofp_8xi32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = uitofp <16 x i32> %a to <16 x half>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = uitofp <16 x i32> %a to <16 x half>
  ret <16 x half> %r
}

define <16 x half> @test_sitofp_8xi32(<16 x i32> %a) #0 {
; ALL-LABEL: 'test_sitofp_8xi32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sitofp <16 x i32> %a to <16 x half>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = sitofp <16 x i32> %a to <16 x half>
  ret <16 x half> %r
}

define <16 x half> @test_uitofp_8xi32_fadd(<16 x i32> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_uitofp_8xi32_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %c = uitofp <16 x i32> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %b, %c
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_uitofp_8xi32_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %c = uitofp <16 x i32> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <16 x half> %b, %c
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %c = uitofp <16 x i32> %a to <16 x half>
  %r = fadd <16 x half> %b, %c
  ret <16 x half> %r
}

define <16 x half> @test_sitofp_8xi32_fadd(<16 x i32> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_sitofp_8xi32_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %c = sitofp <16 x i32> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %b, %c
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_sitofp_8xi32_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %c = sitofp <16 x i32> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <16 x half> %b, %c
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %c = sitofp <16 x i32> %a to <16 x half>
  %r = fadd <16 x half> %b, %c
  ret <16 x half> %r
}

define <16 x half> @test_fptrunc_8xfloat(<16 x float> %a) #0 {
; ALL-LABEL: 'test_fptrunc_8xfloat'
; ALL-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %r = fptrunc <16 x float> %a to <16 x half>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fptrunc <16 x float> %a to <16 x half>
  ret <16 x half> %r
}

define <16 x i16> @test_bitcast_8xhalf_to_8xi16(<16 x half> %a) #0 {
; ALL-LABEL: 'test_bitcast_8xhalf_to_8xi16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %r = bitcast <16 x half> %a to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %r
;
  %r = bitcast <16 x half> %a to <16 x i16>
  ret <16 x i16> %r
}

define <16 x half> @test_bitcast_8xi16_to_8xhalf(<16 x i16> %a) #0 {
; ALL-LABEL: 'test_bitcast_8xi16_to_8xhalf'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %r = bitcast <16 x i16> %a to <16 x half>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = bitcast <16 x i16> %a to <16 x half>
  ret <16 x half> %r
}

declare <16 x half> @llvm.sqrt.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.powi.v8f16(<16 x half> %a, i32 %b) #0
declare <16 x half> @llvm.sin.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.cos.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.pow.v8f16(<16 x half> %a, <16 x half> %b) #0
declare <16 x half> @llvm.exp.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.exp2.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.log.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.log10.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.log2.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.fma.v8f16(<16 x half> %a, <16 x half> %b, <16 x half> %c) #0
declare <16 x half> @llvm.fabs.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.minnum.v8f16(<16 x half> %a, <16 x half> %b) #0
declare <16 x half> @llvm.maxnum.v8f16(<16 x half> %a, <16 x half> %b) #0
declare <16 x half> @llvm.copysign.v8f16(<16 x half> %a, <16 x half> %b) #0
declare <16 x half> @llvm.floor.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.ceil.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.trunc.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.rint.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.nearbyint.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.round.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.fmuladd.v8f16(<16 x half> %a, <16 x half> %b, <16 x half> %c) #0

define <16 x half> @test_sqrt(<16 x half> %a) #0 {
; ALL-LABEL: 'test_sqrt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.sqrt.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.sqrt.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_powi(<16 x half> %a, i32 %b) #0 {
; ALL-LABEL: 'test_powi'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.powi.v16f16.i32(<16 x half> %a, i32 %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.powi.v8f16(<16 x half> %a, i32 %b)
  ret <16 x half> %r
}

define <16 x half> @test_sin(<16 x half> %a) #0 {
; ALL-LABEL: 'test_sin'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.sin.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.sin.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_cos(<16 x half> %a) #0 {
; ALL-LABEL: 'test_cos'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.cos.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.cos.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_pow(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_pow'
; ALL-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.pow.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_exp(<16 x half> %a) #0 {
; ALL-LABEL: 'test_exp'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.exp.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.exp.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_exp2(<16 x half> %a) #0 {
; ALL-LABEL: 'test_exp2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.exp2.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.exp2.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_log(<16 x half> %a) #0 {
; ALL-LABEL: 'test_log'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.log.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_log10(<16 x half> %a) #0 {
; ALL-LABEL: 'test_log10'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log10.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.log10.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_log2(<16 x half> %a) #0 {
; ALL-LABEL: 'test_log2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log2.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.log2.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_fma(<16 x half> %a, <16 x half> %b, <16 x half> %c) #0 {
; CV1-LABEL: 'test_fma'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = call <16 x half> @llvm.fma.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fma'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = call <16 x half> @llvm.fma.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.fma.v8f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
  ret <16 x half> %r
}

define <16 x half> @test_fabs(<16 x half> %a) #0 {
; ALL-LABEL: 'test_fabs'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <16 x half> @llvm.fabs.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.fabs.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_minnum(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_minnum'
; ALL-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.minnum.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_minnum_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_minnum_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call fast <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call fast <16 x half> @llvm.minnum.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_maxnum(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_maxnum'
; ALL-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.maxnum.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_maxnum_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_maxnum_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call fast <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call fast <16 x half> @llvm.maxnum.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_copysign(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'test_copysign'
; ALL-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.copysign.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_copysign_v4f32(<16 x half> %a, <16 x float> %b) #0 {
; ALL-LABEL: 'test_copysign_v4f32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %tb = fptrunc <16 x float> %b to <16 x half>
; ALL-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %tb)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %tb = fptrunc <16 x float> %b to <16 x half>
  %r = call <16 x half> @llvm.copysign.v8f16(<16 x half> %a, <16 x half> %tb)
  ret <16 x half> %r
}

define <16 x half> @test_floor(<16 x half> %a) #0 {
; ALL-LABEL: 'test_floor'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.floor.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.floor.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_ceil(<16 x half> %a) #0 {
; ALL-LABEL: 'test_ceil'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.ceil.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.ceil.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_trunc(<16 x half> %a) #0 {
; ALL-LABEL: 'test_trunc'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.trunc.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.trunc.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_rint(<16 x half> %a) #0 {
; ALL-LABEL: 'test_rint'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.rint.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.rint.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_nearbyint(<16 x half> %a) #0 {
; ALL-LABEL: 'test_nearbyint'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.nearbyint.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.nearbyint.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_round(<16 x half> %a) #0 {
; ALL-LABEL: 'test_round'
; ALL-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.round.v16f16(<16 x half> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.round.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_fmuladd(<16 x half> %a, <16 x half> %b, <16 x half> %c) #0 {
; CV1-LABEL: 'test_fmuladd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fmuladd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.fmuladd.v8f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
  ret <16 x half> %r
}

define <16 x half> @test_shufflevector(<16 x half> %a) #0 {
; ALL-LABEL: 'test_shufflevector'
; ALL-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %s
;
  %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  ret <16 x half> %s
}

define <16 x half> @test_shufflevector2(<16 x half> %a) #0 {
; ALL-LABEL: 'test_shufflevector2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 0, i32 1, i32 3, i32 2, i32 4, i32 6, i32 7, i32 7, i32 9, i32 10, i32 11, i32 12, i32 13, i32 15, i32 15, i32 15>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %s
;
  %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 0, i32 1, i32 3, i32 2, i32 4, i32 6, i32 7, i32 7, i32 9, i32 10, i32 11, i32 12, i32 13, i32 15, i32 15, i32 15>
  ret <16 x half> %s
}

define <16 x half> @test_insertelement0(<16 x half> %a, half %x) #0 {
; ALL-LABEL: 'test_insertelement0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <16 x half> %a, half %x, i64 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 0
  ret <16 x half> %i
}

define <16 x half> @test_insertelement1(<16 x half> %a, half %x) #0 {
; ALL-LABEL: 'test_insertelement1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 1
  ret <16 x half> %i
}

define <16 x half> @test_insertelement2(<16 x half> %a, half %x) #0 {
; ALL-LABEL: 'test_insertelement2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 2
  ret <16 x half> %i
}

define <16 x half> @test_insertelement3(<16 x half> %a, half %x) #0 {
; ALL-LABEL: 'test_insertelement3'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 3
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 3
  ret <16 x half> %i
}

define <16 x half> @test_insertelement4(<16 x half> %a, half %x) #0 {
; ALL-LABEL: 'test_insertelement4'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <16 x half> %a, half %x, i64 4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 4
  ret <16 x half> %i
}

define <16 x half> @test_insertelement5(<16 x half> %a, half %x) #0 {
; ALL-LABEL: 'test_insertelement5'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 5
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 5
  ret <16 x half> %i
}

define <16 x half> @test_insertelement6(<16 x half> %a, half %x) #0 {
; ALL-LABEL: 'test_insertelement6'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 6
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 6
  ret <16 x half> %i
}

define <16 x half> @test_insertelement7(<16 x half> %a, half %x) #0 {
; ALL-LABEL: 'test_insertelement7'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 7
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 7
  ret <16 x half> %i
}

define <16 x half> @test_insertelement(<16 x half> %a, half %x, i64 %p) #0 {
; ALL-LABEL: 'test_insertelement'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %i = insertelement <16 x half> %a, half %x, i64 %p
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 %p
  ret <16 x half> %i
}

define <16 x i16> @fcmp_setoeq(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setoeq'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oeq <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp oeq <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoeq_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setoeq_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oeq <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp oeq <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setogt(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setogt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ogt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ogt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setogt_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setogt_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ogt <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ogt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoge(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setoge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oge <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp oge <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoge_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setoge_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oge <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp oge <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setolt(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setolt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp olt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp olt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setolt_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setolt_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp olt <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp olt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setole(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setole'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ole <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ole <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setole_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setole_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ole <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ole <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setone(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setone'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp one <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp one <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setone_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setone_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp one <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp one <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setord(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setord'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ord <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ord <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setord_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setord_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ord <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ord <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuno(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setuno'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uno <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp uno <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuno_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setuno_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uno <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp uno <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setueq(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setueq'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ueq <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ueq <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setueq_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setueq_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ueq <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ueq <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setugt(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setugt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ugt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ugt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setugt_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setugt_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ugt <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ugt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuge(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setuge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uge <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp uge <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuge_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setuge_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uge <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp uge <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setult(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setult'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ult <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ult <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setult_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setult_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ult <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ult <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setule(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setule'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ule <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ule <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setule_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setule_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ule <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ule <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setune(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setune'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp une <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp une <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setune_single(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setune_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp une <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp une <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoeq_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setoeq_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oeq <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast oeq <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoeq_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setoeq_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oeq <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast oeq <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setogt_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setogt_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ogt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ogt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setogt_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setogt_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ogt <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ogt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoge_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setoge_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oge <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast oge <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoge_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setoge_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oge <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast oge <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setolt_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setolt_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast olt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast olt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setolt_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setolt_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast olt <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast olt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setole_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setole_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ole <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ole <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setole_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setole_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ole <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ole <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setone_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setone_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast one <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast one <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setone_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setone_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast one <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast one <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setord_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setord_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ord <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ord <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setord_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setord_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ord <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ord <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuno_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setuno_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uno <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast uno <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuno_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setuno_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uno <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast uno <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setueq_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setueq_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ueq <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ueq <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setueq_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setueq_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ueq <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ueq <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setugt_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setugt_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ugt <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ugt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setugt_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setugt_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ugt <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ugt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuge_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setuge_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uge <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast uge <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuge_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setuge_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uge <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast uge <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setult_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setult_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ult <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ult <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setult_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setult_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ult <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ult <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setule_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setule_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ule <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ule <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setule_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setule_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ule <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ule <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setune_fast(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: 'fcmp_setune_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast une <16 x half> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast une <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setune_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: 'fcmp_setune_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast une <16 x half> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast une <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define float @fwidenmhw(<16 x half> %v) #0 {
; ALL-LABEL: 'fwidenmhw'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %vecext = extractelement <16 x half> %v, i32 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %conv = fpext half %vecext to float
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %conv
;
entry:
  %vecext = extractelement <16 x half> %v, i32 1
  %conv = fpext half %vecext to float
  ret float %conv
}

define <16 x half> @concat (<8 x half> %a, <8 x half> %b) #0 {
; ALL-LABEL: 'concat'
; ALL-NEXT:  Cost Model: Found an estimated cost of 12 for instruction: %v = shufflevector <8 x half> %a, <8 x half> %b, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %v
;
  %v = shufflevector <8 x half> %a, <8 x half> %b, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x half> %v
}

attributes #0 = { nounwind }

define <16 x half> @select_shufflehx_2(<16 x half> %0, half %1, i32 %2) {
; ALL-LABEL: 'select_shufflehx_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = icmp eq i32 %2, 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %4, label %8, label %5
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %6 = insertelement <16 x half> undef, half %1, i64 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %7 = shufflevector <16 x half> %6, <16 x half> %0, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %8
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %9 = phi <16 x half> [ %7, %5 ], [ %0, %3 ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %9
;
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %8, label %5

5:
  %6 = insertelement <16 x half> undef, half %1, i64 0
  %7 = shufflevector <16 x half> %6, <16 x half> %0, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %8

8:
  %9 = phi <16 x half> [ %7, %5 ], [ %0, %3 ]
  ret <16 x half> %9
}

define <16 x half> @test_select_cmp(<16 x half> %a, <16 x half> %b, <16 x half> %c, <16 x half> %d) #0 {
; ALL-LABEL: 'test_select_cmp'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <16 x half> %c, %d
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %bc = bitcast <16 x i1> %cc to i16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cmp = icmp eq i16 %bc, -1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %cmp, <16 x half> %a, <16 x half> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %cc = fcmp une <16 x half> %c, %d
  %bc = bitcast <16 x i1> %cc to i16
  %cmp = icmp eq i16 %bc, -1
  %r = select i1 %cmp, <16 x half> %a, <16 x half> %b
  ret <16 x half> %r
}
