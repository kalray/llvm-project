; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefix=CV1
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefix=CV2

target triple = "kvx-kalray-cos"

define <16 x half> @test_ret_const() #0 {
; ALL-LABEL: test_ret_const:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r0 = 0x4400420040003c00
; ALL-NEXT:    make $r1 = 0x4400420040003c00
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = 0x4400420040003c00
; ALL-NEXT:    make $r3 = 0x4400420040003c00
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'test_ret_const'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
;
; CV2-LABEL: 'test_ret_const'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
;
  ret <16 x half> <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>
}

define half @test_extract_0(<16 x half> %a) #0 {
; ALL-LABEL: test_extract_0:
; ALL:       # %bb.0:
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'test_extract_0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <16 x half> %a, i32 0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
; CV2-LABEL: 'test_extract_0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <16 x half> %a, i32 0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 0
  ret half %e
}

define half @test_extract_1(<16 x half> %a) #0 {
; ALL-LABEL: test_extract_1:
; ALL:       # %bb.0:
; ALL-NEXT:    srlw $r0 = $r0, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_extract_1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 1
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
; CV2-LABEL: 'test_extract_1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 1
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 1
  ret half %e
}

define half @test_extract_2(<16 x half> %a) #0 {
; ALL-LABEL: test_extract_2:
; ALL:       # %bb.0:
; ALL-NEXT:    srld $r0 = $r0, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_extract_2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 2
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
; CV2-LABEL: 'test_extract_2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 2
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 2
  ret half %e
}

define half @test_extract_3(<16 x half> %a) #0 {
; ALL-LABEL: test_extract_3:
; ALL:       # %bb.0:
; ALL-NEXT:    srld $r0 = $r0, 48
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_extract_3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 3
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
; CV2-LABEL: 'test_extract_3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 3
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 3
  ret half %e
}

define half @test_extract_4(<16 x half> %a) #0 {
; ALL-LABEL: test_extract_4:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_extract_4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <16 x half> %a, i32 4
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
; CV2-LABEL: 'test_extract_4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <16 x half> %a, i32 4
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 4
  ret half %e
}

define half @test_extract_5(<16 x half> %a) #0 {
; ALL-LABEL: test_extract_5:
; ALL:       # %bb.0:
; ALL-NEXT:    srlw $r0 = $r1, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_extract_5'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 5
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
; CV2-LABEL: 'test_extract_5'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 5
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 5
  ret half %e
}

define half @test_extract_6(<16 x half> %a) #0 {
; ALL-LABEL: test_extract_6:
; ALL:       # %bb.0:
; ALL-NEXT:    srld $r0 = $r1, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_extract_6'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 6
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
; CV2-LABEL: 'test_extract_6'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i32 6
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i32 6
  ret half %e
}

define half @test_extract_i(<16 x half> %a, i64 %idx) #0 {
; ALL-LABEL: test_extract_i:
; ALL:       # %bb.0:
; ALL-NEXT:    andw $r4 = $r4, 15
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sq 16[$r12] = $r2r3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sq 0[$r12] = $r0r1
; ALL-NEXT:    addd $r0 = $r12, 0
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    lhz.xs $r0 = $r4[$r0]
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
; CV1-LABEL: 'test_extract_i'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i64 %idx
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
; CV2-LABEL: 'test_extract_i'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <16 x half> %a, i64 %idx
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %e
;
  %e = extractelement <16 x half> %a, i64 %idx
  ret half %e
}

define <16 x half> @test_fadd(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: test_fadd:
; ALL:       # %bb.0:
; ALL-NEXT:    faddhq $r0 = $r0, $r4
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    faddhq $r1 = $r1, $r5
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    faddhq $r2 = $r2, $r6
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    faddhq $r3 = $r3, $r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
; CV1-LABEL: 'test_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 35 for instruction: %r = fadd <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> %a, %b
  ret <16 x half> %r
}

define <16 x half> @test_fadd_imm_0(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 34 for instruction: %r = fadd <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd_imm_0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fadd_imm_1(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 34 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd_imm_1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> %a, <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>
  ret <16 x half> %r
}

define <16 x half> @test_fadd_imm_2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 34 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd_imm_2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> %a, <half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0>
  ret <16 x half> %r
}

define <16 x half> @test_fadd_imm_3(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 34 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fadd_imm_3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fadd <16 x half> %a, <half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0>
  ret <16 x half> %r
}

define <16 x half> @test_fsub(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: test_fsub:
; ALL:       # %bb.0:
; ALL-NEXT:    fsbfhq $r0 = $r4, $r0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    fsbfhq $r1 = $r5, $r1
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    fsbfhq $r2 = $r6, $r2
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    fsbfhq $r3 = $r7, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
; CV1-LABEL: 'test_fsub'
; CV1-NEXT:  Cost Model: Found an estimated cost of 67 for instruction: %r = fsub <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> %a, %b
  ret <16 x half> %r
}

define <16 x half> @test_fsub_imm_1(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_imm_1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 66 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_imm_1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> %a, <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>
  ret <16 x half> %r
}

define <16 x half> @test_fsub_imm_2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_imm_2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 66 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_imm_2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> %a, <half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0>
  ret <16 x half> %r
}

define <16 x half> @test_fsub_imm_3(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_imm_3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 66 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_imm_3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> %a, <half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0>
  ret <16 x half> %r
}

define <16 x half> @test_fsub_fromimm1(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_fromimm1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 66 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_fromimm1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400, half 0xH3C00, half 0xH4000, half 0xH4200, half 0xH4400>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> <half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0, half 1.0, half 2.0, half 3.0, half 4.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fsub_fromimm2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_fromimm2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 66 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_fromimm2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000, half 0xH3C00, half 0xH4000, half 0xH0000, half 0xH0000>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> <half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0, half 1.0, half 2.0, half 0.0, half 0.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fsub_fromimm3(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fsub_fromimm3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 66 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fsub_fromimm3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> <half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fneg(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fneg'
; CV1-NEXT:  Cost Model: Found an estimated cost of 66 for instruction: %r = fsub <16 x half> zeroinitializer, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fneg'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fsub <16 x half> zeroinitializer, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fsub <16 x half> <half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0, half 0.0>, %a
  ret <16 x half> %r
}

define <16 x half> @test_fmul(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: test_fmul:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulhq $r0 = $r0, $r4
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    fmulhq $r1 = $r1, $r5
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    fmulhq $r2 = $r2, $r6
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    fmulhq $r3 = $r3, $r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
; CV1-LABEL: 'test_fmul'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = fmul <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fmul'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = fmul <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fmul <16 x half> %a, %b
  ret <16 x half> %r
}

define <16 x half> @test_fmul_imm(<16 x half> %a) {
; CV1-LABEL: 'test_fmul_imm'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = fmul <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fmul_imm'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = fmul <16 x half> %a, <half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000, half 0xH3C00, half 0xH4000>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fmul <16 x half> %a, <half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0, half 1.0, half 2.0>
  ret <16 x half> %r
}

define <16 x half> @test_fdiv(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fdiv'
; CV1-NEXT:  Cost Model: Found an estimated cost of 400 for instruction: %r = fdiv <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fdiv'
; CV2-NEXT:  Cost Model: Found an estimated cost of 400 for instruction: %r = fdiv <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fdiv <16 x half> %a, %b
  ret <16 x half> %r
}

define <16 x half> @test_frem(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_frem'
; CV1-NEXT:  Cost Model: Found an estimated cost of 400 for instruction: %r = frem <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_frem'
; CV2-NEXT:  Cost Model: Found an estimated cost of 400 for instruction: %r = frem <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = frem <16 x half> %a, %b
  ret <16 x half> %r
}

define void @test_ldst_v8f16(<16 x half>* %a, <16 x half>* %b) {
; ALL-LABEL: test_ldst_v8f16:
; ALL:       # %bb.0:
; ALL-NEXT:    lo $r4r5r6r7 = 0[$r0]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    so 0[$r1] = $r4r5r6r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
; CV1-LABEL: 'test_ldst_v8f16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %t1 = load <16 x half>, <16 x half>* %a, align 32
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: store <16 x half> %t1, <16 x half>* %b, align 16
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
; CV2-LABEL: 'test_ldst_v8f16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %t1 = load <16 x half>, <16 x half>* %a, align 32
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: store <16 x half> %t1, <16 x half>* %b, align 16
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %t1 = load <16 x half>, <16 x half>* %a
  store <16 x half> %t1, <16 x half>* %b, align 16
  ret void
}

declare <16 x half> @test_callee(<16 x half> %a, <16 x half> %b) #0

define <16 x half> @test_call(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: test_call:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'test_call'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <16 x half> @test_callee(<16 x half> %a, <16 x half> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_call'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <16 x half> @test_callee(<16 x half> %a, <16 x half> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @test_callee(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_call_flipped(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: test_call_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r4
; ALL-NEXT:    copyd $r4 = $r0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r1 = $r5
; ALL-NEXT:    copyd $r2 = $r6
; ALL-NEXT:    copyd $r5 = $r1
; ALL-NEXT:    copyd $r6 = $r2
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r3 = $r7
; ALL-NEXT:    copyd $r7 = $r3
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'test_call_flipped'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_call_flipped'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_tailcall_flipped(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: test_tailcall_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r0 = $r4
; ALL-NEXT:    copyd $r1 = $r5
; ALL-NEXT:    copyd $r4 = $r0
; ALL-NEXT:    copyd $r5 = $r1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r2 = $r6
; ALL-NEXT:    copyd $r3 = $r7
; ALL-NEXT:    copyd $r6 = $r2
; ALL-NEXT:    copyd $r7 = $r3
; ALL-NEXT:    goto test_callee
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'test_tailcall_flipped'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_tailcall_flipped'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = tail call <16 x half> @test_callee(<16 x half> %b, <16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_select(<16 x half> %a, <16 x half> %b, i1 zeroext %c) #0 {
; CV1-LABEL: 'test_select'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <16 x half> %a, <16 x half> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_select'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <16 x half> %a, <16 x half> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = select i1 %c, <16 x half> %a, <16 x half> %b
  ret <16 x half> %r
}

define <16 x half> @test_select_cc(<16 x half> %a, <16 x half> %b, <16 x half> %c, <16 x half> %d) #0 {
; CV1-LABEL: 'test_select_cc'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <16 x half> %c, %d
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_select_cc'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <16 x half> %c, %d
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %cc = fcmp une <16 x half> %c, %d
  %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
  ret <16 x half> %r
}

define <16 x half> @test_select_cc_f16_f32(<16 x half> %a, <16 x half> %b, <16 x float> %c, <16 x float> %d) #0 {
; CV1-LABEL: 'test_select_cc_f16_f32'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %cc = fcmp une <16 x float> %c, %d
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_select_cc_f16_f32'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %cc = fcmp une <16 x float> %c, %d
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %cc = fcmp une <16 x float> %c, %d
  %r = select <16 x i1> %cc, <16 x half> %a, <16 x half> %b
  ret <16 x half> %r
}

define <16 x i1> @test_fcmp_une(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_une'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp une <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_une'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp une <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp une <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ueq(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_ueq'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ueq <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_ueq'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ueq <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ueq <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ugt(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_ugt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ugt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_ugt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ugt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ugt <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_uge(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_uge'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp uge <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_uge'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp uge <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp uge <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ult(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_ult'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ult <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_ult'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ult <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ult <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ule(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_ule'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ule <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_ule'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ule <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ule <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_uno(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_uno'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp uno <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_uno'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp uno <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp uno <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_one(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_one'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp one <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_one'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp one <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp one <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_oeq(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_oeq'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp oeq <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_oeq'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp oeq <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp oeq <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ogt(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_ogt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ogt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_ogt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ogt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ogt <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_oge(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_oge'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp oge <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_oge'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp oge <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp oge <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_olt(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_olt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp olt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_olt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp olt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp olt <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ole(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_ole'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ole <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_ole'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ole <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ole <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i1> @test_fcmp_ord(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_fcmp_ord'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ord <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
; CV2-LABEL: 'test_fcmp_ord'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ord <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i1> %r
;
  %r = fcmp ord <16 x half> %a, %b
  ret <16 x i1> %r
}

define <16 x i16> @test_fptosi_i16(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fptosi_i16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = fptosi <16 x half> %a to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %r
;
; CV2-LABEL: 'test_fptosi_i16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = fptosi <16 x half> %a to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %r
;
  %r = fptosi <16 x half> %a to <16 x i16>
  ret <16 x i16> %r
}

define <16 x half> @test_uitofp_8xi16(<16 x i16> %a) #0 {
; CV1-LABEL: 'test_uitofp_8xi16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = uitofp <16 x i16> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_uitofp_8xi16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = uitofp <16 x i16> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = uitofp <16 x i16> %a to <16 x half>
  ret <16 x half> %r
}

define <16 x half> @test_uitofp_8xi32(<16 x i32> %a) #0 {
; ALL-LABEL: test_uitofp_8xi32:
; ALL:       # %bb.0:
; ALL-NEXT:    floatuwp.rn $r0 = $r0, 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    floatuwp.rn $r1 = $r1, 0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    floatuwp.rn $r2 = $r2, 0
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    floatuwp.rn $r3 = $r3, 0
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    floatuwp.rn $r4 = $r4, 0
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; ALL-NEXT:    floatuwp.rn $r5 = $r5, 0
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    floatuwp.rn $r6 = $r6, 0
; ALL-NEXT:    ;; # (end cycle 6)
; ALL-NEXT:    fnarrowwhq.rn $r1 = $r2r3
; ALL-NEXT:    floatuwp.rn $r7 = $r7, 0
; ALL-NEXT:    ;; # (end cycle 7)
; ALL-NEXT:    fnarrowwhq.rn $r2 = $r4r5
; ALL-NEXT:    ;; # (end cycle 9)
; ALL-NEXT:    fnarrowwhq.rn $r3 = $r6r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 11)
; CV1-LABEL: 'test_uitofp_8xi32'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = uitofp <16 x i32> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_uitofp_8xi32'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = uitofp <16 x i32> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = uitofp <16 x i32> %a to <16 x half>
  ret <16 x half> %r
}

define <16 x half> @test_sitofp_8xi32(<16 x i32> %a) #0 {
; ALL-LABEL: test_sitofp_8xi32:
; ALL:       # %bb.0:
; ALL-NEXT:    floatwp.rn $r0 = $r0, 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    floatwp.rn $r1 = $r1, 0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    floatwp.rn $r2 = $r2, 0
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    floatwp.rn $r3 = $r3, 0
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    floatwp.rn $r4 = $r4, 0
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; ALL-NEXT:    floatwp.rn $r5 = $r5, 0
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    floatwp.rn $r6 = $r6, 0
; ALL-NEXT:    ;; # (end cycle 6)
; ALL-NEXT:    fnarrowwhq.rn $r1 = $r2r3
; ALL-NEXT:    floatwp.rn $r7 = $r7, 0
; ALL-NEXT:    ;; # (end cycle 7)
; ALL-NEXT:    fnarrowwhq.rn $r2 = $r4r5
; ALL-NEXT:    ;; # (end cycle 9)
; ALL-NEXT:    fnarrowwhq.rn $r3 = $r6r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 11)
; CV1-LABEL: 'test_sitofp_8xi32'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sitofp <16 x i32> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_sitofp_8xi32'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sitofp <16 x i32> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = sitofp <16 x i32> %a to <16 x half>
  ret <16 x half> %r
}

define <16 x half> @test_uitofp_8xi32_fadd(<16 x i32> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_uitofp_8xi32_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %c = uitofp <16 x i32> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 35 for instruction: %r = fadd <16 x half> %b, %c
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_uitofp_8xi32_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %c = uitofp <16 x i32> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %b, %c
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %c = uitofp <16 x i32> %a to <16 x half>
  %r = fadd <16 x half> %b, %c
  ret <16 x half> %r
}

define <16 x half> @test_sitofp_8xi32_fadd(<16 x i32> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_sitofp_8xi32_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %c = sitofp <16 x i32> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 35 for instruction: %r = fadd <16 x half> %b, %c
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_sitofp_8xi32_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %c = sitofp <16 x i32> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fadd <16 x half> %b, %c
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %c = sitofp <16 x i32> %a to <16 x half>
  %r = fadd <16 x half> %b, %c
  ret <16 x half> %r
}

define <16 x half> @test_fptrunc_8xfloat(<16 x float> %a) #0 {
; ALL-LABEL: test_fptrunc_8xfloat:
; ALL:       # %bb.0:
; ALL-NEXT:    fnarrowwhq $r0 = $r0r1
; ALL-NEXT:    fnarrowwhq $r1 = $r2r3
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    fnarrowwhq $r2 = $r4r5
; ALL-NEXT:    fnarrowwhq $r3 = $r6r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'test_fptrunc_8xfloat'
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %r = fptrunc <16 x float> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fptrunc_8xfloat'
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %r = fptrunc <16 x float> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = fptrunc <16 x float> %a to <16 x half>
  ret <16 x half> %r
}

define <16 x i16> @test_bitcast_8xhalf_to_8xi16(<16 x half> %a) #0 {
; ALL-LABEL: test_bitcast_8xhalf_to_8xi16:
; ALL:       # %bb.0:
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'test_bitcast_8xhalf_to_8xi16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %r = bitcast <16 x half> %a to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %r
;
; CV2-LABEL: 'test_bitcast_8xhalf_to_8xi16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %r = bitcast <16 x half> %a to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %r
;
  %r = bitcast <16 x half> %a to <16 x i16>
  ret <16 x i16> %r
}

define <16 x half> @test_bitcast_8xi16_to_8xhalf(<16 x i16> %a) #0 {
; ALL-LABEL: test_bitcast_8xi16_to_8xhalf:
; ALL:       # %bb.0:
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'test_bitcast_8xi16_to_8xhalf'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %r = bitcast <16 x i16> %a to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_bitcast_8xi16_to_8xhalf'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %r = bitcast <16 x i16> %a to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = bitcast <16 x i16> %a to <16 x half>
  ret <16 x half> %r
}

declare <16 x half> @llvm.sqrt.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.powi.v8f16(<16 x half> %a, i32 %b) #0
declare <16 x half> @llvm.sin.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.cos.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.pow.v8f16(<16 x half> %a, <16 x half> %b) #0
declare <16 x half> @llvm.exp.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.exp2.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.log.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.log10.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.log2.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.fma.v8f16(<16 x half> %a, <16 x half> %b, <16 x half> %c) #0
declare <16 x half> @llvm.fabs.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.minnum.v8f16(<16 x half> %a, <16 x half> %b) #0
declare <16 x half> @llvm.maxnum.v8f16(<16 x half> %a, <16 x half> %b) #0
declare <16 x half> @llvm.copysign.v8f16(<16 x half> %a, <16 x half> %b) #0
declare <16 x half> @llvm.floor.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.ceil.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.trunc.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.rint.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.nearbyint.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.round.v8f16(<16 x half> %a) #0
declare <16 x half> @llvm.fmuladd.v8f16(<16 x half> %a, <16 x half> %b, <16 x half> %c) #0

define <16 x half> @test_sqrt(<16 x half> %a) #0 {
; CV1-LABEL: 'test_sqrt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.sqrt.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_sqrt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.sqrt.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.sqrt.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_powi(<16 x half> %a, i32 %b) #0 {
; CV1-LABEL: 'test_powi'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.powi.v16f16.i32(<16 x half> %a, i32 %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_powi'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.powi.v16f16.i32(<16 x half> %a, i32 %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.powi.v8f16(<16 x half> %a, i32 %b)
  ret <16 x half> %r
}

define <16 x half> @test_sin(<16 x half> %a) #0 {
; CV1-LABEL: 'test_sin'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.sin.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_sin'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.sin.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.sin.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_cos(<16 x half> %a) #0 {
; CV1-LABEL: 'test_cos'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.cos.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_cos'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.cos.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.cos.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_pow(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_pow'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_pow'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.pow.v16f16(<16 x half> %a, <16 x half> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.pow.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_exp(<16 x half> %a) #0 {
; CV1-LABEL: 'test_exp'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.exp.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_exp'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.exp.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.exp.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_exp2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_exp2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.exp2.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_exp2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.exp2.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.exp2.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_log(<16 x half> %a) #0 {
; CV1-LABEL: 'test_log'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_log'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.log.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_log10(<16 x half> %a) #0 {
; CV1-LABEL: 'test_log10'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log10.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_log10'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log10.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.log10.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_log2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_log2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log2.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_log2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.log2.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.log2.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_fma(<16 x half> %a, <16 x half> %b, <16 x half> %c) #0 {
; CV1-LABEL: 'test_fma'
; CV1-NEXT:  Cost Model: Found an estimated cost of 20 for instruction: %r = call <16 x half> @llvm.fma.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fma'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = call <16 x half> @llvm.fma.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.fma.v8f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
  ret <16 x half> %r
}

define <16 x half> @test_fabs(<16 x half> %a) #0 {
; CV1-LABEL: 'test_fabs'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.fabs.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fabs'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.fabs.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.fabs.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_minnum(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_minnum'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_minnum'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.minnum.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_minnum_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_minnum_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call fast <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_minnum_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call fast <16 x half> @llvm.minnum.v16f16(<16 x half> %a, <16 x half> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call fast <16 x half> @llvm.minnum.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_maxnum(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_maxnum'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_maxnum'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.maxnum.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_maxnum_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'test_maxnum_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call fast <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_maxnum_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call fast <16 x half> @llvm.maxnum.v16f16(<16 x half> %a, <16 x half> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call fast <16 x half> @llvm.maxnum.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_copysign(<16 x half> %a, <16 x half> %b) #0 {
; ALL-LABEL: test_copysign:
; ALL:       # %bb.0:
; ALL-NEXT:    fabshq $r0 = $r0
; ALL-NEXT:    fabshq $r1 = $r1
; ALL-NEXT:    andd $r4 = $r4, 0x80008000.@
; ALL-NEXT:    andd $r5 = $r5, 0x80008000.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    fabshq $r2 = $r2
; ALL-NEXT:    fabshq $r3 = $r3
; ALL-NEXT:    andd $r6 = $r6, 0x80008000.@
; ALL-NEXT:    andd $r7 = $r7, 0x80008000.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ord $r0 = $r0, $r4
; ALL-NEXT:    ord $r1 = $r1, $r5
; ALL-NEXT:    ord $r2 = $r2, $r6
; ALL-NEXT:    ord $r3 = $r3, $r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
; CV1-LABEL: 'test_copysign'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_copysign'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.copysign.v8f16(<16 x half> %a, <16 x half> %b)
  ret <16 x half> %r
}

define <16 x half> @test_copysign_v4f32(<16 x half> %a, <16 x float> %b) #0 {
; CV1-LABEL: 'test_copysign_v4f32'
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %tb = fptrunc <16 x float> %b to <16 x half>
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %tb)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_copysign_v4f32'
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %tb = fptrunc <16 x float> %b to <16 x half>
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %r = call <16 x half> @llvm.copysign.v16f16(<16 x half> %a, <16 x half> %tb)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %tb = fptrunc <16 x float> %b to <16 x half>
  %r = call <16 x half> @llvm.copysign.v8f16(<16 x half> %a, <16 x half> %tb)
  ret <16 x half> %r
}

define <16 x half> @test_floor(<16 x half> %a) #0 {
; CV1-LABEL: 'test_floor'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.floor.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_floor'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.floor.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.floor.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_ceil(<16 x half> %a) #0 {
; CV1-LABEL: 'test_ceil'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.ceil.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_ceil'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.ceil.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.ceil.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_trunc(<16 x half> %a) #0 {
; CV1-LABEL: 'test_trunc'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.trunc.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_trunc'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.trunc.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.trunc.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_rint(<16 x half> %a) #0 {
; CV1-LABEL: 'test_rint'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.rint.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_rint'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.rint.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.rint.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_nearbyint(<16 x half> %a) #0 {
; CV1-LABEL: 'test_nearbyint'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.nearbyint.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_nearbyint'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.nearbyint.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.nearbyint.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_round(<16 x half> %a) #0 {
; CV1-LABEL: 'test_round'
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.round.v16f16(<16 x half> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_round'
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %r = call <16 x half> @llvm.round.v16f16(<16 x half> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.round.v8f16(<16 x half> %a)
  ret <16 x half> %r
}

define <16 x half> @test_fmuladd(<16 x half> %a, <16 x half> %b, <16 x half> %c) #0 {
; CV1-LABEL: 'test_fmuladd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 40 for instruction: %r = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_fmuladd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %r = call <16 x half> @llvm.fmuladd.v8f16(<16 x half> %a, <16 x half> %b, <16 x half> %c)
  ret <16 x half> %r
}

define <16 x half> @test_shufflevector(<16 x half> %a) #0 {
; CV1-LABEL: 'test_shufflevector'
; CV1-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %s
;
; CV2-LABEL: 'test_shufflevector'
; CV2-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %s
;
  %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  ret <16 x half> %s
}

define <16 x half> @test_shufflevector2(<16 x half> %a) #0 {
; CV1-LABEL: 'test_shufflevector2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 0, i32 1, i32 3, i32 2, i32 4, i32 6, i32 7, i32 7, i32 9, i32 10, i32 11, i32 12, i32 13, i32 15, i32 15, i32 15>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %s
;
; CV2-LABEL: 'test_shufflevector2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 0, i32 1, i32 3, i32 2, i32 4, i32 6, i32 7, i32 7, i32 9, i32 10, i32 11, i32 12, i32 13, i32 15, i32 15, i32 15>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %s
;
  %s = shufflevector <16 x half> %a, <16 x half> undef, <16 x i32> <i32 0, i32 1, i32 3, i32 2, i32 4, i32 6, i32 7, i32 7, i32 9, i32 10, i32 11, i32 12, i32 13, i32 15, i32 15, i32 15>
  ret <16 x half> %s
}

define <16 x half> @test_insertelement0(<16 x half> %a, half %x) #0 {
; ALL-LABEL: test_insertelement0:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r4, 15, 0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_insertelement0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <16 x half> %a, half %x, i64 0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <16 x half> %a, half %x, i64 0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 0
  ret <16 x half> %i
}

define <16 x half> @test_insertelement1(<16 x half> %a, half %x) #0 {
; ALL-LABEL: test_insertelement1:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r4, 31, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_insertelement1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 1
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 1
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 1
  ret <16 x half> %i
}

define <16 x half> @test_insertelement2(<16 x half> %a, half %x) #0 {
; ALL-LABEL: test_insertelement2:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r4, 47, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_insertelement2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 2
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 2
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 2
  ret <16 x half> %i
}

define <16 x half> @test_insertelement3(<16 x half> %a, half %x) #0 {
; ALL-LABEL: test_insertelement3:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r4, 63, 48
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_insertelement3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 3
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 3
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 3
  ret <16 x half> %i
}

define <16 x half> @test_insertelement4(<16 x half> %a, half %x) #0 {
; ALL-LABEL: test_insertelement4:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r1 = $r4, 15, 0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_insertelement4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <16 x half> %a, half %x, i64 4
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <16 x half> %a, half %x, i64 4
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 4
  ret <16 x half> %i
}

define <16 x half> @test_insertelement5(<16 x half> %a, half %x) #0 {
; ALL-LABEL: test_insertelement5:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r1 = $r4, 31, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_insertelement5'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 5
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement5'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 5
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 5
  ret <16 x half> %i
}

define <16 x half> @test_insertelement6(<16 x half> %a, half %x) #0 {
; ALL-LABEL: test_insertelement6:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r1 = $r4, 47, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_insertelement6'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 6
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement6'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 6
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 6
  ret <16 x half> %i
}

define <16 x half> @test_insertelement7(<16 x half> %a, half %x) #0 {
; ALL-LABEL: test_insertelement7:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r1 = $r4, 63, 48
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'test_insertelement7'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 7
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement7'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 7
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 7
  ret <16 x half> %i
}

define <16 x half> @test_insertelement(<16 x half> %a, half %x, i64 %p) #0 {
; ALL-LABEL: test_insertelement:
; ALL:       # %bb.0:
; ALL-NEXT:    andw $r5 = $r5, 15
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sq 16[$r12] = $r2r3
; ALL-NEXT:    addd $r2 = $r12, 0
; ALL-NEXT:    muluwd $r5 = $r5, 2
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sq 0[$r12] = $r0r1
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    sh $r5[$r2] = $r4
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    lq $r2r3 = 16[$r12]
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    lq $r0r1 = 0[$r12]
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 5)
; CV1-LABEL: 'test_insertelement'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 %p
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
; CV2-LABEL: 'test_insertelement'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <16 x half> %a, half %x, i64 %p
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %i
;
  %i = insertelement <16 x half> %a, half %x, i64 %p
  ret <16 x half> %i
}

define <16 x i16> @fcmp_setoeq(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setoeq'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oeq <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setoeq'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oeq <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp oeq <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoeq_single(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setoeq_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oeq <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setoeq_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oeq <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp oeq <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setogt(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setogt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ogt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setogt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ogt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ogt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setogt_single(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setogt_single:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setogt_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ogt <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setogt_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ogt <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ogt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoge(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setoge'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oge <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setoge'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oge <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp oge <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoge_single(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setoge_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oge <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setoge_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oge <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp oge <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setolt(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setolt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp olt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setolt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp olt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp olt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setolt_single(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setolt_single:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setolt_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp olt <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setolt_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp olt <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp olt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setole(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setole'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ole <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setole'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ole <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ole <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setole_single(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setole_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ole <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setole_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ole <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ole <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setone(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setone'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp one <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setone'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp one <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp one <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setone_single(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setone_single:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setone_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp one <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setone_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp one <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp one <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setord(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setord'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ord <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setord'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ord <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ord <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setord_single(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setord_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ord <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setord_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ord <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ord <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuno(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setuno'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uno <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setuno'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uno <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp uno <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuno_single(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setuno_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uno <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setuno_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uno <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp uno <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setueq(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setueq'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ueq <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setueq'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ueq <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ueq <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setueq_single(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setueq_single:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setueq_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ueq <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setueq_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ueq <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ueq <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setugt(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setugt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ugt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setugt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ugt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ugt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setugt_single(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setugt_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ugt <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setugt_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ugt <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ugt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuge(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setuge'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uge <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setuge'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uge <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp uge <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuge_single(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setuge_single:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setuge_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uge <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setuge_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uge <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp uge <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setult(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setult'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ult <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setult'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ult <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ult <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setult_single(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setult_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ult <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setult_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ult <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ult <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setule(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setule'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ule <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setule'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ule <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ule <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setule_single(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setule_single:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setule_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ule <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setule_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ule <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp ule <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setune(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setune'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp une <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setune'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp une <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp une <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setune_single(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setune_single'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp une <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setune_single'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp une <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp une <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoeq_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setoeq_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oeq <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setoeq_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oeq <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast oeq <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoeq_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setoeq_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setoeq_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oeq <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setoeq_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oeq <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast oeq <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setogt_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setogt_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ogt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setogt_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ogt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ogt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setogt_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setogt_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setogt_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ogt <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setogt_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ogt <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ogt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoge_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setoge_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oge <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setoge_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oge <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast oge <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setoge_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setoge_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setoge_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oge <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setoge_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oge <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast oge <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setolt_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setolt_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast olt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setolt_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast olt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast olt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setolt_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setolt_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setolt_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast olt <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setolt_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast olt <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast olt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setole_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setole_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ole <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setole_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ole <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ole <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setole_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setole_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setole_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ole <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setole_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ole <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ole <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setone_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setone_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast one <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setone_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast one <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast one <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setone_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setone_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setone_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast one <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setone_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast one <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast one <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setord_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setord_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ord <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setord_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ord <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ord <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setord_single_fast(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setord_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ord <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setord_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ord <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ord <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuno_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setuno_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uno <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setuno_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uno <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast uno <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuno_single_fast(<16 x half> %a) #0 {
; CV1-LABEL: 'fcmp_setuno_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uno <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setuno_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uno <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast uno <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setueq_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setueq_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ueq <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setueq_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ueq <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ueq <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setueq_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setueq_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setueq_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ueq <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setueq_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ueq <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ueq <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setugt_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setugt_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ugt <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setugt_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ugt <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ugt <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setugt_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setugt_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setugt_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ugt <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setugt_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ugt <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ugt <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuge_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setuge_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uge <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setuge_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uge <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast uge <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setuge_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setuge_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setuge_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uge <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setuge_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uge <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast uge <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setult_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setult_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ult <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setult_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ult <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ult <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setult_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setult_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setult_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ult <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setult_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ult <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ult <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setule_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setule_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ule <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setule_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ule <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ule <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setule_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setule_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = -1
; ALL-NEXT:    make $r1 = -1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    make $r2 = -1
; ALL-NEXT:    make $r3 = -1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
; CV1-LABEL: 'fcmp_setule_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ule <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setule_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ule <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast ule <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setune_fast(<16 x half> %a, <16 x half> %b) #0 {
; CV1-LABEL: 'fcmp_setune_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast une <16 x half> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setune_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast une <16 x half> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast une <16 x half> %a, %b
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define <16 x i16> @fcmp_setune_single_fast(<16 x half> %a) #0 {
; ALL-LABEL: fcmp_setune_single_fast:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0
; ALL-NEXT:    make $r1 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'fcmp_setune_single_fast'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast une <16 x half> %a, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
; CV2-LABEL: 'fcmp_setune_single_fast'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast une <16 x half> %a, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = sext <16 x i1> %0 to <16 x i16>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x i16> %1
;
entry:
  %0 = fcmp fast une <16 x half> %a, %a
  %1 = sext <16 x i1> %0 to <16 x i16>
  ret <16 x i16> %1
}

define float @fwidenmhw(<16 x half> %v) #0 {
; ALL-LABEL: fwidenmhw:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    fwidenmhw $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
; CV1-LABEL: 'fwidenmhw'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %vecext = extractelement <16 x half> %v, i32 1
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %conv = fpext half %vecext to float
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %conv
;
; CV2-LABEL: 'fwidenmhw'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %vecext = extractelement <16 x half> %v, i32 1
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %conv = fpext half %vecext to float
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %conv
;
entry:
  %vecext = extractelement <16 x half> %v, i32 1
  %conv = fpext half %vecext to float
  ret float %conv
}

define <16 x half> @concat (<8 x half> %a, <8 x half> %b) #0 {
; ALL-LABEL: concat:
; ALL:       # %bb.0:
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
; CV1-LABEL: 'concat'
; CV1-NEXT:  Cost Model: Found an estimated cost of 12 for instruction: %v = shufflevector <8 x half> %a, <8 x half> %b, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %v
;
; CV2-LABEL: 'concat'
; CV2-NEXT:  Cost Model: Found an estimated cost of 12 for instruction: %v = shufflevector <8 x half> %a, <8 x half> %b, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %v
;
  %v = shufflevector <8 x half> %a, <8 x half> %b, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x half> %v
}

attributes #0 = { nounwind }

define <16 x half> @select_shufflehx_2(<16 x half> %0, half %1, i32 %2) {
; CV1-LABEL: 'select_shufflehx_2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = icmp eq i32 %2, 0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %4, label %8, label %5
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %6 = insertelement <16 x half> undef, half %1, i64 0
; CV1-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %7 = shufflevector <16 x half> %6, <16 x half> %0, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %8
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %9 = phi <16 x half> [ %7, %5 ], [ %0, %3 ]
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %9
;
; CV2-LABEL: 'select_shufflehx_2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = icmp eq i32 %2, 0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %4, label %8, label %5
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %6 = insertelement <16 x half> undef, half %1, i64 0
; CV2-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %7 = shufflevector <16 x half> %6, <16 x half> %0, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %8
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %9 = phi <16 x half> [ %7, %5 ], [ %0, %3 ]
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %9
;
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %8, label %5

5:
  %6 = insertelement <16 x half> undef, half %1, i64 0
  %7 = shufflevector <16 x half> %6, <16 x half> %0, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %8

8:
  %9 = phi <16 x half> [ %7, %5 ], [ %0, %3 ]
  ret <16 x half> %9
}

define <16 x half> @test_select_cmp(<16 x half> %a, <16 x half> %b, <16 x half> %c, <16 x half> %d) #0 {
; CV1-LABEL: 'test_select_cmp'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <16 x half> %c, %d
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %bc = bitcast <16 x i1> %cc to i16
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cmp = icmp eq i16 %bc, -1
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %cmp, <16 x half> %a, <16 x half> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
; CV2-LABEL: 'test_select_cmp'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <16 x half> %c, %d
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %bc = bitcast <16 x i1> %cc to i16
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cmp = icmp eq i16 %bc, -1
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %cmp, <16 x half> %a, <16 x half> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <16 x half> %r
;
  %cc = fcmp une <16 x half> %c, %d
  %bc = bitcast <16 x i1> %cc to i16
  %cmp = icmp eq i16 %bc, -1
  %r = select i1 %cmp, <16 x half> %a, <16 x half> %b
  ret <16 x half> %r
}
