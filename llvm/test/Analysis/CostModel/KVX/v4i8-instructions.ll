; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV1
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV2

target triple = "kvx-kalray-cos"

define <4 x i8> @test_ret_const() #0 {
; ALL-LABEL: 'test_ret_const'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> <i8 1, i8 2, i8 1, i8 2>
;
  ret <4 x i8> <i8 1, i8 2, i8 1, i8 2>
}

define i8 @test_extract_0(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_extract_0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <4 x i8> %a, i8 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i8 %e
;
  %e = extractelement <4 x i8> %a, i8 0
  ret i8 %e
}

define i8 @test_extract_1(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_extract_1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <4 x i8> %a, i8 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i8 %e
;
  %e = extractelement <4 x i8> %a, i8 1
  ret i8 %e
}

define i8 @test_extract_2(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_extract_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <4 x i8> %a, i8 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i8 %e
;
  %e = extractelement <4 x i8> %a, i8 2
  ret i8 %e
}

define i8 @test_extract_3(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_extract_3'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <4 x i8> %a, i8 3
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i8 %e
;
  %e = extractelement <4 x i8> %a, i8 3
  ret i8 %e
}

define <4 x i8> @test_fma(<4 x i8> %a, <4 x i8> %b, <4 x i8> %c) #0 {
; ALL-LABEL: 'test_fma'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %m = mul <4 x i8> %b, %c
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %ad = add <4 x i8> %a, %m
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %ad
;
  %m = mul <4 x i8> %b, %c
  %ad = add <4 x i8> %a, %m
  ret <4 x i8> %ad
}

define <4 x i8> @test_fma_imm(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_fma_imm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %m = mul <4 x i8> <i8 7, i8 2, i8 1, i8 3>, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %ad = add <4 x i8> %a, %m
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %ad
;
  %m = mul <4 x i8> <i8 7, i8 2, i8 1, i8 3>, %b
  %ad = add <4 x i8> %a, %m
  ret <4 x i8> %ad
}


define <4 x i8> @test_fma_imm_2(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_fma_imm_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %m = mul <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %ad = add <4 x i8> %a, %m
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %ad
;
  %m = mul <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %b
  %ad = add <4 x i8> %a, %m
  ret <4 x i8> %ad
}

define i8 @test_extract_i(<4 x i8> %a, i64 %idx) #0 {
; ALL-LABEL: 'test_extract_i'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %e = extractelement <4 x i8> %a, i64 %idx
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i8 %e
;
  %e = extractelement <4 x i8> %a, i64 %idx
  ret i8 %e
}

define <4 x i8> @test_add(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_add'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <4 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = add <4 x i8> %a, %b
  ret <4 x i8> %r
}

define <4 x i8> @test_add_imm_0(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_add_imm_0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = add <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %a
  ret <4 x i8> %r
}

define <4 x i8> @test_add_imm_1(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_add_imm_1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <4 x i8> %a, <i8 1, i8 2, i8 1, i8 2>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = add <4 x i8> %a, <i8 1, i8 2, i8 1, i8 2>
  ret <4 x i8> %r
}

define <4 x i8> @test_sub(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_sub'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <4 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = sub <4 x i8> %a, %b
  ret <4 x i8> %r
}

define <4 x i8> @test_sub_imm(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_sub_imm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <4 x i8> %a, <i8 1, i8 2, i8 1, i8 2>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = sub <4 x i8> %a, <i8 1, i8 2, i8 1, i8 2>
  ret <4 x i8> %r
}

define <4 x i8> @test_sub_fromimm(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_sub_fromimm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = sub <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %a
  ret <4 x i8> %r
}

define <4 x i8> @test_neg(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_neg'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <4 x i8> zeroinitializer, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = sub <4 x i8> <i8 0, i8 0, i8 0, i8 0>, %a
  ret <4 x i8> %r
}

define <4 x i8> @test_mul(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_mul'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = mul <4 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = mul <4 x i8> %a, %b
  ret <4 x i8> %r
}

define <4 x i8> @test_mul_2(<4 x i8> %a, <4 x i8> %b, <4 x i8> %c) #0 {
; ALL-LABEL: 'test_mul_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = mul <4 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r1 = mul <4 x i8> %r, %c
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r1
;
  %r = mul <4 x i8> %a, %b
  %r1 = mul <4 x i8> %r, %c
  ret <4 x i8> %r1
}

define <4 x i8> @test_div(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_div'
; ALL-NEXT:  Cost Model: Found an estimated cost of 100 for instruction: %r = sdiv <4 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = sdiv <4 x i8> %a, %b
  ret <4 x i8> %r
}

define <4 x i8> @test_rem(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_rem'
; ALL-NEXT:  Cost Model: Found an estimated cost of 100 for instruction: %r = srem <4 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = srem <4 x i8> %a, %b
  ret <4 x i8> %r
}

define void @test_ldst_v4i8(<4 x i8>* %a, <4 x i8>* %b) {
; ALL-LABEL: 'test_ldst_v4i8'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %t1 = load <4 x i8>, ptr %a, align 4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i8> %t1, ptr %b, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %t1 = load <4 x i8>, <4 x i8>* %a
  store <4 x i8> %t1, <4 x i8>* %b, align 16
  ret void
}

declare <4 x i8> @test_callee(<4 x i8> %a, <4 x i8> %b) #0

define <4 x i8> @test_call(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_call'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i8> @test_callee(<4 x i8> %a, <4 x i8> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = call <4 x i8> @test_callee(<4 x i8> %a, <4 x i8> %b)
  ret <4 x i8> %r
}

define <4 x i8> @test_call_flipped(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_call_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i8> @test_callee(<4 x i8> %b, <4 x i8> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = call <4 x i8> @test_callee(<4 x i8> %b, <4 x i8> %a)
  ret <4 x i8> %r
}

define <4 x i8> @test_tailcall_flipped(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_tailcall_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <4 x i8> @test_callee(<4 x i8> %b, <4 x i8> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = tail call <4 x i8> @test_callee(<4 x i8> %b, <4 x i8> %a)
  ret <4 x i8> %r
}

define <4 x i8> @test_select(<4 x i8> %a, <4 x i8> %b, i1 zeroext %c) #0 {
; ALL-LABEL: 'test_select'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <4 x i8> %a, <4 x i8> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = select i1 %c, <4 x i8> %a, <4 x i8> %b
  ret <4 x i8> %r
}

define <4 x i8> @test_select_cc(<4 x i8> %a, <4 x i8> %b, <4 x i8> %c, <4 x i8> %d) #0 {
; CV1-LABEL: 'test_select_cc'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %cc = icmp slt <4 x i8> %c, %d
; CV1-NEXT:  Cost Model: Invalid cost for instruction: %r = select <4 x i1> %cc, <4 x i8> %a, <4 x i8> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
; CV2-LABEL: 'test_select_cc'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp slt <4 x i8> %c, %d
; CV2-NEXT:  Cost Model: Invalid cost for instruction: %r = select <4 x i1> %cc, <4 x i8> %a, <4 x i8> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %cc = icmp slt <4 x i8> %c, %d
  %r = select <4 x i1> %cc, <4 x i8> %a, <4 x i8> %b
  ret <4 x i8> %r
}

define <4 x i64> @test_select_cc_f32_f32(<4 x i64> %a, <4 x i64> %b, <4 x i8> %c, <4 x i8> %d) #0 {
; CV1-LABEL: 'test_select_cc_f32_f32'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %cc = icmp ult <4 x i8> %c, %d
; CV1-NEXT:  Cost Model: Invalid cost for instruction: %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_select_cc_f32_f32'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp ult <4 x i8> %c, %d
; CV2-NEXT:  Cost Model: Invalid cost for instruction: %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %cc = icmp ult <4 x i8> %c, %d
  %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i1> @test_icmp_ule(<4 x i8> %a, <4 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_ule'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp ule <4 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_ule'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ule <4 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ule <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_slt(<4 x i8> %a, <4 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_slt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp slt <4 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_slt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp slt <4 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp slt <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ugt(<4 x i8> %a, <4 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_ugt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp ugt <4 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_ugt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ugt <4 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ugt <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_uge(<4 x i8> %a, <4 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_uge'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp uge <4 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_uge'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp uge <4 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp uge <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ult(<4 x i8> %a, <4 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_ult'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp ult <4 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_ult'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ult <4 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ult <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i64> @test_sext_2xi64(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_sext_2xi64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = sext <4 x i8> %a to <4 x i64>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = sext <4 x i8> %a to <4 x i64>
  ret <4 x i64> %r
}

declare <4 x i8> @llvm.abs.v4i8(<4 x i8>, i1) #0

define <4 x i8> @test_abs(<4 x i8> %a) #0 {
; ALL-LABEL: 'test_abs'
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %r = call <4 x i8> @llvm.abs.v4i8(<4 x i8> %a, i1 false)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = call <4 x i8> @llvm.abs.v4i8(<4 x i8> %a, i1 false)
  ret <4 x i8> %r
}

define <4 x i8> @test_insertelement0(<4 x i8> %a, i8 %x) #0 {
; ALL-LABEL: 'test_insertelement0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <4 x i8> %a, i8 %x, i64 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %i
;
  %i = insertelement <4 x i8> %a, i8 %x, i64 0
  ret <4 x i8> %i
}

define <4 x i8> @test_insertelement1(<4 x i8> %a, i8 %x) #0 {
; ALL-LABEL: 'test_insertelement1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <4 x i8> %a, i8 %x, i64 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %i
;
  %i = insertelement <4 x i8> %a, i8 %x, i64 1
  ret <4 x i8> %i
}

define <4 x i8> @test_insertelement2(<4 x i8> %a, i8 %x) #0 {
; ALL-LABEL: 'test_insertelement2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <4 x i8> %a, i8 %x, i64 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %i
;
  %i = insertelement <4 x i8> %a, i8 %x, i64 2
  ret <4 x i8> %i
}

define <4 x i8> @test_insertelement3(<4 x i8> %a, i8 %x) #0 {
; ALL-LABEL: 'test_insertelement3'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <4 x i8> %a, i8 %x, i64 3
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %i
;
  %i = insertelement <4 x i8> %a, i8 %x, i64 3
  ret <4 x i8> %i
}

define <4 x i8> @test_insertelement(<4 x i8> %a, i8 %x, i64 %p) #0 {
; ALL-LABEL: 'test_insertelement'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %i = insertelement <4 x i8> %a, i8 %x, i64 %p
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %i
;
  %i = insertelement <4 x i8> %a, i8 %x, i64 %p
  ret <4 x i8> %i
}

define <4 x i8> @mulsub(<4 x i8> %a, <4 x i8> %b, <4 x i8> %c) #0 {
; ALL-LABEL: 'mulsub'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %mul = mul <4 x i8> %b, %c
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %sub = sub <4 x i8> %a, %mul
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %sub
;
  %mul = mul <4 x i8> %b, %c
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @vnot(<4 x i8> %a) #0 {
; ALL-LABEL: 'vnot'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %vnot = xor <4 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %vnot
;
  %vnot = xor <4 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %vnot
}

define <4 x i8> @nandw_v2i8_rr(<4 x i8> %0, <4 x i8> %1) {
; ALL-LABEL: 'nandw_v2i8_rr'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = and <4 x i8> %1, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = xor <4 x i8> %3, <i8 -1, i8 -1, i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %4
;
  %3 = and <4 x i8> %1, %0
  %4 = xor <4 x i8> %3, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %4
}

define <4 x i8> @nandw_v2i8_ri10(<4 x i8> %0) {
; ALL-LABEL: 'nandw_v2i8_ri10'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = and <4 x i8> %0, <i8 -1, i8 0, i8 -1, i8 0>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %3
;
  %2 = and <4 x i8> %0, <i8 1023, i8 0, i8 1023, i8 0>
  %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %3
}

define <4 x i8> @nandw_v2i8_ri37(<4 x i8> %0) {
; ALL-LABEL: 'nandw_v2i8_ri37'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = and <4 x i8> %0, <i8 -4, i8 0, i8 -4, i8 0>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %3
;
  %2 = and <4 x i8> %0, <i8 252, i8 0, i8 252, i8 0>
  %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %3
}

define <4 x i8> @nandw_v2i8_ri37_2(<4 x i8> %0) {
; ALL-LABEL: 'nandw_v2i8_ri37_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = and <4 x i8> %0, <i8 13, i8 13, i8 13, i8 13>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %3
;
  %2 = and <4 x i8> %0, <i8 13, i8 13, i8 13, i8 13>
  %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %3
}

define <4 x i8> @concat(<2 x i8> %a, <2 x i8> %b){
; ALL-LABEL: 'concat'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %v = shufflevector <2 x i8> %a, <2 x i8> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %v
;
  %v = shufflevector <2 x i8> %a, <2 x i8> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i8> %v
}

define  <4 x i8> @v4_maxbo_rr_i8(<4 x i8> %a, <4 x i8> %b) {
; CV1-LABEL: 'v4_maxbo_rr_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %0 = call <4 x i8> @llvm.smax.v4i8(<4 x i8> %a, <4 x i8> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
; CV2-LABEL: 'v4_maxbo_rr_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = call <4 x i8> @llvm.smax.v4i8(<4 x i8> %a, <4 x i8> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
entry:
  %0 = call <4 x i8> @llvm.smax.v4i8(<4 x i8> %a, <4 x i8> %b)
  ret <4 x i8> %0
}

define  <4 x i8> @v4_minbo_rr_i8(<4 x i8> %a, <4 x i8> %b) {
; CV1-LABEL: 'v4_minbo_rr_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %0 = call <4 x i8> @llvm.smin.v4i8(<4 x i8> %a, <4 x i8> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
; CV2-LABEL: 'v4_minbo_rr_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = call <4 x i8> @llvm.smin.v4i8(<4 x i8> %a, <4 x i8> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
entry:
  %0 = call <4 x i8> @llvm.smin.v4i8(<4 x i8> %a, <4 x i8> %b)
  ret <4 x i8> %0
}

define  <4 x i8> @v4_umaxbo_rr_i8(<4 x i8> %a, <4 x i8> %b) {
; CV1-LABEL: 'v4_umaxbo_rr_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %0 = call <4 x i8> @llvm.umax.v4i8(<4 x i8> %a, <4 x i8> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
; CV2-LABEL: 'v4_umaxbo_rr_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = call <4 x i8> @llvm.umax.v4i8(<4 x i8> %a, <4 x i8> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
entry:
  %0 = call <4 x i8> @llvm.umax.v4i8(<4 x i8> %a, <4 x i8> %b)
  ret <4 x i8> %0
}

define  <4 x i8> @v4_uminbo_rr_i8(<4 x i8> %a, <4 x i8> %b) {
; CV1-LABEL: 'v4_uminbo_rr_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %0 = call <4 x i8> @llvm.umin.v4i8(<4 x i8> %a, <4 x i8> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
; CV2-LABEL: 'v4_uminbo_rr_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = call <4 x i8> @llvm.umin.v4i8(<4 x i8> %a, <4 x i8> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
entry:
  %0 = call <4 x i8> @llvm.umin.v4i8(<4 x i8> %a, <4 x i8> %b)
  ret <4 x i8> %0
}

define <4 x i8> @abdbo_rr(<4 x i8> %a, <4 x i8> %b) {
; ALL-LABEL: 'abdbo_rr'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %sub = sub nsw <4 x i8> %a, %b
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %0 = tail call <4 x i8> @llvm.abs.v4i8(<4 x i8> %sub, i1 true)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %0
;
entry:
  %sub = sub nsw <4 x i8> %a, %b
  %0 = tail call <4 x i8> @llvm.abs.v4i8(<4 x i8> %sub, i1 true)
  ret <4 x i8> %0
}

define <4 x i8> @abdbo_ri(<4 x i8> %0) {
; ALL-LABEL: 'abdbo_ri'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = sub nsw <4 x i8> <i8 15, i8 16, i8 15, i8 16>, %0
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %3 = tail call <4 x i8> @llvm.abs.v4i8(<4 x i8> %2, i1 true)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %3
;
  %2 = sub nsw <4 x i8> <i8 15, i8 16, i8 15, i8 16>, %0
  %3 = tail call <4 x i8> @llvm.abs.v4i8(<4 x i8> %2, i1 true)
  ret <4 x i8> %3
}

define <4 x i8> @add_splat_const_op1(<4 x i8> %vx) #0 {
; ALL-LABEL: 'add_splat_const_op1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %splatx = shufflevector <4 x i8> %vx, <4 x i8> undef, <4 x i32> zeroinitializer
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <4 x i8> %splatx, <i8 42, i8 42, i8 42, i8 42>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %splatx = shufflevector <4 x i8> %vx, <4 x i8> undef, <4 x i32> zeroinitializer
  %r = add <4 x i8> %splatx, <i8 42, i8 42, i8 42, i8 42>
  ret <4 x i8> %r
}

define <4 x i8> @add_splat_splat(<4 x i8> %vx, <4 x i8> %vy) #0 {
; ALL-LABEL: 'add_splat_splat'
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %splatx = shufflevector <4 x i8> %vx, <4 x i8> undef, <4 x i32> zeroinitializer
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %splaty = shufflevector <4 x i8> %vy, <4 x i8> undef, <4 x i32> zeroinitializer
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <4 x i8> %splatx, %splaty
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %splatx = shufflevector <4 x i8> %vx, <4 x i8> undef, <4 x i32> zeroinitializer
  %splaty = shufflevector <4 x i8> %vy, <4 x i8> undef, <4 x i32> zeroinitializer
  %r = add <4 x i8> %splatx, %splaty
  ret <4 x i8> %r
}
declare <4 x i8> @llvm.smax.v4i8(<4 x i8> %a, <4 x i8> %b)
declare <4 x i8> @llvm.smin.v4i8(<4 x i8> %a, <4 x i8> %b)
declare <4 x i8> @llvm.umax.v4i8(<4 x i8> %a, <4 x i8> %b)
declare <4 x i8> @llvm.umin.v4i8(<4 x i8> %a, <4 x i8> %b)

attributes #0 = { nounwind }

define <4 x i8> @test_div_4(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_div_4'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sdiv <4 x i8> %a, <i8 4, i8 4, i8 4, i8 4>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = sdiv <4 x i8> %a, <i8 4, i8 4, i8 4, i8 4>
  ret <4 x i8> %r
}

define <4 x i8> @test_div_32(<4 x i8> %a, <4 x i8> %b) #0 {
; ALL-LABEL: 'test_div_32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sdiv <4 x i8> %a, <i8 32, i8 32, i8 32, i8 32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = sdiv <4 x i8> %a, <i8 32, i8 32, i8 32, i8 32>
  ret <4 x i8> %r
}

define <4 x i8> @lshr_cst_splat_w_undefs(<4 x i8> %lhs ) {
; CV1-LABEL: 'lshr_cst_splat_w_undefs'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = lshr <4 x i8> %lhs, <i8 2, i8 undef, i8 2, i8 undef>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
; CV2-LABEL: 'lshr_cst_splat_w_undefs'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = lshr <4 x i8> %lhs, <i8 2, i8 undef, i8 2, i8 undef>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = lshr <4 x i8> %lhs, <i8 2, i8 undef, i8 2, i8 undef>
  ret <4 x i8> %r
}

define <4 x i8> @lshr_val_splat_w_undefs(<4 x i8> %lhs, i32 %s ) {
; CV1-LABEL: 'lshr_val_splat_w_undefs'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %conv = trunc i32 %s to i8
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %vecinit = insertelement <4 x i8> undef, i8 %conv, i32 0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %rhs = insertelement <4 x i8> %vecinit, i8 %conv, i32 2
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %r = lshr <4 x i8> %lhs, %rhs
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
; CV2-LABEL: 'lshr_val_splat_w_undefs'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %conv = trunc i32 %s to i8
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %vecinit = insertelement <4 x i8> undef, i8 %conv, i32 0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %rhs = insertelement <4 x i8> %vecinit, i8 %conv, i32 2
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = lshr <4 x i8> %lhs, %rhs
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %conv = trunc i32 %s to i8
  %vecinit = insertelement <4 x i8> undef, i8 %conv, i32 0
  %rhs = insertelement <4 x i8> %vecinit, i8 %conv, i32 2

  %r = lshr <4 x i8> %lhs, %rhs
  ret <4 x i8> %r
}
