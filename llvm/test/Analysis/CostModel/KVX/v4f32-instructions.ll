; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV1
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV2

target triple = "kvx-kalray-cos"

define <4 x float> @test_ret_const() #0 {
; ALL-LABEL: 'test_ret_const'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>
;
  ret <4 x float> <float 1.0, float 2.0, float 1.0, float 2.0>
}

define float @test_extract_0(<4 x float> %a) #0 {
; ALL-LABEL: 'test_extract_0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <4 x float> %a, i32 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %e
;
  %e = extractelement <4 x float> %a, i32 0
  ret float %e
}

define float @test_extract_1(<4 x float> %a) #0 {
; ALL-LABEL: 'test_extract_1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <4 x float> %a, i32 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %e
;
  %e = extractelement <4 x float> %a, i32 1
  ret float %e
}

define float @test_extract_i(<4 x float> %a, i64 %idx) #0 {
; ALL-LABEL: 'test_extract_i'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %e = extractelement <4 x float> %a, i64 %idx
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %e
;
  %e = extractelement <4 x float> %a, i64 %idx
  ret float %e
}

define <4 x float> @test_fadd(<4 x float> %a, <4 x float> %b) #0 {
; CV1-LABEL: 'test_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <4 x float> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fadd <4 x float> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fadd <4 x float> %a, %b
  ret <4 x float> %r
}

define <4 x float> @test_fadd_imm_0(<4 x float> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <4 x float> <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fadd_imm_0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fadd <4 x float> <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fadd <4 x float> <float 1.0, float 2.0, float 1.0, float 2.0>, %a
  ret <4 x float> %r
}

define <4 x float> @test_fadd_imm_1(<4 x float> %a) #0 {
; CV1-LABEL: 'test_fadd_imm_1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <4 x float> %a, <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fadd_imm_1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fadd <4 x float> %a, <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fadd <4 x float> %a, <float 1.0, float 2.0, float 1.0, float 2.0>
  ret <4 x float> %r
}

define <4 x float> @test_fsub(<4 x float> %a, <4 x float> %b) #0 {
; CV1-LABEL: 'test_fsub'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <4 x float> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fsub'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fsub <4 x float> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fsub <4 x float> %a, %b
  ret <4 x float> %r
}

define <4 x float> @test_fsub_imm(<4 x float> %a) #0 {
; CV1-LABEL: 'test_fsub_imm'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <4 x float> %a, <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fsub_imm'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fsub <4 x float> %a, <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fsub <4 x float> %a, <float 1.0, float 2.0, float 1.0, float 2.0>
  ret <4 x float> %r
}

define <4 x float> @test_fsub_fromimm(<4 x float> %a) #0 {
; CV1-LABEL: 'test_fsub_fromimm'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <4 x float> <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fsub_fromimm'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fsub <4 x float> <float 1.000000e+00, float 2.000000e+00, float 1.000000e+00, float 2.000000e+00>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fsub <4 x float> <float 1.0, float 2.0, float 1.0, float 2.0>, %a
  ret <4 x float> %r
}

define <4 x float> @test_fneg(<4 x float> %a) #0 {
; CV1-LABEL: 'test_fneg'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fsub <4 x float> zeroinitializer, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fneg'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fsub <4 x float> zeroinitializer, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fsub <4 x float> <float 0.0, float 0.0, float 0.0, float 0.0>, %a
  ret <4 x float> %r
}

define <4 x float> @test_fmul(<4 x float> %a, <4 x float> %b) #0 {
; CV1-LABEL: 'test_fmul'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fmul <4 x float> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fmul'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fmul <4 x float> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fmul <4 x float> %a, %b
  ret <4 x float> %r
}

define <4 x float> @test_fdiv(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fdiv'
; ALL-NEXT:  Cost Model: Found an estimated cost of 200 for instruction: %r = fdiv <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fdiv <4 x float> %a, %b
  ret <4 x float> %r
}

define <4 x float> @test_frem(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_frem'
; ALL-NEXT:  Cost Model: Found an estimated cost of 200 for instruction: %r = frem <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = frem <4 x float> %a, %b
  ret <4 x float> %r
}

define void @test_ldst_v4f32(ptr %a, ptr %b) {
; ALL-LABEL: 'test_ldst_v4f32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %t1 = load <4 x float>, ptr %a, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x float> %t1, ptr %b, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %t1 = load <4 x float>, ptr %a
  store <4 x float> %t1, ptr %b, align 16
  ret void
}

declare <4 x float> @test_callee(<4 x float> %a, <4 x float> %b) #0

define <4 x float> @test_call(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_call'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x float> @test_callee(<4 x float> %a, <4 x float> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @test_callee(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %r
}

define <4 x float> @test_call_flipped(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_call_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x float> @test_callee(<4 x float> %b, <4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @test_callee(<4 x float> %b, <4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_tailcall_flipped(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_tailcall_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <4 x float> @test_callee(<4 x float> %b, <4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = tail call <4 x float> @test_callee(<4 x float> %b, <4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_select(<4 x float> %a, <4 x float> %b, i1 zeroext %c) #0 {
; ALL-LABEL: 'test_select'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <4 x float> %a, <4 x float> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = select i1 %c, <4 x float> %a, <4 x float> %b
  ret <4 x float> %r
}

define <4 x float> @test_select_cc(<4 x float> %a, <4 x float> %b, <4 x float> %c, <4 x float> %d) #0 {
; ALL-LABEL: 'test_select_cc'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <4 x float> %c, %d
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <4 x i1> %cc, <4 x float> %a, <4 x float> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %cc = fcmp une <4 x float> %c, %d
  %r = select <4 x i1> %cc, <4 x float> %a, <4 x float> %b
  ret <4 x float> %r
}

define <4 x double> @test_select_cc_f32_f32(<4 x double> %a, <4 x double> %b, <4 x float> %c, <4 x float> %d) #0 {
; ALL-LABEL: 'test_select_cc_f32_f32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <4 x float> %c, %d
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <4 x i1> %cc, <4 x double> %a, <4 x double> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x double> %r
;
  %cc = fcmp une <4 x float> %c, %d
  %r = select <4 x i1> %cc, <4 x double> %a, <4 x double> %b
  ret <4 x double> %r
}

define <4 x i1> @test_fcmp_une(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_une'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp une <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp une <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ueq(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_ueq'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ueq <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp ueq <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ugt(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_ugt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ugt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp ugt <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_uge(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_uge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp uge <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp uge <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ult(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_ult'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ult <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp ult <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ule(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_ule'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ule <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp ule <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_uno(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_uno'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp uno <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp uno <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_one(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_one'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp one <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp one <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_oeq(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_oeq'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp oeq <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp oeq <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ogt(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_ogt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ogt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp ogt <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_oge(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_oge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp oge <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp oge <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_olt(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_olt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp olt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp olt <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ole(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_ole'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ole <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp ole <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ord(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_fcmp_ord'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fcmp ord <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = fcmp ord <4 x float> %a, %b
  ret <4 x i1> %r
}

define <4 x i32> @test_fptosi_i32(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fptosi_i32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fptosi <4 x float> %a to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = fptosi <4 x float> %a to <4 x i32>
  ret <4 x i32> %r
}

define <4 x i64> @test_fptosi_i64(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fptosi_i64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fptosi <4 x float> %a to <4 x i64>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = fptosi <4 x float> %a to <4 x i64>
  ret <4 x i64> %r
}

define <4 x i32> @test_fptoui_2xi32(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fptoui_2xi32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fptoui <4 x float> %a to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = fptoui <4 x float> %a to <4 x i32>
  ret <4 x i32> %r
}

define <4 x i64> @test_fptoui_2xi64(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fptoui_2xi64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fptoui <4 x float> %a to <4 x i64>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = fptoui <4 x float> %a to <4 x i64>
  ret <4 x i64> %r
}

define <4 x i16> @test_fptosi_i16(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fptosi_i16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fptosi <4 x float> %a to <4 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i16> %r
;
  %r = fptosi <4 x float> %a to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @test_fptoui_i16(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fptoui_i16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fptoui <4 x float> %a to <4 x i16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i16> %r
;
  %r = fptoui <4 x float> %a to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i8> @test_fptosi_i8(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fptosi_i8'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fptosi <4 x float> %a to <4 x i8>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = fptosi <4 x float> %a to <4 x i8>
  ret <4 x i8> %r
}

define <4 x i8> @test_fptoui_i8(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fptoui_i8'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fptoui <4 x float> %a to <4 x i8>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = fptoui <4 x float> %a to <4 x i8>
  ret <4 x i8> %r
}
define <4 x float> @test_uitofp_2xi32(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_uitofp_2xi32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = uitofp <4 x i32> %a to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = uitofp <4 x i32> %a to <4 x float>
  ret <4 x float> %r
}

define <4 x float> @test_uitofp_2xi64(<4 x i64> %a) #0 {
; ALL-LABEL: 'test_uitofp_2xi64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = uitofp <4 x i64> %a to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = uitofp <4 x i64> %a to <4 x float>
  ret <4 x float> %r
}

define <4 x float> @test_sitofp_2xi32(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_sitofp_2xi32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sitofp <4 x i32> %a to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = sitofp <4 x i32> %a to <4 x float>
  ret <4 x float> %r
}

define <4 x float> @test_sitofp_2xi64(<4 x i64> %a) #0 {
; ALL-LABEL: 'test_sitofp_2xi64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sitofp <4 x i64> %a to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = sitofp <4 x i64> %a to <4 x float>
  ret <4 x float> %r
}

define <4 x float> @test_uitofp_2xi32_fadd(<4 x i32> %a, <4 x float> %b) #0 {
; CV1-LABEL: 'test_uitofp_2xi32_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = uitofp <4 x i32> %a to <4 x float>
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <4 x float> %b, %c
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_uitofp_2xi32_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = uitofp <4 x i32> %a to <4 x float>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fadd <4 x float> %b, %c
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %c = uitofp <4 x i32> %a to <4 x float>
  %r = fadd <4 x float> %b, %c
  ret <4 x float> %r
}

define <4 x float> @test_sitofp_2xi32_fadd(<4 x i32> %a, <4 x float> %b) #0 {
; CV1-LABEL: 'test_sitofp_2xi32_fadd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = sitofp <4 x i32> %a to <4 x float>
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fadd <4 x float> %b, %c
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_sitofp_2xi32_fadd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = sitofp <4 x i32> %a to <4 x float>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = fadd <4 x float> %b, %c
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %c = sitofp <4 x i32> %a to <4 x float>
  %r = fadd <4 x float> %b, %c
  ret <4 x float> %r
}

define <4 x float> @test_fptrunc_2xdouble(<4 x double> %a) #0 {
; ALL-LABEL: 'test_fptrunc_2xdouble'
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = fptrunc <4 x double> %a to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = fptrunc <4 x double> %a to <4 x float>
  ret <4 x float> %r
}

define <4 x double> @test_fpext_2xdouble(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fpext_2xdouble'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = fpext <4 x float> %a to <4 x double>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x double> %r
;
  %r = fpext <4 x float> %a to <4 x double>
  ret <4 x double> %r
}

define <4 x i32> @test_bitcast_2xfloat_to_2xi32(<4 x float> %a) #0 {
; ALL-LABEL: 'test_bitcast_2xfloat_to_2xi32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %r = bitcast <4 x float> %a to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = bitcast <4 x float> %a to <4 x i32>
  ret <4 x i32> %r
}

define <4 x float> @test_bitcast_2xi32_to_2xfloat(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_bitcast_2xi32_to_2xfloat'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %r = bitcast <4 x i32> %a to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = bitcast <4 x i32> %a to <4 x float>
  ret <4 x float> %r
}

declare <4 x float> @llvm.sqrt.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.powi.v4f32(<4 x float> %a, i32 %b) #0
declare <4 x float> @llvm.sin.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.cos.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> %b) #0
declare <4 x float> @llvm.exp.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.exp2.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.log.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.log10.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.log2.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.fma.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c) #0
declare <4 x float> @llvm.fabs.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b) #0
declare <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b) #0
declare <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b) #0
declare <4 x float> @llvm.floor.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.ceil.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.trunc.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.rint.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.round.v4f32(<4 x float> %a) #0
declare <4 x float> @llvm.fmuladd.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c) #0

define <4 x float> @test_sqrt(<4 x float> %a) #0 {
; ALL-LABEL: 'test_sqrt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_powi(<4 x float> %a, i32 %b) #0 {
; ALL-LABEL: 'test_powi'
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = call <4 x float> @llvm.powi.v4f32.i32(<4 x float> %a, i32 %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.powi.v4f32(<4 x float> %a, i32 %b)
  ret <4 x float> %r
}

define <4 x float> @test_sin(<4 x float> %a) #0 {
; ALL-LABEL: 'test_sin'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.sin.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.sin.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_cos(<4 x float> %a) #0 {
; ALL-LABEL: 'test_cos'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.cos.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.cos.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_pow(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_pow'
; ALL-NEXT:  Cost Model: Found an estimated cost of 11 for instruction: %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.pow.v4f32(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %r
}

define <4 x float> @test_exp(<4 x float> %a) #0 {
; ALL-LABEL: 'test_exp'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.exp.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.exp.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_exp2(<4 x float> %a) #0 {
; ALL-LABEL: 'test_exp2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.exp2.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.exp2.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_log(<4 x float> %a) #0 {
; ALL-LABEL: 'test_log'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.log.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.log.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_log10(<4 x float> %a) #0 {
; ALL-LABEL: 'test_log10'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.log10.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.log10.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_log2(<4 x float> %a) #0 {
; ALL-LABEL: 'test_log2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.log2.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.log2.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_fma(<4 x float> %a, <4 x float> %b, <4 x float> %c) #0 {
; CV1-LABEL: 'test_fma'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = call <4 x float> @llvm.fma.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fma'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <4 x float> @llvm.fma.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.fma.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)
  ret <4 x float> %r
}

define <4 x float> @test_fabs(<4 x float> %a) #0 {
; ALL-LABEL: 'test_fabs'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <4 x float> @llvm.fabs.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.fabs.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_minnum(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_minnum'
; ALL-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %r
}

define <4 x float> @test_minnum_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_minnum_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r = call fast <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call fast <4 x float> @llvm.minnum.v4f32(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %r
}

define <4 x float> @test_maxnum(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_maxnum'
; ALL-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %r
}

define <4 x float> @test_maxnum_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_maxnum_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r = call fast <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call fast <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %r
}

define <4 x float> @test_copysign(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_copysign'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %r
}

define <4 x float> @test_copysign_v4f16(<4 x float> %a, <4 x half> %b) #0 {
; ALL-LABEL: 'test_copysign_v4f16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %tb = fpext <4 x half> %b to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %tb)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %tb = fpext <4 x half> %b to <4 x float>
  %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %tb)
  ret <4 x float> %r
}

define <4 x float> @test_copysign_v4f64(<4 x float> %a, <4 x double> %b) #0 {
; ALL-LABEL: 'test_copysign_v4f64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %tb = fptrunc <4 x double> %b to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %tb)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %tb = fptrunc <4 x double> %b to <4 x float>
  %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %tb)
  ret <4 x float> %r
}

define <4 x double> @test_copysign_extended(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'test_copysign_extended'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %xr = fpext <4 x float> %r to <4 x double>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x double> %xr
;
  %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %b)
  %xr = fpext <4 x float> %r to <4 x double>
  ret <4 x double> %xr
}

define <4 x float> @test_copysign_fp16(<4 x float> %a, <4 x half> %b) #0 {
; ALL-LABEL: 'test_copysign_fp16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %eb = fpext <4 x half> %b to <4 x float>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %eb)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %eb = fpext <4 x half> %b to <4 x float>
  %r = call <4 x float> @llvm.copysign.v4f32(<4 x float> %a, <4 x float> %eb)
  ret <4 x float> %r
}

define <4 x float> @test_floor(<4 x float> %a) #0 {
; ALL-LABEL: 'test_floor'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.floor.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.floor.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_ceil(<4 x float> %a) #0 {
; ALL-LABEL: 'test_ceil'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.ceil.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.ceil.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_trunc(<4 x float> %a) #0 {
; ALL-LABEL: 'test_trunc'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.trunc.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.trunc.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_rint(<4 x float> %a) #0 {
; ALL-LABEL: 'test_rint'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.rint.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.rint.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_nearbyint(<4 x float> %a) #0 {
; ALL-LABEL: 'test_nearbyint'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.nearbyint.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.nearbyint.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_round(<4 x float> %a) #0 {
; ALL-LABEL: 'test_round'
; ALL-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %r = call <4 x float> @llvm.round.v4f32(<4 x float> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.round.v4f32(<4 x float> %a)
  ret <4 x float> %r
}

define <4 x float> @test_fmuladd(<4 x float> %a, <4 x float> %b, <4 x float> %c) #0 {
; CV1-LABEL: 'test_fmuladd'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
; CV2-LABEL: 'test_fmuladd'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %r = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> %a, <4 x float> %b, <4 x float> %c)
  ret <4 x float> %r
}

define <4 x float> @test_shufflevector(<4 x float> %a) #0 {
; ALL-LABEL: 'test_shufflevector'
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %s = shufflevector <4 x float> %a, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %s
;
  %s = shufflevector <4 x float> %a, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  ret <4 x float> %s
}

define <4 x float> @test_insertelement0(<4 x float> %a, float %x) #0 {
; ALL-LABEL: 'test_insertelement0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x float> %a, float %x, i64 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %i
;
  %i = insertelement <4 x float> %a, float %x, i64 0
  ret <4 x float> %i
}

define <4 x float> @test_insertelement1(<4 x float> %a, float %x) #0 {
; ALL-LABEL: 'test_insertelement1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <4 x float> %a, float %x, i64 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %i
;
  %i = insertelement <4 x float> %a, float %x, i64 1
  ret <4 x float> %i
}

define <4 x float> @test_insertelement(<4 x float> %a, float %x, i64 %p) #0 {
; ALL-LABEL: 'test_insertelement'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %i = insertelement <4 x float> %a, float %x, i64 %p
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %i
;
  %i = insertelement <4 x float> %a, float %x, i64 %p
  ret <4 x float> %i
}

define <4 x i32> @fcmp_setoeq(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setoeq'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oeq <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp oeq <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setoeq_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setoeq_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oeq <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp oeq <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setogt(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setogt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ogt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ogt <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setogt_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setogt_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ogt <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ogt <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setoge(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setoge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oge <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp oge <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setoge_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setoge_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp oge <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp oge <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setolt(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setolt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp olt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp olt <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setolt_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setolt_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp olt <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp olt <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setole(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setole'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ole <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ole <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setole_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setole_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ole <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ole <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setone(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setone'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp one <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp one <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setone_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setone_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp one <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp one <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setord(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setord'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ord <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ord <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setord_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setord_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ord <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ord <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setuno(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setuno'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uno <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp uno <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setuno_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setuno_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uno <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp uno <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setueq(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setueq'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ueq <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ueq <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setueq_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setueq_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ueq <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ueq <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setugt(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setugt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ugt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ugt <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setugt_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setugt_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ugt <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ugt <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setuge(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setuge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uge <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp uge <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setuge_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setuge_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp uge <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp uge <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setult(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setult'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ult <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ult <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setult_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setult_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ult <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ult <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setule(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setule'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ule <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ule <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setule_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setule_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp ule <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp ule <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setune(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setune'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp une <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp une <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setune_single(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setune_single'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp une <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp une <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setoeq_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setoeq_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oeq <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast oeq <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setoeq_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setoeq_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oeq <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast oeq <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setogt_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setogt_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ogt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ogt <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setogt_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setogt_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ogt <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ogt <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setoge_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setoge_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oge <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast oge <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setoge_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setoge_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast oge <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast oge <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setolt_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setolt_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast olt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast olt <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setolt_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setolt_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast olt <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast olt <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setole_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setole_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ole <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ole <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setole_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setole_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ole <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ole <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setone_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setone_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast one <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast one <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setone_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setone_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast one <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast one <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setord_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setord_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ord <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ord <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setord_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setord_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ord <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ord <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setuno_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setuno_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uno <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast uno <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setuno_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setuno_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uno <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast uno <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setueq_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setueq_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ueq <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ueq <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setueq_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setueq_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ueq <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ueq <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setugt_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setugt_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ugt <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ugt <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setugt_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setugt_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ugt <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ugt <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setuge_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setuge_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uge <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast uge <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setuge_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setuge_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast uge <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast uge <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setult_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setult_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ult <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ult <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setult_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setult_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ult <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ult <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setule_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setule_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ule <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ule <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setule_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setule_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast ule <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast ule <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setune_fast(<4 x float> %a, <4 x float> %b) #0 {
; ALL-LABEL: 'fcmp_setune_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast une <4 x float> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast une <4 x float> %a, %b
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

define <4 x i32> @fcmp_setune_single_fast(<4 x float> %a) #0 {
; ALL-LABEL: 'fcmp_setune_single_fast'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = fcmp fast une <4 x float> %a, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i1> %0 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %1
;
entry:
  %0 = fcmp fast une <4 x float> %a, %a
  %1 = sext <4 x i1> %0 to <4 x i32>
  ret <4 x i32> %1
}

attributes #0 = { nounwind }

define <4 x float> @fms(<4 x float>, <4 x float>, <4 x float>) {
; CV1-LABEL: 'fms'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %4 = fmul fast <4 x float> %2, %1
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %5 = fsub fast <4 x float> %0, %4
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %5
;
; CV2-LABEL: 'fms'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = fmul fast <4 x float> %2, %1
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = fsub fast <4 x float> %0, %4
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %5
;
  %4 = fmul fast <4 x float> %2, %1
  %5 = fsub fast <4 x float> %0, %4
  ret <4 x float> %5
}

define void @subvec0fp(ptr %0) {
; ALL-LABEL: 'subvec0fp'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %3 = shufflevector <4 x float> zeroinitializer, <4 x float> undef, <2 x i32> <i32 0, i32 1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = fadd <2 x float> zeroinitializer, %3
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %5 = shufflevector <2 x float> %4, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = shufflevector <4 x float> %5, <4 x float> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x float> %6, ptr undef, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
;
  br label %2

2:
  %3 = shufflevector <4 x float> zeroinitializer, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = fadd <2 x float> zeroinitializer, %3
  %5 = shufflevector <2 x float> %4, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6 = shufflevector <4 x float> %5, <4 x float> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %6, ptr undef, align 16
  br label %2
}

define void @subvec2fp(ptr %0) {
; ALL-LABEL: 'subvec2fp'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %3 = shufflevector <4 x float> zeroinitializer, <4 x float> undef, <2 x i32> <i32 0, i32 1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = fadd <2 x float> zeroinitializer, %3
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %5 = shufflevector <2 x float> %4, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = shufflevector <4 x float> %5, <4 x float> zeroinitializer, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x float> %6, ptr undef, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
;
  br label %2

2:
  %3 = shufflevector <4 x float> zeroinitializer, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = fadd <2 x float> zeroinitializer, %3
  %5 = shufflevector <2 x float> %4, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6 = shufflevector <4 x float> %5, <4 x float> zeroinitializer, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  store <4 x float> %6, ptr undef, align 16
  br label %2
}

define <4 x float> @test_select_cmp(<4 x float> %a, <4 x float> %b, <4 x float> %c, <4 x float> %d) #0 {
; ALL-LABEL: 'test_select_cmp'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = fcmp une <4 x float> %c, %d
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %bc = bitcast <4 x i1> %cc to i4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cmp = icmp eq i4 %bc, -1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %cmp, <4 x float> %a, <4 x float> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x float> %r
;
  %cc = fcmp une <4 x float> %c, %d
  %bc = bitcast <4 x i1> %cc to i4
  %cmp = icmp eq i4 %bc, -1
  %r = select i1 %cmp, <4 x float> %a, <4 x float> %b
  ret <4 x float> %r
}
