; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefix=CV1
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefix=CV2

target triple = "kvx-kalray-cos"

define float @red_max_float2(<2 x float> %0) {
; CV1-LABEL: 'red_max_float2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call float @llvm.vector.reduce.fmax.v2f32(<2 x float> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
; CV2-LABEL: 'red_max_float2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call float @llvm.vector.reduce.fmax.v2f32(<2 x float> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
  %2 = tail call float @llvm.vector.reduce.fmax.v2f32(<2 x float> %0)
  ret float %2
}

declare float @llvm.vector.reduce.fmax.v2f32(<2 x float>)

define float @red_max_float4(<4 x float> %0) {
; CV1-LABEL: 'red_max_float4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call float @llvm.vector.reduce.fmax.v4f32(<4 x float> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
; CV2-LABEL: 'red_max_float4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call float @llvm.vector.reduce.fmax.v4f32(<4 x float> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
  %2 = tail call float @llvm.vector.reduce.fmax.v4f32(<4 x float> %0)
  ret float %2
}

declare float @llvm.vector.reduce.fmax.v4f32(<4 x float>)

define float @red_max_float8(<8 x float> %0) {
; CV1-LABEL: 'red_max_float8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %2 = tail call float @llvm.vector.reduce.fmax.v8f32(<8 x float> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
; CV2-LABEL: 'red_max_float8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %2 = tail call float @llvm.vector.reduce.fmax.v8f32(<8 x float> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
  %2 = tail call float @llvm.vector.reduce.fmax.v8f32(<8 x float> %0)
  ret float %2
}

declare float @llvm.vector.reduce.fmax.v8f32(<8 x float>)

define float @red_max_float16(ptr %0) {
; CV1-LABEL: 'red_max_float16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <16 x float>, ptr %0, align 64
; CV1-NEXT:  Cost Model: Found an estimated cost of 43 for instruction: %3 = tail call float @llvm.vector.reduce.fmax.v16f32(<16 x float> %2)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %3
;
; CV2-LABEL: 'red_max_float16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <16 x float>, ptr %0, align 64
; CV2-NEXT:  Cost Model: Found an estimated cost of 43 for instruction: %3 = tail call float @llvm.vector.reduce.fmax.v16f32(<16 x float> %2)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %3
;
  %2 = load <16 x float>, ptr %0
  %3 = tail call float @llvm.vector.reduce.fmax.v16f32(<16 x float> %2)
  ret float %3
}

declare float @llvm.vector.reduce.fmax.v16f32(<16 x float>)

define double @red_max_double2(<2 x double> %0) {
; CV1-LABEL: 'red_max_double2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call double @llvm.vector.reduce.fmax.v2f64(<2 x double> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %2
;
; CV2-LABEL: 'red_max_double2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call double @llvm.vector.reduce.fmax.v2f64(<2 x double> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %2
;
  %2 = tail call double @llvm.vector.reduce.fmax.v2f64(<2 x double> %0)
  ret double %2
}

declare double @llvm.vector.reduce.fmax.v2f64(<2 x double>)

define double @red_max_double4(<4 x double> %0) {
; CV1-LABEL: 'red_max_double4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call double @llvm.vector.reduce.fmax.v4f64(<4 x double> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %2
;
; CV2-LABEL: 'red_max_double4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call double @llvm.vector.reduce.fmax.v4f64(<4 x double> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %2
;
  %2 = tail call double @llvm.vector.reduce.fmax.v4f64(<4 x double> %0)
  ret double %2
}

declare double @llvm.vector.reduce.fmax.v4f64(<4 x double>)

define double @red_max_double8(ptr %0) {
; CV1-LABEL: 'red_max_double8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %2 = load <8 x double>, ptr %0, align 64
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %3 = tail call double @llvm.vector.reduce.fmax.v8f64(<8 x double> %2)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %3
;
; CV2-LABEL: 'red_max_double8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %2 = load <8 x double>, ptr %0, align 64
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %3 = tail call double @llvm.vector.reduce.fmax.v8f64(<8 x double> %2)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %3
;
  %2 = load <8 x double>, ptr %0
  %3 = tail call double @llvm.vector.reduce.fmax.v8f64(<8 x double> %2)
  ret double %3
}

declare double @llvm.vector.reduce.fmax.v8f64(<8 x double>)

define double @red_max_double16(ptr %0) {
; CV1-LABEL: 'red_max_double16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <16 x double>, ptr %0, align 128
; CV1-NEXT:  Cost Model: Found an estimated cost of 35 for instruction: %3 = tail call double @llvm.vector.reduce.fmax.v16f64(<16 x double> %2)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %3
;
; CV2-LABEL: 'red_max_double16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <16 x double>, ptr %0, align 128
; CV2-NEXT:  Cost Model: Found an estimated cost of 35 for instruction: %3 = tail call double @llvm.vector.reduce.fmax.v16f64(<16 x double> %2)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %3
;
  %2 = load <16 x double>, ptr %0
  %3 = tail call double @llvm.vector.reduce.fmax.v16f64(<16 x double> %2)
  ret double %3
}

declare double @llvm.vector.reduce.fmax.v16f64(<16 x double>)

define half @red_max_half2(<2 x half> %0) {
; CV1-LABEL: 'red_max_half2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call half @llvm.vector.reduce.fmax.v2f16(<2 x half> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
; CV2-LABEL: 'red_max_half2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call half @llvm.vector.reduce.fmax.v2f16(<2 x half> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
  %2 = tail call half @llvm.vector.reduce.fmax.v2f16(<2 x half> %0)
  ret half %2
}

declare half @llvm.vector.reduce.fmax.v2f16(<2 x half>)

define half @red_max_half4(<4 x half> %0) {
; CV1-LABEL: 'red_max_half4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call half @llvm.vector.reduce.fmax.v4f16(<4 x half> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
; CV2-LABEL: 'red_max_half4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call half @llvm.vector.reduce.fmax.v4f16(<4 x half> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
  %2 = tail call half @llvm.vector.reduce.fmax.v4f16(<4 x half> %0)
  ret half %2
}

declare half @llvm.vector.reduce.fmax.v4f16(<4 x half>)

define half @red_max_half8(<8 x half> %0) {
; CV1-LABEL: 'red_max_half8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %2 = tail call half @llvm.vector.reduce.fmax.v8f16(<8 x half> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
; CV2-LABEL: 'red_max_half8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %2 = tail call half @llvm.vector.reduce.fmax.v8f16(<8 x half> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
  %2 = tail call half @llvm.vector.reduce.fmax.v8f16(<8 x half> %0)
  ret half %2
}

declare half @llvm.vector.reduce.fmax.v8f16(<8 x half>)

define half @red_max_half16(<16 x half> %0) {
; CV1-LABEL: 'red_max_half16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 36 for instruction: %2 = tail call half @llvm.vector.reduce.fmax.v16f16(<16 x half> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
; CV2-LABEL: 'red_max_half16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 36 for instruction: %2 = tail call half @llvm.vector.reduce.fmax.v16f16(<16 x half> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
  %2 = tail call half @llvm.vector.reduce.fmax.v16f16(<16 x half> %0)
  ret half %2
}

declare half @llvm.vector.reduce.fmax.v16f16(<16 x half>)

define float @red_min_float2(<2 x float> %0) {
; CV1-LABEL: 'red_min_float2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call float @llvm.vector.reduce.fmin.v2f32(<2 x float> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
; CV2-LABEL: 'red_min_float2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call float @llvm.vector.reduce.fmin.v2f32(<2 x float> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
  %2 = tail call float @llvm.vector.reduce.fmin.v2f32(<2 x float> %0)
  ret float %2
}

declare float @llvm.vector.reduce.fmin.v2f32(<2 x float>)

define float @red_min_float4(<4 x float> %0) {
; CV1-LABEL: 'red_min_float4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call float @llvm.vector.reduce.fmin.v4f32(<4 x float> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
; CV2-LABEL: 'red_min_float4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call float @llvm.vector.reduce.fmin.v4f32(<4 x float> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
  %2 = tail call float @llvm.vector.reduce.fmin.v4f32(<4 x float> %0)
  ret float %2
}

declare float @llvm.vector.reduce.fmin.v4f32(<4 x float>)

define float @red_min_float8(<8 x float> %0) {
; CV1-LABEL: 'red_min_float8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %2 = tail call float @llvm.vector.reduce.fmin.v8f32(<8 x float> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
; CV2-LABEL: 'red_min_float8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %2 = tail call float @llvm.vector.reduce.fmin.v8f32(<8 x float> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %2
;
  %2 = tail call float @llvm.vector.reduce.fmin.v8f32(<8 x float> %0)
  ret float %2
}

declare float @llvm.vector.reduce.fmin.v8f32(<8 x float>)

define float @red_min_float16(ptr %0) {
; CV1-LABEL: 'red_min_float16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <16 x float>, ptr %0, align 64
; CV1-NEXT:  Cost Model: Found an estimated cost of 43 for instruction: %3 = tail call float @llvm.vector.reduce.fmin.v16f32(<16 x float> %2)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %3
;
; CV2-LABEL: 'red_min_float16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <16 x float>, ptr %0, align 64
; CV2-NEXT:  Cost Model: Found an estimated cost of 43 for instruction: %3 = tail call float @llvm.vector.reduce.fmin.v16f32(<16 x float> %2)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %3
;
  %2 = load <16 x float>, ptr %0
  %3 = tail call float @llvm.vector.reduce.fmin.v16f32(<16 x float> %2)
  ret float %3
}

declare float @llvm.vector.reduce.fmin.v16f32(<16 x float>)

define double @red_min_double2(<2 x double> %0) {
; CV1-LABEL: 'red_min_double2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call double @llvm.vector.reduce.fmin.v2f64(<2 x double> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %2
;
; CV2-LABEL: 'red_min_double2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call double @llvm.vector.reduce.fmin.v2f64(<2 x double> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %2
;
  %2 = tail call double @llvm.vector.reduce.fmin.v2f64(<2 x double> %0)
  ret double %2
}

declare double @llvm.vector.reduce.fmin.v2f64(<2 x double>)

define double @red_min_double4(<4 x double> %0) {
; CV1-LABEL: 'red_min_double4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call double @llvm.vector.reduce.fmin.v4f64(<4 x double> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %2
;
; CV2-LABEL: 'red_min_double4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call double @llvm.vector.reduce.fmin.v4f64(<4 x double> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %2
;
  %2 = tail call double @llvm.vector.reduce.fmin.v4f64(<4 x double> %0)
  ret double %2
}

declare double @llvm.vector.reduce.fmin.v4f64(<4 x double>)

define double @red_min_double8(ptr %0) {
; CV1-LABEL: 'red_min_double8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %2 = load <8 x double>, ptr %0, align 64
; CV1-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %3 = tail call double @llvm.vector.reduce.fmin.v8f64(<8 x double> %2)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %3
;
; CV2-LABEL: 'red_min_double8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %2 = load <8 x double>, ptr %0, align 64
; CV2-NEXT:  Cost Model: Found an estimated cost of 18 for instruction: %3 = tail call double @llvm.vector.reduce.fmin.v8f64(<8 x double> %2)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %3
;
  %2 = load <8 x double>, ptr %0
  %3 = tail call double @llvm.vector.reduce.fmin.v8f64(<8 x double> %2)
  ret double %3
}

declare double @llvm.vector.reduce.fmin.v8f64(<8 x double>)

define double @red_min_double16(ptr %0) {
; CV1-LABEL: 'red_min_double16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <16 x double>, ptr %0, align 128
; CV1-NEXT:  Cost Model: Found an estimated cost of 35 for instruction: %3 = tail call double @llvm.vector.reduce.fmin.v16f64(<16 x double> %2)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %3
;
; CV2-LABEL: 'red_min_double16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <16 x double>, ptr %0, align 128
; CV2-NEXT:  Cost Model: Found an estimated cost of 35 for instruction: %3 = tail call double @llvm.vector.reduce.fmin.v16f64(<16 x double> %2)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %3
;
  %2 = load <16 x double>, ptr %0
  %3 = tail call double @llvm.vector.reduce.fmin.v16f64(<16 x double> %2)
  ret double %3
}

declare double @llvm.vector.reduce.fmin.v16f64(<16 x double>)

define half @red_min_half2(<2 x half> %0) {
; CV1-LABEL: 'red_min_half2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call half @llvm.vector.reduce.fmin.v2f16(<2 x half> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
; CV2-LABEL: 'red_min_half2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %2 = tail call half @llvm.vector.reduce.fmin.v2f16(<2 x half> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
  %2 = tail call half @llvm.vector.reduce.fmin.v2f16(<2 x half> %0)
  ret half %2
}

declare half @llvm.vector.reduce.fmin.v2f16(<2 x half>)

define half @red_min_half4(<4 x half> %0) {
; CV1-LABEL: 'red_min_half4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call half @llvm.vector.reduce.fmin.v4f16(<4 x half> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
; CV2-LABEL: 'red_min_half4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 10 for instruction: %2 = tail call half @llvm.vector.reduce.fmin.v4f16(<4 x half> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
  %2 = tail call half @llvm.vector.reduce.fmin.v4f16(<4 x half> %0)
  ret half %2
}

declare half @llvm.vector.reduce.fmin.v4f16(<4 x half>)

define half @red_min_half8(<8 x half> %0) {
; CV1-LABEL: 'red_min_half8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %2 = tail call half @llvm.vector.reduce.fmin.v8f16(<8 x half> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
; CV2-LABEL: 'red_min_half8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 19 for instruction: %2 = tail call half @llvm.vector.reduce.fmin.v8f16(<8 x half> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
  %2 = tail call half @llvm.vector.reduce.fmin.v8f16(<8 x half> %0)
  ret half %2
}

declare half @llvm.vector.reduce.fmin.v8f16(<8 x half>)

define half @red_min_half16(<16 x half> %0) {
; CV1-LABEL: 'red_min_half16'
; CV1-NEXT:  Cost Model: Found an estimated cost of 36 for instruction: %2 = tail call half @llvm.vector.reduce.fmin.v16f16(<16 x half> %0)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
; CV2-LABEL: 'red_min_half16'
; CV2-NEXT:  Cost Model: Found an estimated cost of 36 for instruction: %2 = tail call half @llvm.vector.reduce.fmin.v16f16(<16 x half> %0)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret half %2
;
  %2 = tail call half @llvm.vector.reduce.fmin.v16f16(<16 x half> %0)
  ret half %2
}

declare half @llvm.vector.reduce.fmin.v16f16(<16 x half>)

