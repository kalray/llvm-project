; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV1 --allow-unused-prefixes
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV2 --allow-unused-prefixes

target triple = "kvx-kalray-cos"
define void @PHIS() {
; ALL-LABEL: 'PHIS'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %loop
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i1 = phi i1 [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %phi_i1v2 = phi <2 x i1> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %phi_i1v4 = phi <4 x i1> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %phi_i1v8 = phi <8 x i1> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %phi_i1v16 = phi <16 x i1> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %phi_i1v32 = phi <32 x i1> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f16 = phi half [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f16v2 = phi <2 x half> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f16v4 = phi <4 x half> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f16v8 = phi <8 x half> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f16v16 = phi <16 x half> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f16v32 = phi <32 x half> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f32 = phi float [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f32v2 = phi <2 x float> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f32v4 = phi <4 x float> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f32v8 = phi <8 x float> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f32v16 = phi <16 x float> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f64 = phi double [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f64v2 = phi <2 x double> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f64v4 = phi <4 x double> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_f64v8 = phi <8 x double> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i2 = phi i2 [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i2v2 = phi <2 x i2> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i2v4 = phi <4 x i2> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i2v8 = phi <8 x i2> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i2v16 = phi <16 x i2> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i2v32 = phi <32 x i2> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i4 = phi i4 [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i4v2 = phi <2 x i4> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i4v4 = phi <4 x i4> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i4v8 = phi <8 x i4> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i4v16 = phi <16 x i4> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i4v32 = phi <32 x i4> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i8 = phi i8 [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i8v2 = phi <2 x i8> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i8v4 = phi <4 x i8> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i8v8 = phi <8 x i8> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i8v16 = phi <16 x i8> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i8v32 = phi <32 x i8> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i16 = phi i16 [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i16v2 = phi <2 x i16> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i16v4 = phi <4 x i16> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i16v8 = phi <8 x i16> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i16v16 = phi <16 x i16> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i16v32 = phi <32 x i16> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i32 = phi i32 [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i32v2 = phi <2 x i32> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i32v4 = phi <4 x i32> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i32v8 = phi <8 x i32> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i32v16 = phi <16 x i32> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i64 = phi i64 [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i64v2 = phi <2 x i64> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i64v4 = phi <4 x i64> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i64v8 = phi <8 x i64> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i128 = phi i128 [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i128v2 = phi <2 x i128> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %phi_i128v4 = phi <4 x i128> [ undef, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %loop
;
entry:
  br label %loop

loop:
  %phi_i1 = phi i1 [ undef, %loop ], [ undef, %entry ]
  %phi_i1v2 = phi <2 x i1> [ undef, %loop ], [ undef, %entry ]
  %phi_i1v4 = phi <4 x i1> [ undef, %loop ], [ undef, %entry ]
  %phi_i1v8 = phi <8 x i1> [ undef, %loop ], [ undef, %entry ]
  %phi_i1v16 = phi <16 x i1> [ undef, %loop ], [ undef, %entry ]
  %phi_i1v32 = phi <32 x i1> [ undef, %loop ], [ undef, %entry ]

  %phi_f16 = phi half [ undef, %loop ], [ undef, %entry ]
  %phi_f16v2 = phi <2 x half> [ undef, %loop ], [ undef, %entry ]
  %phi_f16v4 = phi <4 x half> [ undef, %loop ], [ undef, %entry ]
  %phi_f16v8 = phi <8 x half> [ undef, %loop ], [ undef, %entry ]
  %phi_f16v16 = phi <16 x half> [ undef, %loop ], [ undef, %entry ]
  %phi_f16v32 = phi <32 x half> [ undef, %loop ], [ undef, %entry ]
  %phi_f32 = phi float [ undef, %loop ], [ undef, %entry ]
  %phi_f32v2 = phi <2 x float> [ undef, %loop ], [ undef, %entry ]
  %phi_f32v4 = phi <4 x float> [ undef, %loop ], [ undef, %entry ]
  %phi_f32v8 = phi <8 x float> [ undef, %loop ], [ undef, %entry ]
  %phi_f32v16 = phi <16 x float> [ undef, %loop ], [ undef, %entry ]
  %phi_f64 = phi double [ undef, %loop ], [ undef, %entry ]
  %phi_f64v2 = phi <2 x double> [ undef, %loop ], [ undef, %entry ]
  %phi_f64v4 = phi <4 x double> [ undef, %loop ], [ undef, %entry ]
  %phi_f64v8 = phi <8 x double> [ undef, %loop ], [ undef, %entry ]
  %phi_i2 = phi i2 [ undef, %loop ], [ undef, %entry ]
  %phi_i2v2 = phi <2 x i2> [ undef, %loop ], [ undef, %entry ]
  %phi_i2v4 = phi <4 x i2> [ undef, %loop ], [ undef, %entry ]
  %phi_i2v8 = phi <8 x i2> [ undef, %loop ], [ undef, %entry ]
  %phi_i2v16 = phi <16 x i2> [ undef, %loop ], [ undef, %entry ]
  %phi_i2v32 = phi <32 x i2> [ undef, %loop ], [ undef, %entry ]
  %phi_i4 = phi i4 [ undef, %loop ], [ undef, %entry ]
  %phi_i4v2 = phi <2 x i4> [ undef, %loop ], [ undef, %entry ]
  %phi_i4v4 = phi <4 x i4> [ undef, %loop ], [ undef, %entry ]
  %phi_i4v8 = phi <8 x i4> [ undef, %loop ], [ undef, %entry ]
  %phi_i4v16 = phi <16 x i4> [ undef, %loop ], [ undef, %entry ]
  %phi_i4v32 = phi <32 x i4> [ undef, %loop ], [ undef, %entry ]
  %phi_i8 = phi i8 [ undef, %loop ], [ undef, %entry ]
  %phi_i8v2 = phi <2 x i8> [ undef, %loop ], [ undef, %entry ]
  %phi_i8v4 = phi <4 x i8> [ undef, %loop ], [ undef, %entry ]
  %phi_i8v8 = phi <8 x i8> [ undef, %loop ], [ undef, %entry ]
  %phi_i8v16 = phi <16 x i8> [ undef, %loop ], [ undef, %entry ]
  %phi_i8v32 = phi <32 x i8> [ undef, %loop ], [ undef, %entry ]
  %phi_i16 = phi i16 [ undef, %loop ], [ undef, %entry ]
  %phi_i16v2 = phi <2 x i16> [ undef, %loop ], [ undef, %entry ]
  %phi_i16v4 = phi <4 x i16> [ undef, %loop ], [ undef, %entry ]
  %phi_i16v8 = phi <8 x i16> [ undef, %loop ], [ undef, %entry ]
  %phi_i16v16 = phi <16 x i16> [ undef, %loop ], [ undef, %entry ]
  %phi_i16v32 = phi <32 x i16> [ undef, %loop ], [ undef, %entry ]
  %phi_i32 = phi i32 [ undef, %loop ], [ undef, %entry ]
  %phi_i32v2 = phi <2 x i32> [ undef, %loop ], [ undef, %entry ]
  %phi_i32v4 = phi <4 x i32> [ undef, %loop ], [ undef, %entry ]
  %phi_i32v8 = phi <8 x i32> [ undef, %loop ], [ undef, %entry ]
  %phi_i32v16 = phi <16 x i32> [ undef, %loop ], [ undef, %entry ]
  %phi_i64 = phi i64 [ undef, %loop ], [ undef, %entry ]
  %phi_i64v2 = phi <2 x i64> [ undef, %loop ], [ undef, %entry ]
  %phi_i64v4 = phi <4 x i64> [ undef, %loop ], [ undef, %entry ]
  %phi_i64v8 = phi <8 x i64> [ undef, %loop ], [ undef, %entry ]
  %phi_i128 = phi i128 [ undef, %loop ], [ undef, %entry ]
  %phi_i128v2 = phi <2 x i128> [ undef, %loop ], [ undef, %entry ]
  %phi_i128v4 = phi <4 x i128> [ undef, %loop ], [ undef, %entry ]

  br label %loop
}
