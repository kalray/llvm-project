; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV1 --allow-unused-prefixes
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV2 --allow-unused-prefixes

target triple = "kvx-kalray-cos"

define <4 x i32> @test_ret_const() #0 {
; ALL-LABEL: 'test_ret_const'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> <i32 1, i32 2, i32 1, i32 2>
;
  ret <4 x i32> <i32 1, i32 2, i32 1, i32 2>
}

define i32 @test_extract_0(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_extract_0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <4 x i32> %a, i32 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i32 %e
;
  %e = extractelement <4 x i32> %a, i32 0
  ret i32 %e
}

define i32 @test_extract_1(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_extract_1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <4 x i32> %a, i32 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i32 %e
;
  %e = extractelement <4 x i32> %a, i32 1
  ret i32 %e
}

define <4 x i32> @test_fma(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c) #0 {
; ALL-LABEL: 'test_fma'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %m = mul <4 x i32> %b, %c
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %ad = add <4 x i32> %a, %m
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %ad
;
  %m = mul <4 x i32> %b, %c
  %ad = add <4 x i32> %a, %m
  ret <4 x i32> %ad
}

define <4 x i32> @test_fma_imm(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_fma_imm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %m = mul <4 x i32> <i32 1, i32 2, i32 1, i32 2>, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %ad = add <4 x i32> %a, %m
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %ad
;
  %m = mul <4 x i32> <i32 1, i32 2, i32 1, i32 2>, %b
  %ad = add <4 x i32> %a, %m
  ret <4 x i32> %ad
}


define i32 @test_extract_i(<4 x i32> %a, i64 %idx) #0 {
; ALL-LABEL: 'test_extract_i'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %e = extractelement <4 x i32> %a, i64 %idx
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i32 %e
;
  %e = extractelement <4 x i32> %a, i64 %idx
  ret i32 %e
}

define <4 x i32> @test_add(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_add'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = add <4 x i32> %a, %b
  ret <4 x i32> %r
}

define <4 x i32> @test_add_imm_0(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_add_imm_0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <4 x i32> <i32 1, i32 2, i32 1, i32 2>, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = add <4 x i32> <i32 1, i32 2, i32 1, i32 2>, %a
  ret <4 x i32> %r
}

define <4 x i32> @test_add_imm_1(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_add_imm_1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <4 x i32> %a, <i32 1, i32 2, i32 1, i32 2>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = add <4 x i32> %a, <i32 1, i32 2, i32 1, i32 2>
  ret <4 x i32> %r
}

define <4 x i32> @test_sub(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_sub'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = sub <4 x i32> %a, %b
  ret <4 x i32> %r
}

define <4 x i32> @test_sub_imm(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_sub_imm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <4 x i32> %a, <i32 1, i32 2, i32 1, i32 2>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = sub <4 x i32> %a, <i32 1, i32 2, i32 1, i32 2>
  ret <4 x i32> %r
}

define <4 x i32> @test_sub_fromimm(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_sub_fromimm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <4 x i32> <i32 1, i32 2, i32 1, i32 2>, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = sub <4 x i32> <i32 1, i32 2, i32 1, i32 2>, %a
  ret <4 x i32> %r
}

define <4 x i32> @test_neg(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_neg'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <4 x i32> zeroinitializer, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = sub <4 x i32> <i32 0, i32 0, i32 0, i32 0>, %a
  ret <4 x i32> %r
}

define <4 x i32> @test_mul(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_mul'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = mul <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = mul <4 x i32> %a, %b
  ret <4 x i32> %r
}

define <4 x i32> @test_mul_2(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c) #0 {
; ALL-LABEL: 'test_mul_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = mul <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r1 = mul <4 x i32> %r, %c
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r1
;
  %r = mul <4 x i32> %a, %b
  %r1 = mul <4 x i32> %r, %c
  ret <4 x i32> %r1
}

define <4 x i32> @test_div(<4 x i32> %a, <4 x i32> %b) #0 {
; CV1-LABEL: 'test_div'
; CV1-NEXT:  Cost Model: Found an estimated cost of 90 for instruction: %r = sdiv <4 x i32> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
; CV2-LABEL: 'test_div'
; CV2-NEXT:  Cost Model: Found an estimated cost of 58 for instruction: %r = sdiv <4 x i32> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = sdiv <4 x i32> %a, %b
  ret <4 x i32> %r
}

define <4 x i32> @test_rem(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_rem'
; ALL-NEXT:  Cost Model: Found an estimated cost of 91 for instruction: %r = srem <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = srem <4 x i32> %a, %b
  ret <4 x i32> %r
}

define void @test_ldst_v4i32(ptr %a, ptr %b) {
; ALL-LABEL: 'test_ldst_v4i32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %t1 = load <4 x i32>, ptr %a, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i32> %t1, ptr %b, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %t1 = load <4 x i32>, ptr %a
  store <4 x i32> %t1, ptr %b, align 16
  ret void
}

declare <4 x i32> @test_callee(<4 x i32> %a, <4 x i32> %b) #0

define <4 x i32> @test_call(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_call'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i32> @test_callee(<4 x i32> %a, <4 x i32> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = call <4 x i32> @test_callee(<4 x i32> %a, <4 x i32> %b)
  ret <4 x i32> %r
}

define <4 x i32> @test_call_flipped(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_call_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i32> @test_callee(<4 x i32> %b, <4 x i32> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = call <4 x i32> @test_callee(<4 x i32> %b, <4 x i32> %a)
  ret <4 x i32> %r
}

define <4 x i32> @test_tailcall_flipped(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_tailcall_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <4 x i32> @test_callee(<4 x i32> %b, <4 x i32> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = tail call <4 x i32> @test_callee(<4 x i32> %b, <4 x i32> %a)
  ret <4 x i32> %r
}

define <4 x i32> @test_select(<4 x i32> %a, <4 x i32> %b, i1 zeroext %c) #0 {
; ALL-LABEL: 'test_select'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <4 x i32> %a, <4 x i32> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = select i1 %c, <4 x i32> %a, <4 x i32> %b
  ret <4 x i32> %r
}

define <4 x i32> @test_select_cc(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c, <4 x i32> %d) #0 {
; ALL-LABEL: 'test_select_cc'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp slt <4 x i32> %c, %d
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <4 x i1> %cc, <4 x i32> %a, <4 x i32> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %cc = icmp slt <4 x i32> %c, %d
  %r = select <4 x i1> %cc, <4 x i32> %a, <4 x i32> %b
  ret <4 x i32> %r
}

define <4 x i64> @test_select_cc_f32_f32(<4 x i64> %a, <4 x i64> %b, <4 x i32> %c, <4 x i32> %d) #0 {
; ALL-LABEL: 'test_select_cc_f32_f32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp ult <4 x i32> %c, %d
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %cc = icmp ult <4 x i32> %c, %d
  %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i1> @test_icmp_ule(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_icmp_ule'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ule <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ule <4 x i32> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_slt(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_icmp_slt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp slt <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp slt <4 x i32> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ugt(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_icmp_ugt'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ugt <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ugt <4 x i32> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_uge(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_icmp_uge'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp uge <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp uge <4 x i32> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ult(<4 x i32> %a, <4 x i32> %b) #0 {
; ALL-LABEL: 'test_icmp_ult'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ult <4 x i32> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ult <4 x i32> %a, %b
  ret <4 x i1> %r
}

define <4 x i64> @test_sext_2xi64(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_sext_2xi64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sext <4 x i32> %a to <4 x i64>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = sext <4 x i32> %a to <4 x i64>
  ret <4 x i64> %r
}

declare <4 x i32> @llvm.abs.v4i32(<4 x i32>, i1) #0

define <4 x i32> @test_abs(<4 x i32> %a) #0 {
; ALL-LABEL: 'test_abs'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %a, i1 false)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %a, i1 false)
  ret <4 x i32> %r
}

define <4 x i32> @test_insertelement0(<4 x i32> %a, i32 %x) #0 {
; ALL-LABEL: 'test_insertelement0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i32> %a, i32 %x, i64 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %i
;
  %i = insertelement <4 x i32> %a, i32 %x, i64 0
  ret <4 x i32> %i
}

define <4 x i32> @test_insertelement1(<4 x i32> %a, i32 %x) #0 {
; ALL-LABEL: 'test_insertelement1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <4 x i32> %a, i32 %x, i64 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %i
;
  %i = insertelement <4 x i32> %a, i32 %x, i64 1
  ret <4 x i32> %i
}

define <4 x i32> @test_insertelement2(<4 x i32> %a, i32 %x) #0 {
; ALL-LABEL: 'test_insertelement2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i32> %a, i32 %x, i64 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %i
;
  %i = insertelement <4 x i32> %a, i32 %x, i64 2
  ret <4 x i32> %i
}

define <4 x i32> @test_insertelement3(<4 x i32> %a, i32 %x) #0 {
; ALL-LABEL: 'test_insertelement3'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <4 x i32> %a, i32 %x, i64 3
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %i
;
  %i = insertelement <4 x i32> %a, i32 %x, i64 3
  ret <4 x i32> %i
}

define <4 x i32> @test_insertelement(<4 x i32> %a, i32 %x, i64 %p) #0 {
; ALL-LABEL: 'test_insertelement'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %i = insertelement <4 x i32> %a, i32 %x, i64 %p
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %i
;
  %i = insertelement <4 x i32> %a, i32 %x, i64 %p
  ret <4 x i32> %i
}

define <4 x i8> @trunc_to_v4i8(<4 x i32> %a) {
; ALL-LABEL: 'trunc_to_v4i8'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = trunc <4 x i32> %a to <4 x i8>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = trunc <4 x i32> %a to <4 x i8>
  ret <4 x i8> %r
}

define <4 x i8> @trunc_to_v4i8_buildvector(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) {
; ALL-LABEL: 'trunc_to_v4i8_buildvector'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v0 = insertelement <4 x i32> undef, i32 %arg1, i32 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %v1 = insertelement <4 x i32> %v0, i32 %arg2, i32 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v2 = insertelement <4 x i32> %v1, i32 %arg3, i32 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %v3 = insertelement <4 x i32> %v2, i32 %arg4, i32 3
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %conv = trunc <4 x i32> %v3 to <4 x i8>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %conv
;
  %v0 = insertelement <4 x i32> undef, i32 %arg1, i32 0
  %v1 = insertelement <4 x i32> %v0, i32 %arg2, i32 1
  %v2 = insertelement <4 x i32> %v1, i32 %arg3, i32 2
  %v3 = insertelement <4 x i32> %v2, i32 %arg4, i32 3
  %conv = trunc <4 x i32> %v3 to <4 x i8>
  ret <4 x i8> %conv
}

define <4 x i32> @concat(<2 x i32> %a, <2 x i32> %b){
; ALL-LABEL: 'concat'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %v = shufflevector <2 x i32> %a, <2 x i32> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %v
;
  %v = shufflevector <2 x i32> %a, <2 x i32> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %v
}

define <4 x i32> @revconcat(<2 x i32> %b, <2 x i32> %a){
; ALL-LABEL: 'revconcat'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %v = shufflevector <2 x i32> %a, <2 x i32> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %v
;
  %v = shufflevector <2 x i32> %a, <2 x i32> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %v
}

define void @bug() {
; ALL-LABEL: 'bug'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %loop
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %0 = phi <4 x i32> [ %1, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %1 = insertelement <4 x i32> %0, i32 0, i64 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = extractelement <4 x i32> %0, i32 3
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %loop
;
entry:
  br label %loop

loop:
  %0 = phi <4 x i32> [ %1, %loop ], [ undef, %entry ]
  %1 = insertelement <4 x i32> %0, i32 0, i64 2
  %2 = extractelement <4 x i32> %0, i32 3
  br label %loop
}

define void @bug2() {
; ALL-LABEL: 'bug2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %loop
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %0 = phi <4 x i32> [ %1, %loop ], [ undef, %entry ]
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = insertelement <4 x i32> %0, i32 0, i64 3
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %2 = extractelement <4 x i32> %0, i32 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %loop
;
entry:
  br label %loop

loop:
  %0 = phi <4 x i32> [ %1, %loop ], [ undef, %entry ]
  %1 = insertelement <4 x i32> %0, i32 0, i64 3
  %2 = extractelement <4 x i32> %0, i32 2
  br label %loop
}

define <4 x i32> @MULHWQ(<4 x i16> %a, <4 x i16> %b) {
; ALL-LABEL: 'MULHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = sext <4 x i16> %a to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i16> %b to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %mul = mul nsw <4 x i32> %1, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %mul
;
entry:
  %0 = sext <4 x i16> %a to <4 x i32>
  %1 = sext <4 x i16> %b to <4 x i32>
  %mul = mul nsw <4 x i32> %1, %0
  ret <4 x i32> %mul
}

define <4 x i32> @MULSUHWQ(<4 x i16> %a, <4 x i16> %b) {
; ALL-LABEL: 'MULSUHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = sext <4 x i16> %a to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = zext <4 x i16> %b to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %mul = mul nsw <4 x i32> %1, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %mul
;
entry:
  %0 = sext <4 x i16> %a to <4 x i32>
  %1 = zext <4 x i16> %b to <4 x i32>
  %mul = mul nsw <4 x i32> %1, %0
  ret <4 x i32> %mul
}

define <4 x i32> @MULUHWQ(<4 x i16> %a, <4 x i16> %b) {
; ALL-LABEL: 'MULUHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = zext <4 x i16> %a to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = zext <4 x i16> %b to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %mul = mul nuw <4 x i32> %1, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %mul
;
entry:
  %0 = zext <4 x i16> %a to <4 x i32>
  %1 = zext <4 x i16> %b to <4 x i32>
  %mul = mul nuw <4 x i32> %1, %0
  ret <4 x i32> %mul
}

define <4 x i32> @MADDHWQ(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) {
; ALL-LABEL: 'MADDHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <4 x i16> %1 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = sext <4 x i16> %2 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %6 = mul nsw <4 x i32> %5, %4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %7 = add <4 x i32> %6, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %7
;
  %4 = sext <4 x i16> %1 to <4 x i32>
  %5 = sext <4 x i16> %2 to <4 x i32>
  %6 = mul nsw <4 x i32> %5, %4
  %7 = add <4 x i32> %6, %0
  ret <4 x i32> %7
}

define <4 x i32> @MADDSUHWQ(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) {
; ALL-LABEL: 'MADDSUHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <4 x i16> %1 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <4 x i16> %2 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %6 = mul nsw <4 x i32> %5, %4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %7 = add <4 x i32> %6, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %7
;
  %4 = sext <4 x i16> %1 to <4 x i32>
  %5 = zext <4 x i16> %2 to <4 x i32>
  %6 = mul nsw <4 x i32> %5, %4
  %7 = add <4 x i32> %6, %0
  ret <4 x i32> %7
}

define <4 x i32> @MADDUHWQ(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) {
; ALL-LABEL: 'MADDUHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = zext <4 x i16> %1 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <4 x i16> %2 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %6 = mul nuw <4 x i32> %5, %4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %7 = add <4 x i32> %6, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %7
;
  %4 = zext <4 x i16> %1 to <4 x i32>
  %5 = zext <4 x i16> %2 to <4 x i32>
  %6 = mul nuw <4 x i32> %5, %4
  %7 = add <4 x i32> %6, %0
  ret <4 x i32> %7
}

define <3 x i32> @MADDSUHWQ_v3(<3 x i32> %0, <3 x i16> %1, <3 x i16> %2) {
; ALL-LABEL: 'MADDSUHWQ_v3'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <3 x i16> %1 to <3 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <3 x i16> %2 to <3 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %6 = mul nsw <3 x i32> %5, %4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %7 = add <3 x i32> %6, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <3 x i32> %7
;
  %4 = sext <3 x i16> %1 to <3 x i32>
  %5 = zext <3 x i16> %2 to <3 x i32>
  %6 = mul nsw <3 x i32> %5, %4
  %7 = add <3 x i32> %6, %0
  ret <3 x i32> %7
}


define <4 x i32> @MSBFHWQ(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) {
; ALL-LABEL: 'MSBFHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <4 x i16> %1 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = sext <4 x i16> %2 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %6 = mul nsw <4 x i32> %5, %4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %7 = sub <4 x i32> %0, %6
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %7
;
  %4 = sext <4 x i16> %1 to <4 x i32>
  %5 = sext <4 x i16> %2 to <4 x i32>
  %6 = mul nsw <4 x i32> %5, %4
  %7 = sub <4 x i32> %0, %6
  ret <4 x i32> %7
}

define <4 x i32> @MSBFSUHWQ(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) {
; ALL-LABEL: 'MSBFSUHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <4 x i16> %1 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <4 x i16> %2 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %6 = mul nsw <4 x i32> %5, %4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %7 = sub <4 x i32> %0, %6
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %7
;
  %4 = sext <4 x i16> %1 to <4 x i32>
  %5 = zext <4 x i16> %2 to <4 x i32>
  %6 = mul nsw <4 x i32> %5, %4
  %7 = sub <4 x i32> %0, %6
  ret <4 x i32> %7
}

define <4 x i32> @MSBFUHWQ(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) {
; ALL-LABEL: 'MSBFUHWQ'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = zext <4 x i16> %1 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <4 x i16> %2 to <4 x i32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %6 = mul nuw <4 x i32> %5, %4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %7 = sub <4 x i32> %0, %6
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %7
;
  %4 = zext <4 x i16> %1 to <4 x i32>
  %5 = zext <4 x i16> %2 to <4 x i32>
  %6 = mul nuw <4 x i32> %5, %4
  %7 = sub <4 x i32> %0, %6
  ret <4 x i32> %7
}

attributes #0 = { nounwind }

define <4 x i32> @test_div_4(<4 x i32> %a, <4 x i32> %b) #0 {
; CV1-LABEL: 'test_div_4'
; CV1-NEXT:  Cost Model: Found an estimated cost of 90 for instruction: %r = sdiv <4 x i32> %a, <i32 4, i32 4, i32 4, i32 4>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
; CV2-LABEL: 'test_div_4'
; CV2-NEXT:  Cost Model: Found an estimated cost of 58 for instruction: %r = sdiv <4 x i32> %a, <i32 4, i32 4, i32 4, i32 4>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = sdiv <4 x i32> %a, <i32 4, i32 4, i32 4, i32 4>
  ret <4 x i32> %r
}

define <4 x i32> @test_div_32(<4 x i32> %a, <4 x i32> %b) #0 {
; CV1-LABEL: 'test_div_32'
; CV1-NEXT:  Cost Model: Found an estimated cost of 90 for instruction: %r = sdiv <4 x i32> %a, <i32 32, i32 32, i32 32, i32 32>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
; CV2-LABEL: 'test_div_32'
; CV2-NEXT:  Cost Model: Found an estimated cost of 58 for instruction: %r = sdiv <4 x i32> %a, <i32 32, i32 32, i32 32, i32 32>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %r = sdiv <4 x i32> %a, <i32 32, i32 32, i32 32, i32 32>
  ret <4 x i32> %r
}

define void @subvec0(ptr %0) {
; ALL-LABEL: 'subvec0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %3 = shufflevector <4 x i32> zeroinitializer, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = add nsw <2 x i32> zeroinitializer, %3
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %5 = shufflevector <2 x i32> %4, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = shufflevector <4 x i32> %5, <4 x i32> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i32> %6, ptr undef, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
;
  br label %2

2:
  %3 = shufflevector <4 x i32> zeroinitializer, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %4 = add nsw <2 x i32> zeroinitializer, %3
  %5 = shufflevector <2 x i32> %4, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6 = shufflevector <4 x i32> %5, <4 x i32> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i32> %6, ptr undef, align 16
  br label %2
}

define void @subvec2(ptr %0) {
; ALL-LABEL: 'subvec2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %3 = shufflevector <4 x i32> zeroinitializer, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = add nsw <2 x i32> zeroinitializer, %3
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %5 = shufflevector <2 x i32> %4, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = shufflevector <4 x i32> %5, <4 x i32> zeroinitializer, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i32> %6, ptr undef, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
;
  br label %2

2:
  %3 = shufflevector <4 x i32> zeroinitializer, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %4 = add nsw <2 x i32> zeroinitializer, %3
  %5 = shufflevector <2 x i32> %4, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6 = shufflevector <4 x i32> %5, <4 x i32> zeroinitializer, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  store <4 x i32> %6, ptr undef, align 16
  br label %2
}

define <4 x i32> @test_select_cmp(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c, <4 x i32> %d) #0 {
; ALL-LABEL: 'test_select_cmp'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp ne <4 x i32> %c, %d
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %bc = bitcast <4 x i1> %cc to i4
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cmp = icmp eq i4 %bc, -1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %cmp, <4 x i32> %a, <4 x i32> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i32> %r
;
  %cc = icmp ne <4 x i32> %c, %d
  %bc = bitcast <4 x i1> %cc to i4
  %cmp = icmp eq i4 %bc, -1
  %r = select i1 %cmp, <4 x i32> %a, <4 x i32> %b
  ret <4 x i32> %r
}
