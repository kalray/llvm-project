; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefix=CV1
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefix=CV2

target triple = "kvx-kalray-cos"

define void @fpcosts() {
; CV1-LABEL: 'fpcosts'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddf16 = fadd half undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fdivf16 = fdiv half undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmaf16 = call half @llvm.fma.f16(half undef, half undef, half undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdf16 = call half @llvm.fmuladd.f16(half undef, half undef, half undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulf16 = fmul half undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubf16 = fsub half undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsf32 = call float @llvm.fabs.f32(float undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddf32 = fadd float undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmaf32 = call float @llvm.fma.f32(float undef, float undef, float undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulf32 = fmul float undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fdivf32 = fdiv float undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdf32 = call float @llvm.fmuladd.f32(float undef, float undef, float undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubf32 = fsub float undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsf64 = call double @llvm.fabs.f64(double undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddf64 = fadd double undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmaf64 = call double @llvm.fma.f64(double undef, double undef, double undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulf64 = fmul double undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fdivf64 = fdiv double undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdf64 = call double @llvm.fmuladd.f64(double undef, double undef, double undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubf64 = fsub double undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsv2f16 = call <2 x half> @llvm.fabs.v2f16(<2 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddv2f16 = fadd <2 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav2f16 = call <2 x half> @llvm.fma.v2f16(<2 x half> undef, <2 x half> undef, <2 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulv2f16 = fmul <2 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %fdivv2f16 = fdiv <2 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv2f16 = call <2 x half> @llvm.fmuladd.v2f16(<2 x half> undef, <2 x half> undef, <2 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv2f16 = fsub <2 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsv2f32 = call <2 x float> @llvm.fabs.v2f32(<2 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddv2f32 = fadd <2 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav2f32 = call <2 x float> @llvm.fma.v2f32(<2 x float> undef, <2 x float> undef, <2 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulv2f32 = fmul <2 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fdivv2f32 = fdiv <2 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv2f32 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> undef, <2 x float> undef, <2 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv2f32 = fsub <2 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %fabsv2f64 = call <2 x double> @llvm.fabs.v2f64(<2 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %faddv2f64 = fadd <2 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav2f64 = call <2 x double> @llvm.fma.v2f64(<2 x double> undef, <2 x double> undef, <2 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmulv2f64 = fmul <2 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fdivv2f64 = fdiv <2 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv2f64 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> undef, <2 x double> undef, <2 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv2f64 = fsub <2 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsv4f16 = call <4 x half> @llvm.fabs.v4f16(<4 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddv4f16 = fadd <4 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav4f16 = call <4 x half> @llvm.fma.v4f16(<4 x half> undef, <4 x half> undef, <4 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulv4f16 = fmul <4 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fdivv4f16 = fdiv <4 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv4f16 = call <4 x half> @llvm.fmuladd.v4f16(<4 x half> undef, <4 x half> undef, <4 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv4f16 = fsub <4 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %fabsv4f32 = call <4 x float> @llvm.fabs.v4f32(<4 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %faddv4f32 = fadd <4 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav4f32 = call <4 x float> @llvm.fma.v4f32(<4 x float> undef, <4 x float> undef, <4 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmulv4f32 = fmul <4 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fdivv4f32 = fdiv <4 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv4f32 = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> undef, <4 x float> undef, <4 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv4f32 = fsub <4 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %fabsv4f64 = call <4 x double> @llvm.fabs.v4f64(<4 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %faddv4f64 = fadd <4 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %fmav4f64 = call <4 x double> @llvm.fma.v4f64(<4 x double> undef, <4 x double> undef, <4 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmulv4f64 = fmul <4 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fdivv4f64 = fdiv <4 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmuladdv4f64 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> undef, <4 x double> undef, <4 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv4f64 = fsub <4 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fabsv8f16 = call <8 x half> @llvm.fabs.v8f16(<8 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %faddv8f16 = fadd <8 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fmav8f16 = call <8 x half> @llvm.fma.v8f16(<8 x half> undef, <8 x half> undef, <8 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmulv8f16 = fmul <8 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fdivv8f16 = fdiv <8 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmuladdv8f16 = call <8 x half> @llvm.fmuladd.v8f16(<8 x half> undef, <8 x half> undef, <8 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 33 for instruction: %fsubv8f16 = fsub <8 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fabsv8f32 = call <8 x float> @llvm.fabs.v8f32(<8 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %faddv8f32 = fadd <8 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmav8f32 = call <8 x float> @llvm.fma.v8f32(<8 x float> undef, <8 x float> undef, <8 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmulv8f32 = fmul <8 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 33 for instruction: %fdivv8f32 = fdiv <8 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmuladdv8f32 = call <8 x float> @llvm.fmuladd.v8f32(<8 x float> undef, <8 x float> undef, <8 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubv8f32 = fsub <8 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fabsv8f64 = call <8 x double> @llvm.fabs.v8f64(<8 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %faddv8f64 = fadd <8 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmav8f64 = call <8 x double> @llvm.fma.v8f64(<8 x double> undef, <8 x double> undef, <8 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fmulv8f64 = fmul <8 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fdivv8f64 = fdiv <8 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %fmuladdv8f64 = call <8 x double> @llvm.fmuladd.v8f64(<8 x double> undef, <8 x double> undef, <8 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubv8f64 = fsub <8 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fabsv16f16 = call <16 x half> @llvm.fabs.v16f16(<16 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %faddv16f16 = fadd <16 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fmav16f16 = call <16 x half> @llvm.fma.v16f16(<16 x half> undef, <16 x half> undef, <16 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmulv16f16 = fmul <16 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 33 for instruction: %fdivv16f16 = fdiv <16 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fmuladdv16f16 = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> undef, <16 x half> undef, <16 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 65 for instruction: %fsubv16f16 = fsub <16 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %fabsv16f32 = call <16 x float> @llvm.fabs.v16f32(<16 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %faddv16f32 = fadd <16 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmav16f32 = call <16 x float> @llvm.fma.v16f32(<16 x float> undef, <16 x float> undef, <16 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %fmulv16f32 = fmul <16 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 72 for instruction: %fdivv16f32 = fdiv <16 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmuladdv16f32 = call <16 x float> @llvm.fmuladd.v16f32(<16 x float> undef, <16 x float> undef, <16 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fsubv16f32 = fsub <16 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fabsv16f64 = call <16 x double> @llvm.fabs.v16f64(<16 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 128 for instruction: %faddv16f64 = fadd <16 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmav16f64 = call <16 x double> @llvm.fma.v16f64(<16 x double> undef, <16 x double> undef, <16 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 128 for instruction: %fmulv16f64 = fmul <16 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %fdivv16f64 = fdiv <16 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 256 for instruction: %fmuladdv16f64 = call <16 x double> @llvm.fmuladd.v16f64(<16 x double> undef, <16 x double> undef, <16 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fsubv16f64 = fsub <16 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 56 for instruction: %fabsv32f16 = call <32 x half> @llvm.fabs.v32f16(<32 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %faddv32f16 = fadd <32 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 56 for instruction: %fmav32f16 = call <32 x half> @llvm.fma.v32f16(<32 x half> undef, <32 x half> undef, <32 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %fmulv32f16 = fmul <32 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 88 for instruction: %fdivv32f16 = fdiv <32 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 128 for instruction: %fmuladdv32f16 = call <32 x half> @llvm.fmuladd.v32f16(<32 x half> undef, <32 x half> undef, <32 x half> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 152 for instruction: %fsubv32f16 = fsub <32 x half> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 48 for instruction: %fabsv32f32 = call <32 x float> @llvm.fabs.v32f32(<32 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 256 for instruction: %faddv32f32 = fadd <32 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmav32f32 = call <32 x float> @llvm.fma.v32f32(<32 x float> undef, <32 x float> undef, <32 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 256 for instruction: %fmulv32f32 = fmul <32 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 144 for instruction: %fdivv32f32 = fdiv <32 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmuladdv32f32 = call <32 x float> @llvm.fmuladd.v32f32(<32 x float> undef, <32 x float> undef, <32 x float> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fsubv32f32 = fsub <32 x float> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fabsv32f64 = call <32 x double> @llvm.fabs.v32f64(<32 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 512 for instruction: %faddv32f64 = fadd <32 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fmav32f64 = call <32 x double> @llvm.fma.v32f64(<32 x double> undef, <32 x double> undef, <32 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 512 for instruction: %fmulv32f64 = fmul <32 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 128 for instruction: %fdivv32f64 = fdiv <32 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1024 for instruction: %fmuladdv32f64 = call <32 x double> @llvm.fmuladd.v32f64(<32 x double> undef, <32 x double> undef, <32 x double> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fsubv32f64 = fsub <32 x double> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
; CV2-LABEL: 'fpcosts'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddf16 = fadd half undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fdivf16 = fdiv half undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmaf16 = call half @llvm.fma.f16(half undef, half undef, half undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdf16 = call half @llvm.fmuladd.f16(half undef, half undef, half undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulf16 = fmul half undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubf16 = fsub half undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsf32 = call float @llvm.fabs.f32(float undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddf32 = fadd float undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmaf32 = call float @llvm.fma.f32(float undef, float undef, float undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulf32 = fmul float undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fdivf32 = fdiv float undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdf32 = call float @llvm.fmuladd.f32(float undef, float undef, float undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubf32 = fsub float undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsf64 = call double @llvm.fabs.f64(double undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddf64 = fadd double undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmaf64 = call double @llvm.fma.f64(double undef, double undef, double undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulf64 = fmul double undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fdivf64 = fdiv double undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdf64 = call double @llvm.fmuladd.f64(double undef, double undef, double undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubf64 = fsub double undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsv2f16 = call <2 x half> @llvm.fabs.v2f16(<2 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddv2f16 = fadd <2 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav2f16 = call <2 x half> @llvm.fma.v2f16(<2 x half> undef, <2 x half> undef, <2 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulv2f16 = fmul <2 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %fdivv2f16 = fdiv <2 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv2f16 = call <2 x half> @llvm.fmuladd.v2f16(<2 x half> undef, <2 x half> undef, <2 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv2f16 = fsub <2 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsv2f32 = call <2 x float> @llvm.fabs.v2f32(<2 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddv2f32 = fadd <2 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav2f32 = call <2 x float> @llvm.fma.v2f32(<2 x float> undef, <2 x float> undef, <2 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulv2f32 = fmul <2 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fdivv2f32 = fdiv <2 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv2f32 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> undef, <2 x float> undef, <2 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv2f32 = fsub <2 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %fabsv2f64 = call <2 x double> @llvm.fabs.v2f64(<2 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %faddv2f64 = fadd <2 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav2f64 = call <2 x double> @llvm.fma.v2f64(<2 x double> undef, <2 x double> undef, <2 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmulv2f64 = fmul <2 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fdivv2f64 = fdiv <2 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv2f64 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> undef, <2 x double> undef, <2 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv2f64 = fsub <2 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fabsv4f16 = call <4 x half> @llvm.fabs.v4f16(<4 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %faddv4f16 = fadd <4 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav4f16 = call <4 x half> @llvm.fma.v4f16(<4 x half> undef, <4 x half> undef, <4 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fmulv4f16 = fmul <4 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fdivv4f16 = fdiv <4 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv4f16 = call <4 x half> @llvm.fmuladd.v4f16(<4 x half> undef, <4 x half> undef, <4 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv4f16 = fsub <4 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %fabsv4f32 = call <4 x float> @llvm.fabs.v4f32(<4 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %faddv4f32 = fadd <4 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav4f32 = call <4 x float> @llvm.fma.v4f32(<4 x float> undef, <4 x float> undef, <4 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmulv4f32 = fmul <4 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fdivv4f32 = fdiv <4 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv4f32 = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> undef, <4 x float> undef, <4 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv4f32 = fsub <4 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %fabsv4f64 = call <4 x double> @llvm.fabs.v4f64(<4 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %faddv4f64 = fadd <4 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 5 for instruction: %fmav4f64 = call <4 x double> @llvm.fma.v4f64(<4 x double> undef, <4 x double> undef, <4 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmulv4f64 = fmul <4 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fdivv4f64 = fdiv <4 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmuladdv4f64 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> undef, <4 x double> undef, <4 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv4f64 = fsub <4 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fabsv8f16 = call <8 x half> @llvm.fabs.v8f16(<8 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %faddv8f16 = fadd <8 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmav8f16 = call <8 x half> @llvm.fma.v8f16(<8 x half> undef, <8 x half> undef, <8 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmulv8f16 = fmul <8 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fdivv8f16 = fdiv <8 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %fmuladdv8f16 = call <8 x half> @llvm.fmuladd.v8f16(<8 x half> undef, <8 x half> undef, <8 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fsubv8f16 = fsub <8 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %fabsv8f32 = call <8 x float> @llvm.fabs.v8f32(<8 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %faddv8f32 = fadd <8 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmav8f32 = call <8 x float> @llvm.fma.v8f32(<8 x float> undef, <8 x float> undef, <8 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmulv8f32 = fmul <8 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 33 for instruction: %fdivv8f32 = fdiv <8 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmuladdv8f32 = call <8 x float> @llvm.fmuladd.v8f32(<8 x float> undef, <8 x float> undef, <8 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubv8f32 = fsub <8 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fabsv8f64 = call <8 x double> @llvm.fabs.v8f64(<8 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %faddv8f64 = fadd <8 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmav8f64 = call <8 x double> @llvm.fma.v8f64(<8 x double> undef, <8 x double> undef, <8 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fmulv8f64 = fmul <8 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fdivv8f64 = fdiv <8 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %fmuladdv8f64 = call <8 x double> @llvm.fmuladd.v8f64(<8 x double> undef, <8 x double> undef, <8 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubv8f64 = fsub <8 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 17 for instruction: %fabsv16f16 = call <16 x half> @llvm.fabs.v16f16(<16 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %faddv16f16 = fadd <16 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmav16f16 = call <16 x half> @llvm.fma.v16f16(<16 x half> undef, <16 x half> undef, <16 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmulv16f16 = fmul <16 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 33 for instruction: %fdivv16f16 = fdiv <16 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fmuladdv16f16 = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> undef, <16 x half> undef, <16 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fsubv16f16 = fsub <16 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 24 for instruction: %fabsv16f32 = call <16 x float> @llvm.fabs.v16f32(<16 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %faddv16f32 = fadd <16 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmav16f32 = call <16 x float> @llvm.fma.v16f32(<16 x float> undef, <16 x float> undef, <16 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %fmulv16f32 = fmul <16 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 72 for instruction: %fdivv16f32 = fdiv <16 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmuladdv16f32 = call <16 x float> @llvm.fmuladd.v16f32(<16 x float> undef, <16 x float> undef, <16 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fsubv16f32 = fsub <16 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fabsv16f64 = call <16 x double> @llvm.fabs.v16f64(<16 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 128 for instruction: %faddv16f64 = fadd <16 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmav16f64 = call <16 x double> @llvm.fma.v16f64(<16 x double> undef, <16 x double> undef, <16 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 128 for instruction: %fmulv16f64 = fmul <16 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %fdivv16f64 = fdiv <16 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 256 for instruction: %fmuladdv16f64 = call <16 x double> @llvm.fmuladd.v16f64(<16 x double> undef, <16 x double> undef, <16 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fsubv16f64 = fsub <16 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 56 for instruction: %fabsv32f16 = call <32 x half> @llvm.fabs.v32f16(<32 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %faddv32f16 = fadd <32 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmav32f16 = call <32 x half> @llvm.fma.v32f16(<32 x half> undef, <32 x half> undef, <32 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 64 for instruction: %fmulv32f16 = fmul <32 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 88 for instruction: %fdivv32f16 = fdiv <32 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fmuladdv32f16 = call <32 x half> @llvm.fmuladd.v32f16(<32 x half> undef, <32 x half> undef, <32 x half> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %fsubv32f16 = fsub <32 x half> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 48 for instruction: %fabsv32f32 = call <32 x float> @llvm.fabs.v32f32(<32 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 256 for instruction: %faddv32f32 = fadd <32 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmav32f32 = call <32 x float> @llvm.fma.v32f32(<32 x float> undef, <32 x float> undef, <32 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 256 for instruction: %fmulv32f32 = fmul <32 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 144 for instruction: %fdivv32f32 = fdiv <32 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fmuladdv32f32 = call <32 x float> @llvm.fmuladd.v32f32(<32 x float> undef, <32 x float> undef, <32 x float> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fsubv32f32 = fsub <32 x float> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fabsv32f64 = call <32 x double> @llvm.fabs.v32f64(<32 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 512 for instruction: %faddv32f64 = fadd <32 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 32 for instruction: %fmav32f64 = call <32 x double> @llvm.fma.v32f64(<32 x double> undef, <32 x double> undef, <32 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 512 for instruction: %fmulv32f64 = fmul <32 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 128 for instruction: %fdivv32f64 = fdiv <32 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1024 for instruction: %fmuladdv32f64 = call <32 x double> @llvm.fmuladd.v32f64(<32 x double> undef, <32 x double> undef, <32 x double> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 16 for instruction: %fsubv32f64 = fsub <32 x double> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %faddf16 = fadd half undef, undef
  %fdivf16  = fdiv half undef, undef
  %fmaf16 = call half @llvm.fma.f16(half undef, half undef, half undef)
  %fmuladdf16 = call half @llvm.fmuladd.f16(half undef, half undef, half undef)
  %fmulf16  = fmul  half undef, undef
  %fsubf16 = fsub half undef, undef

  %fabsf32 = call float @llvm.fabs.f32(float undef)
  %faddf32 = fadd float undef, undef
  %fmaf32 = call float @llvm.fma.f32(float undef, float undef, float undef)
  %fmulf32  = fmul  float undef, undef
  %fdivf32  = fdiv float undef, undef
  %fmuladdf32 = call float @llvm.fmuladd.f32(float undef, float undef, float undef)
  %fsubf32 = fsub float undef, undef

  %fabsf64 = call double @llvm.fabs.f64(double undef)
  %faddf64 = fadd double undef, undef
  %fmaf64 = call double @llvm.fma.f64(double undef, double undef, double undef)
  %fmulf64  = fmul  double undef, undef
  %fdivf64  = fdiv double undef, undef
  %fmuladdf64 = call double @llvm.fmuladd.f64(double undef, double undef, double undef)
  %fsubf64 = fsub double undef, undef

  %fabsv2f16 = call <2 x half> @llvm.fabs.v2f16(<2 x half> undef)
  %faddv2f16 = fadd <2 x half> undef, undef
  %fmav2f16 = call <2 x half> @llvm.fma.v2f16(<2 x half> undef, <2 x half> undef, <2 x half> undef)
  %fmulv2f16  = fmul  <2 x half> undef, undef
  %fdivv2f16  = fdiv <2 x half> undef, undef
  %fmuladdv2f16 = call <2 x half> @llvm.fmuladd.v2f16(<2 x half> undef, <2 x half> undef, <2 x half> undef)
  %fsubv2f16 = fsub <2 x half> undef, undef

  %fabsv2f32 = call <2 x float> @llvm.fabs.v2f32(<2 x float> undef)
  %faddv2f32 = fadd <2 x float> undef, undef
  %fmav2f32 = call <2 x float> @llvm.fma.v2f32(<2 x float> undef, <2 x float> undef, <2 x float> undef)
  %fmulv2f32  = fmul  <2 x float> undef, undef
  %fdivv2f32  = fdiv <2 x float> undef, undef
  %fmuladdv2f32 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> undef, <2 x float> undef, <2 x float> undef)
  %fsubv2f32 = fsub <2 x float> undef, undef

  %fabsv2f64 = call <2 x double> @llvm.fabs.v2f64(<2 x double> undef)
  %faddv2f64 = fadd <2 x double> undef, undef
  %fmav2f64 = call <2 x double> @llvm.fma.v2f64(<2 x double> undef, <2 x double> undef, <2 x double> undef)
  %fmulv2f64  = fmul  <2 x double> undef, undef
  %fdivv2f64  = fdiv <2 x double> undef, undef
  %fmuladdv2f64 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> undef, <2 x double> undef, <2 x double> undef)
  %fsubv2f64 = fsub <2 x double> undef, undef

  %fabsv4f16 = call <4 x half> @llvm.fabs.v4f16(<4 x half> undef)
  %faddv4f16 = fadd <4 x half> undef, undef
  %fmav4f16 = call <4 x half> @llvm.fma.v4f16(<4 x half> undef, <4 x half> undef, <4 x half> undef)
  %fmulv4f16  = fmul  <4 x half> undef, undef
  %fdivv4f16  = fdiv <4 x half> undef, undef
  %fmuladdv4f16 = call <4 x half> @llvm.fmuladd.v4f16(<4 x half> undef, <4 x half> undef, <4 x half> undef)
  %fsubv4f16 = fsub <4 x half> undef, undef

  %fabsv4f32 = call <4 x float> @llvm.fabs.v4f32(<4 x float> undef)
  %faddv4f32 = fadd <4 x float> undef, undef
  %fmav4f32 = call <4 x float> @llvm.fma.v4f32(<4 x float> undef, <4 x float> undef, <4 x float> undef)
  %fmulv4f32  = fmul  <4 x float> undef, undef
  %fdivv4f32  = fdiv <4 x float> undef, undef
  %fmuladdv4f32 = call <4 x float> @llvm.fmuladd.v4f32(<4 x float> undef, <4 x float> undef, <4 x float> undef)
  %fsubv4f32 = fsub <4 x float> undef, undef

  %fabsv4f64 = call <4 x double> @llvm.fabs.v4f64(<4 x double> undef)
  %faddv4f64 = fadd <4 x double> undef, undef
  %fmav4f64 = call <4 x double> @llvm.fma.v4f64(<4 x double> undef, <4 x double> undef, <4 x double> undef)
  %fmulv4f64  = fmul  <4 x double> undef, undef
  %fdivv4f64  = fdiv <4 x double> undef, undef
  %fmuladdv4f64 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> undef, <4 x double> undef, <4 x double> undef)
  %fsubv4f64 = fsub <4 x double> undef, undef

  %fabsv8f16 = call <8 x half> @llvm.fabs.v8f16(<8 x half> undef)
  %faddv8f16 = fadd <8 x half> undef, undef
  %fmav8f16 = call <8 x half> @llvm.fma.v8f16(<8 x half> undef, <8 x half> undef, <8 x half> undef)
  %fmulv8f16  = fmul  <8 x half> undef, undef
  %fdivv8f16  = fdiv <8 x half> undef, undef
  %fmuladdv8f16 = call <8 x half> @llvm.fmuladd.v8f16(<8 x half> undef, <8 x half> undef, <8 x half> undef)
  %fsubv8f16 = fsub <8 x half> undef, undef

  %fabsv8f32 = call <8 x float> @llvm.fabs.v8f32(<8 x float> undef)
  %faddv8f32 = fadd <8 x float> undef, undef
  %fmav8f32 = call <8 x float> @llvm.fma.v8f32(<8 x float> undef, <8 x float> undef, <8 x float> undef)
  %fmulv8f32  = fmul  <8 x float> undef, undef
  %fdivv8f32  = fdiv <8 x float> undef, undef
  %fmuladdv8f32 = call <8 x float> @llvm.fmuladd.v8f32(<8 x float> undef, <8 x float> undef, <8 x float> undef)
  %fsubv8f32 = fsub <8 x float> undef, undef

  %fabsv8f64 = call <8 x double> @llvm.fabs.v8f64(<8 x double> undef)
  %faddv8f64 = fadd <8 x double> undef, undef
  %fmav8f64 = call <8 x double> @llvm.fma.v8f64(<8 x double> undef, <8 x double> undef, <8 x double> undef)
  %fmulv8f64  = fmul  <8 x double> undef, undef
  %fdivv8f64  = fdiv <8 x double> undef, undef
  %fmuladdv8f64 = call <8 x double> @llvm.fmuladd.v8f64(<8 x double> undef, <8 x double> undef, <8 x double> undef)
  %fsubv8f64 = fsub <8 x double> undef, undef

  %fabsv16f16 = call <16 x half> @llvm.fabs.v16f16(<16 x half> undef)
  %faddv16f16 = fadd <16 x half> undef, undef
  %fmav16f16 = call <16 x half> @llvm.fma.v16f16(<16 x half> undef, <16 x half> undef, <16 x half> undef)
  %fmulv16f16  = fmul  <16 x half> undef, undef
  %fdivv16f16  = fdiv <16 x half> undef, undef
  %fmuladdv16f16 = call <16 x half> @llvm.fmuladd.v16f16(<16 x half> undef, <16 x half> undef, <16 x half> undef)
  %fsubv16f16 = fsub <16 x half> undef, undef

  %fabsv16f32 = call <16 x float> @llvm.fabs.v16f32(<16 x float> undef)
  %faddv16f32 = fadd <16 x float> undef, undef
  %fmav16f32 = call <16 x float> @llvm.fma.v16f32(<16 x float> undef, <16 x float> undef, <16 x float> undef)
  %fmulv16f32  = fmul  <16 x float> undef, undef
  %fdivv16f32  = fdiv <16 x float> undef, undef
  %fmuladdv16f32 = call <16 x float> @llvm.fmuladd.v16f32(<16 x float> undef, <16 x float> undef, <16 x float> undef)
  %fsubv16f32 = fsub <16 x float> undef, undef

  %fabsv16f64 = call <16 x double> @llvm.fabs.v16f64(<16 x double> undef)
  %faddv16f64 = fadd <16 x double> undef, undef
  %fmav16f64 = call <16 x double> @llvm.fma.v16f64(<16 x double> undef, <16 x double> undef, <16 x double> undef)
  %fmulv16f64  = fmul  <16 x double> undef, undef
  %fdivv16f64  = fdiv <16 x double> undef, undef
  %fmuladdv16f64 = call <16 x double> @llvm.fmuladd.v16f64(<16 x double> undef, <16 x double> undef, <16 x double> undef)
  %fsubv16f64 = fsub <16 x double> undef, undef

  %fabsv32f16 = call <32 x half> @llvm.fabs.v32f16(<32 x half> undef)
  %faddv32f16 = fadd <32 x half> undef, undef
  %fmav32f16 = call <32 x half> @llvm.fma.v32f16(<32 x half> undef, <32 x half> undef, <32 x half> undef)
  %fmulv32f16  = fmul  <32 x half> undef, undef
  %fdivv32f16  = fdiv <32 x half> undef, undef
  %fmuladdv32f16 = call <32 x half> @llvm.fmuladd.v32f16(<32 x half> undef, <32 x half> undef, <32 x half> undef)
  %fsubv32f16 = fsub <32 x half> undef, undef

  %fabsv32f32 = call <32 x float> @llvm.fabs.v32f32(<32 x float> undef)
  %faddv32f32 = fadd <32 x float> undef, undef
  %fmav32f32 = call <32 x float> @llvm.fma.v32f32(<32 x float> undef, <32 x float> undef, <32 x float> undef)
  %fmulv32f32  = fmul  <32 x float> undef, undef
  %fdivv32f32  = fdiv <32 x float> undef, undef
  %fmuladdv32f32 = call <32 x float> @llvm.fmuladd.v32f32(<32 x float> undef, <32 x float> undef, <32 x float> undef)
  %fsubv32f32 = fsub <32 x float> undef, undef

  %fabsv32f64 = call <32 x double> @llvm.fabs.v32f64(<32 x double> undef)
  %faddv32f64 = fadd <32 x double> undef, undef
  %fmav32f64 = call <32 x double> @llvm.fma.v32f64(<32 x double> undef, <32 x double> undef, <32 x double> undef)
  %fmulv32f64  = fmul  <32 x double> undef, undef
  %fdivv32f64  = fdiv <32 x double> undef, undef
  %fmuladdv32f64 = call <32 x double> @llvm.fmuladd.v32f64(<32 x double> undef, <32 x double> undef, <32 x double> undef)
  %fsubv32f64 = fsub <32 x double> undef, undef

  ret void
}

declare half @llvm.fabs.f16(half)
declare half @llvm.fma.f16(half, half, half)
declare half @llvm.fmuladd.f16(half, half, half)

declare float @llvm.fabs.f32(float)
declare float @llvm.fma.f32(float, float, float)
declare float @llvm.fmuladd.f32(float, float, float)

declare double @llvm.fabs.f64(double)
declare double @llvm.fma.f64(double, double, double)
declare double @llvm.fmuladd.f64(double, double, double)

declare <2 x half> @llvm.fabs.v2f16(<2 x half>)
declare <2 x half> @llvm.fma.v2f16(<2 x half>, <2 x half>, <2 x half>)
declare <2 x half> @llvm.fmuladd.v2f16(<2 x half>, <2 x half>, <2 x half>)

declare <2 x float> @llvm.fabs.v2f32(<2 x float>)
declare <2 x float> @llvm.fma.v2f32(<2 x float>, <2 x float>, <2 x float>)
declare <2 x float> @llvm.fmuladd.v2f32(<2 x float>, <2 x float>, <2 x float>)

declare <2 x double> @llvm.fabs.v2f64(<2 x double>)
declare <2 x double> @llvm.fma.v2f64(<2 x double>, <2 x double>, <2 x double>)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)

declare <4 x half> @llvm.fabs.v4f16(<4 x half>)
declare <4 x half> @llvm.fma.v4f16(<4 x half>, <4 x half>, <4 x half>)
declare <4 x half> @llvm.fmuladd.v4f16(<4 x half>, <4 x half>, <4 x half>)

declare <4 x float> @llvm.fabs.v4f32(<4 x float>)
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>)
declare <4 x float> @llvm.fmuladd.v4f32(<4 x float>, <4 x float>, <4 x float>)

declare <4 x double> @llvm.fabs.v4f64(<4 x double>)
declare <4 x double> @llvm.fma.v4f64(<4 x double>, <4 x double>, <4 x double>)
declare <4 x double> @llvm.fmuladd.v4f64(<4 x double>, <4 x double>, <4 x double>)

declare <8 x half> @llvm.fabs.v8f16(<8 x half>)
declare <8 x half> @llvm.fma.v8f16(<8 x half>, <8 x half>, <8 x half>)
declare <8 x half> @llvm.fmuladd.v8f16(<8 x half>, <8 x half>, <8 x half>)

declare <8 x float> @llvm.fabs.v8f32(<8 x float>)
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>)
declare <8 x float> @llvm.fmuladd.v8f32(<8 x float>, <8 x float>, <8 x float>)

declare <8 x double> @llvm.fabs.v8f64(<8 x double>)
declare <8 x double> @llvm.fma.v8f64(<8 x double>, <8 x double>, <8 x double>)
declare <8 x double> @llvm.fmuladd.v8f64(<8 x double>, <8 x double>, <8 x double>)

declare <16 x half> @llvm.fabs.v16f16(<16 x half>)
declare <16 x half> @llvm.fma.v16f16(<16 x half>, <16 x half>, <16 x half>)
declare <16 x half> @llvm.fmuladd.v16f16(<16 x half>, <16 x half>, <16 x half>)

declare <16 x float> @llvm.fabs.v16f32(<16 x float>)
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>)
declare <16 x float> @llvm.fmuladd.v16f32(<16 x float>, <16 x float>, <16 x float>)

declare <16 x double> @llvm.fabs.v16f64(<16 x double>)
declare <16 x double> @llvm.fma.v16f64(<16 x double>, <16 x double>, <16 x double>)
declare <16 x double> @llvm.fmuladd.v16f64(<16 x double>, <16 x double>, <16 x double>)

declare <32 x half> @llvm.fabs.v32f16(<32 x half>)
declare <32 x half> @llvm.fma.v32f16(<32 x half>, <32 x half>, <32 x half>)
declare <32 x half> @llvm.fmuladd.v32f16(<32 x half>, <32 x half>, <32 x half>)

declare <32 x float> @llvm.fabs.v32f32(<32 x float>)
declare <32 x float> @llvm.fma.v32f32(<32 x float>, <32 x float>, <32 x float>)
declare <32 x float> @llvm.fmuladd.v32f32(<32 x float>, <32 x float>, <32 x float>)

declare <32 x double> @llvm.fabs.v32f64(<32 x double>)
declare <32 x double> @llvm.fma.v32f64(<32 x double>, <32 x double>, <32 x double>)
declare <32 x double> @llvm.fmuladd.v32f64(<32 x double>, <32 x double>, <32 x double>)
