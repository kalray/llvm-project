; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV1 --allow-unused-prefixes
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV2 --allow-unused-prefixes

target triple = "kvx-kalray-cos"

define <2 x i8> @test_ret_const() #0 {
; ALL-LABEL: 'test_ret_const'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> <i8 1, i8 2>
;
  ret <2 x i8> <i8 1, i8 2>
}

define i8 @test_extract_0(<2 x i8> %a) #0 {
; ALL-LABEL: 'test_extract_0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <2 x i8> %a, i8 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i8 %e
;
  %e = extractelement <2 x i8> %a, i8 0
  ret i8 %e
}

define i8 @test_extract_1(<2 x i8> %a) #0 {
; ALL-LABEL: 'test_extract_1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = extractelement <2 x i8> %a, i8 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i8 %e
;
  %e = extractelement <2 x i8> %a, i8 1
  ret i8 %e
}

define i8 @test_extract_i(<2 x i8> %a, i64 %idx) #0 {
; ALL-LABEL: 'test_extract_i'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %e = extractelement <2 x i8> %a, i64 %idx
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i8 %e
;
  %e = extractelement <2 x i8> %a, i64 %idx
  ret i8 %e
}

define <2 x i8> @test_add(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_add'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <2 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = add <2 x i8> %a, %b
  ret <2 x i8> %r
}

define <2 x i8> @test_add_imm_0(<2 x i8> %a) #0 {
; ALL-LABEL: 'test_add_imm_0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <2 x i8> <i8 1, i8 2>, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = add <2 x i8> <i8 1, i8 2>, %a
  ret <2 x i8> %r
}

define <2 x i8> @test_add_imm_1(<2 x i8> %a) #0 {
; ALL-LABEL: 'test_add_imm_1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = add <2 x i8> %a, <i8 1, i8 2>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = add <2 x i8> %a, <i8 1, i8 2>
  ret <2 x i8> %r
}

define <2 x i8> @test_sub(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_sub'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <2 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sub <2 x i8> %a, %b
  ret <2 x i8> %r
}

define <2 x i8> @test_sub_imm(<2 x i8> %a) #0 {
; ALL-LABEL: 'test_sub_imm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <2 x i8> %a, <i8 1, i8 2>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sub <2 x i8> %a, <i8 1, i8 2>
  ret <2 x i8> %r
}

define <2 x i8> @test_sub_fromimm(<2 x i8> %a) #0 {
; ALL-LABEL: 'test_sub_fromimm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <2 x i8> <i8 1, i8 2>, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sub <2 x i8> <i8 1, i8 2>, %a
  ret <2 x i8> %r
}


define <2 x i8> @test_fma(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) #0 {
; ALL-LABEL: 'test_fma'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %m = mul <2 x i8> %b, %c
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %ad = add <2 x i8> %a, %m
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %ad
;
  %m = mul <2 x i8> %b, %c
  %ad = add <2 x i8> %a, %m
  ret <2 x i8> %ad
}

define <2 x i8> @test_fma_imm(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_fma_imm'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %m = mul <2 x i8> <i8 5, i8 2>, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %ad = add <2 x i8> %a, %m
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %ad
;
  %m = mul <2 x i8> <i8 5, i8 2>, %b
  %ad = add <2 x i8> %a, %m
  ret <2 x i8> %ad
}

define <2 x i8> @test_fma_imm_2(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_fma_imm_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %m = mul <2 x i8> <i8 1, i8 2>, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %ad = add <2 x i8> %a, %m
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %ad
;
  %m = mul <2 x i8> <i8 1, i8 2>, %b
  %ad = add <2 x i8> %a, %m
  ret <2 x i8> %ad
}

define <2 x i8> @test_neg(<2 x i8> %a) #0 {
; ALL-LABEL: 'test_neg'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sub <2 x i8> zeroinitializer, %a
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sub <2 x i8> <i8 0, i8 0>, %a
  ret <2 x i8> %r
}

define <2 x i8> @test_mul(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_mul'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = mul <2 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = mul <2 x i8> %a, %b
  ret <2 x i8> %r
}

define <2 x i8> @test_mul_2(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) #0 {
; ALL-LABEL: 'test_mul_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = mul <2 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r1 = mul <2 x i8> %r, %c
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r1
;
  %r = mul <2 x i8> %a, %b
  %r1 = mul <2 x i8> %r, %c
  ret <2 x i8> %r1
}

define <2 x i8> @test_div(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_div'
; ALL-NEXT:  Cost Model: Found an estimated cost of 50 for instruction: %r = sdiv <2 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sdiv <2 x i8> %a, %b
  ret <2 x i8> %r
}

define <2 x i8> @test_rem(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_rem'
; ALL-NEXT:  Cost Model: Found an estimated cost of 50 for instruction: %r = srem <2 x i8> %a, %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = srem <2 x i8> %a, %b
  ret <2 x i8> %r
}

define void @test_ldst_v2i8(<2 x i8>* %a, <2 x i8>* %b) {
; ALL-LABEL: 'test_ldst_v2i8'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %t1 = load <2 x i8>, ptr %a, align 2
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <2 x i8> %t1, ptr %b, align 16
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %t1 = load <2 x i8>, <2 x i8>* %a
  store <2 x i8> %t1, <2 x i8>* %b, align 16
  ret void
}

declare <2 x i8> @test_callee(<2 x i8> %a, <2 x i8> %b) #0

define <2 x i8> @test_call(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_call'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <2 x i8> @test_callee(<2 x i8> %a, <2 x i8> %b)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = call <2 x i8> @test_callee(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %r
}

define <2 x i8> @test_call_flipped(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_call_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <2 x i8> @test_callee(<2 x i8> %b, <2 x i8> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = call <2 x i8> @test_callee(<2 x i8> %b, <2 x i8> %a)
  ret <2 x i8> %r
}

define <2 x i8> @test_tailcall_flipped(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_tailcall_flipped'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <2 x i8> @test_callee(<2 x i8> %b, <2 x i8> %a)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = tail call <2 x i8> @test_callee(<2 x i8> %b, <2 x i8> %a)
  ret <2 x i8> %r
}

define <2 x i8> @test_select(<2 x i8> %a, <2 x i8> %b, i1 zeroext %c) #0 {
; ALL-LABEL: 'test_select'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <2 x i8> %a, <2 x i8> %b
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = select i1 %c, <2 x i8> %a, <2 x i8> %b
  ret <2 x i8> %r
}

define <2 x i8> @test_select_cc(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c, <2 x i8> %d) #0 {
; CV1-LABEL: 'test_select_cc'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %cc = icmp slt <2 x i8> %c, %d
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <2 x i1> %cc, <2 x i8> %a, <2 x i8> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
; CV2-LABEL: 'test_select_cc'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp slt <2 x i8> %c, %d
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <2 x i1> %cc, <2 x i8> %a, <2 x i8> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %cc = icmp slt <2 x i8> %c, %d
  %r = select <2 x i1> %cc, <2 x i8> %a, <2 x i8> %b
  ret <2 x i8> %r
}

define <2 x i64> @test_select_cc_f32_f32(<2 x i64> %a, <2 x i64> %b, <2 x i8> %c, <2 x i8> %d) #0 {
; CV1-LABEL: 'test_select_cc_f32_f32'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %cc = icmp ult <2 x i8> %c, %d
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <2 x i1> %cc, <2 x i64> %a, <2 x i64> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i64> %r
;
; CV2-LABEL: 'test_select_cc_f32_f32'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp ult <2 x i8> %c, %d
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select <2 x i1> %cc, <2 x i64> %a, <2 x i64> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i64> %r
;
  %cc = icmp ult <2 x i8> %c, %d
  %r = select <2 x i1> %cc, <2 x i64> %a, <2 x i64> %b
  ret <2 x i64> %r
}

define <2 x i1> @test_icmp_ule(<2 x i8> %a, <2 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_ule'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp ule <2 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
; CV2-LABEL: 'test_icmp_ule'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ule <2 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
  %r = icmp ule <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_slt(<2 x i8> %a, <2 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_slt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp slt <2 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
; CV2-LABEL: 'test_icmp_slt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp slt <2 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
  %r = icmp slt <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_ugt(<2 x i8> %a, <2 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_ugt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp ugt <2 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
; CV2-LABEL: 'test_icmp_ugt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ugt <2 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
  %r = icmp ugt <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_uge(<2 x i8> %a, <2 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_uge'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp uge <2 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
; CV2-LABEL: 'test_icmp_uge'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp uge <2 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
  %r = icmp uge <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_ult(<2 x i8> %a, <2 x i8> %b) #0 {
; CV1-LABEL: 'test_icmp_ult'
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = icmp ult <2 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
; CV2-LABEL: 'test_icmp_ult'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ult <2 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i1> %r
;
  %r = icmp ult <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i64> @test_sext_2xi64(<2 x i8> %a) #0 {
; ALL-LABEL: 'test_sext_2xi64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = sext <2 x i8> %a to <2 x i64>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i64> %r
;
  %r = sext <2 x i8> %a to <2 x i64>
  ret <2 x i64> %r
}

declare <2 x i8> @llvm.abs.v2i8(<2 x i8>, i1) #0

define <2 x i8> @test_abs(<2 x i8> %a) #0 {
; CV1-LABEL: 'test_abs'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = call <2 x i8> @llvm.abs.v2i8(<2 x i8> %a, i1 false)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
; CV2-LABEL: 'test_abs'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <2 x i8> @llvm.abs.v2i8(<2 x i8> %a, i1 false)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = call <2 x i8> @llvm.abs.v2i8(<2 x i8> %a, i1 false)
  ret <2 x i8> %r
}


define <2 x i8> @test_insertelement0(<2 x i8> %a, i8 %x) #0 {
; ALL-LABEL: 'test_insertelement0'
; ALL-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <2 x i8> %a, i8 %x, i8 0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %i
;
  %i = insertelement <2 x i8> %a, i8 %x, i8 0
  ret <2 x i8> %i
}

define <2 x i8> @test_insertelement1(<2 x i8> %a, i8 %x) #0 {
; ALL-LABEL: 'test_insertelement1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = insertelement <2 x i8> %a, i8 %x, i8 1
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %i
;
  %i = insertelement <2 x i8> %a, i8 %x, i8 1
  ret <2 x i8> %i
}

define <2 x i8> @test_insertelement(<2 x i8> %a, i8 %x, i64 %p) #0 {
; ALL-LABEL: 'test_insertelement'
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %i = insertelement <2 x i8> %a, i8 %x, i64 %p
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %i
;
  %i = insertelement <2 x i8> %a, i8 %x, i64 %p
  ret <2 x i8> %i
}

define <2 x i8> @mulsub(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) #0 {
; ALL-LABEL: 'mulsub'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %mul = mul <2 x i8> %b, %c
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %sub = sub <2 x i8> %a, %mul
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %sub
;
  %mul = mul <2 x i8> %b, %c
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @vnot(<2 x i8> %a) #0 {
; ALL-LABEL: 'vnot'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %vnot = xor <2 x i8> %a, <i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %vnot
;
  %vnot = xor <2 x i8> %a, <i8 -1, i8 -1>
  ret <2 x i8> %vnot
}

define <2 x i8> @nandw_v2i8_rr(<2 x i8> %0, <2 x i8> %1) {
; ALL-LABEL: 'nandw_v2i8_rr'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = and <2 x i8> %1, %0
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = xor <2 x i8> %3, <i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %4
;
  %3 = and <2 x i8> %1, %0
  %4 = xor <2 x i8> %3, <i8 -1, i8 -1>
  ret <2 x i8> %4
}

define <2 x i8> @nandw_v2i8_ri10(<2 x i8> %0) {
; ALL-LABEL: 'nandw_v2i8_ri10'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = and <2 x i8> %0, <i8 -1, i8 0>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %3
;
  %2 = and <2 x i8> %0, <i8 1023, i8 0>
  %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
  ret <2 x i8> %3
}

define <2 x i8> @nandw_v2i8_ri37(<2 x i8> %0) {
; ALL-LABEL: 'nandw_v2i8_ri37'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = and <2 x i8> %0, <i8 -4, i8 0>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %3
;
  %2 = and <2 x i8> %0, <i8 252, i8 0>
  %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
  ret <2 x i8> %3
}

define <2 x i8> @nandw_v2i8_ri37_2(<2 x i8> %0) {
; ALL-LABEL: 'nandw_v2i8_ri37_2'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = and <2 x i8> %0, <i8 13, i8 13>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %3
;
  %2 = and <2 x i8> %0, <i8 13, i8 13>
  %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
  ret <2 x i8> %3
}

define  <2 x i8> @v2_maxbo_rr_i8(<2 x i8> %a, <2 x i8> %b) {
; CV1-LABEL: 'v2_maxbo_rr_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %0 = call <2 x i8> @llvm.smax.v2i8(<2 x i8> %a, <2 x i8> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
; CV2-LABEL: 'v2_maxbo_rr_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %0 = call <2 x i8> @llvm.smax.v2i8(<2 x i8> %a, <2 x i8> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
entry:
  %0 = call <2 x i8> @llvm.smax.v2i8(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %0
}

define  <2 x i8> @v2_minbo_rr_i8(<2 x i8> %a, <2 x i8> %b) {
; CV1-LABEL: 'v2_minbo_rr_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %0 = call <2 x i8> @llvm.smin.v2i8(<2 x i8> %a, <2 x i8> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
; CV2-LABEL: 'v2_minbo_rr_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %0 = call <2 x i8> @llvm.smin.v2i8(<2 x i8> %a, <2 x i8> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
entry:
  %0 = call <2 x i8> @llvm.smin.v2i8(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %0
}

define  <2 x i8> @v2_umaxbo_rr_i8(<2 x i8> %a, <2 x i8> %b) {
; CV1-LABEL: 'v2_umaxbo_rr_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %0 = call <2 x i8> @llvm.umax.v2i8(<2 x i8> %a, <2 x i8> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
; CV2-LABEL: 'v2_umaxbo_rr_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %0 = call <2 x i8> @llvm.umax.v2i8(<2 x i8> %a, <2 x i8> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
entry:
  %0 = call <2 x i8> @llvm.umax.v2i8(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %0
}

define  <2 x i8> @v2_uminbo_rr_i8(<2 x i8> %a, <2 x i8> %b) {
; CV1-LABEL: 'v2_uminbo_rr_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %0 = call <2 x i8> @llvm.umin.v2i8(<2 x i8> %a, <2 x i8> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
; CV2-LABEL: 'v2_uminbo_rr_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %0 = call <2 x i8> @llvm.umin.v2i8(<2 x i8> %a, <2 x i8> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
entry:
  %0 = call <2 x i8> @llvm.umin.v2i8(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %0
}

define <2 x i8> @abdbo_rr(<2 x i8> %a, <2 x i8> %b) {
; CV1-LABEL: 'abdbo_rr'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %sub = sub nsw <2 x i8> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %0 = tail call <2 x i8> @llvm.abs.v2i8(<2 x i8> %sub, i1 true)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
; CV2-LABEL: 'abdbo_rr'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %sub = sub nsw <2 x i8> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %0 = tail call <2 x i8> @llvm.abs.v2i8(<2 x i8> %sub, i1 true)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %0
;
entry:
  %sub = sub nsw <2 x i8> %a, %b
  %0 = tail call <2 x i8> @llvm.abs.v2i8(<2 x i8> %sub, i1 true)
  ret <2 x i8> %0
}

define <2 x i8> @abdbo_ri(<2 x i8> %0) {
; CV1-LABEL: 'abdbo_ri'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = sub nsw <2 x i8> <i8 15, i8 16>, %0
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %3 = tail call <2 x i8> @llvm.abs.v2i8(<2 x i8> %2, i1 true)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %3
;
; CV2-LABEL: 'abdbo_ri'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = sub nsw <2 x i8> <i8 15, i8 16>, %0
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %3 = tail call <2 x i8> @llvm.abs.v2i8(<2 x i8> %2, i1 true)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %3
;
  %2 = sub nsw <2 x i8> <i8 15, i8 16>, %0
  %3 = tail call <2 x i8> @llvm.abs.v2i8(<2 x i8> %2, i1 true)
  ret <2 x i8> %3
}

declare <2 x i8> @llvm.smax.v2i8(<2 x i8> %a, <2 x i8> %b)
declare <2 x i8> @llvm.smin.v2i8(<2 x i8> %a, <2 x i8> %b)
declare <2 x i8> @llvm.umax.v2i8(<2 x i8> %a, <2 x i8> %b)
declare <2 x i8> @llvm.umin.v2i8(<2 x i8> %a, <2 x i8> %b)
attributes #0 = { nounwind }

define <2 x i8> @test_div_4(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_div_4'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sdiv <2 x i8> %a, <i8 4, i8 4>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sdiv <2 x i8> %a, <i8 4, i8 4>
  ret <2 x i8> %r
}

define <2 x i8> @test_div_32(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_div_32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = sdiv <2 x i8> %a, <i8 32, i8 32>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sdiv <2 x i8> %a, <i8 32, i8 32>
  ret <2 x i8> %r
}


define <2 x i8> @test_div_neg64(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: 'test_div_neg64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r = sdiv <2 x i8> %a, <i8 -64, i8 -64>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sdiv <2 x i8> %a, <i8 -64, i8 -64>
  ret <2 x i8> %r
}

define <2 x i8> @test_div_notsrs(<2 x i8> %a, <2 x i8> %b) {
; ALL-LABEL: 'test_div_notsrs'
; ALL-NEXT:  Cost Model: Found an estimated cost of 50 for instruction: %r = sdiv <2 x i8> %a, <i8 32, i8 16>
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <2 x i8> %r
;
  %r = sdiv <2 x i8> %a, <i8 32, i8 16>
  ret <2 x i8> %r
}
