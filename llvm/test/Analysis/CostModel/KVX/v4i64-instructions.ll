; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefix=CV1
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefix=CV2

target triple = "kvx-kalray-cos"

define <4 x i64> @test_ret_const() #0 {
; CV1-LABEL: 'test_ret_const'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> <i64 1, i64 2, i64 1, i64 2>
;
; CV2-LABEL: 'test_ret_const'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> <i64 1, i64 2, i64 1, i64 2>
;
  ret <4 x i64> <i64 1, i64 2, i64 1, i64 2>
}

define i64 @test_extract_0(<4 x i64> %a) #0 {
; CV1-LABEL: 'test_extract_0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <4 x i64> %a, i64 0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i64 %e
;
; CV2-LABEL: 'test_extract_0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <4 x i64> %a, i64 0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i64 %e
;
  %e = extractelement <4 x i64> %a, i64 0
  ret i64 %e
}

define i64 @test_extract_1(<4 x i64> %a) #0 {
; CV1-LABEL: 'test_extract_1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <4 x i64> %a, i64 1
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i64 %e
;
; CV2-LABEL: 'test_extract_1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %e = extractelement <4 x i64> %a, i64 1
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i64 %e
;
  %e = extractelement <4 x i64> %a, i64 1
  ret i64 %e
}

define <4 x i64> @test_fma(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c) #0 {
; CV1-LABEL: 'test_fma'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %m = mul <4 x i64> %b, %c
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %ad = add <4 x i64> %a, %m
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %ad
;
; CV2-LABEL: 'test_fma'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %m = mul <4 x i64> %b, %c
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %ad = add <4 x i64> %a, %m
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %ad
;
  %m = mul <4 x i64> %b, %c
  %ad = add <4 x i64> %a, %m
  ret <4 x i64> %ad
}

define <4 x i64> @test_fma_imm(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_fma_imm'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %m = mul <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %ad = add <4 x i64> %a, %m
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %ad
;
; CV2-LABEL: 'test_fma_imm'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %m = mul <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %ad = add <4 x i64> %a, %m
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %ad
;
  %m = mul <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %b
  %ad = add <4 x i64> %a, %m
  ret <4 x i64> %ad
}

define i64 @test_extract_i(<4 x i64> %a, i64 %idx) #0 {
; CV1-LABEL: 'test_extract_i'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %e = extractelement <4 x i64> %a, i64 %idx
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i64 %e
;
; CV2-LABEL: 'test_extract_i'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %e = extractelement <4 x i64> %a, i64 %idx
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret i64 %e
;
  %e = extractelement <4 x i64> %a, i64 %idx
  ret i64 %e
}

define <4 x i64> @test_add(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_add'
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r = add <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_add'
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r = add <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = add <4 x i64> %a, %b
  ret <4 x i64> %r
}

define <4 x i64> @test_add_imm_0(<4 x i64> %a) #0 {
; CV1-LABEL: 'test_add_imm_0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = add <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_add_imm_0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = add <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = add <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %a
  ret <4 x i64> %r
}

define <4 x i64> @test_add_imm_1(<4 x i64> %a) #0 {
; CV1-LABEL: 'test_add_imm_1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = add <4 x i64> %a, <i64 1, i64 2, i64 1, i64 2>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_add_imm_1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = add <4 x i64> %a, <i64 1, i64 2, i64 1, i64 2>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = add <4 x i64> %a, <i64 1, i64 2, i64 1, i64 2>
  ret <4 x i64> %r
}

define <4 x i64> @test_sub(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_sub'
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r = sub <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_sub'
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r = sub <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = sub <4 x i64> %a, %b
  ret <4 x i64> %r
}

define <4 x i64> @test_sub_imm(<4 x i64> %a) #0 {
; CV1-LABEL: 'test_sub_imm'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sub <4 x i64> %a, <i64 1, i64 2, i64 1, i64 2>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_sub_imm'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sub <4 x i64> %a, <i64 1, i64 2, i64 1, i64 2>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = sub <4 x i64> %a, <i64 1, i64 2, i64 1, i64 2>
  ret <4 x i64> %r
}

define <4 x i64> @test_sub_fromimm(<4 x i64> %a) #0 {
; CV1-LABEL: 'test_sub_fromimm'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sub <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_sub_fromimm'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sub <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = sub <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %a
  ret <4 x i64> %r
}

define <4 x i64> @test_neg(<4 x i64> %a) #0 {
; CV1-LABEL: 'test_neg'
; CV1-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sub <4 x i64> zeroinitializer, %a
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_neg'
; CV2-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %r = sub <4 x i64> zeroinitializer, %a
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = sub <4 x i64> <i64 0, i64 0, i64 0, i64 0>, %a
  ret <4 x i64> %r
}

define <4 x i64> @test_mul(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_mul'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = mul <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_mul'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = mul <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = mul <4 x i64> %a, %b
  ret <4 x i64> %r
}

define <4 x i64> @test_mul_2(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c) #0 {
; CV1-LABEL: 'test_mul_2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = mul <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r1 = mul <4 x i64> %r, %c
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r1
;
; CV2-LABEL: 'test_mul_2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = mul <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r1 = mul <4 x i64> %r, %c
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r1
;
  %r = mul <4 x i64> %a, %b
  %r1 = mul <4 x i64> %r, %c
  ret <4 x i64> %r1
}

define <4 x i64> @test_div(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_div'
; CV1-NEXT:  Cost Model: Found an estimated cost of 100 for instruction: %r = sdiv <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_div'
; CV2-NEXT:  Cost Model: Found an estimated cost of 100 for instruction: %r = sdiv <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = sdiv <4 x i64> %a, %b
  ret <4 x i64> %r
}

define <4 x i64> @test_rem(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_rem'
; CV1-NEXT:  Cost Model: Found an estimated cost of 100 for instruction: %r = srem <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_rem'
; CV2-NEXT:  Cost Model: Found an estimated cost of 100 for instruction: %r = srem <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = srem <4 x i64> %a, %b
  ret <4 x i64> %r
}

define void @test_ldst_v4i64(ptr %a, ptr %b) {
; CV1-LABEL: 'test_ldst_v4i64'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %t1 = load <4 x i64>, ptr %a, align 32
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i64> %t1, ptr %b, align 16
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
; CV2-LABEL: 'test_ldst_v4i64'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %t1 = load <4 x i64>, ptr %a, align 32
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i64> %t1, ptr %b, align 16
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %t1 = load <4 x i64>, ptr %a
  store <4 x i64> %t1, ptr %b, align 16
  ret void
}

declare <4 x i64> @test_callee(<4 x i64> %a, <4 x i64> %b) #0

define <4 x i64> @test_call(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_call'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i64> @test_callee(<4 x i64> %a, <4 x i64> %b)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_call'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i64> @test_callee(<4 x i64> %a, <4 x i64> %b)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = call <4 x i64> @test_callee(<4 x i64> %a, <4 x i64> %b)
  ret <4 x i64> %r
}

define <4 x i64> @test_call_flipped(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_call_flipped'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i64> @test_callee(<4 x i64> %b, <4 x i64> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_call_flipped'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = call <4 x i64> @test_callee(<4 x i64> %b, <4 x i64> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = call <4 x i64> @test_callee(<4 x i64> %b, <4 x i64> %a)
  ret <4 x i64> %r
}

define <4 x i64> @test_tailcall_flipped(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_tailcall_flipped'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <4 x i64> @test_callee(<4 x i64> %b, <4 x i64> %a)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_tailcall_flipped'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %r = tail call <4 x i64> @test_callee(<4 x i64> %b, <4 x i64> %a)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = tail call <4 x i64> @test_callee(<4 x i64> %b, <4 x i64> %a)
  ret <4 x i64> %r
}

define <4 x i64> @test_select(<4 x i64> %a, <4 x i64> %b, i1 zeroext %c) #0 {
; CV1-LABEL: 'test_select'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <4 x i64> %a, <4 x i64> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_select'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = select i1 %c, <4 x i64> %a, <4 x i64> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = select i1 %c, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i64> @test_select_cc(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c, <4 x i64> %d) #0 {
; CV1-LABEL: 'test_select_cc'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp slt <4 x i64> %c, %d
; CV1-NEXT:  Cost Model: Invalid cost for instruction: %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_select_cc'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp slt <4 x i64> %c, %d
; CV2-NEXT:  Cost Model: Invalid cost for instruction: %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %cc = icmp slt <4 x i64> %c, %d
  %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i64> @test_select_cc_f32_f32(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c, <4 x i64> %d) #0 {
; CV1-LABEL: 'test_select_cc_f32_f32'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp ult <4 x i64> %c, %d
; CV1-NEXT:  Cost Model: Invalid cost for instruction: %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_select_cc_f32_f32'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %cc = icmp ult <4 x i64> %c, %d
; CV2-NEXT:  Cost Model: Invalid cost for instruction: %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %cc = icmp ult <4 x i64> %c, %d
  %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i1> @test_icmp_ule(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_icmp_ule'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ule <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_ule'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ule <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ule <4 x i64> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_slt(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_icmp_slt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp slt <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_slt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp slt <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp slt <4 x i64> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ugt(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_icmp_ugt'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ugt <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_ugt'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ugt <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ugt <4 x i64> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_uge(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_icmp_uge'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp uge <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_uge'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp uge <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp uge <4 x i64> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ult(<4 x i64> %a, <4 x i64> %b) #0 {
; CV1-LABEL: 'test_icmp_ult'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ult <4 x i64> %a, %b
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
; CV2-LABEL: 'test_icmp_ult'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %r = icmp ult <4 x i64> %a, %b
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i1> %r
;
  %r = icmp ult <4 x i64> %a, %b
  ret <4 x i1> %r
}

declare <4 x i64> @llvm.abs.v4i64(<4 x i64>, i1) #0

define <4 x i64> @test_abs(<4 x i64> %a) #0 {
; CV1-LABEL: 'test_abs'
; CV1-NEXT:  Cost Model: Invalid cost for instruction: %r = call <4 x i64> @llvm.abs.v4i64(<4 x i64> %a, i1 false)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
; CV2-LABEL: 'test_abs'
; CV2-NEXT:  Cost Model: Invalid cost for instruction: %r = call <4 x i64> @llvm.abs.v4i64(<4 x i64> %a, i1 false)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %r
;
  %r = call <4 x i64> @llvm.abs.v4i64(<4 x i64> %a, i1 false)
  ret <4 x i64> %r
}

define <4 x i64> @test_insertelement0(<4 x i64> %a, i64 %x) #0 {
; CV1-LABEL: 'test_insertelement0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
; CV2-LABEL: 'test_insertelement0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
  %i = insertelement <4 x i64> %a, i64 %x, i64 0
  ret <4 x i64> %i
}

define <4 x i64> @test_insertelement1(<4 x i64> %a, i64 %x) #0 {
; CV1-LABEL: 'test_insertelement1'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 1
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
; CV2-LABEL: 'test_insertelement1'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 1
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
  %i = insertelement <4 x i64> %a, i64 %x, i64 1
  ret <4 x i64> %i
}

define <4 x i64> @test_insertelement2(<4 x i64> %a, i64 %x) #0 {
; CV1-LABEL: 'test_insertelement2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 2
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
; CV2-LABEL: 'test_insertelement2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 2
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
  %i = insertelement <4 x i64> %a, i64 %x, i64 2
  ret <4 x i64> %i
}

define <4 x i64> @test_insertelement3(<4 x i64> %a, i64 %x) #0 {
; CV1-LABEL: 'test_insertelement3'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 3
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
; CV2-LABEL: 'test_insertelement3'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 3
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
  %i = insertelement <4 x i64> %a, i64 %x, i64 3
  ret <4 x i64> %i
}

define <4 x i64> @test_insertelement(<4 x i64> %a, i64 %x, i64 %p) #0 {
; CV1-LABEL: 'test_insertelement'
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 %p
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
; CV2-LABEL: 'test_insertelement'
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %i = insertelement <4 x i64> %a, i64 %x, i64 %p
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %i
;
  %i = insertelement <4 x i64> %a, i64 %x, i64 %p
  ret <4 x i64> %i
}

define <4 x i8> @trunc_to_v4i8(<4 x i64> %a) {
; CV1-LABEL: 'trunc_to_v4i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = trunc <4 x i64> %a to <4 x i8>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
; CV2-LABEL: 'trunc_to_v4i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r = trunc <4 x i64> %a to <4 x i8>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %r
;
  %r = trunc <4 x i64> %a to <4 x i8>
  ret <4 x i8> %r
}

define <4 x i8> @trunc_to_v4i8_buildvector(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) {
; CV1-LABEL: 'trunc_to_v4i8_buildvector'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v0 = insertelement <4 x i64> undef, i64 %arg1, i32 0
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v1 = insertelement <4 x i64> %v0, i64 %arg2, i32 1
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v2 = insertelement <4 x i64> %v1, i64 %arg3, i32 2
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v3 = insertelement <4 x i64> %v2, i64 %arg4, i32 3
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %conv = trunc <4 x i64> %v3 to <4 x i8>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %conv
;
; CV2-LABEL: 'trunc_to_v4i8_buildvector'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v0 = insertelement <4 x i64> undef, i64 %arg1, i32 0
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v1 = insertelement <4 x i64> %v0, i64 %arg2, i32 1
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v2 = insertelement <4 x i64> %v1, i64 %arg3, i32 2
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v3 = insertelement <4 x i64> %v2, i64 %arg4, i32 3
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %conv = trunc <4 x i64> %v3 to <4 x i8>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i8> %conv
;
  %v0 = insertelement <4 x i64> undef, i64 %arg1, i32 0
  %v1 = insertelement <4 x i64> %v0, i64 %arg2, i32 1
  %v2 = insertelement <4 x i64> %v1, i64 %arg3, i32 2
  %v3 = insertelement <4 x i64> %v2, i64 %arg4, i32 3
  %conv = trunc <4 x i64> %v3 to <4 x i8>
  ret <4 x i8> %conv
}

define <4 x i64> @concat(<2 x i64> %a, <2 x i64> %b){
; CV1-LABEL: 'concat'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v = shufflevector <2 x i64> %a, <2 x i64> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %v
;
; CV2-LABEL: 'concat'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v = shufflevector <2 x i64> %a, <2 x i64> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %v
;
  %v = shufflevector <2 x i64> %a, <2 x i64> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i64> %v
}

define <4 x i64> @revconcat(<2 x i64> %b, <2 x i64> %a){
; CV1-LABEL: 'revconcat'
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v = shufflevector <2 x i64> %a, <2 x i64> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %v
;
; CV2-LABEL: 'revconcat'
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %v = shufflevector <2 x i64> %a, <2 x i64> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %v
;
  %v = shufflevector <2 x i64> %a, <2 x i64> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i64> %v
}

define <4 x i64> @MULWDP(<4 x i32> %a, <4 x i32> %b) {
; CV1-LABEL: 'MULWDP'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = sext <4 x i32> %a to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i32> %b to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul = mul nsw <4 x i64> %1, %0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %mul
;
; CV2-LABEL: 'MULWDP'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = sext <4 x i32> %a to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = sext <4 x i32> %b to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul = mul nsw <4 x i64> %1, %0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %mul
;
entry:
  %0 = sext <4 x i32> %a to <4 x i64>
  %1 = sext <4 x i32> %b to <4 x i64>
  %mul = mul nsw <4 x i64> %1, %0
  ret <4 x i64> %mul
}

define <4 x i64> @MULSUWDP(<4 x i32> %a, <4 x i32> %b) {
; CV1-LABEL: 'MULSUWDP'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = sext <4 x i32> %a to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = zext <4 x i32> %b to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul = mul nsw <4 x i64> %1, %0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %mul
;
; CV2-LABEL: 'MULSUWDP'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = sext <4 x i32> %a to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = zext <4 x i32> %b to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul = mul nsw <4 x i64> %1, %0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %mul
;
entry:
  %0 = sext <4 x i32> %a to <4 x i64>
  %1 = zext <4 x i32> %b to <4 x i64>
  %mul = mul nsw <4 x i64> %1, %0
  ret <4 x i64> %mul
}

define <4 x i64> @MULUWDP(<4 x i32> %a, <4 x i32> %b) {
; CV1-LABEL: 'MULUWDP'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = zext <4 x i32> %a to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = zext <4 x i32> %b to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul = mul nuw <4 x i64> %1, %0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %mul
;
; CV2-LABEL: 'MULUWDP'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %0 = zext <4 x i32> %a to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = zext <4 x i32> %b to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul = mul nuw <4 x i64> %1, %0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %mul
;
entry:
  %0 = zext <4 x i32> %a to <4 x i64>
  %1 = zext <4 x i32> %b to <4 x i64>
  %mul = mul nuw <4 x i64> %1, %0
  ret <4 x i64> %mul
}

define <4 x i64> @MADDWDP(<4 x i64> %0, <4 x i32> %1, <4 x i32> %2) {
; CV1-LABEL: 'MADDWDP'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <4 x i32> %1 to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = sext <4 x i32> %2 to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = mul nsw <4 x i64> %5, %4
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %7 = add <4 x i64> %6, %0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %7
;
; CV2-LABEL: 'MADDWDP'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <4 x i32> %1 to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = sext <4 x i32> %2 to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = mul nsw <4 x i64> %5, %4
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %7 = add <4 x i64> %6, %0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %7
;
  %4 = sext <4 x i32> %1 to <4 x i64>
  %5 = sext <4 x i32> %2 to <4 x i64>
  %6 = mul nsw <4 x i64> %5, %4
  %7 = add <4 x i64> %6, %0
  ret <4 x i64> %7
}

define <4 x i64> @MADDSUWDP(<4 x i64> %0, <4 x i32> %1, <4 x i32> %2) {
; CV1-LABEL: 'MADDSUWDP'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <4 x i32> %1 to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <4 x i32> %2 to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = mul nsw <4 x i64> %5, %4
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %7 = add <4 x i64> %6, %0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %7
;
; CV2-LABEL: 'MADDSUWDP'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = sext <4 x i32> %1 to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <4 x i32> %2 to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = mul nsw <4 x i64> %5, %4
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %7 = add <4 x i64> %6, %0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %7
;
  %4 = sext <4 x i32> %1 to <4 x i64>
  %5 = zext <4 x i32> %2 to <4 x i64>
  %6 = mul nsw <4 x i64> %5, %4
  %7 = add <4 x i64> %6, %0
  ret <4 x i64> %7
}

define <4 x i64> @MADDUWDP(<4 x i64> %0, <4 x i32> %1, <4 x i32> %2) {
; CV1-LABEL: 'MADDUWDP'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = zext <4 x i32> %1 to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <4 x i32> %2 to <4 x i64>
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = mul nuw <4 x i64> %5, %4
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %7 = add <4 x i64> %6, %0
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %7
;
; CV2-LABEL: 'MADDUWDP'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = zext <4 x i32> %1 to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = zext <4 x i32> %2 to <4 x i64>
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = mul nuw <4 x i64> %5, %4
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %7 = add <4 x i64> %6, %0
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret <4 x i64> %7
;
  %4 = zext <4 x i32> %1 to <4 x i64>
  %5 = zext <4 x i32> %2 to <4 x i64>
  %6 = mul nuw <4 x i64> %5, %4
  %7 = add <4 x i64> %6, %0
  ret <4 x i64> %7
}

attributes #0 = { nounwind }

define void @subvec0(ptr %0) {
; CV1-LABEL: 'subvec0'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %3 = shufflevector <4 x i64> zeroinitializer, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %4 = add nsw <2 x i64> zeroinitializer, %3
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %6 = shufflevector <4 x i64> %5, <4 x i64> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i64> %6, ptr undef, align 16
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
;
; CV2-LABEL: 'subvec0'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %3 = shufflevector <4 x i64> zeroinitializer, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %4 = add nsw <2 x i64> zeroinitializer, %3
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %6 = shufflevector <4 x i64> %5, <4 x i64> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i64> %6, ptr undef, align 16
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
;
  br label %2

2:
  %3 = shufflevector <4 x i64> zeroinitializer, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4 = add nsw <2 x i64> zeroinitializer, %3
  %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6 = shufflevector <4 x i64> %5, <4 x i64> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %6, ptr undef, align 16
  br label %2
}

define void @subvec2(ptr %0) {
; CV1-LABEL: 'subvec2'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %3 = shufflevector <4 x i64> zeroinitializer, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %4 = add nsw <2 x i64> zeroinitializer, %3
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; CV1-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %6 = shufflevector <4 x i64> %5, <4 x i64> zeroinitializer, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i64> %6, ptr undef, align 16
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
;
; CV2-LABEL: 'subvec2'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %3 = shufflevector <4 x i64> zeroinitializer, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %4 = add nsw <2 x i64> zeroinitializer, %3
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; CV2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %6 = shufflevector <4 x i64> %5, <4 x i64> zeroinitializer, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store <4 x i64> %6, ptr undef, align 16
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %2
;
  br label %2

2:
  %3 = shufflevector <4 x i64> zeroinitializer, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4 = add nsw <2 x i64> zeroinitializer, %3
  %5 = shufflevector <2 x i64> %4, <2 x i64> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6 = shufflevector <4 x i64> %5, <4 x i64> zeroinitializer, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  store <4 x i64> %6, ptr undef, align 16
  br label %2
}
