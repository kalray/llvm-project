; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -mcpu=kv3-1 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV1
; RUN: opt -mcpu=kv3-2 -mtriple=kvx-kalray-cos -passes='print<cost-model>' -cost-kind=throughput -disable-output %s 2>&1 | FileCheck %s --check-prefixes=ALL,CV2

target triple = "kvx-kalray-cos"

define void @i1() {
; ALL-LABEL: 'i1'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = add i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d = sub i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = mul i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f = ashr i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g = lshr i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h = shl i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = and i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j = or i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k = xor i1 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c = add i1 undef, undef
  %d = sub i1 undef, undef
  %e = mul i1 undef, undef
  %f = ashr i1 undef, undef
  %g = lshr i1 undef, undef
  %h = shl i1 undef, undef
  %i = and i1 undef, undef
  %j = or i1 undef, undef
  %k = xor i1 undef, undef
  ret void
}

define void @i8() {
; ALL-LABEL: 'i8'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = add i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d = sub i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = mul i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f = ashr i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g = lshr i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h = shl i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = and i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j = or i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k = xor i8 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c = add i8 undef, undef
  %d = sub i8 undef, undef
  %e = mul i8 undef, undef
  %f = ashr i8 undef, undef
  %g = lshr i8 undef, undef
  %h = shl i8 undef, undef
  %i = and i8 undef, undef
  %j = or i8 undef, undef
  %k = xor i8 undef, undef
  ret void
}

define void @i16() {
; ALL-LABEL: 'i16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = add i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d = sub i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = mul i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f = ashr i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g = lshr i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h = shl i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = and i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j = or i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k = xor i16 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c = add i16 undef, undef
  %d = sub i16 undef, undef
  %e = mul i16 undef, undef
  %f = ashr i16 undef, undef
  %g = lshr i16 undef, undef
  %h = shl i16 undef, undef
  %i = and i16 undef, undef
  %j = or i16 undef, undef
  %k = xor i16 undef, undef
  ret void
}

define void @i32() {
; ALL-LABEL: 'i32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = add i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d = sub i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = mul i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f = ashr i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g = lshr i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h = shl i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = and i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j = or i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k = xor i32 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c = add i32 undef, undef
  %d = sub i32 undef, undef
  %e = mul i32 undef, undef
  %f = ashr i32 undef, undef
  %g = lshr i32 undef, undef
  %h = shl i32 undef, undef
  %i = and i32 undef, undef
  %j = or i32 undef, undef
  %k = xor i32 undef, undef
  ret void
}

define void @i64() {
; ALL-LABEL: 'i64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c = add i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d = sub i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e = mul i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f = ashr i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g = lshr i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h = shl i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i = and i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j = or i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k = xor i64 undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c = add i64 undef, undef
  %d = sub i64 undef, undef
  %e = mul i64 undef, undef
  %f = ashr i64 undef, undef
  %g = lshr i64 undef, undef
  %h = shl i64 undef, undef
  %i = and i64 undef, undef
  %j = or i64 undef, undef
  %k = xor i64 undef, undef
  ret void
}

define void @vi1() {
; ALL-LABEL: 'vi1'
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %c2 = add <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %d2 = sub <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %e2 = mul <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %f2 = ashr <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %g2 = lshr <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %h2 = shl <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %i2 = and <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %j2 = or <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %k2 = xor <2 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %c4 = add <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %d4 = sub <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %e4 = mul <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %f4 = ashr <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %g4 = lshr <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %h4 = shl <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %i4 = and <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %j4 = or <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %k4 = xor <4 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %c8 = add <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %d8 = sub <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %e8 = mul <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %f8 = ashr <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %g8 = lshr <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %h8 = shl <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %i1 = and <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %j8 = or <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %k8 = xor <8 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %c16 = add <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %d16 = sub <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %e16 = mul <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %f16 = ashr <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %g16 = lshr <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %h16 = shl <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %i16 = and <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %j16 = or <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %k16 = xor <16 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %c32 = add <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %d32 = sub <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %e32 = mul <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %f32 = ashr <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %g32 = lshr <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %h32 = shl <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %i32 = and <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %j32 = or <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Invalid cost for instruction: %k32 = xor <32 x i1> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c2 = add <2 x i1> undef, undef
  %d2 = sub <2 x i1> undef, undef
  %e2 = mul <2 x i1> undef, undef
  %f2 = ashr <2 x i1> undef, undef
  %g2 = lshr <2 x i1> undef, undef
  %h2 = shl <2 x i1> undef, undef
  %i2 = and <2 x i1> undef, undef
  %j2 = or <2 x i1> undef, undef
  %k2 = xor <2 x i1> undef, undef
  %c4 = add <4 x i1> undef, undef
  %d4 = sub <4 x i1> undef, undef
  %e4 = mul <4 x i1> undef, undef
  %f4 = ashr <4 x i1> undef, undef
  %g4 = lshr <4 x i1> undef, undef
  %h4 = shl <4 x i1> undef, undef
  %i4 = and <4 x i1> undef, undef
  %j4 = or <4 x i1> undef, undef
  %k4 = xor <4 x i1> undef, undef
  %c8 = add <8 x i1> undef, undef
  %d8 = sub <8 x i1> undef, undef
  %e8 = mul <8 x i1> undef, undef
  %f8 = ashr <8 x i1> undef, undef
  %g8 = lshr <8 x i1> undef, undef
  %h8 = shl <8 x i1> undef, undef
  %i1 = and <8 x i1> undef, undef
  %j8 = or <8 x i1> undef, undef
  %k8 = xor <8 x i1> undef, undef
  %c16 = add <16 x i1> undef, undef
  %d16 = sub <16 x i1> undef, undef
  %e16 = mul <16 x i1> undef, undef
  %f16 = ashr <16 x i1> undef, undef
  %g16 = lshr <16 x i1> undef, undef
  %h16 = shl <16 x i1> undef, undef
  %i16 = and <16 x i1> undef, undef
  %j16 = or <16 x i1> undef, undef
  %k16 = xor <16 x i1> undef, undef
  %c32 = add <32 x i1> undef, undef
  %d32 = sub <32 x i1> undef, undef
  %e32 = mul <32 x i1> undef, undef
  %f32 = ashr <32 x i1> undef, undef
  %g32 = lshr <32 x i1> undef, undef
  %h32 = shl <32 x i1> undef, undef
  %i32 = and <32 x i1> undef, undef
  %j32 = or <32 x i1> undef, undef
  %k32 = xor <32 x i1> undef, undef
  ret void
}

define void @vi8() {
; CV1-LABEL: 'vi8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c2 = add <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d2 = sub <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e2 = mul <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %f2 = ashr <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %g2 = lshr <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %h2 = shl <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i2 = and <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j2 = or <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k2 = xor <2 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c4 = add <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d4 = sub <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e4 = mul <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %f4 = ashr <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %g4 = lshr <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 9 for instruction: %h4 = shl <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i4 = and <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j4 = or <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k4 = xor <4 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c8 = add <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d8 = sub <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e8 = mul <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 21 for instruction: %f8 = ashr <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 21 for instruction: %g8 = lshr <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 21 for instruction: %h8 = shl <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i8 = and <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j8 = or <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k8 = xor <8 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %c16 = add <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %d16 = sub <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %e16 = mul <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 28 for instruction: %f16 = ashr <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 28 for instruction: %g16 = lshr <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 28 for instruction: %h16 = shl <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %i16 = and <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %j16 = or <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %k16 = xor <16 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %c32 = add <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %d32 = sub <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %e32 = mul <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 42 for instruction: %f32 = ashr <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 42 for instruction: %g32 = lshr <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 42 for instruction: %h32 = shl <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %i32 = and <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %j32 = or <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %k32 = xor <32 x i8> undef, undef
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
; CV2-LABEL: 'vi8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c2 = add <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d2 = sub <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e2 = mul <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f2 = ashr <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g2 = lshr <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h2 = shl <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i2 = and <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j2 = or <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k2 = xor <2 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c4 = add <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d4 = sub <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e4 = mul <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %f4 = ashr <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %g4 = lshr <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %h4 = shl <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i4 = and <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j4 = or <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k4 = xor <4 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c8 = add <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d8 = sub <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e8 = mul <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %f8 = ashr <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %g8 = lshr <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %h8 = shl <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i8 = and <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j8 = or <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k8 = xor <8 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %c16 = add <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %d16 = sub <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %e16 = mul <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 14 for instruction: %f16 = ashr <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 14 for instruction: %g16 = lshr <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 14 for instruction: %h16 = shl <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %i16 = and <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %j16 = or <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %k16 = xor <16 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %c32 = add <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %d32 = sub <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %e32 = mul <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 28 for instruction: %f32 = ashr <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 28 for instruction: %g32 = lshr <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 28 for instruction: %h32 = shl <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %i32 = and <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %j32 = or <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %k32 = xor <32 x i8> undef, undef
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c2 = add <2 x i8> undef, undef
  %d2 = sub <2 x i8> undef, undef
  %e2 = mul <2 x i8> undef, undef
  %f2 = ashr <2 x i8> undef, undef
  %g2 = lshr <2 x i8> undef, undef
  %h2 = shl <2 x i8> undef, undef
  %i2 = and <2 x i8> undef, undef
  %j2 = or <2 x i8> undef, undef
  %k2 = xor <2 x i8> undef, undef
  %c4 = add <4 x i8> undef, undef
  %d4 = sub <4 x i8> undef, undef
  %e4 = mul <4 x i8> undef, undef
  %f4 = ashr <4 x i8> undef, undef
  %g4 = lshr <4 x i8> undef, undef
  %h4 = shl <4 x i8> undef, undef
  %i4 = and <4 x i8> undef, undef
  %j4 = or <4 x i8> undef, undef
  %k4 = xor <4 x i8> undef, undef
  %c8 = add <8 x i8> undef, undef
  %d8 = sub <8 x i8> undef, undef
  %e8 = mul <8 x i8> undef, undef
  %f8 = ashr <8 x i8> undef, undef
  %g8 = lshr <8 x i8> undef, undef
  %h8 = shl <8 x i8> undef, undef
  %i8 = and <8 x i8> undef, undef
  %j8 = or <8 x i8> undef, undef
  %k8 = xor <8 x i8> undef, undef
  %c16 = add <16 x i8> undef, undef
  %d16 = sub <16 x i8> undef, undef
  %e16 = mul <16 x i8> undef, undef
  %f16 = ashr <16 x i8> undef, undef
  %g16 = lshr <16 x i8> undef, undef
  %h16 = shl <16 x i8> undef, undef
  %i16 = and <16 x i8> undef, undef
  %j16 = or <16 x i8> undef, undef
  %k16 = xor <16 x i8> undef, undef
  %c32 = add <32 x i8> undef, undef
  %d32 = sub <32 x i8> undef, undef
  %e32 = mul <32 x i8> undef, undef
  %f32 = ashr <32 x i8> undef, undef
  %g32 = lshr <32 x i8> undef, undef
  %h32 = shl <32 x i8> undef, undef
  %i32 = and <32 x i8> undef, undef
  %j32 = or <32 x i8> undef, undef
  %k32 = xor <32 x i8> undef, undef
  ret void
}

define void @vi16() {
; ALL-LABEL: 'vi16'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c2 = add <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d2 = sub <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e2 = mul <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f2 = ashr <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g2 = lshr <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h2 = shl <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i2 = and <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j2 = or <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k2 = xor <2 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c4 = add <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d4 = sub <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e4 = mul <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %f4 = ashr <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %g4 = lshr <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %h4 = shl <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i4 = and <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j4 = or <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k4 = xor <4 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %c8 = add <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %d8 = sub <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %e8 = mul <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %f8 = ashr <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %g8 = lshr <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %h8 = shl <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %i8 = and <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %j8 = or <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %k8 = xor <8 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %c16 = add <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %d16 = sub <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %e16 = mul <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 12 for instruction: %f16 = ashr <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 12 for instruction: %g16 = lshr <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 12 for instruction: %h16 = shl <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %i16 = and <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %j16 = or <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %k16 = xor <16 x i16> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c2 = add <2 x i16> undef, undef
  %d2 = sub <2 x i16> undef, undef
  %e2 = mul <2 x i16> undef, undef
  %f2 = ashr <2 x i16> undef, undef
  %g2 = lshr <2 x i16> undef, undef
  %h2 = shl <2 x i16> undef, undef
  %i2 = and <2 x i16> undef, undef
  %j2 = or <2 x i16> undef, undef
  %k2 = xor <2 x i16> undef, undef
  %c4 = add <4 x i16> undef, undef
  %d4 = sub <4 x i16> undef, undef
  %e4 = mul <4 x i16> undef, undef
  %f4 = ashr <4 x i16> undef, undef
  %g4 = lshr <4 x i16> undef, undef
  %h4 = shl <4 x i16> undef, undef
  %i4 = and <4 x i16> undef, undef
  %j4 = or <4 x i16> undef, undef
  %k4 = xor <4 x i16> undef, undef
  %c8 = add <8 x i16> undef, undef
  %d8 = sub <8 x i16> undef, undef
  %e8 = mul <8 x i16> undef, undef
  %f8 = ashr <8 x i16> undef, undef
  %g8 = lshr <8 x i16> undef, undef
  %h8 = shl <8 x i16> undef, undef
  %i8 = and <8 x i16> undef, undef
  %j8 = or <8 x i16> undef, undef
  %k8 = xor <8 x i16> undef, undef
  %c16 = add <16 x i16> undef, undef
  %d16 = sub <16 x i16> undef, undef
  %e16 = mul <16 x i16> undef, undef
  %f16 = ashr <16 x i16> undef, undef
  %g16 = lshr <16 x i16> undef, undef
  %h16 = shl <16 x i16> undef, undef
  %i16 = and <16 x i16> undef, undef
  %j16 = or <16 x i16> undef, undef
  %k16 = xor <16 x i16> undef, undef
  ret void
}

define void @vi32() {
; ALL-LABEL: 'vi32'
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c2 = add <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d2 = sub <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %e2 = mul <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f2 = ashr <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g2 = lshr <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h2 = shl <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i2 = and <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j2 = or <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k2 = xor <2 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %c4 = add <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %d4 = sub <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %e4 = mul <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %f4 = ashr <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %g4 = lshr <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %h4 = shl <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %i4 = and <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %j4 = or <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %k4 = xor <4 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %c8 = add <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %d8 = sub <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %e8 = mul <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %f8 = ashr <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %g8 = lshr <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %h8 = shl <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %i8 = and <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %j8 = or <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %k8 = xor <8 x i32> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c2 = add <2 x i32> undef, undef
  %d2 = sub <2 x i32> undef, undef
  %e2 = mul <2 x i32> undef, undef
  %f2 = ashr <2 x i32> undef, undef
  %g2 = lshr <2 x i32> undef, undef
  %h2 = shl <2 x i32> undef, undef
  %i2 = and <2 x i32> undef, undef
  %j2 = or <2 x i32> undef, undef
  %k2 = xor <2 x i32> undef, undef
  %c4 = add <4 x i32> undef, undef
  %d4 = sub <4 x i32> undef, undef
  %e4 = mul <4 x i32> undef, undef
  %f4 = ashr <4 x i32> undef, undef
  %g4 = lshr <4 x i32> undef, undef
  %h4 = shl <4 x i32> undef, undef
  %i4 = and <4 x i32> undef, undef
  %j4 = or <4 x i32> undef, undef
  %k4 = xor <4 x i32> undef, undef
  %c8 = add <8 x i32> undef, undef
  %d8 = sub <8 x i32> undef, undef
  %e8 = mul <8 x i32> undef, undef
  %f8 = ashr <8 x i32> undef, undef
  %g8 = lshr <8 x i32> undef, undef
  %h8 = shl <8 x i32> undef, undef
  %i8 = and <8 x i32> undef, undef
  %j8 = or <8 x i32> undef, undef
  %k8 = xor <8 x i32> undef, undef
  ret void
}

define void @vi64() {
; ALL-LABEL: 'vi64'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %c2 = add <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %d2 = sub <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %e2 = mul <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %f2 = ashr <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %g2 = lshr <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %h2 = shl <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %i2 = and <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %j2 = or <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %k2 = xor <2 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %c4 = add <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %d4 = sub <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %e4 = mul <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %f4 = ashr <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %g4 = lshr <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %h4 = shl <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %i4 = and <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %j4 = or <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %k4 = xor <4 x i64> undef, undef
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %c2 = add <2 x i64> undef, undef
  %d2 = sub <2 x i64> undef, undef
  %e2 = mul <2 x i64> undef, undef
  %f2 = ashr <2 x i64> undef, undef
  %g2 = lshr <2 x i64> undef, undef
  %h2 = shl <2 x i64> undef, undef
  %i2 = and <2 x i64> undef, undef
  %j2 = or <2 x i64> undef, undef
  %k2 = xor <2 x i64> undef, undef
  %c4 = add <4 x i64> undef, undef
  %d4 = sub <4 x i64> undef, undef
  %e4 = mul <4 x i64> undef, undef
  %f4 = ashr <4 x i64> undef, undef
  %g4 = lshr <4 x i64> undef, undef
  %h4 = shl <4 x i64> undef, undef
  %i4 = and <4 x i64> undef, undef
  %j4 = or <4 x i64> undef, undef
  %k4 = xor <4 x i64> undef, undef
  ret void
}

define void @fsh_i8() {
; CV1-LABEL: 'fsh_i8'
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r_fshl_v2i8i = call <2 x i8> @llvm.fshl.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> <i8 3, i8 3>)
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r_fshl_v2i8r = call <2 x i8> @llvm.fshl.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r_fshr_v2i8i = call <2 x i8> @llvm.fshr.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> <i8 3, i8 3>)
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r_fshr_v2i8r = call <2 x i8> @llvm.fshr.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r_fshl_v4i8r = call <4 x i8> @llvm.fshl.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> <i8 3, i8 3, i8 3, i8 3>)
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r_fshl_v4i8i = call <4 x i8> @llvm.fshl.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r_fshr_v4i8r = call <4 x i8> @llvm.fshr.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> <i8 3, i8 3, i8 3, i8 3>)
; CV1-NEXT:  Cost Model: Found an estimated cost of 7 for instruction: %r_fshr_v4i8i = call <4 x i8> @llvm.fshr.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %r_fshl_v8i8r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>)
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %r_fshl_v8i8i = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %r_fshr_v8i8r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>)
; CV1-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %r_fshr_v8i8i = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> undef)
; CV1-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
; CV2-LABEL: 'fsh_i8'
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v2i8i = call <2 x i8> @llvm.fshl.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> <i8 3, i8 3>)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v2i8r = call <2 x i8> @llvm.fshl.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v2i8i = call <2 x i8> @llvm.fshr.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> <i8 3, i8 3>)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v2i8r = call <2 x i8> @llvm.fshr.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v4i8r = call <4 x i8> @llvm.fshl.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> <i8 3, i8 3, i8 3, i8 3>)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v4i8i = call <4 x i8> @llvm.fshl.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v4i8r = call <4 x i8> @llvm.fshr.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> <i8 3, i8 3, i8 3, i8 3>)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v4i8i = call <4 x i8> @llvm.fshr.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v8i8r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v8i8i = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v8i8r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>)
; CV2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v8i8i = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> undef)
; CV2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %r_fshl_v2i8i = call <2 x i8> @llvm.fshl.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> <i8 3, i8 3>)
  %r_fshl_v2i8r = call <2 x i8> @llvm.fshl.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> undef)
  %r_fshr_v2i8i = call <2 x i8> @llvm.fshr.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> <i8 3, i8 3>)
  %r_fshr_v2i8r = call <2 x i8> @llvm.fshr.v2i8(<2 x i8> undef, <2 x i8> undef, <2 x i8> undef)

  %r_fshl_v4i8r = call <4 x i8> @llvm.fshl.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> <i8 3, i8 3, i8 3, i8 3>)
  %r_fshl_v4i8i = call <4 x i8> @llvm.fshl.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> undef)
  %r_fshr_v4i8r = call <4 x i8> @llvm.fshr.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> <i8 3, i8 3, i8 3, i8 3>)
  %r_fshr_v4i8i = call <4 x i8> @llvm.fshr.v4i8(<4 x i8> undef, <4 x i8> undef, <4 x i8> undef)

  %r_fshl_v8i8r = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>)
  %r_fshl_v8i8i = call <8 x i8> @llvm.fshl.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> undef)
  %r_fshr_v8i8r = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>)
  %r_fshr_v8i8i = call <8 x i8> @llvm.fshr.v8i8(<8 x i8> undef, <8 x i8> undef, <8 x i8> undef)
  ret void
}

define void @fsh() {
; ALL-LABEL: 'fsh'
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v2i16i = call <2 x i16> @llvm.fshl.v2i16(<2 x i16> undef, <2 x i16> undef, <2 x i16> <i16 3, i16 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v2i16r = call <2 x i16> @llvm.fshl.v2i16(<2 x i16> undef, <2 x i16> undef, <2 x i16> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v2i16i = call <2 x i16> @llvm.fshr.v2i16(<2 x i16> undef, <2 x i16> undef, <2 x i16> <i16 3, i16 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v2i16r = call <2 x i16> @llvm.fshr.v2i16(<2 x i16> undef, <2 x i16> undef, <2 x i16> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v2i32i = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> undef, <2 x i32> undef, <2 x i32> <i32 3, i32 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v2i32r = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> undef, <2 x i32> undef, <2 x i32> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v2i32i = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> undef, <2 x i32> undef, <2 x i32> <i32 3, i32 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v2i32r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> undef, <2 x i32> undef, <2 x i32> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v2i64i = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> undef, <2 x i64> undef, <2 x i64> <i64 3, i64 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v2i64r = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> undef, <2 x i64> undef, <2 x i64> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v2i64i = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> undef, <2 x i64> undef, <2 x i64> <i64 3, i64 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v2i64r = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> undef, <2 x i64> undef, <2 x i64> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v3i16i = call <3 x i16> @llvm.fshl.v3i16(<3 x i16> undef, <3 x i16> undef, <3 x i16> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v4i16r = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> undef, <4 x i16> undef, <4 x i16> <i16 3, i16 3, i16 3, i16 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v4i16i = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> undef, <4 x i16> undef, <4 x i16> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v4i16r = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> undef, <4 x i16> undef, <4 x i16> <i16 3, i16 3, i16 3, i16 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v4i16i = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> undef, <4 x i16> undef, <4 x i16> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v4i32r = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> undef, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v4i32i = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> undef, <4 x i32> undef, <4 x i32> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v4i32r = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> undef, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshr_v4i32i = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> undef, <4 x i32> undef, <4 x i32> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r_fshl_v4i64r = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> undef, <4 x i64> undef, <4 x i64> <i64 3, i64 3, i64 3, i64 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r_fshl_v4i64i = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> undef, <4 x i64> undef, <4 x i64> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r_fshr_v4i64r = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> undef, <4 x i64> undef, <4 x i64> <i64 3, i64 3, i64 3, i64 3>)
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r_fshr_v4i64i = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> undef, <4 x i64> undef, <4 x i64> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %r_fshl_v8i16r = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> undef, <8 x i16> undef, <8 x i16> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %r_fshl_v16i16 = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> undef, <16 x i16> undef, <16 x i16> undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fshl_i8 = call i8 @llvm.fshl.i8(i8 undef, i8 undef, i8 undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fshr_i8 = call i8 @llvm.fshr.i8(i8 undef, i8 undef, i8 undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fshl_i16 = call i16 @llvm.fshl.i16(i16 undef, i16 undef, i16 undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fshr_i16 = call i16 @llvm.fshr.i16(i16 undef, i16 undef, i16 undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fshl_i32 = call i32 @llvm.fshl.i32(i32 undef, i32 undef, i32 undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fshr_i32 = call i32 @llvm.fshr.i32(i32 undef, i32 undef, i32 undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fshl_i64 = call i64 @llvm.fshl.i64(i64 undef, i64 undef, i64 undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %fshr_i64 = call i64 @llvm.fshr.i64(i64 undef, i64 undef, i64 undef)
; ALL-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %r_fshl_v2i16i = call <2 x i16> @llvm.fshl.v2i16(<2 x i16> undef, <2 x i16> undef, <2 x i16> <i16 3, i16 3>)
  %r_fshl_v2i16r = call <2 x i16> @llvm.fshl.v2i16(<2 x i16> undef, <2 x i16> undef, <2 x i16> undef)
  %r_fshr_v2i16i = call <2 x i16> @llvm.fshr.v2i16(<2 x i16> undef, <2 x i16> undef, <2 x i16> <i16 3, i16 3>)
  %r_fshr_v2i16r = call <2 x i16> @llvm.fshr.v2i16(<2 x i16> undef, <2 x i16> undef, <2 x i16> undef)
  %r_fshl_v2i32i = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> undef, <2 x i32> undef, <2 x i32> <i32 3, i32 3>)
  %r_fshl_v2i32r = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> undef, <2 x i32> undef, <2 x i32> undef)
  %r_fshr_v2i32i = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> undef, <2 x i32> undef, <2 x i32> <i32 3, i32 3>)
  %r_fshr_v2i32r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> undef, <2 x i32> undef, <2 x i32> undef)
  %r_fshl_v2i64i = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> undef, <2 x i64> undef, <2 x i64> <i64 3, i64 3>)
  %r_fshl_v2i64r = call <2 x i64> @llvm.fshl.v2i64(<2 x i64> undef, <2 x i64> undef, <2 x i64> undef)
  %r_fshr_v2i64i = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> undef, <2 x i64> undef, <2 x i64> <i64 3, i64 3>)
  %r_fshr_v2i64r = call <2 x i64> @llvm.fshr.v2i64(<2 x i64> undef, <2 x i64> undef, <2 x i64> undef)
  %r_fshl_v3i16i = call <3 x i16> @llvm.fshl.v3i16(<3 x i16> undef, <3 x i16> undef, <3 x i16> undef)
  %r_fshl_v4i16r = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> undef, <4 x i16> undef, <4 x i16> <i16 3, i16 3, i16 3, i16 3>)
  %r_fshl_v4i16i = call <4 x i16> @llvm.fshl.v4i16(<4 x i16> undef, <4 x i16> undef, <4 x i16> undef)
  %r_fshr_v4i16r = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> undef, <4 x i16> undef, <4 x i16> <i16 3, i16 3, i16 3, i16 3>)
  %r_fshr_v4i16i = call <4 x i16> @llvm.fshr.v4i16(<4 x i16> undef, <4 x i16> undef, <4 x i16> undef)
  %r_fshl_v4i32r = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> undef, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>)
  %r_fshl_v4i32i = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> undef, <4 x i32> undef, <4 x i32> undef)
  %r_fshr_v4i32r = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> undef, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>)
  %r_fshr_v4i32i = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> undef, <4 x i32> undef, <4 x i32> undef)
  %r_fshl_v4i64r = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> undef, <4 x i64> undef, <4 x i64> <i64 3, i64 3, i64 3, i64 3>)
  %r_fshl_v4i64i = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> undef, <4 x i64> undef, <4 x i64> undef)
  %r_fshr_v4i64r = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> undef, <4 x i64> undef, <4 x i64> <i64 3, i64 3, i64 3, i64 3>)
  %r_fshr_v4i64i = call <4 x i64> @llvm.fshr.v4i64(<4 x i64> undef, <4 x i64> undef, <4 x i64> undef)
  %r_fshl_v8i16r = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> undef, <8 x i16> undef, <8 x i16> undef)
  %r_fshl_v16i16 = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> undef, <16 x i16> undef, <16 x i16> undef)

  %fshl_i8 = call i8 @llvm.fshl.i8(i8 undef, i8 undef, i8 undef)
  %fshr_i8 = call i8 @llvm.fshr.i8(i8 undef, i8 undef, i8 undef)
  %fshl_i16 = call i16 @llvm.fshl.i16(i16 undef, i16 undef, i16 undef)
  %fshr_i16 = call i16 @llvm.fshr.i16(i16 undef, i16 undef, i16 undef)
  %fshl_i32 = call i32 @llvm.fshl.i32(i32 undef, i32 undef, i32 undef)
  %fshr_i32 = call i32 @llvm.fshr.i32(i32 undef, i32 undef, i32 undef)
  %fshl_i64 = call i64 @llvm.fshl.i64(i64 undef, i64 undef, i64 undef)
  %fshr_i64 = call i64 @llvm.fshr.i64(i64 undef, i64 undef, i64 undef)

  ret void
}
declare <2 x i8> @llvm.fshl.v2i8(<2 x i8>, <2 x i8>, <2 x i8>)
declare <2 x i8> @llvm.fshr.v2i8(<2 x i8>, <2 x i8>, <2 x i8>)
declare <4 x i8> @llvm.fshl.v4i8(<4 x i8>, <4 x i8>, <4 x i8>)
declare <4 x i8> @llvm.fshr.v4i8(<4 x i8>, <4 x i8>, <4 x i8>)
declare <8 x i8> @llvm.fshl.v8i8(<8 x i8>, <8 x i8>, <8 x i8>)
declare <8 x i8> @llvm.fshr.v8i8(<8 x i8>, <8 x i8>, <8 x i8>)

declare <2 x i16> @llvm.fshl.v2i16(<2 x i16>, <2 x i16>, <2 x i16>)
declare <2 x i16> @llvm.fshr.v2i16(<2 x i16>, <2 x i16>, <2 x i16>)
declare <2 x i32> @llvm.fshl.v2i32(<2 x i32>, <2 x i32>, <2 x i32>)
declare <2 x i32> @llvm.fshr.v2i32(<2 x i32>, <2 x i32>, <2 x i32>)
declare <2 x i64> @llvm.fshl.v2i64(<2 x i64>, <2 x i64>, <2 x i64>)
declare <2 x i64> @llvm.fshr.v2i64(<2 x i64>, <2 x i64>, <2 x i64>)
declare <3 x i16> @llvm.fshl.v3i16(<3 x i16>, <3 x i16>, <3 x i16>)
declare <4 x i16> @llvm.fshl.v4i16(<4 x i16>, <4 x i16>, <4 x i16>)
declare <4 x i16> @llvm.fshr.v4i16(<4 x i16>, <4 x i16>, <4 x i16>)
declare <4 x i32> @llvm.fshl.v4i32(<4 x i32>, <4 x i32>, <4 x i32>)
declare <4 x i32> @llvm.fshr.v4i32(<4 x i32>, <4 x i32>, <4 x i32>)
declare <4 x i64> @llvm.fshl.v4i64(<4 x i64>, <4 x i64>, <4 x i64>)
declare <4 x i64> @llvm.fshr.v4i64(<4 x i64>, <4 x i64>, <4 x i64>)
declare <8 x i16> @llvm.fshl.v8i16(<8 x i16>, <8 x i16>, <8 x i16>)
declare <16 x i16> @llvm.fshl.v16i16(<16 x i16>, <16 x i16>, <16 x i16>)

declare i8 @llvm.fshl.i8(i8, i8, i8)
declare i8 @llvm.fshr.i8(i8, i8, i8)
declare i16 @llvm.fshl.i16(i16, i16, i16)
declare i16 @llvm.fshr.i16(i16, i16, i16)
declare i32 @llvm.fshl.i32(i32, i32, i32)
declare i32 @llvm.fshr.i32(i32, i32, i32)
declare i64 @llvm.fshl.i64(i64, i64, i64)
declare i64 @llvm.fshr.i64(i64, i64, i64)
