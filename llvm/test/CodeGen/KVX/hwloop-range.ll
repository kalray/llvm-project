; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --disable-kvx-hwloops=false < %s | FileCheck %s
target triple = "kvx-kalray-cos"

; Test that the loop start address operand uses a constant extender
; if the offset is out of range.


@g = external global i32, align 4

define void @test(i32* nocapture %a, i32* nocapture readonly %b, i32 %n) {
; CHECK-LABEL: test:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cb.wlez $r2 ? .LBB0_3
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %for.body.preheader
; CHECK-NEXT:    make $r3 = g
; CHECK-NEXT:    cb.dlez $r2 ? .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    loopdo $r2, .LBB0_3
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # %for.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz $r2 = 0[$r1]
; CHECK-NEXT:    addd $r1 = $r1, 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r4 = 0[$r3]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r2 = $r4, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r0] = $r2
; CHECK-NEXT:    addd $r0 = $r0, 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_3: # Block address taken
; CHECK-NEXT:    # %for.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp6 = icmp slt i32 %n, 1
  br i1 %cmp6, label %for.end, label %for.body.preheader

for.body.preheader:
  br label %for.body

for.body:
  %i.07 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i32, i32* %b, i32 %i.07
  %0 = load i32, i32* %arrayidx, align 4
  %1 = load i32, i32* @g, align 4
  %mul = mul nsw i32 %1, %0
  %arrayidx1 = getelementptr inbounds i32, i32* %a, i32 %i.07
  store i32 %mul, i32* %arrayidx1, align 4
  %inc = add nuw nsw i32 %i.07, 1
  %exitcond = icmp eq i32 %inc, %n
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:
  br label %for.end

for.end:
  ret void
}
