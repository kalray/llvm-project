; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-2 < %s -O2 | FileCheck %s

target triple = "kvx-kalray-cos"

define void @xfscalewo_test(<256 x i1>* nocapture %v, i32 %s) {
; CHECK-LABEL: xfscalewo_test:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lv $a0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfscalewo $a0 = $a0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfscalewo.s $a0 = $a0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfscalewo.rn $a0 = $a0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfscalewo.rn.s $a0 = $a0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 0[$r0] = $a0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load <256 x i1>, <256 x i1>* %v
  %1 = tail call <256 x i1> @llvm.kvx.xfscalewo(<256 x i1> %0, i32 %s, i32 7, i32 0)
  %2 = tail call <256 x i1> @llvm.kvx.xfscalewo(<256 x i1> %1, i32 %s, i32 7, i32 1)
  %3 = tail call <256 x i1> @llvm.kvx.xfscalewo(<256 x i1> %2, i32 %s, i32 0, i32 0)
  %4 = tail call <256 x i1> @llvm.kvx.xfscalewo(<256 x i1> %3, i32 %s, i32 0, i32 1)
  store <256 x i1> %4, <256 x i1>* %v
  ret void
}

declare <256 x i1> @llvm.kvx.xfscalewo(<256 x i1>, i32, i32, i32)

define void @xclampwo_test(<256 x i1>* nocapture %v) {
; CHECK-LABEL: xclampwo_test:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lv $a0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xclampwo $a0 = $a0, $a0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 0[$r0] = $a0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load <256 x i1>, <256 x i1>* %v
  %1 = tail call <256 x i1> @llvm.kvx.xclampwo(<256 x i1> %0, <256 x i1> %0, <256 x i1> %0)
  store <256 x i1> %1, <256 x i1>* %v
  ret void
}

declare <256 x i1> @llvm.kvx.xclampwo(<256 x i1>, <256 x i1>, <256 x i1>)

define void @xffma44hw_test(<512 x i1>* nocapture %0, <256 x i1>* nocapture readonly %1) {
; CHECK-LABEL: xffma44hw_test:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lv $a0 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a3 = 32[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a2 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xffma44hw $a2a3 = $a0, $a0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xffma44hw.s $a2a3 = $a0, $a0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xffma44hw.rn $a2a3 = $a0, $a0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xffma44hw.rz.s $a2a3 = $a0, $a0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 32[$r0] = $a3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 0[$r0] = $a2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = load <256 x i1>, <256 x i1>* %1
  %4 = load <512 x i1>, <512 x i1>* %0
  %5 = tail call <512 x i1> @llvm.kvx.xffma44hw(<512 x i1> %4, <256 x i1> %3, <256 x i1> %3, i32 7, i32 0)
  %6 = tail call <512 x i1> @llvm.kvx.xffma44hw(<512 x i1> %5, <256 x i1> %3, <256 x i1> %3, i32 7, i32 1)
  %7 = tail call <512 x i1> @llvm.kvx.xffma44hw(<512 x i1> %6, <256 x i1> %3, <256 x i1> %3, i32 0, i32 0)
  %8 = tail call <512 x i1> @llvm.kvx.xffma44hw(<512 x i1> %7, <256 x i1> %3, <256 x i1> %3, i32 3, i32 1)
  store <512 x i1> %8, <512 x i1>* %0
  ret void
}

declare <512 x i1> @llvm.kvx.xffma44hw(<512 x i1>, <256 x i1>, <256 x i1>, i32, i32)

define void @xfmma484hw_test(<512 x i1>* nocapture %0) {
; CHECK-LABEL: xfmma484hw_test:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lv $a1 = 32[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfmma484hw $a0a1 = $a0a1, $a0a1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfmma484hw.s $a0a1 = $a0a1, $a0a1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfmma484hw.rn $a0a1 = $a0a1, $a0a1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfmma484hw.rz.s $a0a1 = $a0a1, $a0a1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 32[$r0] = $a1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 0[$r0] = $a0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = load <512 x i1>, <512 x i1>* %0
  %3 = tail call <512 x i1> @llvm.kvx.xfmma484hw(<512 x i1> %2, <512 x i1> %2, <512 x i1> %2, i32 7, i32 0)
  %4 = tail call <512 x i1> @llvm.kvx.xfmma484hw(<512 x i1> %3, <512 x i1> %3, <512 x i1> %3, i32 7, i32 1)
  %5 = tail call <512 x i1> @llvm.kvx.xfmma484hw(<512 x i1> %4, <512 x i1> %4, <512 x i1> %4, i32 0, i32 0)
  %6 = tail call <512 x i1> @llvm.kvx.xfmma484hw(<512 x i1> %5, <512 x i1> %5, <512 x i1> %5, i32 3, i32 1)
  store <512 x i1> %6, <512 x i1>* %0
  ret void
}

declare <512 x i1> @llvm.kvx.xfmma484hw(<512 x i1>, <512 x i1>, <512 x i1>, i32, i32)
