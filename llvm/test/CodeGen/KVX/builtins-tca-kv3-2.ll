; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-2 < %s -O2 | FileCheck %s

target triple = "kvx-kalray-cos"

define void @xfscalewo_test(<256 x i1>* nocapture %v, i32 %s) {
; CHECK-LABEL: xfscalewo_test:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lv $a0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfscalewo $a0 = $a0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfscalewo.s $a0 = $a0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfscalewo.rn $a0 = $a0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xfscalewo.rn.s $a0 = $a0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 0[$r0] = $a0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load <256 x i1>, <256 x i1>* %v
  %1 = tail call <256 x i1> @llvm.kvx.xfscalewo(<256 x i1> %0, i32 %s, i32 7, i32 0)
  %2 = tail call <256 x i1> @llvm.kvx.xfscalewo(<256 x i1> %1, i32 %s, i32 7, i32 1)
  %3 = tail call <256 x i1> @llvm.kvx.xfscalewo(<256 x i1> %2, i32 %s, i32 0, i32 0)
  %4 = tail call <256 x i1> @llvm.kvx.xfscalewo(<256 x i1> %3, i32 %s, i32 0, i32 1)
  store <256 x i1> %4, <256 x i1>* %v
  ret void
}

declare <256 x i1> @llvm.kvx.xfscalewo(<256 x i1>, i32, i32, i32)
