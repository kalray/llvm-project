; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define <2 x i64> @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    make $r1 = 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  ret <2 x i64> <i64 1, i64 2>
}

define i64 @test_extract_0(<2 x i64> %a) #0 {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x i64> %a, i64 0
  ret i64 %e
}

define i64 @test_extract_1(<2 x i64> %a) #0 {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x i64> %a, i64 1
  ret i64 %e
}

define i64 @test_extract_i(<2 x i64> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.odd $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x i64> %a, i64 %idx
  ret i64 %e
}

define <2 x i64> @test_add(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_add:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r1 = $r1, $r3
; CHECK-NEXT:    addd $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <2 x i64> %a, %b
  ret <2 x i64> %r
}

define <2 x i64> @test_add_imm_0(<2 x i64> %a) #0 {
; CHECK-LABEL: test_add_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r0 = $r0, 1
; CHECK-NEXT:    addd $r1 = $r1, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <2 x i64> <i64 1, i64 2>, %a
  ret <2 x i64> %r
}

define <2 x i64> @test_add_imm_1(<2 x i64> %a) #0 {
; CHECK-LABEL: test_add_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r0 = $r0, 1
; CHECK-NEXT:    addd $r1 = $r1, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <2 x i64> %a, <i64 1, i64 2>
  ret <2 x i64> %r
}

define <2 x i64> @test_sub(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_sub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbfd $r1 = $r3, $r1
; CHECK-NEXT:    sbfd $r0 = $r2, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <2 x i64> %a, %b
  ret <2 x i64> %r
}

define <2 x i64> @test_sub_imm(<2 x i64> %a) #0 {
; CHECK-LABEL: test_sub_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r0 = $r0, -1
; CHECK-NEXT:    addd $r1 = $r1, -2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <2 x i64> %a, <i64 1, i64 2>
  ret <2 x i64> %r
}

define <2 x i64> @test_sub_fromimm(<2 x i64> %a) #0 {
; CHECK-LABEL: test_sub_fromimm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbfd $r0 = $r0, 1
; CHECK-NEXT:    sbfd $r1 = $r1, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <2 x i64> <i64 1, i64 2>, %a
  ret <2 x i64> %r
}


define <2 x i64> @test_fma(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c) #0 {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddd $r1 = $r3, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddd $r0 = $r2, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <2 x i64> %b, %c
  %ad = add <2 x i64> %a, %m
  ret <2 x i64> %ad
}

define <2 x i64> @test_fma_imm(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_fma_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddd $r0 = $r2, 5
; CHECK-NEXT:    addx2d $r1 = $r3, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <2 x i64> <i64 5, i64 2>, %b
  %ad = add <2 x i64> %a, %m
  ret <2 x i64> %ad
}

; TODO: Prevent using sll
define <2 x i64> @test_fma_imm_2(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_fma_imm_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addx2d $r1 = $r3, $r1
; CHECK-NEXT:    addd $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <2 x i64> <i64 1, i64 2>, %b
  %ad = add <2 x i64> %a, %m
  ret <2 x i64> %ad
}

define <2 x i64> @test_neg(<2 x i64> %a) #0 {
; CHECK-LABEL: test_neg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    negd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <2 x i64> <i64 0, i64 0>, %a
  ret <2 x i64> %r
}

define <2 x i64> @test_mul(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_mul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muld $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <2 x i64> %a, %b
  ret <2 x i64> %r
}

define <2 x i64> @test_mul_2(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c) #0 {
; CHECK-LABEL: test_mul_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muld $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r0 = $r0, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <2 x i64> %a, %b
  %r1 = mul <2 x i64> %r, %c
  ret <2 x i64> %r1
}

define <2 x i64> @test_div(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_div:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r21 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sdiv <2 x i64> %a, %b
  ret <2 x i64> %r
}

define <2 x i64> @test_rem(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_rem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r21 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = srem <2 x i64> %a, %b
  ret <2 x i64> %r
}

define void @test_ldst_v2i64(<2 x i64>* %a, <2 x i64>* %b) {
; CHECK-LABEL: test_ldst_v2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lq $r2r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r1] = $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %t1 = load <2 x i64>, <2 x i64>* %a
  store <2 x i64> %t1, <2 x i64>* %b, align 16
  ret void
}

declare <2 x i64> @test_callee(<2 x i64> %a, <2 x i64> %b) #0

define <2 x i64> @test_call(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x i64> @test_callee(<2 x i64> %a, <2 x i64> %b)
  ret <2 x i64> %r
}

define <2 x i64> @test_call_flipped(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r0
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x i64> @test_callee(<2 x i64> %b, <2 x i64> %a)
  ret <2 x i64> %r
}

define <2 x i64> @test_tailcall_flipped(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r0
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
  %r = tail call <2 x i64> @test_callee(<2 x i64> %b, <2 x i64> %a)
  ret <2 x i64> %r
}

define <2 x i64> @test_select(<2 x i64> %a, <2 x i64> %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.wnez $r4 ? $r2 = $r0
; CHECK-NEXT:    cmoved.wnez $r4 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = select i1 %c, <2 x i64> %a, <2 x i64> %b
  ret <2 x i64> %r
}

define <2 x i64> @test_select_cc(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c, <2 x i64> %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.lt $r4 = $r4, $r6
; CHECK-NEXT:    compd.lt $r5 = $r5, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r6 = $r4
; CHECK-NEXT:    make $r4 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r6 ? $r4 = 0
; CHECK-NEXT:    copyw $r6 = $r5
; CHECK-NEXT:    make $r5 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r6 ? $r5 = 0
; CHECK-NEXT:    cmoved.dnez $r4 ? $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r5 ? $r3 = $r1
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp slt <2 x i64> %c, %d
  %r = select <2 x i1> %cc, <2 x i64> %a, <2 x i64> %b
  ret <2 x i64> %r
}

define <2 x i64> @test_select_cc_f32_f32(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c, <2 x i64> %d) #0 {
; CHECK-LABEL: test_select_cc_f32_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.ltu $r4 = $r4, $r6
; CHECK-NEXT:    compd.ltu $r5 = $r5, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r6 = $r4
; CHECK-NEXT:    make $r4 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r6 ? $r4 = 0
; CHECK-NEXT:    copyw $r6 = $r5
; CHECK-NEXT:    make $r5 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r6 ? $r5 = 0
; CHECK-NEXT:    cmoved.dnez $r4 ? $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r5 ? $r3 = $r1
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp ult <2 x i64> %c, %d
  %r = select <2 x i1> %cc, <2 x i64> %a, <2 x i64> %b
  ret <2 x i64> %r
}

define <2 x i1> @test_icmp_ule(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.leu $r1 = $r1, $r3
; CHECK-NEXT:    compd.leu $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ule <2 x i64> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_slt(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_slt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.lt $r1 = $r1, $r3
; CHECK-NEXT:    compd.lt $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp slt <2 x i64> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_ugt(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.gtu $r1 = $r1, $r3
; CHECK-NEXT:    compd.gtu $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ugt <2 x i64> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_uge(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.geu $r1 = $r1, $r3
; CHECK-NEXT:    compd.geu $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp uge <2 x i64> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_ult(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.ltu $r1 = $r1, $r3
; CHECK-NEXT:    compd.ltu $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ult <2 x i64> %a, %b
  ret <2 x i1> %r
}

declare <2 x i64> @llvm.abs.v2i64(<2 x i64>, i1) #0

define <2 x i64> @test_abs(<2 x i64> %a) #0 {
; CHECK-LABEL: test_abs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    absd $r0 = $r0
; CHECK-NEXT:    absd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x i64> @llvm.abs.v2i64(<2 x i64> %a, i1 false)
  ret <2 x i64> %r
}

define <2 x i64> @test_insertelement0(<2 x i64> %a, i64 %x) #0 {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x i64> %a, i64 %x, i64 0
  ret <2 x i64> %i
}

define <2 x i64> @test_insertelement1(<2 x i64> %a, i64 %x) #0 {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x i64> %a, i64 %x, i64 1
  ret <2 x i64> %i
}

define <2 x i64> @test_insertelement(<2 x i64> %a, i64 %x, i64 %p) #0 {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.odd $r3 ? $r1 = $r2
; CHECK-NEXT:    cmoved.even $r3 ? $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x i64> %a, i64 %x, i64 %p
  ret <2 x i64> %i
}

define <2 x i8> @trunc_to_v2i8(<2 x i64> %a){
; CHECK-LABEL: trunc_to_v2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = trunc <2 x i64> %a to <2 x i8>
  ret <2 x i8> %r
}

define <2 x i8> @trunc_to_v2i64_buildvector(i64 %arg1, i64 %arg2) {
; CHECK-LABEL: trunc_to_v2i64_buildvector:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v0 = insertelement <2 x i64> undef, i64 %arg1, i32 0
  %v1 = insertelement <2 x i64> %v0, i64 %arg2, i32 1
  %conv = trunc <2 x i64> %v1 to <2 x i8>
  ret <2 x i8> %conv
}

define <2 x i64> @MULWDP(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: MULWDP:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulwdp $r0r1 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = sext <2 x i32> %a to <2 x i64>
  %1 = sext <2 x i32> %b to <2 x i64>
  %mul = mul nsw <2 x i64> %1, %0
  ret <2 x i64> %mul
}

define <2 x i64> @MULSUWDP(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: MULSUWDP:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulsuwdp $r0r1 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = sext <2 x i32> %a to <2 x i64>
  %1 = zext <2 x i32> %b to <2 x i64>
  %mul = mul nsw <2 x i64> %1, %0
  ret <2 x i64> %mul
}

define <2 x i64> @MULUWDP(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: MULUWDP:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    muluwdp $r0r1 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = zext <2 x i32> %a to <2 x i64>
  %1 = zext <2 x i32> %b to <2 x i64>
  %mul = mul nuw <2 x i64> %1, %0
  ret <2 x i64> %mul
}

define <2 x i64> @MADDWDP(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) {
; CHECK-LABEL: MADDWDP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddwdp $r0r1 = $r3, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = sext <2 x i32> %1 to <2 x i64>
  %5 = sext <2 x i32> %2 to <2 x i64>
  %6 = mul nsw <2 x i64> %5, %4
  %7 = add <2 x i64> %6, %0
  ret <2 x i64> %7
}

define <2 x i64> @MADDSUWDP(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) {
; CHECK-LABEL: MADDSUWDP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddsuwdp $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = sext <2 x i32> %1 to <2 x i64>
  %5 = zext <2 x i32> %2 to <2 x i64>
  %6 = mul nsw <2 x i64> %5, %4
  %7 = add <2 x i64> %6, %0
  ret <2 x i64> %7
}

define <2 x i64> @MADDUWDP(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) {
; CHECK-LABEL: MADDUWDP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    madduwdp $r0r1 = $r3, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = zext <2 x i32> %1 to <2 x i64>
  %5 = zext <2 x i32> %2 to <2 x i64>
  %6 = mul nuw <2 x i64> %5, %4
  %7 = add <2 x i64> %6, %0
  ret <2 x i64> %7
}

define <2 x i64> @MSBFUWDP(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) {
; CHECK-LABEL: MSBFUWDP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfuwdp $r0r1 = $r3, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = zext <2 x i32> %1 to <2 x i64>
  %5 = zext <2 x i32> %2 to <2 x i64>
  %6 = mul nsw <2 x i64> %5, %4
  %7 = sub <2 x i64> %0, %6
  ret <2 x i64> %7
}

define <2 x i64> @MSBFSUWDP(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) {
; CHECK-LABEL: MSBFSUWDP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfsuwdp $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = sext <2 x i32> %1 to <2 x i64>
  %5 = zext <2 x i32> %2 to <2 x i64>
  %6 = mul nsw <2 x i64> %5, %4
  %7 = sub <2 x i64> %0, %6
  ret <2 x i64> %7
}

define <2 x i64> @MSBFWDP(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) {
; CHECK-LABEL: MSBFWDP:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    msbfwdp $r0r1 = $r3, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  entry:
  %3 = sext <2 x i32> %1 to <2 x i64>
  %4 = sext <2 x i32> %2 to <2 x i64>
  %5 = mul nsw <2 x i64> %4, %3
  %6 = sub <2 x i64> %0, %5
  ret <2 x i64> %6
}

attributes #0 = { nounwind }
