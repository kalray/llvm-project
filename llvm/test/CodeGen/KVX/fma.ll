; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=kvx-kalray-cos | FileCheck %s

define float @ffmaw(float %a, float %b, float %c) {
; CHECK-LABEL: ffmaw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmaw $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call float @llvm.fma.f32(float %a, float %b, float %c)
  ret float %res
}

define float @ffmaw_i(float %a, float %b) {
; CHECK-LABEL: ffmaw_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmaw $r1 = $r0, 0x3dcccccd
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call float @llvm.fma.f32(float %a, float 0x3FB99999A0000000, float %b)
  ret float %res
}

define double @ffmad(double %a, double %b, double %c) {
; CHECK-LABEL: ffmad:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmad $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call double @llvm.fma.f64(double %a, double %b, double %c)
  ret double %res
}

define double @ffmad_i(double %a, double %b) {
; CHECK-LABEL: ffmad_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmad $r1 = $r0, 0x3fb99999a0000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call double @llvm.fma.f64(double %a, double 0x3FB99999A0000000, double %b)
  ret double %res
}

define <2 x float> @ffmawp(<2 x float> %a, <2 x float> %b, <2 x float> %c) {
; CHECK-LABEL: ffmawp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmawp $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)
  ret <2 x float> %res
}

define half @ffmaf16(half %a, half %b, half %c) {
; CHECK-LABEL: ffmaf16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmahq $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call half @llvm.fma.f16(half %a, half %b, half %c)
  ret half %res
}

define <4 x half> @ffmahq(<4 x half> %a, <4 x half> %b, <4 x half> %c) {
; CHECK-LABEL: ffmahq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmahq $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <4 x half> @llvm.fma.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)
  ret <4 x half> %res
}

define <2 x double> @ffmav2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c) {
; CHECK-LABEL: ffmav2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmad $r5 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r4 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x double> @llvm.fma.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)
  ret <2 x double> %res
}

declare half @llvm.fma.f16(half, half, half)
declare float @llvm.fma.f32(float, float, float)
declare double @llvm.fma.f64(double, double, double)
declare <2 x float> @llvm.fma.v2f32(<2 x float>, <2 x float>, <2 x float>)
declare <4 x half> @llvm.fma.v4f16(<4 x half>, <4 x half>, <4 x half>)
declare <2 x double> @llvm.fma.v2f64(<2 x double>, <2 x double>, <2 x double>)
