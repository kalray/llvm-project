; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=kvx-kalray-cos | FileCheck %s

define float @ffmaw(float %a, float %b, float %c) {
; CHECK-LABEL: ffmaw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmaw $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call float @llvm.fma.f32(float %a, float %b, float %c)
  ret float %res
}

define float @ffmaw_i(float %a, float %b) {
; CHECK-LABEL: ffmaw_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmaw $r1 = $r0, 0x3dcccccd
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call float @llvm.fma.f32(float %a, float 0x3FB99999A0000000, float %b)
  ret float %res
}

define double @ffmad(double %a, double %b, double %c) {
; CHECK-LABEL: ffmad:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmad $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call double @llvm.fma.f64(double %a, double %b, double %c)
  ret double %res
}

define double @ffmad_i(double %a, double %b) {
; CHECK-LABEL: ffmad_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmad $r1 = $r0, 0x3fb99999a0000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call double @llvm.fma.f64(double %a, double 0x3FB99999A0000000, double %b)
  ret double %res
}

define <2 x float> @ffmawp(<2 x float> %a, <2 x float> %b, <2 x float> %c) {
; CHECK-LABEL: ffmawp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmawp $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x float> @llvm.fma.v2f32(<2 x float> %a, <2 x float> %b, <2 x float> %c)
  ret <2 x float> %res
}

define half @ffmaf16(half %a, half %b, half %c) {
; CHECK-LABEL: ffmaf16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmahq $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call half @llvm.fma.f16(half %a, half %b, half %c)
  ret half %res
}

define <4 x half> @ffmahq(<4 x half> %a, <4 x half> %b, <4 x half> %c) {
; CHECK-LABEL: ffmahq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmahq $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <4 x half> @llvm.fma.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)
  ret <4 x half> %res
}

define <2 x double> @ffmav2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c) {
; CHECK-LABEL: ffmav2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmad $r5 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r4 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x double> @llvm.fma.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)
  ret <2 x double> %res
}

define dso_local float @fma32_nodagcombine(float %a, float %b, float %c) {
; CHECK-LABEL: fma32_nodagcombine:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulw $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul float %b, %c
  %add = fadd float %mul, %a
  ret float %add
}

define dso_local double @fma64_nodagcombine(double %a, double %b, double %c) {
; CHECK-LABEL: fma64_nodagcombine:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul double %b, %c
  %add = fadd double %mul, %a
  ret double %add
}

define dso_local float @fma32_dagcombine(float %a, float %b, float %c) {
; CHECK-LABEL: fma32_dagcombine:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmaw $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul fast float %c, %b
  %add = fadd fast float %mul, %a
  ret float %add
}

define dso_local double @fma64_dagcombine(double %a, double %b, double %c)  {
; CHECK-LABEL: fma64_dagcombine:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmad $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul fast double %c, %b
  %add = fadd fast double %mul, %a
  ret double %add
}

define dso_local float @fma32_neg(float %a, float %b, float %c) {
; CHECK-LABEL: fma32_neg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegw $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmaw $r2 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul fast float %a, %b
  %sub = fsub fast float %mul, %c
  ret float %sub
}

define dso_local double @fma64_neg(double %a, double %b, double %c) {
; CHECK-LABEL: fma64_neg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r2 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul fast double %a, %b
  %sub = fsub fast double %mul, %c
  ret double %sub
}

define dso_local float @fma32_contract(float %a, float %b, float %c) {
; CHECK-LABEL: fma32_contract:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmaw $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul contract float %c, %b
  %add = fadd contract float %mul, %a
  ret float %add
}

define dso_local double @fma64_contract(double %a, double %b, double %c)  {
; CHECK-LABEL: fma64_contract:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmad $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul contract double %c, %b
  %add = fadd contract double %mul, %a
  ret double %add
}

define dso_local float @fms32_nodagcombine(float %a, float %b, float %c) {
; CHECK-LABEL: fms32_nodagcombine:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulw $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul float %b, %c
  %sub = fsub float %a, %mul
  ret float %sub
}

define dso_local double @fms64_nodagcombine(double %a, double %b, double %c) {
; CHECK-LABEL: fms64_nodagcombine:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul double %b, %c
  %sub = fsub double %a, %mul
  ret double %sub
}

define dso_local float @fms32_dagcombine(float %a, float %b, float %c) {
; CHECK-LABEL: fms32_dagcombine:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmsw $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul fast float %c, %b
  %sub = fsub fast float %a, %mul
  ret float %sub
}

define dso_local double @fms64_dagcombine(double %a, double %b, double %c)  {
; CHECK-LABEL: fms64_dagcombine:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmsd $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul fast double %c, %b
  %sub = fsub fast double %a, %mul
  ret double %sub
}

define dso_local float @fms32_contract(float %a, float %b, float %c) {
; CHECK-LABEL: fms32_contract:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmsw $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul contract float %c, %b
  %sub = fsub contract float %a, %mul
  ret float %sub
}

define dso_local double @fms64_contract(double %a, double %b, double %c)  {
; CHECK-LABEL: fms64_contract:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmsd $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul contract double %c, %b
  %sub = fsub contract double %a, %mul
  ret double %sub
}

define dso_local float @fms32_2(float %a, float %b, float %c, float %d) {
; CHECK-LABEL: fms32_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsw $r0 = $r3, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul fast float %a, %b
  %mul1 = fmul fast float %c, %d
  %sub = fsub fast float %mul, %mul1
  ret float %sub
}

define dso_local double @fms64_2(double %a, double %b, double %c, double %d) {
; CHECK-LABEL: fms64_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd $r0 = $r3, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = fmul fast double %a, %b
  %mul1 = fmul fast double %c, %d
  %sub = fsub fast double %mul, %mul1
  ret double %sub
}

declare half @llvm.fma.f16(half, half, half)
declare float @llvm.fma.f32(float, float, float)
declare double @llvm.fma.f64(double, double, double)
declare <2 x float> @llvm.fma.v2f32(<2 x float>, <2 x float>, <2 x float>)
declare <4 x half> @llvm.fma.v4f16(<4 x half>, <4 x half>, <4 x half>)
declare <2 x double> @llvm.fma.v2f64(<2 x double>, <2 x double>, <2 x double>)
