; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,V1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,V2
target triple = "kvx-kalray-cos"

define <2 x i8> @test_ret_const() #0 {
; ALL-LABEL: test_ret_const:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r0 = 513
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  ret <2 x i8> <i8 1, i8 2>
}

define i8 @test_extract_0(<2 x i8> %a) #0 {
; ALL-LABEL: test_extract_0:
; ALL:       # %bb.0:
; ALL-NEXT:    zxbd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %e = extractelement <2 x i8> %a, i8 0
  ret i8 %e
}

define i8 @test_extract_1(<2 x i8> %a) #0 {
; ALL-LABEL: test_extract_1:
; ALL:       # %bb.0:
; ALL-NEXT:    extfz $r0 = $r0, 15, 8
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %e = extractelement <2 x i8> %a, i8 1
  ret i8 %e
}

define i8 @test_extract_i(<2 x i8> %a, i64 %idx) #0 {
; ALL-LABEL: test_extract_i:
; ALL:       # %bb.0:
; ALL-NEXT:    sllw $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    srlw $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    zxbd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %e = extractelement <2 x i8> %a, i64 %idx
  ret i8 %e
}

define <2 x i8> @test_add(<2 x i8> %a, <2 x i8> %b) #0 {
; V1-LABEL: test_add:
; V1:       # %bb.0:
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;;
; V1-NEXT:    addhq $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: test_add:
; V2:       # %bb.0:
; V2-NEXT:    addbo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = add <2 x i8> %a, %b
  ret <2 x i8> %r
}

define <2 x i8> @test_add_imm_0(<2 x i8> %a) #0 {
; V1-LABEL: test_add_imm_0:
; V1:       # %bb.0:
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;;
; V1-NEXT:    addhq $r0 = $r0, 0x20001
; V1-NEXT:    ;;
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: test_add_imm_0:
; V2:       # %bb.0:
; V2-NEXT:    addbo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = add <2 x i8> <i8 1, i8 2>, %a
  ret <2 x i8> %r
}

define <2 x i8> @test_add_imm_1(<2 x i8> %a) #0 {
; V1-LABEL: test_add_imm_1:
; V1:       # %bb.0:
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;;
; V1-NEXT:    addhq $r0 = $r0, 0x20001
; V1-NEXT:    ;;
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: test_add_imm_1:
; V2:       # %bb.0:
; V2-NEXT:    addbo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = add <2 x i8> %a, <i8 1, i8 2>
  ret <2 x i8> %r
}

define <2 x i8> @test_sub(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_sub:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbfhq $r0 = $r1, $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sub <2 x i8> %a, %b
  ret <2 x i8> %r
}

define <2 x i8> @test_sub_imm(<2 x i8> %a) #0 {
; ALL-LABEL: test_sub_imm:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    addhq $r0 = $r0, 0xfffeffff
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sub <2 x i8> %a, <i8 1, i8 2>
  ret <2 x i8> %r
}

define <2 x i8> @test_sub_fromimm(<2 x i8> %a) #0 {
; ALL-LABEL: test_sub_fromimm:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sbfhq $r0 = $r0, 0x20001
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sub <2 x i8> <i8 1, i8 2>, %a
  ret <2 x i8> %r
}


define <2 x i8> @test_fma(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) #0 {
; V1-LABEL: test_fma:
; V1:       # %bb.0:
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;;
; V1-NEXT:    sxlbhq $r2 = $r2
; V1-NEXT:    ;;
; V1-NEXT:    maddhq $r0 = $r1, $r2
; V1-NEXT:    ;;
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: test_fma:
; V2:       # %bb.0:
; V2-NEXT:    sxlbhq $r2 = $r2
; V2-NEXT:    sxlbhq $r1 = $r1
; V2-NEXT:    ;;
; V2-NEXT:    mulhq $r1 = $r1, $r2
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r1 = $r1, 0x401
; V2-NEXT:    ;;
; V2-NEXT:    addbo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %m = mul <2 x i8> %b, %c
  %ad = add <2 x i8> %a, %m
  ret <2 x i8> %ad
}

; TODO: V2 version is slower, need pattern for it
define <2 x i8> @test_fma_imm(<2 x i8> %a, <2 x i8> %b) #0 {
; V1-LABEL: test_fma_imm:
; V1:       # %bb.0:
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;;
; V1-NEXT:    maddhq $r0 = $r1, 0x20005
; V1-NEXT:    ;;
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: test_fma_imm:
; V2:       # %bb.0:
; V2-NEXT:    sxlbhq $r1 = $r1
; V2-NEXT:    make $r2 = 0x20005
; V2-NEXT:    ;;
; V2-NEXT:    mulhq $r1 = $r1, $r2
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r1 = $r1, 0x401
; V2-NEXT:    ;;
; V2-NEXT:    addbo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %m = mul <2 x i8> <i8 5, i8 2>, %b
  %ad = add <2 x i8> %a, %m
  ret <2 x i8> %ad
}

; TODO: V2 version is slower, need pattern for it
define <2 x i8> @test_fma_imm_2(<2 x i8> %a, <2 x i8> %b) #0 {
; V1-LABEL: test_fma_imm_2:
; V1:       # %bb.0:
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;;
; V1-NEXT:    maddhq $r0 = $r1, 0x20001
; V1-NEXT:    ;;
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: test_fma_imm_2:
; V2:       # %bb.0:
; V2-NEXT:    sxlbhq $r1 = $r1
; V2-NEXT:    make $r2 = 0x20001
; V2-NEXT:    ;;
; V2-NEXT:    mulhq $r1 = $r1, $r2
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r1 = $r1, 0x401
; V2-NEXT:    ;;
; V2-NEXT:    addbo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %m = mul <2 x i8> <i8 1, i8 2>, %b
  %ad = add <2 x i8> %a, %m
  ret <2 x i8> %ad
}

define <2 x i8> @test_neg(<2 x i8> %a) #0 {
; ALL-LABEL: test_neg:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    neghq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sub <2 x i8> <i8 0, i8 0>, %a
  ret <2 x i8> %r
}

define <2 x i8> @test_mul(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_mul:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    mulhq $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = mul <2 x i8> %a, %b
  ret <2 x i8> %r
}

define <2 x i8> @test_mul_2(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) #0 {
; ALL-LABEL: test_mul_2:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    mulhq $r0 = $r0, $r1
; ALL-NEXT:    sxlbhq $r1 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulhq $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = mul <2 x i8> %a, %b
  %r1 = mul <2 x i8> %r, %c
  ret <2 x i8> %r1
}

define <2 x i8> @test_div(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_div:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 16[$r12] = $r20
; ALL-NEXT:    ;;
; ALL-NEXT:    sq 0[$r12] = $r18r19
; ALL-NEXT:    copyd $r18 = $r1
; ALL-NEXT:    copyd $r19 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    extfz $r0 = $r19, 15, 8
; ALL-NEXT:    extfz $r1 = $r18, 15, 8
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    zxbd $r1 = $r18
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    zxbd $r0 = $r19
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r20, 15, 8
; ALL-NEXT:    lq $r18r19 = 0[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r20 = 16[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sdiv <2 x i8> %a, %b
  ret <2 x i8> %r
}

define <2 x i8> @test_rem(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_rem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 16[$r12] = $r20
; ALL-NEXT:    ;;
; ALL-NEXT:    sq 0[$r12] = $r18r19
; ALL-NEXT:    copyd $r18 = $r1
; ALL-NEXT:    copyd $r19 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    extfz $r0 = $r19, 15, 8
; ALL-NEXT:    extfz $r1 = $r18, 15, 8
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    zxbd $r1 = $r18
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    zxbd $r0 = $r19
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r20, 15, 8
; ALL-NEXT:    lq $r18r19 = 0[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r20 = 16[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = srem <2 x i8> %a, %b
  ret <2 x i8> %r
}

define void @test_ldst_v2i8(<2 x i8>* %a, <2 x i8>* %b) {
; ALL-LABEL: test_ldst_v2i8:
; ALL:       # %bb.0:
; ALL-NEXT:    lhz $r0 = 0[$r0]
; ALL-NEXT:    ;;
; ALL-NEXT:    sh 0[$r1] = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %t1 = load <2 x i8>, <2 x i8>* %a
  store <2 x i8> %t1, <2 x i8>* %b, align 16
  ret void
}

declare <2 x i8> @test_callee(<2 x i8> %a, <2 x i8> %b) #0

define <2 x i8> @test_call(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_call:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <2 x i8> @test_callee(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %r
}

; TODO: Remove unecessary copyd for performing a swap
define <2 x i8> @test_call_flipped(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_call_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r1 = $r2
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <2 x i8> @test_callee(<2 x i8> %b, <2 x i8> %a)
  ret <2 x i8> %r
}

define <2 x i8> @test_tailcall_flipped(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_tailcall_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r1 = $r2
; ALL-NEXT:    goto test_callee
; ALL-NEXT:    ;;
  %r = tail call <2 x i8> @test_callee(<2 x i8> %b, <2 x i8> %a)
  ret <2 x i8> %r
}

define <2 x i8> @test_select(<2 x i8> %a, <2 x i8> %b, i1 zeroext %c) #0 {
; ALL-LABEL: test_select:
; ALL:       # %bb.0:
; ALL-NEXT:    cmoved.even $r2 ? $r0 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = select i1 %c, <2 x i8> %a, <2 x i8> %b
  ret <2 x i8> %r
}

define <2 x i8> @test_select_cc(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c, <2 x i8> %d) #0 {
; ALL-LABEL: test_select_cc:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r3 = $r3
; ALL-NEXT:    sxlbhq $r2 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20001
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x20001
; ALL-NEXT:    compnhq.lt $r2 = $r2, $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    andw $r2 = $r2, 0xff00ff
; ALL-NEXT:    ;;
; ALL-NEXT:    cmovehq.even $r2 ? $r0 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %cc = icmp slt <2 x i8> %c, %d
  %r = select <2 x i1> %cc, <2 x i8> %a, <2 x i8> %b
  ret <2 x i8> %r
}

define <2 x i64> @test_select_cc_f32_f32(<2 x i64> %a, <2 x i64> %b, <2 x i8> %c, <2 x i8> %d) #0 {
; V1-LABEL: test_select_cc_f32_f32:
; V1:       # %bb.0:
; V1-NEXT:    sbmm8 $r5 = $r5, 0x20001
; V1-NEXT:    sbmm8 $r4 = $r4, 0x20001
; V1-NEXT:    ;;
; V1-NEXT:    compnhq.ltu $r4 = $r4, $r5
; V1-NEXT:    ;;
; V1-NEXT:    sbmm8 $r4 = $r4, 0x401
; V1-NEXT:    ;;
; V1-NEXT:    extfs $r5 = $r4, 15, 8
; V1-NEXT:    sxbd $r4 = $r4
; V1-NEXT:    ;;
; V1-NEXT:    cmoved.dnez $r4 ? $r2 = $r0
; V1-NEXT:    cmoved.dnez $r5 ? $r3 = $r1
; V1-NEXT:    ;;
; V1-NEXT:    copyd $r0 = $r2
; V1-NEXT:    copyd $r1 = $r3
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: test_select_cc_f32_f32:
; V2:       # %bb.0:
; V2-NEXT:    sbmm8 $r5 = $r5, 0x20001
; V2-NEXT:    sbmm8 $r4 = $r4, 0x20001
; V2-NEXT:    ;;
; V2-NEXT:    compnhq.ltu $r4 = $r4, $r5
; V2-NEXT:    ;;
; V2-NEXT:    extfs $r5 = $r4, 31, 16
; V2-NEXT:    sxhd $r4 = $r4
; V2-NEXT:    ;;
; V2-NEXT:    cmoved.dnez $r4 ? $r2 = $r0
; V2-NEXT:    cmoved.dnez $r5 ? $r3 = $r1
; V2-NEXT:    ;;
; V2-NEXT:    copyd $r0 = $r2
; V2-NEXT:    copyd $r1 = $r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %cc = icmp ult <2 x i8> %c, %d
  %r = select <2 x i1> %cc, <2 x i64> %a, <2 x i64> %b
  ret <2 x i64> %r
}

define <2 x i1> @test_icmp_ule(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_icmp_ule:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x20001
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20001
; ALL-NEXT:    ;;
; ALL-NEXT:    compnhq.leu $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = icmp ule <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_slt(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_icmp_slt:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    compnhq.lt $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = icmp slt <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_ugt(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_icmp_ugt:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x20001
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20001
; ALL-NEXT:    ;;
; ALL-NEXT:    compnhq.gtu $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = icmp ugt <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_uge(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_icmp_uge:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x20001
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20001
; ALL-NEXT:    ;;
; ALL-NEXT:    compnhq.geu $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = icmp uge <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_ult(<2 x i8> %a, <2 x i8> %b) #0 {
; ALL-LABEL: test_icmp_ult:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x20001
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20001
; ALL-NEXT:    ;;
; ALL-NEXT:    compnhq.ltu $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = icmp ult <2 x i8> %a, %b
  ret <2 x i1> %r
}

define <2 x i64> @test_sext_2xi64(<2 x i8> %a) #0 {
; ALL-LABEL: test_sext_2xi64:
; ALL:       # %bb.0:
; ALL-NEXT:    extfs $r1 = $r0, 15, 8
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sext <2 x i8> %a to <2 x i64>
  ret <2 x i64> %r
}

declare <2 x i8> @llvm.abs.v2i8(<2 x i8>, i1) #0

define <2 x i8> @test_abs(<2 x i8> %a) #0 {
; ALL-LABEL: test_abs:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    abshq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <2 x i8> @llvm.abs.v2i8(<2 x i8> %a, i1 false)
  ret <2 x i8> %r
}


define <2 x i8> @test_insertelement0(<2 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement0:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r1, 7, 0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %i = insertelement <2 x i8> %a, i8 %x, i8 0
  ret <2 x i8> %i
}

define <2 x i8> @test_insertelement1(<2 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement1:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r1, 15, 8
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %i = insertelement <2 x i8> %a, i8 %x, i8 1
  ret <2 x i8> %i
}

define <2 x i8> @test_insertelement(<2 x i8> %a, i8 %x, i64 %p) #0 {
; ALL-LABEL: test_insertelement:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    andd $r2 = $r2, 1
; ALL-NEXT:    ;;
; ALL-NEXT:    addd $r3 = $r12, 30
; ALL-NEXT:    sh 30[$r12] = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sb $r2[$r3] = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    lhz $r0 = 30[$r12]
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %i = insertelement <2 x i8> %a, i8 %x, i64 %p
  ret <2 x i8> %i
}

define <2 x i8> @mulsub(<2 x i8> %a, <2 x i8> %b, <2 x i8> %c) #0 {
; ALL-LABEL: mulsub:
; ALL:       # %bb.0:
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxlbhq $r2 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    msbfhq $r0 = $r1, $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %mul = mul <2 x i8> %b, %c
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @vnot(<2 x i8> %a) #0 {
; ALL-LABEL: vnot:
; ALL:       # %bb.0:
; ALL-NEXT:    notw $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %vnot = xor <2 x i8> %a, <i8 -1, i8 -1>
  ret <2 x i8> %vnot
}

define <2 x i8> @nandw_v2i8_rr(<2 x i8> %0, <2 x i8> %1) {
; ALL-LABEL: nandw_v2i8_rr:
; ALL:       # %bb.0:
; ALL-NEXT:    nandw $r0 = $r1, $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = and <2 x i8> %1, %0
  %4 = xor <2 x i8> %3, <i8 -1, i8 -1>
  ret <2 x i8> %4
}

define <2 x i8> @nandw_v2i8_ri10(<2 x i8> %0) {
; ALL-LABEL: nandw_v2i8_ri10:
; ALL:       # %bb.0:
; ALL-NEXT:    nandw $r0 = $r0, 255
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = and <2 x i8> %0, <i8 1023, i8 0>
  %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
  ret <2 x i8> %3
}

define <2 x i8> @nandw_v2i8_ri37(<2 x i8> %0) {
; ALL-LABEL: nandw_v2i8_ri37:
; ALL:       # %bb.0:
; ALL-NEXT:    nandw $r0 = $r0, 252
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = and <2 x i8> %0, <i8 252, i8 0>
  %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
  ret <2 x i8> %3
}

define <2 x i8> @nandw_v2i8_ri37_2(<2 x i8> %0) {
; ALL-LABEL: nandw_v2i8_ri37_2:
; ALL:       # %bb.0:
; ALL-NEXT:    nandw $r0 = $r0, 0xd0d
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = and <2 x i8> %0, <i8 13, i8 13>
  %3 = xor <2 x i8> %2, <i8 -1, i8 -1>
  ret <2 x i8> %3
}

define  <2 x i8> @v2_maxhq_rr_i8(<2 x i8> %a, <2 x i8> %b) {
; ALL-LABEL: v2_maxhq_rr_i8:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    maxhq $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
entry:
  %0 = call <2 x i8> @llvm.smax.v2i8(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %0
}

define  <2 x i8> @v2_minhq_rr_i8(<2 x i8> %a, <2 x i8> %b) {
; ALL-LABEL: v2_minhq_rr_i8:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    minhq $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
entry:
  %0 = call <2 x i8> @llvm.smin.v2i8(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %0
}

define  <2 x i8> @v2_umaxhq_rr_i8(<2 x i8> %a, <2 x i8> %b) {
; ALL-LABEL: v2_umaxhq_rr_i8:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x20001
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20001
; ALL-NEXT:    ;;
; ALL-NEXT:    maxuhq $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
entry:
  %0 = call <2 x i8> @llvm.umax.v2i8(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %0
}

define  <2 x i8> @v2_uminhq_rr_i8(<2 x i8> %a, <2 x i8> %b) {
; ALL-LABEL: v2_uminhq_rr_i8:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x20001
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20001
; ALL-NEXT:    ;;
; ALL-NEXT:    minuhq $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x401
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
entry:
  %0 = call <2 x i8> @llvm.umin.v2i8(<2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %0
}

declare <2 x i8> @llvm.smax.v2i8(<2 x i8> %a, <2 x i8> %b)
declare <2 x i8> @llvm.smin.v2i8(<2 x i8> %a, <2 x i8> %b)
declare <2 x i8> @llvm.umax.v2i8(<2 x i8> %a, <2 x i8> %b)
declare <2 x i8> @llvm.umin.v2i8(<2 x i8> %a, <2 x i8> %b)
attributes #0 = { nounwind }
