; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s | FileCheck %s
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define { i64, i64 } @FADDCDC(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: FADDCDC:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddd $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfd $r1 = $r3, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = bitcast i64 %0 to double
  %6 = bitcast i64 %1 to double
  %7 = bitcast i64 %3 to double
  %8 = bitcast i64 %2 to double
  %9 = fadd fast double %8, %5
  %10 = fsub fast double %6, %7
  %11 = bitcast double %9 to i64
  %12 = insertvalue { i64, i64 } undef, i64 %11, 0
  %13 = bitcast double %10 to i64
  %14 = insertvalue { i64, i64 } %12, i64 %13, 1
  ret { i64, i64 } %14
}

define i64 @FADDCWC(i64 %0, i64 %1) {
; CHECK-LABEL: FADDCWC:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddw $r2 = $r1, $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r0 = $r1, $r0
; CHECK-NEXT:    zxwd $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32 %9 to float
  %11 = trunc i64 %1 to i32
  %12 = bitcast i32 %11 to float
  %13 = fadd fast float %12, %4
  %14 = bitcast float %13 to i32
  %15 = fsub fast float %7, %10
  %16 = bitcast float %15 to i32
  %17 = zext i32 %16 to i64
  %18 = shl nuw i64 %17, 32
  %19 = zext i32 %14 to i64
  %20 = or i64 %18, %19
  ret i64 %20
}

define { i64, i64 } @FADDCWCP(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: FADDCWCP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddw $r4 = $r2, $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r2 = $r2, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r2 = $r3, $r1
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    srld $r3 = $r3, 32
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r1 = $r3, $r1
; CHECK-NEXT:    zxwd $r3 = $r4
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r3
; CHECK-NEXT:    slld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = trunc i64 %0 to i32
  %6 = bitcast i32 %5 to float
  %7 = lshr i64 %0, 32
  %8 = trunc i64 %7 to i32
  %9 = bitcast i32 %8 to float
  %10 = trunc i64 %1 to i32
  %11 = bitcast i32 %10 to float
  %12 = lshr i64 %1, 32
  %13 = trunc i64 %12 to i32
  %14 = bitcast i32 %13 to float
  %15 = lshr i64 %2, 32
  %16 = trunc i64 %15 to i32
  %17 = bitcast i32 %16 to float
  %18 = lshr i64 %3, 32
  %19 = trunc i64 %18 to i32
  %20 = bitcast i32 %19 to float
  %21 = trunc i64 %2 to i32
  %22 = bitcast i32 %21 to float
  %23 = fadd fast float %22, %6
  %24 = bitcast float %23 to i32
  %25 = fsub fast float %9, %17
  %26 = bitcast float %25 to i32
  %27 = zext i32 %26 to i64
  %28 = shl nuw i64 %27, 32
  %29 = zext i32 %24 to i64
  %30 = or i64 %28, %29
  %31 = trunc i64 %3 to i32
  %32 = bitcast i32 %31 to float
  %33 = fadd fast float %32, %11
  %34 = bitcast float %33 to i32
  %35 = fsub fast float %14, %20
  %36 = bitcast float %35 to i32
  %37 = zext i32 %36 to i64
  %38 = shl nuw i64 %37, 32
  %39 = zext i32 %34 to i64
  %40 = or i64 %38, %39
  %41 = insertvalue { i64, i64 } undef, i64 %30, 0
  %42 = insertvalue { i64, i64 } %41, i64 %40, 1
  ret { i64, i64 } %42
}

define i64 @FMULCWC(i64 %0, i64 %1) {
; CHECK-LABEL: FMULCWC:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srld $r4 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r3 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsw $r3 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r0 = $r1, $r0
; CHECK-NEXT:    slld $r1 = $r3, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmaw $r0 = $r4, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32 %9 to float
  %11 = trunc i64 %1 to i32
  %12 = bitcast i32 %11 to float
  %13 = fmul fast float %12, %7
  %14 = fmul fast float %10, %4
  %15 = fsub fast float %13, %14
  %16 = fmul fast float %12, %4
  %17 = fmul fast float %10, %7
  %18 = fadd fast float %17, %16
  %19 = bitcast float %18 to i32
  %20 = bitcast float %15 to i32
  %21 = zext i32 %20 to i64
  %22 = shl nuw i64 %21, 32
  %23 = zext i32 %19 to i64
  %24 = or i64 %22, %23
  ret i64 %24
}

define { i64, i64 } @FMULCWDC(i64 %0, i64 %1) {
; CHECK-LABEL: FMULCWDC:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srld $r3 = $r1, 32
; CHECK-NEXT:    fwidenlwd $r4 = $r1
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    xorw $r3 = $r3, 0x80000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r1 = $r4, $r2
; CHECK-NEXT:    fwidenlwd $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r1 = $r3, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r0 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd $r0 = $r3, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32 %9 to float
  %11 = fpext float %4 to double
  %12 = fpext float %7 to double
  %13 = fneg fast float %10
  %14 = trunc i64 %1 to i32
  %15 = bitcast i32 %14 to float
  %16 = fpext float %15 to double
  %17 = fpext float %13 to double
  %18 = fmul fast double %17, %11
  %19 = fmul fast double %16, %12
  %20 = fadd fast double %18, %19
  %21 = fmul fast double %16, %11
  %22 = fmul fast double %17, %12
  %23 = fsub fast double %21, %22
  %24 = bitcast double %23 to i64
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = bitcast double %20 to i64
  %27 = insertvalue { i64, i64 } %25, i64 %26, 1
  ret { i64, i64 } %27
}

define i64 @FMULWC(i64 %0, i64 %1) {
; CHECK-LABEL: FMULWC:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srld $r4 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r3 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmaw $r3 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r0 = $r1, $r0
; CHECK-NEXT:    slld $r1 = $r3, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsw $r0 = $r4, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fmul fast float %12, %4
  %14 = fmul fast float %9, %7
  %15 = fadd fast float %13, %14
  %16 = fmul fast float %9, %4
  %17 = fmul fast float %12, %7
  %18 = fsub fast float %16, %17
  %19 = bitcast float %18 to i32
  %20 = bitcast float %15 to i32
  %21 = zext i32 %20 to i64
  %22 = shl nuw i64 %21, 32
  %23 = zext i32 %19 to i64
  %24 = or i64 %22, %23
  ret i64 %24
}

define { i64, i64 } @FMULWDC(i64 %0, i64 %1) {
; CHECK-LABEL: FMULWDC:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    fwidenlwd $r3 = $r1
; CHECK-NEXT:    srld $r4 = $r1, 32
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    fwidenlwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r1 = $r3, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r1 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r0 = $r3, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd $r0 = $r4, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fpext float %4 to double
  %14 = fpext float %7 to double
  %15 = fpext float %9 to double
  %16 = fpext float %12 to double
  %17 = fmul fast double %16, %13
  %18 = fmul fast double %15, %14
  %19 = fadd fast double %17, %18
  %20 = fmul fast double %15, %13
  %21 = fmul fast double %16, %14
  %22 = fsub fast double %20, %21
  %23 = bitcast double %22 to i64
  %24 = insertvalue { i64, i64 } undef, i64 %23, 0
  %25 = bitcast double %19 to i64
  %26 = insertvalue { i64, i64 } %24, i64 %25, 1
  ret { i64, i64 } %26
}

define { i64, i64 } @FSBFCDC(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: FSBFCDC:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddd $r1 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfd $r0 = $r2, $r0
; CHECK-NEXT:    xord $r1 = $r1, -9223372036854775808
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = bitcast i64 %1 to double
  %6 = bitcast i64 %2 to double
  %7 = bitcast i64 %3 to double
  %8 = bitcast i64 %0 to double
  %9 = fsub fast double %8, %6
  %10 = fadd fast double %7, %5
  %11 = fneg fast double %10
  %12 = bitcast double %9 to i64
  %13 = insertvalue { i64, i64 } undef, i64 %12, 0
  %14 = bitcast double %11 to i64
  %15 = insertvalue { i64, i64 } %13, i64 %14, 1
  ret { i64, i64 } %15
}

define i64 @FSBFCWC(i64 %0, i64 %1) {
; CHECK-LABEL: FSBFCWC:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfw $r2 = $r1, $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r0 = $r1, $r0
; CHECK-NEXT:    zxwd $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xorw $r0 = $r0, 0x80000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i64 %0, 32
  %4 = trunc i64 %3 to i32
  %5 = bitcast i32 %4 to float
  %6 = trunc i64 %1 to i32
  %7 = bitcast i32 %6 to float
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32 %9 to float
  %11 = trunc i64 %0 to i32
  %12 = bitcast i32 %11 to float
  %13 = fsub fast float %12, %7
  %14 = bitcast float %13 to i32
  %15 = fadd fast float %10, %5
  %16 = fneg fast float %15
  %17 = bitcast float %16 to i32
  %18 = zext i32 %17 to i64
  %19 = shl nuw i64 %18, 32
  %20 = zext i32 %14 to i64
  %21 = or i64 %19, %20
  ret i64 %21
}

define { i64, i64 } @FSBFCWCP(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: FSBFCWCP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfw $r4 = $r2, $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r2 = $r2, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r2 = $r3, $r1
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    srld $r3 = $r3, 32
; CHECK-NEXT:    xorw $r0 = $r0, 0x80000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    faddw $r1 = $r3, $r1
; CHECK-NEXT:    zxwd $r3 = $r4
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r3
; CHECK-NEXT:    xorw $r1 = $r1, 0x80000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = bitcast i32 %9 to float
  %11 = trunc i64 %2 to i32
  %12 = bitcast i32 %11 to float
  %13 = lshr i64 %2, 32
  %14 = trunc i64 %13 to i32
  %15 = bitcast i32 %14 to float
  %16 = trunc i64 %3 to i32
  %17 = bitcast i32 %16 to float
  %18 = lshr i64 %3, 32
  %19 = trunc i64 %18 to i32
  %20 = bitcast i32 %19 to float
  %21 = trunc i64 %0 to i32
  %22 = bitcast i32 %21 to float
  %23 = fsub fast float %22, %12
  %24 = bitcast float %23 to i32
  %25 = fadd fast float %15, %7
  %26 = fneg fast float %25
  %27 = bitcast float %26 to i32
  %28 = zext i32 %27 to i64
  %29 = shl nuw i64 %28, 32
  %30 = zext i32 %24 to i64
  %31 = or i64 %29, %30
  %32 = trunc i64 %1 to i32
  %33 = bitcast i32 %32 to float
  %34 = fsub fast float %33, %17
  %35 = bitcast float %34 to i32
  %36 = fadd fast float %20, %10
  %37 = fneg fast float %36
  %38 = bitcast float %37 to i32
  %39 = zext i32 %38 to i64
  %40 = shl nuw i64 %39, 32
  %41 = zext i32 %35 to i64
  %42 = or i64 %40, %41
  %43 = insertvalue { i64, i64 } undef, i64 %31, 0
  %44 = insertvalue { i64, i64 } %43, i64 %42, 1
  ret { i64, i64 } %44
}

define { i64, i64 } @FADDCDC_2(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: FADDCDC_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddd $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfd $r1 = $r3, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = bitcast i64 %0 to double
  %6 = bitcast i64 %1 to double
  %7 = bitcast i64 %2 to double
  %8 = bitcast i64 %3 to double
  %9 = fadd fast double %7, %5
  %10 = fsub fast double %6, %8
  %11 = bitcast double %9 to i64
  %12 = insertvalue { i64, i64 } undef, i64 %11, 0
  %13 = bitcast double %10 to i64
  %14 = insertvalue { i64, i64 } %12, i64 %13, 1
  ret { i64, i64 } %14
}

define i64 @FADDCWC_2(i64 %0, i64 %1) {
; CHECK-LABEL: FADDCWC_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddw $r2 = $r1, $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r0 = $r1, $r0
; CHECK-NEXT:    zxwd $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fadd fast float %9, %4
  %14 = fsub fast float %7, %12
  %15 = bitcast float %13 to i32
  %16 = bitcast float %14 to i32
  %17 = zext i32 %16 to i64
  %18 = shl nuw i64 %17, 32
  %19 = zext i32 %15 to i64
  %20 = or i64 %18, %19
  ret i64 %20
}

define { i64, i64 } @FADDCWCP_2(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: FADDCWCP_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddw $r4 = $r2, $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r2 = $r2, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r2 = $r3, $r1
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    srld $r3 = $r3, 32
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r1 = $r3, $r1
; CHECK-NEXT:    zxwd $r3 = $r4
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r3
; CHECK-NEXT:    slld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = trunc i64 %0 to i32
  %6 = bitcast i32 %5 to float
  %7 = lshr i64 %0, 32
  %8 = trunc i64 %7 to i32
  %9 = bitcast i32 %8 to float
  %10 = trunc i64 %1 to i32
  %11 = bitcast i32 %10 to float
  %12 = lshr i64 %1, 32
  %13 = trunc i64 %12 to i32
  %14 = bitcast i32 %13 to float
  %15 = trunc i64 %2 to i32
  %16 = bitcast i32 %15 to float
  %17 = lshr i64 %2, 32
  %18 = trunc i64 %17 to i32
  %19 = bitcast i32 %18 to float
  %20 = trunc i64 %3 to i32
  %21 = bitcast i32 %20 to float
  %22 = lshr i64 %3, 32
  %23 = trunc i64 %22 to i32
  %24 = bitcast i32 %23 to float
  %25 = fadd fast float %16, %6
  %26 = fsub fast float %9, %19
  %27 = fadd fast float %21, %11
  %28 = fsub fast float %14, %24
  %29 = bitcast float %25 to i32
  %30 = bitcast float %26 to i32
  %31 = zext i32 %30 to i64
  %32 = shl nuw i64 %31, 32
  %33 = zext i32 %29 to i64
  %34 = or i64 %32, %33
  %35 = insertvalue { i64, i64 } undef, i64 %34, 0
  %36 = bitcast float %27 to i32
  %37 = bitcast float %28 to i32
  %38 = zext i32 %37 to i64
  %39 = shl nuw i64 %38, 32
  %40 = zext i32 %36 to i64
  %41 = or i64 %39, %40
  %42 = insertvalue { i64, i64 } %35, i64 %41, 1
  ret { i64, i64 } %42
}

define i64 @FMULCWC_2(i64 %0, i64 %1) {
; CHECK-LABEL: FMULCWC_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    fwidenlwd $r3 = $r1
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    fwidenlwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r4 = $r2, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r3 = $r3, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r3 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd $r4 = $r1, $r0
; CHECK-NEXT:    fnarrowdw $r0 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw $r1 = $r4
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fpext float %4 to double
  %14 = fpext float %7 to double
  %15 = fpext float %9 to double
  %16 = fpext float %12 to double
  %17 = fmul fast double %14, %15
  %18 = fmul fast double %16, %13
  %19 = fsub fast double %17, %18
  %20 = fmul fast double %15, %13
  %21 = fmul fast double %16, %14
  %22 = fadd fast double %21, %20
  %23 = fptrunc double %22 to float
  %24 = fptrunc double %19 to float
  %25 = bitcast float %23 to i32
  %26 = bitcast float %24 to i32
  %27 = zext i32 %26 to i64
  %28 = shl nuw i64 %27, 32
  %29 = zext i32 %25 to i64
  %30 = or i64 %28, %29
  ret i64 %30
}

define { i64, i64 } @FMULCWDC_2(i64 %0, i64 %1) {
; CHECK-LABEL: FMULCWDC_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    fwidenlwd $r3 = $r1
; CHECK-NEXT:    srld $r4 = $r1, 32
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    fwidenlwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r1 = $r2, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd $r1 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r0 = $r3, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r0 = $r4, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fpext float %4 to double
  %14 = fpext float %7 to double
  %15 = fpext float %9 to double
  %16 = fpext float %12 to double
  %17 = fmul fast double %14, %15
  %18 = fmul fast double %16, %13
  %19 = fsub fast double %17, %18
  %20 = fmul fast double %15, %13
  %21 = fmul fast double %16, %14
  %22 = fadd fast double %21, %20
  %23 = bitcast double %22 to i64
  %24 = insertvalue { i64, i64 } undef, i64 %23, 0
  %25 = bitcast double %19 to i64
  %26 = insertvalue { i64, i64 } %24, i64 %25, 1
  ret { i64, i64 } %26
}

define i64 @FMULWC_2(i64 %0, i64 %1) {
; CHECK-LABEL: FMULWC_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srld $r4 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r3 = $r2, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmaw $r3 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r0 = $r1, $r0
; CHECK-NEXT:    slld $r1 = $r3, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsw $r0 = $r4, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fmul fast float %12, %4
  %14 = fmul fast float %7, %9
  %15 = fadd fast float %13, %14
  %16 = fmul fast float %9, %4
  %17 = fmul fast float %12, %7
  %18 = fsub fast float %16, %17
  %19 = bitcast float %18 to i32
  %20 = bitcast float %15 to i32
  %21 = zext i32 %20 to i64
  %22 = shl nuw i64 %21, 32
  %23 = zext i32 %19 to i64
  %24 = or i64 %22, %23
  ret i64 %24
}

define { i64, i64 } @FMULWDC_2(i64 %0, i64 %1) {
; CHECK-LABEL: FMULWDC_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    fwidenlwd $r3 = $r1
; CHECK-NEXT:    srld $r4 = $r1, 32
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    fwidenlwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r1 = $r2, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r1 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r0 = $r3, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd $r0 = $r4, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fpext float %4 to double
  %14 = fpext float %7 to double
  %15 = fpext float %9 to double
  %16 = fpext float %12 to double
  %17 = fmul fast double %16, %13
  %18 = fmul fast double %14, %15
  %19 = fadd fast double %17, %18
  %20 = fmul fast double %15, %13
  %21 = fmul fast double %16, %14
  %22 = fsub fast double %20, %21
  %23 = bitcast double %22 to i64
  %24 = insertvalue { i64, i64 } undef, i64 %23, 0
  %25 = bitcast double %19 to i64
  %26 = insertvalue { i64, i64 } %24, i64 %25, 1
  ret { i64, i64 } %26
}

define { i64, i64 } @FSBFCDC_2(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: FSBFCDC_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddd $r1 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfd $r0 = $r2, $r0
; CHECK-NEXT:    xord $r1 = $r1, -9223372036854775808
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = bitcast i64 %0 to double
  %6 = bitcast i64 %1 to double
  %7 = bitcast i64 %2 to double
  %8 = bitcast i64 %3 to double
  %9 = fsub fast double %5, %7
  %10 = fadd fast double %8, %6
  %11 = fneg fast double %10
  %12 = bitcast double %9 to i64
  %13 = insertvalue { i64, i64 } undef, i64 %12, 0
  %14 = bitcast double %11 to i64
  %15 = insertvalue { i64, i64 } %13, i64 %14, 1
  ret { i64, i64 } %15
}

define i64 @FSBFCWC_2(i64 %0, i64 %1) {
; CHECK-LABEL: FSBFCWC_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfw $r2 = $r1, $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r0 = $r1, $r0
; CHECK-NEXT:    zxwd $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xorw $r0 = $r0, 0x80000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fsub fast float %4, %9
  %14 = fadd fast float %12, %7
  %15 = fneg fast float %14
  %16 = bitcast float %13 to i32
  %17 = bitcast float %15 to i32
  %18 = zext i32 %17 to i64
  %19 = shl nuw i64 %18, 32
  %20 = zext i32 %16 to i64
  %21 = or i64 %19, %20
  ret i64 %21
}

define { i64, i64 } @FSBFCWCP_2(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: FSBFCWCP_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfw $r4 = $r2, $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r2 = $r2, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfw $r2 = $r3, $r1
; CHECK-NEXT:    srld $r1 = $r1, 32
; CHECK-NEXT:    srld $r3 = $r3, 32
; CHECK-NEXT:    xorw $r0 = $r0, 0x80000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    faddw $r1 = $r3, $r1
; CHECK-NEXT:    zxwd $r3 = $r4
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r3
; CHECK-NEXT:    xorw $r1 = $r1, 0x80000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = trunc i64 %0 to i32
  %6 = bitcast i32 %5 to float
  %7 = lshr i64 %0, 32
  %8 = trunc i64 %7 to i32
  %9 = bitcast i32 %8 to float
  %10 = trunc i64 %1 to i32
  %11 = bitcast i32 %10 to float
  %12 = lshr i64 %1, 32
  %13 = trunc i64 %12 to i32
  %14 = bitcast i32 %13 to float
  %15 = trunc i64 %2 to i32
  %16 = bitcast i32 %15 to float
  %17 = lshr i64 %2, 32
  %18 = trunc i64 %17 to i32
  %19 = bitcast i32 %18 to float
  %20 = trunc i64 %3 to i32
  %21 = bitcast i32 %20 to float
  %22 = lshr i64 %3, 32
  %23 = trunc i64 %22 to i32
  %24 = bitcast i32 %23 to float
  %25 = fsub fast float %6, %16
  %26 = fadd fast float %19, %9
  %27 = fneg fast float %26
  %28 = fsub fast float %11, %21
  %29 = fadd fast float %24, %14
  %30 = fneg fast float %29
  %31 = bitcast float %25 to i32
  %32 = bitcast float %27 to i32
  %33 = zext i32 %32 to i64
  %34 = shl nuw i64 %33, 32
  %35 = zext i32 %31 to i64
  %36 = or i64 %34, %35
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = bitcast float %28 to i32
  %39 = bitcast float %30 to i32
  %40 = zext i32 %39 to i64
  %41 = shl nuw i64 %40, 32
  %42 = zext i32 %38 to i64
  %43 = or i64 %41, %42
  %44 = insertvalue { i64, i64 } %37, i64 %43, 1
  ret { i64, i64 } %44
}

define <2 x double> @FADDCDC_3(<2 x double> %0, <2 x double> %1) {
; CHECK-LABEL: FADDCDC_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnegd $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp $r0r1 = $r2r3, $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x double> %1, i32 1
  %4 = fneg fast double %3
  %5 = insertelement <2 x double> %1, double %4, i32 1
  %6 = fadd fast <2 x double> %5, %0
  ret <2 x double> %6
}

define <2 x float> @FADDCWC_3(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: FADDCWC_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r2 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnegw $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x float> %1, i32 1
  %4 = fneg fast float %3
  %5 = insertelement <2 x float> %1, float %4, i32 1
  %6 = fadd fast <2 x float> %5, %0
  ret <2 x float> %6
}

define <4 x float> @FADDCWCP_3(<4 x float> %0, <4 x float> %1) {
; CHECK-LABEL: FADDCWCP_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r4 = $r2, 32
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    fnegw $r6 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnegw $r4 = $r4
; CHECK-NEXT:    insf $r5 = $r3, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r4, 63, 32
; CHECK-NEXT:    insf $r5 = $r6, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r4 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwq $r0r1 = $r4r5, $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <4 x float> %1, i32 1
  %4 = fneg fast float %3
  %5 = insertelement <4 x float> %1, float %4, i32 1
  %6 = extractelement <4 x float> %1, i32 2
  %7 = insertelement <4 x float> %5, float %6, i32 2
  %8 = fneg fast float %6
  %9 = insertelement <4 x float> %7, float %8, i32 3
  %10 = fadd fast <4 x float> %9, %0
  ret <4 x float> %10
}

define <2 x float> @FMULCWC_3(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: FMULCWC_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmulwc.c $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x float> %0, i32 0
  %4 = extractelement <2 x float> %1, i32 0
  %5 = fmul fast float %4, %3
  %6 = extractelement <2 x float> %0, i32 1
  %7 = extractelement <2 x float> %1, i32 1
  %8 = fmul fast float %7, %6
  %9 = fadd fast float %5, %8
  %10 = insertelement <2 x float> undef, float %9, i32 0
  %11 = fmul fast float %7, %3
  %12 = fmul fast float %4, %6
  %13 = fsub fast float %11, %12
  %14 = insertelement <2 x float> %10, float %13, i32 1
  ret <2 x float> %14
}

define <2 x double> @FMULCWDC_3(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: FMULCWDC_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenmwd $r3 = $r0
; CHECK-NEXT:    fwidenmwd $r5 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r2 = $r5, $r3
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    fwidenlwd $r4 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r1 = $r5, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r2 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd $r1 = $r4, $r3
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = fpext <2 x float> %0 to <2 x double>
  %4 = fpext <2 x float> %1 to <2 x double>
  %5 = extractelement <2 x double> %3, i32 0
  %6 = extractelement <2 x double> %4, i32 0
  %7 = fmul fast double %6, %5
  %8 = extractelement <2 x double> %3, i32 1
  %9 = extractelement <2 x double> %4, i32 1
  %10 = fmul fast double %9, %8
  %11 = fadd fast double %7, %10
  %12 = insertelement <2 x double> undef, double %11, i32 0
  %13 = fmul fast double %9, %5
  %14 = fmul fast double %6, %8
  %15 = fsub fast double %13, %14
  %16 = insertelement <2 x double> %12, double %15, i32 1
  ret <2 x double> %16
}

define <2 x float> @FMULWC_3(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: FMULWC_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmulwc $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x float> %0, i32 0
  %4 = extractelement <2 x float> %1, i32 0
  %5 = fmul fast float %4, %3
  %6 = extractelement <2 x float> %0, i32 1
  %7 = extractelement <2 x float> %1, i32 1
  %8 = fmul fast float %7, %6
  %9 = fsub fast float %5, %8
  %10 = insertelement <2 x float> undef, float %9, i32 0
  %11 = fmul fast float %7, %3
  %12 = fmul fast float %4, %6
  %13 = fadd fast float %11, %12
  %14 = insertelement <2 x float> %10, float %13, i32 1
  ret <2 x float> %14
}

define <2 x double> @FMULWDC_3(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: FMULWDC_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlwd $r4 = $r0
; CHECK-NEXT:    fwidenlwd $r6 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenmwd $r3 = $r0
; CHECK-NEXT:    fmuld $r2 = $r6, $r4
; CHECK-NEXT:    fwidenmwd $r5 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r1 = $r6, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd $r2 = $r5, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r1 = $r5, $r4
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = fpext <2 x float> %0 to <2 x double>
  %4 = fpext <2 x float> %1 to <2 x double>
  %5 = extractelement <2 x double> %3, i32 0
  %6 = extractelement <2 x double> %4, i32 0
  %7 = fmul fast double %6, %5
  %8 = extractelement <2 x double> %3, i32 1
  %9 = extractelement <2 x double> %4, i32 1
  %10 = fmul fast double %9, %8
  %11 = fsub fast double %7, %10
  %12 = insertelement <2 x double> undef, double %11, i32 0
  %13 = fmul fast double %9, %5
  %14 = fmul fast double %6, %8
  %15 = fadd fast double %13, %14
  %16 = insertelement <2 x double> %12, double %15, i32 1
  ret <2 x double> %16
}

define <2 x double> @FSBFCDC_3(<2 x double> %0, <2 x double> %1) {
; CHECK-LABEL: FSBFCDC_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnegd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp $r0r1 = $r2r3, $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x double> %0, i32 1
  %4 = fneg fast double %3
  %5 = insertelement <2 x double> %0, double %4, i32 1
  %6 = fsub fast <2 x double> %5, %1
  ret <2 x double> %6
}

define <2 x float> @FSBFCWC_3(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: FSBFCWC_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r2 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnegw $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x float> %0, i32 1
  %4 = fneg fast float %3
  %5 = insertelement <2 x float> %0, float %4, i32 1
  %6 = fsub fast <2 x float> %5, %1
  ret <2 x float> %6
}

define <4 x float> @FSBFCWCP_3(<4 x float> %0, <4 x float> %1) {
; CHECK-LABEL: FSBFCWCP_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r4 = $r0, 32
; CHECK-NEXT:    copyd $r7 = $r1
; CHECK-NEXT:    srad $r5 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnegw $r4 = $r4
; CHECK-NEXT:    insf $r7 = $r1, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r4, 63, 32
; CHECK-NEXT:    fnegw $r4 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r6 = $r0
; CHECK-NEXT:    insf $r7 = $r4, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwq $r0r1 = $r2r3, $r6r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <4 x float> %0, i32 1
  %4 = fneg fast float %3
  %5 = insertelement <4 x float> %0, float %4, i32 1
  %6 = extractelement <4 x float> %0, i32 2
  %7 = insertelement <4 x float> %5, float %6, i32 2
  %8 = extractelement <4 x float> %0, i32 3
  %9 = fneg fast float %8
  %10 = insertelement <4 x float> %7, float %9, i32 3
  %11 = fsub fast <4 x float> %10, %1
  ret <4 x float> %11
}
