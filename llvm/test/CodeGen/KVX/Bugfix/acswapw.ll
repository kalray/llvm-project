; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=CV1 --implicit-check-not=make
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=CV2 --implicit-check-not=make

target triple = "kvx-kalray-cos"

define i32 @foo(ptr align 8 %p ) {
; CV1-LABEL: foo:
; CV1:       # %bb.0:
; CV1-NEXT:    fence
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    lwz $r3 = 8[$r0]
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:  .LBB0_1: # %atomicrmw.start
; CV1-NEXT:    # =>This Inner Loop Header: Depth=1
; CV1-NEXT:    addw $r2 = $r3, -1
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    copyq $r4r5 = $r2, $r3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    acswapw 8[$r0] = $r4r5
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    lwz.u $r1 = 8[$r0]
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    cmoved.even $r4 ? $r3 = $r1
; CV1-NEXT:    cb.even $r4 ? .LBB0_1
; CV1-NEXT:    ;; # (end cycle 26)
; CV1-NEXT:  # %bb.2: # %atomicrmw.end
; CV1-NEXT:    fence
; CV1-NEXT:    copyd $r0 = $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 0)
;
; CV2-LABEL: foo:
; CV2:       # %bb.0:
; CV2-NEXT:    fence
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    lwz $r3 = 8[$r0]
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:  .LBB0_1: # %atomicrmw.start
; CV2-NEXT:    # =>This Inner Loop Header: Depth=1
; CV2-NEXT:    addw $r2 = $r3, -1
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    acswapw $r1, 8[$r0] = $r2r3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    lwz.u $r2 = 8[$r0]
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    cb.even $r1 ? .LBB0_1
; CV2-NEXT:    cmoved.even $r1 ? $r3 = $r2
; CV2-NEXT:    ;; # (end cycle 24)
; CV2-NEXT:  # %bb.2: # %atomicrmw.end
; CV2-NEXT:    fence
; CV2-NEXT:    copyd $r0 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %po = getelementptr inbounds i8, ptr %p, i64 8
  %r = atomicrmw volatile add ptr %po, i32 -1 acq_rel, align 4
  ret i32 %r
}
