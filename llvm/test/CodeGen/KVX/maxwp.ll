; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define <2 x i32> @f1(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: f1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxw $r2 = $r0, $r1
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    srad $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r0, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %vecext = extractelement <2 x i32> %a, i32 0
  %vecext1 = extractelement <2 x i32> %b, i32 0
  %cmp2 = icmp slt i32 %vecext, %vecext1
  %vecext1.vecext = select i1 %cmp2, i32 %vecext1, i32 %vecext
  %vecins = insertelement <2 x i32> undef, i32 %vecext1.vecext, i32 0
  %vecext.1 = extractelement <2 x i32> %a, i32 1
  %vecext1.1 = extractelement <2 x i32> %b, i32 1
  %cmp2.1 = icmp slt i32 %vecext.1, %vecext1.1
  %vecext1.vecext.1 = select i1 %cmp2.1, i32 %vecext1.1, i32 %vecext.1
  %vecins.1 = insertelement <2 x i32> %vecins, i32 %vecext1.vecext.1, i32 1
  ret <2 x i32> %vecins.1
}

define <2 x i32> @f2(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: f2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxw $r2 = $r0, $r1
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    srad $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r0, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %vecext = extractelement <2 x i32> %a, i32 0
  %vecext1 = extractelement <2 x i32> %b, i32 0
  %cmp = icmp slt i32 %vecext, %vecext1
  %cond = select i1 %cmp, i32 %vecext1, i32 %vecext
  %vecins = insertelement <2 x i32> undef, i32 %cond, i32 0
  %vecext4 = extractelement <2 x i32> %a, i32 1
  %vecext5 = extractelement <2 x i32> %b, i32 1
  %cmp6 = icmp slt i32 %vecext4, %vecext5
  %cond12 = select i1 %cmp6, i32 %vecext5, i32 %vecext4
  %vecins13 = insertelement <2 x i32> %vecins, i32 %cond12, i32 1
  ret <2 x i32> %vecins13
}

define <2 x i32> @f3(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: f3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuw $r2 = $r0, $r1
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    srad $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r0, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %vecext = extractelement <2 x i32> %a, i32 0
  %vecext1 = extractelement <2 x i32> %b, i32 0
  %cmp2 = icmp ult i32 %vecext, %vecext1
  %vecext1.vecext = select i1 %cmp2, i32 %vecext1, i32 %vecext
  %vecins = insertelement <2 x i32> undef, i32 %vecext1.vecext, i32 0
  %vecext.1 = extractelement <2 x i32> %a, i32 1
  %vecext1.1 = extractelement <2 x i32> %b, i32 1
  %cmp2.1 = icmp ult i32 %vecext.1, %vecext1.1
  %vecext1.vecext.1 = select i1 %cmp2.1, i32 %vecext1.1, i32 %vecext.1
  %vecins.1 = insertelement <2 x i32> %vecins, i32 %vecext1.vecext.1, i32 1
  ret <2 x i32> %vecins.1
}

define <2 x i32> @f4(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: f4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuw $r2 = $r0, $r1
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    srad $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r0, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %vecext = extractelement <2 x i32> %a, i32 0
  %vecext1 = extractelement <2 x i32> %b, i32 0
  %cmp = icmp ult i32 %vecext, %vecext1
  %cond = select i1 %cmp, i32 %vecext1, i32 %vecext
  %vecins = insertelement <2 x i32> undef, i32 %cond, i32 0
  %vecext4 = extractelement <2 x i32> %a, i32 1
  %vecext5 = extractelement <2 x i32> %b, i32 1
  %cmp6 = icmp ult i32 %vecext4, %vecext5
  %cond12 = select i1 %cmp6, i32 %vecext5, i32 %vecext4
  %vecins13 = insertelement <2 x i32> %vecins, i32 %cond12, i32 1
  ret <2 x i32> %vecins13
}

define <2 x i32> @f5(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: f5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxw $r1 = $r0, 20
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxw $r0 = $r0, 20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r0, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %vecext = extractelement <2 x i32> %a, i32 0
  %0 = icmp sgt i32 %vecext, 20
  %cond = select i1 %0, i32 %vecext, i32 20
  %vecins = insertelement <2 x i32> undef, i32 %cond, i32 0
  %vecext.1 = extractelement <2 x i32> %a, i32 1
  %1 = icmp sgt i32 %vecext.1, 20
  %cond.1 = select i1 %1, i32 %vecext.1, i32 20
  %vecins.1 = insertelement <2 x i32> %vecins, i32 %cond.1, i32 1
  ret <2 x i32> %vecins.1
}

define <2 x i32> @f6(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: f6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuw $r1 = $r0, 20
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuw $r0 = $r0, 20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r0, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %vecext = extractelement <2 x i32> %a, i32 0
  %0 = icmp ugt i32 %vecext, 20
  %cond = select i1 %0, i32 %vecext, i32 20
  %vecins = insertelement <2 x i32> undef, i32 %cond, i32 0
  %vecext.1 = extractelement <2 x i32> %a, i32 1
  %1 = icmp ugt i32 %vecext.1, 20
  %cond.1 = select i1 %1, i32 %vecext.1, i32 20
  %vecins.1 = insertelement <2 x i32> %vecins, i32 %cond.1, i32 1
  ret <2 x i32> %vecins.1
}

