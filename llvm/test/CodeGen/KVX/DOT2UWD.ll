; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s | FileCheck %s
target triple = "kvx-kalray-cos"

define i64 @DOT2UWD_rr_1(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: DOT2UWD_rr_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2uwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x i32> %1, i64 0
  %4 = zext i32 %3 to i64
  %5 = extractelement <2 x i32> %0, i64 0
  %6 = zext i32 %5 to i64
  %7 = mul nuw nsw i64 %4, %6
  %8 = extractelement <2 x i32> %1, i64 1
  %9 = zext i32 %8 to i64
  %10 = extractelement <2 x i32> %0, i64 1
  %11 = zext i32 %10 to i64
  %12 = mul nuw nsw i64 %9, %11
  %13 = add nuw nsw i64 %7, %12
  ret i64 %13
}

define i64 @DOT2UWD_rr_2(i64 %0, i64 %1) {
; CHECK-LABEL: DOT2UWD_rr_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2uwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i64 %0, 32
  %4 = lshr i64 %1, 32
  %5 = and i64 %0, 4294967295
  %6 = and i64 %1, 4294967295
  %7 = mul nuw nsw i64 %6, %5
  %8 = mul nuw nsw i64 %4, %3
  %9 = add nuw nsw i64 %7, %8
  ret i64 %9
}

define i64 @DOT2UWD_rr_3(<2 x i32> %0, i64 %1) {
; CHECK-LABEL: DOT2UWD_rr_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2uwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i64 %1, 32
  %4 = extractelement <2 x i32> %0, i32 0
  %5 = zext i32 %4 to i64
  %6 = and i64 %1, 4294967295
  %7 = mul nuw nsw i64 %6, %5
  %8 = extractelement <2 x i32> %0, i32 1
  %9 = zext i32 %8 to i64
  %10 = mul nuw nsw i64 %3, %9
  %11 = add nuw nsw i64 %7, %10
  ret i64 %11
}

define i64 @DOT2UWD_rr_4(i64 %0, <2 x i32> %1) {
; CHECK-LABEL: DOT2UWD_rr_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2uwd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i64 %0, 32
  %4 = and i64 %0, 4294967295
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = zext i32 %5 to i64
  %7 = mul nuw nsw i64 %4, %6
  %8 = extractelement <2 x i32> %1, i64 1
  %9 = zext i32 %8 to i64
  %10 = mul nuw nsw i64 %3, %9
  %11 = add nuw nsw i64 %7, %10
  ret i64 %11
}

define i64 @DOT2UWD_ri_10_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2UWD_ri_10_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muluwd $r0 = $r0, -1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = zext i32 %2 to i64
  %4 = mul nuw nsw i64 %3, 4294966273
  ret i64 %4
}

define i64 @DOT2UWD_ri_10_2(i64 %0) {
; CHECK-LABEL: DOT2UWD_ri_10_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muluwd $r0 = $r0, 1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and i64 %0, 4294967295
  %3 = mul nuw nsw i64 %2, 1023
  ret i64 %3
}

define i64 @DOT2UWD_ri_10_3(i64 %0) {
; CHECK-LABEL: DOT2UWD_ri_10_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muluwd $r0 = $r0, -1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and i64 %0, 4294967295
  %3 = mul nuw nsw i64 %2, 4294966273
  ret i64 %3
}

define i64 @DOT2UWD_ri_10_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2UWD_ri_10_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muluwd $r0 = $r0, 1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = zext i32 %2 to i64
  %4 = mul nuw nsw i64 %3, 1023
  ret i64 %4
}

define i64 @DOT2UWD_ri_37_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2UWD_ri_37_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    madduwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = zext i32 %2 to i64
  %4 = mul nuw nsw i64 %3, 3
  %5 = extractelement <2 x i32> %0, i64 1
  %6 = zext i32 %5 to i64
  %7 = mul nuw nsw i64 %6, 31
  %8 = add nuw nsw i64 %4, %7
  ret i64 %8
}

define i64 @DOT2UWD_ri_37_2(i64 %0) {
; CHECK-LABEL: DOT2UWD_ri_37_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    madduwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = lshr i64 %0, 32
  %3 = and i64 %0, 4294967295
  %4 = mul nuw nsw i64 %3, 3
  %5 = mul nuw nsw i64 %2, 31
  %6 = add nuw nsw i64 %4, %5
  ret i64 %6
}

define i64 @DOT2UWD_ri_37_3(i64 %0) {
; CHECK-LABEL: DOT2UWD_ri_37_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    madduwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = lshr i64 %0, 32
  %3 = and i64 %0, 4294967295
  %4 = mul nuw nsw i64 %3, 3
  %5 = mul nuw nsw i64 %2, 31
  %6 = add nuw nsw i64 %4, %5
  ret i64 %6
}

define i64 @DOT2UWD_ri_37_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2UWD_ri_37_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    madduwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = zext i32 %2 to i64
  %4 = mul nuw nsw i64 %3, 3
  %5 = extractelement <2 x i32> %0, i64 1
  %6 = zext i32 %5 to i64
  %7 = mul nuw nsw i64 %6, 31
  %8 = add nuw nsw i64 %4, %7
  ret i64 %8
}

define i64 @DOT2UWD_ri_64_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2UWD_ri_64_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r1 = $r1, -5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    madduwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = zext i32 %2 to i64
  %4 = mul nuw nsw i64 %3, 3
  %5 = extractelement <2 x i32> %0, i64 1
  %6 = zext i32 %5 to i64
  %7 = mul nuw nsw i64 %6, 4294967291
  %8 = add nuw nsw i64 %4, %7
  ret i64 %8
}

define i64 @DOT2UWD_ri_64_2(i64 %0) {
; CHECK-LABEL: DOT2UWD_ri_64_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 27
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r1 = $r1, 0x1fffffffe0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    madduwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and i64 %0, 4294967295
  %3 = mul nuw nsw i64 %2, 3
  %4 = lshr i64 %0, 27
  %5 = and i64 %4, 137438953440
  %6 = add nuw nsw i64 %3, %5
  ret i64 %6
}

define i64 @DOT2UWD_ri_64_3(i64 %0) {
; CHECK-LABEL: DOT2UWD_ri_64_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 27
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r1 = $r1, 0x1fffffffe0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    madduwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and i64 %0, 4294967295
  %3 = mul nuw nsw i64 %2, 3
  %4 = lshr i64 %0, 27
  %5 = and i64 %4, 137438953440
  %6 = add nuw nsw i64 %3, %5
  ret i64 %6
}

define i64 @DOT2UWD_ri_64_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2UWD_ri_64_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r1 = $r1, -5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    madduwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = zext i32 %2 to i64
  %4 = mul nuw nsw i64 %3, 3
  %5 = extractelement <2 x i32> %0, i64 1
  %6 = zext i32 %5 to i64
  %7 = mul nuw nsw i64 %6, 4294967291
  %8 = add nuw nsw i64 %4, %7
  ret i64 %8
}
