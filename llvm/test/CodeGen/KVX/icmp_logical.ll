; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i1 @set_eq_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_eq_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, %b
  ret i1 %cmp
}

define i1 @set_eq_i32_ri(i32 %a){
; CHECK-LABEL: set_eq_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.eq $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, 7
  ret i1 %cmp
}

define i1 @set_ne_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_ne_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, %b
  ret i1 %cmp
}

define i1 @set_ne_i32_ri(i32 %a){
; CHECK-LABEL: set_ne_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ne $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, 7
  ret i1 %cmp
}

define i1 @set_ugt_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_ugt_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, %b
  ret i1 %cmp
}

define i1 @set_ugt_i32_ri(i32 %a){
; CHECK-LABEL: set_ugt_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, 7
  ret i1 %cmp
}

define i1 @set_uge_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_uge_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge i32 %a, %b
  ret i1 %cmp
}

define i1 @set_uge_i32_ri(i32 %a){
; CHECK-LABEL: set_uge_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, 6
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge i32 %a, 7
  ret i1 %cmp
}

define i1 @set_ult_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_ult_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, %b
  ret i1 %cmp
}

define i1 @set_ult_i32_ri(i32 %a){
; CHECK-LABEL: set_ult_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, 7
  ret i1 %cmp
}

define i1 @set_ule_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_ule_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule i32 %a, %b
  ret i1 %cmp
}

define i1 @set_ule_i32_ri(i32 %a){
; CHECK-LABEL: set_ule_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule i32 %a, 7
  ret i1 %cmp
}

define i1 @set_sgt_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_sgt_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, %b
  ret i1 %cmp
}

define i1 @set_sgt_i32_ri(i32 %a){
; CHECK-LABEL: set_sgt_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, 7
  ret i1 %cmp
}

define i1 @set_sge_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_sge_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge i32 %a, %b
  ret i1 %cmp
}

define i1 @set_sge_i32_ri(i32 %a){
; CHECK-LABEL: set_sge_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, 6
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge i32 %a, 7
  ret i1 %cmp
}

define i1 @set_slt_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_slt_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, %b
  ret i1 %cmp
}

define i1 @set_slt_i32_ri(i32 %a){
; CHECK-LABEL: set_slt_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, 7
  ret i1 %cmp
}

define i1 @set_sle_i32_rr(i32 %a, i32 %b){
; CHECK-LABEL: set_sle_i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle i32 %a, %b
  ret i1 %cmp
}

define i1 @set_sle_i32_ri(i32 %a){
; CHECK-LABEL: set_sle_i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle i32 %a, 7
  ret i1 %cmp
}

define i1 @set_eq_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_eq_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %a, %b
  ret i1 %cmp
}

define i1 @set_eq_i64_ri(i64 %a){
; CHECK-LABEL: set_eq_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.eq $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %a, 7
  ret i1 %cmp
}

define i1 @set_ne_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_ne_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i64 %a, %b
  ret i1 %cmp
}

define i1 @set_ne_i64_ri(i64 %a){
; CHECK-LABEL: set_ne_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.ne $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i64 %a, 7
  ret i1 %cmp
}

define i1 @set_ugt_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_ugt_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i64 %a, %b
  ret i1 %cmp
}

define i1 @set_ugt_i64_ri(i64 %a){
; CHECK-LABEL: set_ugt_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.gtu $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i64 %a, 7
  ret i1 %cmp
}

define i1 @set_uge_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_uge_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge i64 %a, %b
  ret i1 %cmp
}

define i1 @set_uge_i64_ri(i64 %a){
; CHECK-LABEL: set_uge_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.gtu $r0 = $r0, 6
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge i64 %a, 7
  ret i1 %cmp
}

define i1 @set_ult_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_ult_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i64 %a, %b
  ret i1 %cmp
}

define i1 @set_ult_i64_ri(i64 %a){
; CHECK-LABEL: set_ult_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.ltu $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i64 %a, 7
  ret i1 %cmp
}

define i1 @set_ule_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_ule_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule i64 %a, %b
  ret i1 %cmp
}

define i1 @set_ule_i64_ri(i64 %a){
; CHECK-LABEL: set_ule_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.ltu $r0 = $r0, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule i64 %a, 7
  ret i1 %cmp
}

define i1 @set_sgt_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_sgt_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i64 %a, %b
  ret i1 %cmp
}

define i1 @set_sgt_i64_ri(i64 %a){
; CHECK-LABEL: set_sgt_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.gt $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i64 %a, 7
  ret i1 %cmp
}

define i1 @set_sge_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_sge_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge i64 %a, %b
  ret i1 %cmp
}

define i1 @set_sge_i64_ri(i64 %a){
; CHECK-LABEL: set_sge_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.gt $r0 = $r0, 6
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge i64 %a, 7
  ret i1 %cmp
}

define i1 @set_slt_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_slt_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i64 %a, %b
  ret i1 %cmp
}

define i1 @set_slt_i64_ri(i64 %a){
; CHECK-LABEL: set_slt_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.lt $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i64 %a, 7
  ret i1 %cmp
}

define i1 @set_sle_i64_rr(i64 %a, i64 %b){
; CHECK-LABEL: set_sle_i64_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle i64 %a, %b
  ret i1 %cmp
}

define i1 @set_sle_i64_ri(i64 %a){
; CHECK-LABEL: set_sle_i64_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.lt $r0 = $r0, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle i64 %a, 7
  ret i1 %cmp
}

define <2 x i16> @set_eq_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_eq_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.eq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_eq_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_eq_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.eq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ne_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_ne_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ne $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ne_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_ne_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ne $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ugt_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_ugt_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ugt_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_ugt_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_uge_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_uge_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_uge_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_uge_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ult_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_ult_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ult_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_ult_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ule_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_ule_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ule_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_ule_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sgt_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_sgt_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.gt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sgt_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_sgt_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sge_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_sge_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sge_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_sge_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_slt_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_slt_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_slt_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_slt_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sle_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_sle_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.le $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <2 x i16> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sle_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_sle_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.le $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0x10001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <2 x i16> %a, <i16 7, i16 7>
  %r = zext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i32> @set_eq_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_eq_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.eq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_eq_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_eq_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.eq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ne_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_ne_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.ne $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ne_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_ne_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.ne $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ugt_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_ugt_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ugt_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_ugt_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_uge_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_uge_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_uge_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_uge_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ult_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_ult_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ult_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_ult_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ule_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_ule_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ule_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_ule_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sgt_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_sgt_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.gt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sgt_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_sgt_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.gt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sge_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_sge_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.ge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sge_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_sge_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.ge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_slt_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_slt_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_slt_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_slt_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sle_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_sle_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.le $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <2 x i32> %a, %b
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sle_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_sle_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.le $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x100000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <2 x i32> %a, <i32 7, i32 7>
  %r = zext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <4 x i16> @set_eq_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_eq_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.eq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_eq_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_eq_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.eq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ne_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_ne_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ne $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ne_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_ne_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ne $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ugt_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_ugt_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ugt_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_ugt_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_uge_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_uge_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_uge_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_uge_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ult_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_ult_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ult_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_ult_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ule_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_ule_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ule_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_ule_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sgt_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_sgt_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.gt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sgt_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_sgt_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sge_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_sge_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sge_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_sge_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_slt_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_slt_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_slt_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_slt_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sle_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_sle_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.le $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <4 x i16> %a, %b
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sle_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_sle_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.le $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x1000100010001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = zext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define i1 @set_eq_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_eq_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.eq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp eq i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_eq_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_eq_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.eq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp eq i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_eq_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_eq_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.eq $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp eq i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_ne_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_ne_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.ne $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp ne i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_ne_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_ne_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.ne $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp ne i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_ne_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_ne_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ne $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp ne i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_ugt_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_ugt_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.ltu $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp ugt i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_ugt_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_ugt_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.gtu $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp ugt i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_ugt_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_ugt_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp ugt i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_uge_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_uge_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.leu $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp uge i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_uge_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_uge_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.geu $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp uge i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_uge_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_uge_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, 6
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp uge i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_ult_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_ult_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.gtu $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp ult i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_ult_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_ult_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.ltu $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp ult i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_ult_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_ult_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp ult i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_ule_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_ule_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.geu $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp ule i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_ule_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_ule_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.leu $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp ule i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_ule_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_ule_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp ule i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_sgt_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_sgt_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.lt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp sgt i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_sgt_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_sgt_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.gt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp sgt i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_sgt_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_sgt_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp sgt i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_sge_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_sge_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.le $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp sge i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_sge_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_sge_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.ge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp sge i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_sge_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_sge_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, 6
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp sge i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_slt_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_slt_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.gt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp slt i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_slt_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_slt_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.lt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp slt i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_slt_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_slt_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp slt i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_sle_i64_rr_i32ext_rv(i64 %a, i32 %b){
; CHECK-LABEL: set_sle_i64_rr_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.ge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp sle i64 %a, %b1
  ret i1 %cmp
}

define i1 @set_sle_i64_rr_i32ext(i64 %a, i32 %b){
; CHECK-LABEL: set_sle_i64_rr_i32ext:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compuwd.le $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %b1 = zext i32 %b to i64
  %cmp = icmp sle i64 %b1, %a
  ret i1 %cmp
}

define i1 @set_sle_i64_ri_i32ext_rv(i32 %a){
; CHECK-LABEL: set_sle_i64_ri_i32ext_rv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp sle i64 %a1, 7
  ret i1 %cmp
}

define i1 @set_sle_i64_ri_i32ext_rv_not(i32 %a){
; CHECK-LABEL: set_sle_i64_ri_i32ext_rv_not:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a1 = zext i32 %a to i64
  %cmp = icmp sle i64 %a1, 25769803775
  ret i1 %cmp
}
