; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O3 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O3 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O3 -c -o /dev/null %s
; RUN: clang -O3 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

; ModuleID = 'test.c'
source_filename = "test.c"
target datalayout = "e-S256-p:64:64-i1:8-i8:8-i16:16-i32:32-i64:64-v64:64-v128:128-v256:256-v512:256-v1024:256-f16:16-f32:32-f64:64-a:0:64-m:e-n32:64"
target triple = "kvx-kalray-cos"

; Function Attrs: nounwind uwtable
define i32 @add_or_sub(i32 %x, i32 %y, i32 %doAdd) !dbg !7 {
; CHECK-LABEL: add_or_sub:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .file 1 "/work1/csix/work/csw-llvm/llvm-project/test.c"
; CHECK-NEXT:    .loc 1 4 0 # test.c:4:0
; CHECK-NEXT:    .cfi_sections .debug_frame
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:x <- $r0
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:y <- $r1
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:doAdd <- $r2
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    .loc 1 6 7 prologue_end # test.c:6:7
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    cb.weqz $r2 ? .LBB0_2
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:doAdd <- $r2
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:y <- $r1
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:x <- $r0
; CHECK-NEXT:    .loc 1 7 10 # test.c:7:10
; CHECK-NEXT:    call add
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:doAdd <- [DW_OP_LLVM_entry_value 1] $r2
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:y <- [DW_OP_LLVM_entry_value 1] $r1
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:x <- [DW_OP_LLVM_entry_value 1] $r0
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:S <- undef
; CHECK-NEXT:    .loc 1 0 10 is_stmt 0 # test.c:0:10
; CHECK-NEXT:    goto .LBB0_3
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp3:
; CHECK-NEXT:  .LBB0_2: # %if.else
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:doAdd <- $r2
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:y <- $r1
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:x <- $r0
; CHECK-NEXT:    .loc 1 9 10 is_stmt 1 # test.c:9:10
; CHECK-NEXT:    call sub
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp4:
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:doAdd <- [DW_OP_LLVM_entry_value 1] $r2
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:y <- [DW_OP_LLVM_entry_value 1] $r1
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:x <- [DW_OP_LLVM_entry_value 1] $r0
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:S <- undef
; CHECK-NEXT:  .LBB0_3: # %if.end
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:doAdd <- [DW_OP_LLVM_entry_value 1] $r2
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:y <- [DW_OP_LLVM_entry_value 1] $r1
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:x <- [DW_OP_LLVM_entry_value 1] $r0
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:S <- undef
; CHECK-NEXT:    .loc 1 11 5 # test.c:11:5
; CHECK-NEXT:    addx2w $r0 = $r18, $r0
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp5:
; CHECK-NEXT:    #DEBUG_VALUE: add_or_sub:S <- $r0
; CHECK-NEXT:    .loc 1 12 3 # test.c:12:3
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp6:
entry:
  call void @llvm.dbg.value(metadata i32 %x, metadata !12, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.value(metadata i32 %y, metadata !13, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.value(metadata i32 %doAdd, metadata !14, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.value(metadata i32 undef, metadata !15, metadata !DIExpression()), !dbg !16
  %tobool.not = icmp eq i32 %doAdd, 0, !dbg !17
  br i1 %tobool.not, label %if.else, label %if.then, !dbg !19

if.then:                                          ; preds = %entry
  %call = tail call i32 @add(i32 %x, i32 %y) #3, !dbg !20
  call void @llvm.dbg.value(metadata i32 undef, metadata !15, metadata !DIExpression()), !dbg !16
  br label %if.end, !dbg !21

if.else:                                          ; preds = %entry
  %call2 = tail call i32 @sub(i32 %x, i32 %y) #3, !dbg !22
  call void @llvm.dbg.value(metadata i32 undef, metadata !15, metadata !DIExpression()), !dbg !16
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call.pn = phi i32 [ %call, %if.then ], [ %call2, %if.else ]
  call void @llvm.dbg.value(metadata i32 undef, metadata !15, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.value(metadata i32 undef, metadata !15, metadata !DIExpression()), !dbg !16
  %factor = shl i32 %x, 1
  %add4 = add i32 %call.pn, %factor, !dbg !23
  call void @llvm.dbg.value(metadata i32 %add4, metadata !15, metadata !DIExpression()), !dbg !16
  ret i32 %add4, !dbg !24
}

declare !dbg !25 i32 @add(i32, i32)

declare !dbg !28 i32 @sub(i32, i32)

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Kalray clang version 12.0.1 (git:software/tools/llvm-project 606b44e98e9364ef5909a205ecf9bfe0ae10619f)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "test.c", directory: "/work1/csix/work/csw-llvm/llvm-project")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"Kalray clang version 12.0.1 (git:software/tools/llvm-project 606b44e98e9364ef5909a205ecf9bfe0ae10619f)"}
!7 = distinct !DISubprogram(name: "add_or_sub", scope: !1, file: !1, line: 4, type: !8, scopeLine: 4, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!8 = !DISubroutineType(types: !9)
!9 = !{!10, !10, !10, !10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !{!12, !13, !14, !15}
!12 = !DILocalVariable(name: "x", arg: 1, scope: !7, file: !1, line: 4, type: !10)
!13 = !DILocalVariable(name: "y", arg: 2, scope: !7, file: !1, line: 4, type: !10)
!14 = !DILocalVariable(name: "doAdd", arg: 3, scope: !7, file: !1, line: 4, type: !10)
!15 = !DILocalVariable(name: "S", scope: !7, file: !1, line: 5, type: !10)
!16 = !DILocation(line: 0, scope: !7)
!17 = !DILocation(line: 6, column: 7, scope: !18)
!18 = distinct !DILexicalBlock(scope: !7, file: !1, line: 6, column: 7)
!19 = !DILocation(line: 6, column: 7, scope: !7)
!20 = !DILocation(line: 7, column: 10, scope: !18)
!21 = !DILocation(line: 7, column: 5, scope: !18)
!22 = !DILocation(line: 9, column: 10, scope: !18)
!23 = !DILocation(line: 11, column: 5, scope: !7)
!24 = !DILocation(line: 12, column: 3, scope: !7)
!25 = !DISubprogram(name: "add", scope: !1, file: !1, line: 1, type: !26, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!26 = !DISubroutineType(types: !27)
!27 = !{!10, !10, !10}
!28 = !DISubprogram(name: "sub", scope: !1, file: !1, line: 2, type: !26, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
