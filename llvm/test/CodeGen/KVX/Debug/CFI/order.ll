; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
; RUN: clang -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @testuvec(<4 x i32>* nocapture readonly %A, <4 x i32>* nocapture readonly %B, <4 x i32>* nocapture %R) local_unnamed_addr #0 !dbg !7 {
; CHECK-LABEL: testuvec:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .file 1 "d" "cfi-order.c"
; CHECK-NEXT:    .loc 1 5 0 # cfi-order.c:5:0
; CHECK-NEXT:    .cfi_sections .debug_frame
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    #DEBUG_VALUE: testuvec:A <- $r0
; CHECK-NEXT:    #DEBUG_VALUE: testuvec:B <- $r1
; CHECK-NEXT:    #DEBUG_VALUE: testuvec:R <- $r2
; CHECK-NEXT:    addd $r12 = $r12, -96
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 96
; CHECK-NEXT:    sd 88[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 80[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 80
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    sq 64[$r12] = $r24r25
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 25, -32
; CHECK-NEXT:    .cfi_offset 24, -24
; CHECK-NEXT:    so 32[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .cfi_offset 23, -64
; CHECK-NEXT:    .cfi_offset 22, -56
; CHECK-NEXT:    .cfi_offset 21, -48
; CHECK-NEXT:    .cfi_offset 20, -40
; CHECK-NEXT:    sd 24[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .cfi_offset 18, -72
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    #DEBUG_VALUE: testuvec:R <- $r18
; CHECK-NEXT:    .loc 1 5 49 prologue_end # cfi-order.c:5:49
; CHECK-NEXT:    lq $r22r23 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    .loc 1 5 54 is_stmt 0 # cfi-order.c:5:54
; CHECK-NEXT:    lq $r24r25 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    .loc 1 5 52 # cfi-order.c:5:52
; CHECK-NEXT:    zxwd $r0 = $r22
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:    #DEBUG_VALUE: testuvec:A <- [DW_OP_LLVM_entry_value 1] $r0
; CHECK-NEXT:    zxwd $r1 = $r24
; CHECK-NEXT:    call __udivdi3
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    #DEBUG_VALUE: testuvec:B <- [DW_OP_LLVM_entry_value 1] $r1
; CHECK-NEXT:    srld $r0 = $r22, 32
; CHECK-NEXT:    srld $r1 = $r24, 32
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    call __udivdi3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    zxwd $r0 = $r23
; CHECK-NEXT:    zxwd $r1 = $r25
; CHECK-NEXT:    insf $r20 = $r0, 63, 32
; CHECK-NEXT:    call __udivdi3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    srld $r0 = $r23, 32
; CHECK-NEXT:    srld $r1 = $r25, 32
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    call __udivdi3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    insf $r21 = $r0, 63, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 5 47 # cfi-order.c:5:47
; CHECK-NEXT:    sq 0[$r18] = $r20r21
; CHECK-NEXT:    addd $r12 = $r14, -80
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .loc 1 5 58 # cfi-order.c:5:58
; CHECK-NEXT:    ld $r18 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp3:
; CHECK-NEXT:    lo $r20r21r22r23 = 32[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    lq $r24r25 = 64[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    ld $r14 = 80[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r16 = 88[$r12]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 96
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp4:
entry:
  call void @llvm.dbg.value(metadata <4 x i32>* %A, metadata !18, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.value(metadata <4 x i32>* %B, metadata !19, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.value(metadata <4 x i32>* %R, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load <4 x i32>, <4 x i32>* %A, align 16, !dbg !22, !tbaa !23
  %1 = load <4 x i32>, <4 x i32>* %B, align 16, !dbg !26, !tbaa !23
  %div = udiv <4 x i32> %0, %1, !dbg !27
  store <4 x i32> %div, <4 x i32>* %R, align 16, !dbg !28, !tbaa !23
  ret void, !dbg !29
}

define void @testsvec(<4 x i32>* nocapture readonly %A, <4 x i32>* nocapture readonly %B, <4 x i32>* nocapture %R) local_unnamed_addr #0 !dbg !30 {
; CHECK-LABEL: testsvec:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:    .loc 1 6 0 is_stmt 1 # cfi-order.c:6:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    #DEBUG_VALUE: testsvec:A <- $r0
; CHECK-NEXT:    #DEBUG_VALUE: testsvec:B <- $r1
; CHECK-NEXT:    #DEBUG_VALUE: testsvec:R <- $r2
; CHECK-NEXT:    addd $r12 = $r12, -96
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 96
; CHECK-NEXT:    sd 88[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 80[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 80
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    sq 64[$r12] = $r24r25
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 25, -32
; CHECK-NEXT:    .cfi_offset 24, -24
; CHECK-NEXT:    so 32[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .cfi_offset 23, -64
; CHECK-NEXT:    .cfi_offset 22, -56
; CHECK-NEXT:    .cfi_offset 21, -48
; CHECK-NEXT:    .cfi_offset 20, -40
; CHECK-NEXT:    sd 24[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .cfi_offset 18, -72
; CHECK-NEXT:  .Ltmp5:
; CHECK-NEXT:    #DEBUG_VALUE: testsvec:R <- $r18
; CHECK-NEXT:    .loc 1 6 49 prologue_end # cfi-order.c:6:49
; CHECK-NEXT:    lq $r22r23 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    .loc 1 6 54 is_stmt 0 # cfi-order.c:6:54
; CHECK-NEXT:    lq $r24r25 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    .loc 1 6 52 # cfi-order.c:6:52
; CHECK-NEXT:    sxwd $r0 = $r22
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:  .Ltmp6:
; CHECK-NEXT:    #DEBUG_VALUE: testsvec:A <- [DW_OP_LLVM_entry_value 1] $r0
; CHECK-NEXT:    sxwd $r1 = $r24
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:  .Ltmp7:
; CHECK-NEXT:    #DEBUG_VALUE: testsvec:B <- [DW_OP_LLVM_entry_value 1] $r1
; CHECK-NEXT:    srld $r0 = $r22, 32
; CHECK-NEXT:    srld $r1 = $r24, 32
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sxwd $r0 = $r23
; CHECK-NEXT:    insf $r20 = $r0, 63, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sxwd $r1 = $r25
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    srld $r0 = $r23, 32
; CHECK-NEXT:    srld $r1 = $r25, 32
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    insf $r21 = $r0, 63, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 6 47 # cfi-order.c:6:47
; CHECK-NEXT:    sq 0[$r18] = $r20r21
; CHECK-NEXT:    addd $r12 = $r14, -80
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .loc 1 6 58 # cfi-order.c:6:58
; CHECK-NEXT:    ld $r18 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp8:
; CHECK-NEXT:    lo $r20r21r22r23 = 32[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    lq $r24r25 = 64[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    ld $r14 = 80[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r16 = 88[$r12]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 96
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp9:
entry:
  call void @llvm.dbg.value(metadata <4 x i32>* %A, metadata !38, metadata !DIExpression()), !dbg !41
  call void @llvm.dbg.value(metadata <4 x i32>* %B, metadata !39, metadata !DIExpression()), !dbg !41
  call void @llvm.dbg.value(metadata <4 x i32>* %R, metadata !40, metadata !DIExpression()), !dbg !41
  %0 = load <4 x i32>, <4 x i32>* %A, align 16, !dbg !42, !tbaa !23
  %1 = load <4 x i32>, <4 x i32>* %B, align 16, !dbg !43, !tbaa !23
  %div = sdiv <4 x i32> %0, %1, !dbg !44
  store <4 x i32> %div, <4 x i32>* %R, align 16, !dbg !45, !tbaa !23
  ret void, !dbg !46
}

define i32 @f() local_unnamed_addr #1 !dbg !47 {
; CHECK-LABEL: f:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:    .loc 1 18 0 is_stmt 1 # cfi-order.c:18:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 8
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:  .Ltmp10:
; CHECK-NEXT:    #DEBUG_VALUE: f:S3 <- undef
; CHECK-NEXT:    #DEBUG_VALUE: f:U3 <- undef
; CHECK-NEXT:    .loc 1 0 0 is_stmt 0 # cfi-order.c:0:0
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 16[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 16
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:  .Ltmp11:
; CHECK-NEXT:    #DEBUG_VALUE: f:S2 <- undef
; CHECK-NEXT:    #DEBUG_VALUE: f:S1 <- undef
; CHECK-NEXT:    #DEBUG_VALUE: f:U2 <- undef
; CHECK-NEXT:    #DEBUG_VALUE: f:U1 <- undef
; CHECK-NEXT:    .loc 1 32 3 prologue_end is_stmt 1 # cfi-order.c:32:3
; CHECK-NEXT:    addd $r12 = $r14, -16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r14 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp12:
entry:
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>, metadata !58, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>, metadata !51, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 -3, i32 undef, i32 undef>, metadata !58, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 -3, i32 undef, i32 undef>, metadata !51, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 -3, i32 5, i32 undef>, metadata !58, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 -3, i32 5, i32 undef>, metadata !51, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 -3, i32 5, i32 -8>, metadata !58, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 -3, i32 5, i32 -8>, metadata !51, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>, metadata !67, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>, metadata !60, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, metadata !67, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, metadata !60, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 3, i32 5, i32 undef>, metadata !67, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 3, i32 5, i32 undef>, metadata !60, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 3, i32 5, i32 8>, metadata !67, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 2, i32 3, i32 5, i32 8>, metadata !60, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 1, i32 1, i32 1, i32 1>, metadata !68, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.value(metadata <4 x i32> <i32 1, i32 1, i32 1, i32 1>, metadata !59, metadata !DIExpression()), !dbg !69
  ret i32 8, !dbg !70
}

declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Kalray clang version 10.0.1 (git:software/tools/llvm-project 413660a1a7a7a2ef431d0d906778c974f42d70d8)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "cfi-order.c", directory: "d")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 2}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"Kalray clang version 10.0.1 (git:software/tools/llvm-project 413660a1a7a7a2ef431d0d906778c974f42d70d8)"}
!7 = distinct !DISubprogram(name: "testuvec", scope: !8, file: !8, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !17)
!8 = !DIFile(filename: "cfi-order.c", directory: "d")
!9 = !DISubroutineType(types: !10)
!10 = !{null, !11, !11, !11}
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "uvec", file: !8, line: 3, baseType: !13)
!13 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 128, flags: DIFlagVector, elements: !15)
!14 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!15 = !{!16}
!16 = !DISubrange(count: 4)
!17 = !{!18, !19, !20}
!18 = !DILocalVariable(name: "A", arg: 1, scope: !7, file: !8, line: 5, type: !11)
!19 = !DILocalVariable(name: "B", arg: 2, scope: !7, file: !8, line: 5, type: !11)
!20 = !DILocalVariable(name: "R", arg: 3, scope: !7, file: !8, line: 5, type: !11)
!21 = !DILocation(line: 0, scope: !7)
!22 = !DILocation(line: 5, column: 49, scope: !7)
!23 = !{!24, !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 5, column: 54, scope: !7)
!27 = !DILocation(line: 5, column: 52, scope: !7)
!28 = !DILocation(line: 5, column: 47, scope: !7)
!29 = !DILocation(line: 5, column: 58, scope: !7)
!30 = distinct !DISubprogram(name: "testsvec", scope: !8, file: !8, line: 6, type: !31, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !37)
!31 = !DISubroutineType(types: !32)
!32 = !{null, !33, !33, !33}
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !34, size: 64)
!34 = !DIDerivedType(tag: DW_TAG_typedef, name: "svec", file: !8, line: 4, baseType: !35)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !36, size: 128, flags: DIFlagVector, elements: !15)
!36 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!37 = !{!38, !39, !40}
!38 = !DILocalVariable(name: "A", arg: 1, scope: !30, file: !8, line: 6, type: !33)
!39 = !DILocalVariable(name: "B", arg: 2, scope: !30, file: !8, line: 6, type: !33)
!40 = !DILocalVariable(name: "R", arg: 3, scope: !30, file: !8, line: 6, type: !33)
!41 = !DILocation(line: 0, scope: !30)
!42 = !DILocation(line: 6, column: 49, scope: !30)
!43 = !DILocation(line: 6, column: 54, scope: !30)
!44 = !DILocation(line: 6, column: 52, scope: !30)
!45 = !DILocation(line: 6, column: 47, scope: !30)
!46 = !DILocation(line: 6, column: 58, scope: !30)
!47 = distinct !DISubprogram(name: "f", scope: !8, file: !8, line: 18, type: !48, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !50)
!48 = !DISubroutineType(types: !49)
!49 = !{!36}
!50 = !{!51, !58, !59, !60, !67, !68}
!51 = !DILocalVariable(name: "S1", scope: !47, file: !8, line: 19, type: !52)
!52 = !DIDerivedType(tag: DW_TAG_typedef, name: "SV", file: !8, line: 11, baseType: !53)
!53 = distinct !DICompositeType(tag: DW_TAG_union_type, file: !8, line: 8, size: 128, elements: !54)
!54 = !{!55, !56}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "V", scope: !53, file: !8, line: 9, baseType: !34, size: 128)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "A", scope: !53, file: !8, line: 10, baseType: !57, size: 128)
!57 = !DICompositeType(tag: DW_TAG_array_type, baseType: !36, size: 128, elements: !15)
!58 = !DILocalVariable(name: "S2", scope: !47, file: !8, line: 19, type: !52)
!59 = !DILocalVariable(name: "S3", scope: !47, file: !8, line: 19, type: !52)
!60 = !DILocalVariable(name: "U1", scope: !47, file: !8, line: 20, type: !61)
!61 = !DIDerivedType(tag: DW_TAG_typedef, name: "UV", file: !8, line: 16, baseType: !62)
!62 = distinct !DICompositeType(tag: DW_TAG_union_type, file: !8, line: 13, size: 128, elements: !63)
!63 = !{!64, !65}
!64 = !DIDerivedType(tag: DW_TAG_member, name: "V", scope: !62, file: !8, line: 14, baseType: !12, size: 128)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "A", scope: !62, file: !8, line: 15, baseType: !66, size: 128)
!66 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 128, elements: !15)
!67 = !DILocalVariable(name: "U2", scope: !47, file: !8, line: 20, type: !61)
!68 = !DILocalVariable(name: "U3", scope: !47, file: !8, line: 20, type: !61)
!69 = !DILocation(line: 0, scope: !47)
!70 = !DILocation(line: 32, column: 3, scope: !47)
