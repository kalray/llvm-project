; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 --disable-kvx-loadstore-packing=false %s -o - | FileCheck %s
; RUN: clang -O2 -c -o /dev/null %s -mllvm --disable-kvx-loadstore-packing=false

target triple = "kvx-kalray-cos"

@v = common global [50 x i64] zeroinitializer, align 8, !dbg !0

define i64 @f_1_nopack() local_unnamed_addr #0 !dbg !16 {
; CHECK-LABEL: f_1_nopack:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .loc 1 7 0 # cfi-csr.c:7:0
; CHECK-NEXT:    .cfi_sections .debug_frame
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = v
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    .loc 1 8 12 prologue_end # cfi-csr.c:8:12
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 16[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 16
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 18, -24
; CHECK-NEXT:    ld $r18 = 0[$r0]
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .loc 1 12 3 epilogue_begin # cfi-csr.c:12:3
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    addd $r12 = $r14, -16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r14 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp0:
entry:
  %0 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 0), align 8, !dbg !21, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %0, metadata !20, metadata !DIExpression()), !dbg !26
  tail call void bitcast (void (...)* @foo to void ()*)() #3, !dbg !27
  ret i64 %0, !dbg !28
}

declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @foo(...) local_unnamed_addr #2

declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

define i64 @f_2_pairpack() local_unnamed_addr #0 !dbg !29 {
; CHECK-LABEL: f_2_pairpack:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:    .loc 1 28 0 # cfi-csr.c:28:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = v
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    .loc 1 29 12 prologue_end # cfi-csr.c:29:12
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 16[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 16
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 19, -32
; CHECK-NEXT:    .cfi_offset 18, -24
; CHECK-NEXT:    ld $r18 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:    #DEBUG_VALUE: f_2_pairpack:a <- $r18
; CHECK-NEXT:    .loc 1 30 12 # cfi-csr.c:30:12
; CHECK-NEXT:    ld $r19 = 8[$r0]
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .loc 1 34 12 epilogue_begin # cfi-csr.c:34:12
; CHECK-NEXT:    addd $r0 = $r19, $r18
; CHECK-NEXT:    addd $r12 = $r14, -16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 34 3 is_stmt 0 # cfi-csr.c:34:3
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    ld $r14 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp3:
entry:
  %0 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 0), align 8, !dbg !33, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %0, metadata !31, metadata !DIExpression()), !dbg !34
  %1 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 1), align 8, !dbg !35, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %1, metadata !32, metadata !DIExpression()), !dbg !34
  tail call void bitcast (void (...)* @foo to void ()*)() #3, !dbg !36
  %add = add nsw i64 %1, %0, !dbg !37
  ret i64 %add, !dbg !38
}

define i64 @f_3_pairpack() local_unnamed_addr #0 !dbg !39 {
; CHECK-LABEL: f_3_pairpack:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:    .loc 1 51 0 is_stmt 1 # cfi-csr.c:51:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = v
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 64
; CHECK-NEXT:    .loc 1 52 12 prologue_end # cfi-csr.c:52:12
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 48[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 48
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    sd 40[$r12] = $r20
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 20, -24
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .cfi_offset 19, -40
; CHECK-NEXT:    .cfi_offset 18, -32
; CHECK-NEXT:    ld $r18 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .Ltmp4:
; CHECK-NEXT:    #DEBUG_VALUE: f_3_pairpack:a <- $r18
; CHECK-NEXT:    .loc 1 53 12 # cfi-csr.c:53:12
; CHECK-NEXT:    ld $r19 = 8[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:  .Ltmp5:
; CHECK-NEXT:    #DEBUG_VALUE: f_3_pairpack:b <- $r19
; CHECK-NEXT:    .loc 1 54 12 # cfi-csr.c:54:12
; CHECK-NEXT:    ld $r20 = 16[$r0]
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    .loc 1 58 12 # cfi-csr.c:58:12
; CHECK-NEXT:    addd $r0 = $r19, $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 58 16 epilogue_begin is_stmt 0 # cfi-csr.c:58:16
; CHECK-NEXT:    addd $r0 = $r0, $r20
; CHECK-NEXT:    addd $r12 = $r14, -48
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .loc 1 58 3 # cfi-csr.c:58:3
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp6:
; CHECK-NEXT:    ld $r20 = 40[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r14 = 48[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp7:
entry:
  %0 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 0), align 8, !dbg !44, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %0, metadata !41, metadata !DIExpression()), !dbg !45
  %1 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 1), align 8, !dbg !46, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %1, metadata !42, metadata !DIExpression()), !dbg !45
  %2 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 2), align 8, !dbg !47, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %2, metadata !43, metadata !DIExpression()), !dbg !45
  tail call void bitcast (void (...)* @foo to void ()*)() #3, !dbg !48
  %add = add nsw i64 %1, %0, !dbg !49
  %add1 = add nsw i64 %add, %2, !dbg !50
  ret i64 %add1, !dbg !51
}

define i64 @f_4_quadpack() local_unnamed_addr #0 !dbg !52 {
; CHECK-LABEL: f_4_quadpack:
; CHECK:       .Lfunc_begin3:
; CHECK-NEXT:    .loc 1 79 0 is_stmt 1 # cfi-csr.c:79:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = v
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 64
; CHECK-NEXT:    .loc 1 80 12 prologue_end # cfi-csr.c:80:12
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 48[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 48
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    sq 32[$r12] = $r20r21
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 21, -32
; CHECK-NEXT:    .cfi_offset 20, -24
; CHECK-NEXT:    sq 16[$r12] = $r18r19
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .cfi_offset 19, -48
; CHECK-NEXT:    .cfi_offset 18, -40
; CHECK-NEXT:    ld $r18 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .Ltmp8:
; CHECK-NEXT:    #DEBUG_VALUE: f_4_quadpack:a <- $r18
; CHECK-NEXT:    .loc 1 81 12 # cfi-csr.c:81:12
; CHECK-NEXT:    ld $r19 = 8[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:  .Ltmp9:
; CHECK-NEXT:    #DEBUG_VALUE: f_4_quadpack:b <- $r19
; CHECK-NEXT:    .loc 1 82 12 # cfi-csr.c:82:12
; CHECK-NEXT:    ld $r20 = 16[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:  .Ltmp10:
; CHECK-NEXT:    #DEBUG_VALUE: f_4_quadpack:c <- $r20
; CHECK-NEXT:    .loc 1 83 12 # cfi-csr.c:83:12
; CHECK-NEXT:    ld $r21 = 24[$r0]
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    .loc 1 87 12 # cfi-csr.c:87:12
; CHECK-NEXT:    addd $r0 = $r19, $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 87 16 is_stmt 0 # cfi-csr.c:87:16
; CHECK-NEXT:    addd $r0 = $r0, $r20
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .loc 1 87 20 epilogue_begin # cfi-csr.c:87:20
; CHECK-NEXT:    addd $r0 = $r0, $r21
; CHECK-NEXT:    addd $r12 = $r14, -48
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .loc 1 87 3 # cfi-csr.c:87:3
; CHECK-NEXT:    lq $r18r19 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp11:
; CHECK-NEXT:    lq $r20r21 = 32[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .Ltmp12:
; CHECK-NEXT:    ld $r14 = 48[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp13:
entry:
  %0 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 0), align 8, !dbg !58, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %0, metadata !54, metadata !DIExpression()), !dbg !59
  %1 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 1), align 8, !dbg !60, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %1, metadata !55, metadata !DIExpression()), !dbg !59
  %2 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 2), align 8, !dbg !61, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %2, metadata !56, metadata !DIExpression()), !dbg !59
  %3 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 3), align 8, !dbg !62, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %3, metadata !57, metadata !DIExpression()), !dbg !59
  tail call void bitcast (void (...)* @foo to void ()*)() #3, !dbg !63
  %add = add nsw i64 %1, %0, !dbg !64
  %add1 = add nsw i64 %add, %2, !dbg !65
  %add2 = add nsw i64 %add1, %3, !dbg !66
  ret i64 %add2, !dbg !67
}

define i64 @f_5_quadpack() local_unnamed_addr #0 !dbg !68 {
; CHECK-LABEL: f_5_quadpack:
; CHECK:       .Lfunc_begin4:
; CHECK-NEXT:    .loc 1 107 0 is_stmt 1 # cfi-csr.c:107:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = v
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 64
; CHECK-NEXT:    .loc 1 108 12 prologue_end # cfi-csr.c:108:12
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 48[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 48
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    sd 40[$r12] = $r22
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 22, -24
; CHECK-NEXT:    sq 24[$r12] = $r20r21
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .cfi_offset 21, -40
; CHECK-NEXT:    .cfi_offset 20, -32
; CHECK-NEXT:    sq 8[$r12] = $r18r19
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .cfi_offset 19, -56
; CHECK-NEXT:    .cfi_offset 18, -48
; CHECK-NEXT:    ld $r18 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:  .Ltmp14:
; CHECK-NEXT:    #DEBUG_VALUE: f_5_quadpack:a <- $r18
; CHECK-NEXT:    .loc 1 109 12 # cfi-csr.c:109:12
; CHECK-NEXT:    ld $r19 = 8[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:  .Ltmp15:
; CHECK-NEXT:    #DEBUG_VALUE: f_5_quadpack:b <- $r19
; CHECK-NEXT:    .loc 1 110 12 # cfi-csr.c:110:12
; CHECK-NEXT:    ld $r20 = 16[$r0]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:  .Ltmp16:
; CHECK-NEXT:    #DEBUG_VALUE: f_5_quadpack:c <- $r20
; CHECK-NEXT:    .loc 1 111 12 # cfi-csr.c:111:12
; CHECK-NEXT:    ld $r21 = 24[$r0]
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:  .Ltmp17:
; CHECK-NEXT:    #DEBUG_VALUE: f_5_quadpack:d <- $r21
; CHECK-NEXT:    .loc 1 112 12 # cfi-csr.c:112:12
; CHECK-NEXT:    ld $r22 = 32[$r0]
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    .loc 1 116 12 # cfi-csr.c:116:12
; CHECK-NEXT:    addd $r0 = $r19, $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 116 16 is_stmt 0 # cfi-csr.c:116:16
; CHECK-NEXT:    addd $r0 = $r0, $r20
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .loc 1 116 20 # cfi-csr.c:116:20
; CHECK-NEXT:    addd $r0 = $r0, $r21
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .loc 1 116 24 epilogue_begin # cfi-csr.c:116:24
; CHECK-NEXT:    addd $r0 = $r0, $r22
; CHECK-NEXT:    addd $r12 = $r14, -48
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .loc 1 116 3 # cfi-csr.c:116:3
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp18:
; CHECK-NEXT:    lq $r20r21 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .Ltmp19:
; CHECK-NEXT:    ld $r22 = 40[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    ld $r14 = 48[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp20:
entry:
  %0 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 0), align 8, !dbg !75, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %0, metadata !70, metadata !DIExpression()), !dbg !76
  %1 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 1), align 8, !dbg !77, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %1, metadata !71, metadata !DIExpression()), !dbg !76
  %2 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 2), align 8, !dbg !78, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %2, metadata !72, metadata !DIExpression()), !dbg !76
  %3 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 3), align 8, !dbg !79, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %3, metadata !73, metadata !DIExpression()), !dbg !76
  %4 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 4), align 8, !dbg !80, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %4, metadata !74, metadata !DIExpression()), !dbg !76
  tail call void bitcast (void (...)* @foo to void ()*)() #3, !dbg !81
  %add = add nsw i64 %1, %0, !dbg !82
  %add1 = add nsw i64 %add, %2, !dbg !83
  %add2 = add nsw i64 %add1, %3, !dbg !84
  %add3 = add nsw i64 %add2, %4, !dbg !85
  ret i64 %add3, !dbg !86
}

define i64 @f_6_1quad1pairpack() local_unnamed_addr #0 !dbg !87 {
; CHECK-LABEL: f_6_1quad1pairpack:
; CHECK:       .Lfunc_begin5:
; CHECK-NEXT:    .loc 1 140 0 is_stmt 1 # cfi-csr.c:140:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = v
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 64
; CHECK-NEXT:    .loc 1 141 12 prologue_end # cfi-csr.c:141:12
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 48[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 48
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    so 16[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 23, -48
; CHECK-NEXT:    .cfi_offset 22, -40
; CHECK-NEXT:    .cfi_offset 21, -32
; CHECK-NEXT:    .cfi_offset 20, -24
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .cfi_offset 19, -64
; CHECK-NEXT:    .cfi_offset 18, -56
; CHECK-NEXT:    ld $r18 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .Ltmp21:
; CHECK-NEXT:    #DEBUG_VALUE: f_6_1quad1pairpack:a <- $r18
; CHECK-NEXT:    .loc 1 142 12 # cfi-csr.c:142:12
; CHECK-NEXT:    ld $r19 = 8[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:  .Ltmp22:
; CHECK-NEXT:    #DEBUG_VALUE: f_6_1quad1pairpack:b <- $r19
; CHECK-NEXT:    .loc 1 143 12 # cfi-csr.c:143:12
; CHECK-NEXT:    ld $r20 = 16[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:  .Ltmp23:
; CHECK-NEXT:    #DEBUG_VALUE: f_6_1quad1pairpack:c <- $r20
; CHECK-NEXT:    .loc 1 144 12 # cfi-csr.c:144:12
; CHECK-NEXT:    ld $r21 = 24[$r0]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:  .Ltmp24:
; CHECK-NEXT:    #DEBUG_VALUE: f_6_1quad1pairpack:d <- $r21
; CHECK-NEXT:    .loc 1 145 12 # cfi-csr.c:145:12
; CHECK-NEXT:    ld $r22 = 32[$r0]
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:  .Ltmp25:
; CHECK-NEXT:    #DEBUG_VALUE: f_6_1quad1pairpack:e <- $r22
; CHECK-NEXT:    .loc 1 146 12 # cfi-csr.c:146:12
; CHECK-NEXT:    ld $r23 = 40[$r0]
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    .loc 1 150 12 # cfi-csr.c:150:12
; CHECK-NEXT:    addd $r0 = $r19, $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 150 16 is_stmt 0 # cfi-csr.c:150:16
; CHECK-NEXT:    addd $r0 = $r0, $r20
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .loc 1 150 20 # cfi-csr.c:150:20
; CHECK-NEXT:    addd $r0 = $r0, $r21
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .loc 1 150 24 # cfi-csr.c:150:24
; CHECK-NEXT:    addd $r0 = $r0, $r22
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .loc 1 150 28 epilogue_begin # cfi-csr.c:150:28
; CHECK-NEXT:    addd $r0 = $r0, $r23
; CHECK-NEXT:    addd $r12 = $r14, -48
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .loc 1 150 3 # cfi-csr.c:150:3
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp26:
; CHECK-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .Ltmp27:
; CHECK-NEXT:    ld $r14 = 48[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp28:
entry:
  %0 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 0), align 8, !dbg !95, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %0, metadata !89, metadata !DIExpression()), !dbg !96
  %1 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 1), align 8, !dbg !97, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %1, metadata !90, metadata !DIExpression()), !dbg !96
  %2 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 2), align 8, !dbg !98, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %2, metadata !91, metadata !DIExpression()), !dbg !96
  %3 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 3), align 8, !dbg !99, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %3, metadata !92, metadata !DIExpression()), !dbg !96
  %4 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 4), align 8, !dbg !100, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %4, metadata !93, metadata !DIExpression()), !dbg !96
  %5 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 5), align 8, !dbg !101, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %5, metadata !94, metadata !DIExpression()), !dbg !96
  tail call void bitcast (void (...)* @foo to void ()*)() #3, !dbg !102
  %add = add nsw i64 %1, %0, !dbg !103
  %add1 = add nsw i64 %add, %2, !dbg !104
  %add2 = add nsw i64 %add1, %3, !dbg !105
  %add3 = add nsw i64 %add2, %4, !dbg !106
  %add4 = add nsw i64 %add3, %5, !dbg !107
  ret i64 %add4, !dbg !108
}

define i64 @f_14_3quad1pairpack() local_unnamed_addr #0 !dbg !109 {
; CHECK-LABEL: f_14_3quad1pairpack:
; CHECK:       .Lfunc_begin6:
; CHECK-NEXT:    .loc 1 174 0 is_stmt 1 # cfi-csr.c:174:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = v
; CHECK-NEXT:    addd $r12 = $r12, -128
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 128
; CHECK-NEXT:    .loc 1 175 12 prologue_end # cfi-csr.c:175:12
; CHECK-NEXT:    sd 120[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 112[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 112
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    so 80[$r12] = $r28r29r30r31
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 31, -48
; CHECK-NEXT:    .cfi_offset 30, -40
; CHECK-NEXT:    .cfi_offset 29, -32
; CHECK-NEXT:    .cfi_offset 28, -24
; CHECK-NEXT:    so 48[$r12] = $r24r25r26r27
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .cfi_offset 27, -80
; CHECK-NEXT:    .cfi_offset 26, -72
; CHECK-NEXT:    .cfi_offset 25, -64
; CHECK-NEXT:    .cfi_offset 24, -56
; CHECK-NEXT:    so 16[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .cfi_offset 23, -112
; CHECK-NEXT:    .cfi_offset 22, -104
; CHECK-NEXT:    .cfi_offset 21, -96
; CHECK-NEXT:    .cfi_offset 20, -88
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    .cfi_offset 19, -128
; CHECK-NEXT:    .cfi_offset 18, -120
; CHECK-NEXT:    ld $r18 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:  .Ltmp29:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:a <- $r18
; CHECK-NEXT:    .loc 1 176 12 # cfi-csr.c:176:12
; CHECK-NEXT:    ld $r19 = 8[$r0]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:  .Ltmp30:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:b <- $r19
; CHECK-NEXT:    .loc 1 177 12 # cfi-csr.c:177:12
; CHECK-NEXT:    ld $r20 = 16[$r0]
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:  .Ltmp31:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:c <- $r20
; CHECK-NEXT:    .loc 1 178 12 # cfi-csr.c:178:12
; CHECK-NEXT:    ld $r21 = 24[$r0]
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:  .Ltmp32:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:d <- $r21
; CHECK-NEXT:    .loc 1 179 12 # cfi-csr.c:179:12
; CHECK-NEXT:    ld $r22 = 32[$r0]
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:  .Ltmp33:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:e <- $r22
; CHECK-NEXT:    .loc 1 180 12 # cfi-csr.c:180:12
; CHECK-NEXT:    ld $r23 = 40[$r0]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:  .Ltmp34:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:f <- $r23
; CHECK-NEXT:    .loc 1 181 12 # cfi-csr.c:181:12
; CHECK-NEXT:    ld $r24 = 48[$r0]
; CHECK-NEXT:    ;; # (end cycle 13)
; CHECK-NEXT:  .Ltmp35:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:g <- $r24
; CHECK-NEXT:    .loc 1 182 12 # cfi-csr.c:182:12
; CHECK-NEXT:    ld $r25 = 56[$r0]
; CHECK-NEXT:    ;; # (end cycle 14)
; CHECK-NEXT:  .Ltmp36:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:h <- $r25
; CHECK-NEXT:    .loc 1 183 12 # cfi-csr.c:183:12
; CHECK-NEXT:    ld $r26 = 64[$r0]
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:  .Ltmp37:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:i <- $r26
; CHECK-NEXT:    .loc 1 184 12 # cfi-csr.c:184:12
; CHECK-NEXT:    ld $r27 = 72[$r0]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:  .Ltmp38:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:j <- $r27
; CHECK-NEXT:    .loc 1 185 12 # cfi-csr.c:185:12
; CHECK-NEXT:    ld $r28 = 80[$r0]
; CHECK-NEXT:    ;; # (end cycle 17)
; CHECK-NEXT:  .Ltmp39:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:k <- $r28
; CHECK-NEXT:    .loc 1 186 12 # cfi-csr.c:186:12
; CHECK-NEXT:    ld $r29 = 88[$r0]
; CHECK-NEXT:    ;; # (end cycle 18)
; CHECK-NEXT:  .Ltmp40:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:l <- $r29
; CHECK-NEXT:    .loc 1 187 12 # cfi-csr.c:187:12
; CHECK-NEXT:    ld $r30 = 96[$r0]
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:  .Ltmp41:
; CHECK-NEXT:    #DEBUG_VALUE: f_14_3quad1pairpack:m <- $r30
; CHECK-NEXT:    .loc 1 188 12 # cfi-csr.c:188:12
; CHECK-NEXT:    ld $r31 = 104[$r0]
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    .loc 1 192 12 # cfi-csr.c:192:12
; CHECK-NEXT:    addd $r0 = $r19, $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 192 16 is_stmt 0 # cfi-csr.c:192:16
; CHECK-NEXT:    addd $r0 = $r0, $r20
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .loc 1 192 20 # cfi-csr.c:192:20
; CHECK-NEXT:    addd $r0 = $r0, $r21
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .loc 1 192 24 # cfi-csr.c:192:24
; CHECK-NEXT:    addd $r0 = $r0, $r22
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .loc 1 192 28 # cfi-csr.c:192:28
; CHECK-NEXT:    addd $r0 = $r0, $r23
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .loc 1 192 32 # cfi-csr.c:192:32
; CHECK-NEXT:    addd $r0 = $r0, $r24
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .loc 1 192 36 # cfi-csr.c:192:36
; CHECK-NEXT:    addd $r0 = $r0, $r25
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    .loc 1 192 40 # cfi-csr.c:192:40
; CHECK-NEXT:    addd $r0 = $r0, $r26
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    .loc 1 192 44 # cfi-csr.c:192:44
; CHECK-NEXT:    addd $r0 = $r0, $r27
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    .loc 1 192 48 # cfi-csr.c:192:48
; CHECK-NEXT:    addd $r0 = $r0, $r28
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    .loc 1 192 52 # cfi-csr.c:192:52
; CHECK-NEXT:    addd $r0 = $r0, $r29
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    .loc 1 192 56 # cfi-csr.c:192:56
; CHECK-NEXT:    addd $r0 = $r0, $r30
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    .loc 1 192 60 epilogue_begin # cfi-csr.c:192:60
; CHECK-NEXT:    addd $r0 = $r0, $r31
; CHECK-NEXT:    addd $r12 = $r14, -112
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    .loc 1 192 3 # cfi-csr.c:192:3
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp42:
; CHECK-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .Ltmp43:
; CHECK-NEXT:    lo $r24r25r26r27 = 48[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:  .Ltmp44:
; CHECK-NEXT:    lo $r28r29r30r31 = 80[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .Ltmp45:
; CHECK-NEXT:    ld $r14 = 112[$r12]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    ld $r16 = 120[$r12]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 128
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp46:
entry:
  %0 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 0), align 8, !dbg !125, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %0, metadata !111, metadata !DIExpression()), !dbg !126
  %1 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 1), align 8, !dbg !127, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %1, metadata !112, metadata !DIExpression()), !dbg !126
  %2 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 2), align 8, !dbg !128, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %2, metadata !113, metadata !DIExpression()), !dbg !126
  %3 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 3), align 8, !dbg !129, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %3, metadata !114, metadata !DIExpression()), !dbg !126
  %4 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 4), align 8, !dbg !130, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %4, metadata !115, metadata !DIExpression()), !dbg !126
  %5 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 5), align 8, !dbg !131, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %5, metadata !116, metadata !DIExpression()), !dbg !126
  %6 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 6), align 8, !dbg !132, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %6, metadata !117, metadata !DIExpression()), !dbg !126
  %7 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 7), align 8, !dbg !133, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %7, metadata !118, metadata !DIExpression()), !dbg !126
  %8 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 8), align 8, !dbg !134, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %8, metadata !119, metadata !DIExpression()), !dbg !126
  %9 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 9), align 8, !dbg !135, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %9, metadata !120, metadata !DIExpression()), !dbg !126
  %10 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 10), align 8, !dbg !136, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %10, metadata !121, metadata !DIExpression()), !dbg !126
  %11 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 11), align 8, !dbg !137, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %11, metadata !122, metadata !DIExpression()), !dbg !126
  %12 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 12), align 8, !dbg !138, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %12, metadata !123, metadata !DIExpression()), !dbg !126
  %13 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 13), align 8, !dbg !139, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %13, metadata !124, metadata !DIExpression()), !dbg !126
  tail call void bitcast (void (...)* @foo to void ()*)() #3, !dbg !140
  %add = add nsw i64 %1, %0, !dbg !141
  %add1 = add nsw i64 %add, %2, !dbg !142
  %add2 = add nsw i64 %add1, %3, !dbg !143
  %add3 = add nsw i64 %add2, %4, !dbg !144
  %add4 = add nsw i64 %add3, %5, !dbg !145
  %add5 = add nsw i64 %add4, %6, !dbg !146
  %add6 = add nsw i64 %add5, %7, !dbg !147
  %add7 = add nsw i64 %add6, %8, !dbg !148
  %add8 = add nsw i64 %add7, %9, !dbg !149
  %add9 = add nsw i64 %add8, %10, !dbg !150
  %add10 = add nsw i64 %add9, %11, !dbg !151
  %add11 = add nsw i64 %add10, %12, !dbg !152
  %add12 = add nsw i64 %add11, %13, !dbg !153
  ret i64 %add12, !dbg !154
}

define i64 @f_15_3quad1pairpack() local_unnamed_addr #0 !dbg !155 {
; CHECK-LABEL: f_15_3quad1pairpack:
; CHECK:       .Lfunc_begin7:
; CHECK-NEXT:    .loc 1 230 0 is_stmt 1 # cfi-csr.c:230:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = v
; CHECK-NEXT:    addd $r12 = $r12, -160
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 160
; CHECK-NEXT:    .loc 1 231 12 prologue_end # cfi-csr.c:231:12
; CHECK-NEXT:    sd 152[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 144[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 144
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    so 112[$r12] = $r28r29r30r31
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 31, -48
; CHECK-NEXT:    .cfi_offset 30, -40
; CHECK-NEXT:    .cfi_offset 29, -32
; CHECK-NEXT:    .cfi_offset 28, -24
; CHECK-NEXT:    so 80[$r12] = $r24r25r26r27
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .cfi_offset 27, -80
; CHECK-NEXT:    .cfi_offset 26, -72
; CHECK-NEXT:    .cfi_offset 25, -64
; CHECK-NEXT:    .cfi_offset 24, -56
; CHECK-NEXT:    so 48[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .cfi_offset 23, -112
; CHECK-NEXT:    .cfi_offset 22, -104
; CHECK-NEXT:    .cfi_offset 21, -96
; CHECK-NEXT:    .cfi_offset 20, -88
; CHECK-NEXT:    sq 32[$r12] = $r18r19
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    .cfi_offset 19, -128
; CHECK-NEXT:    .cfi_offset 18, -120
; CHECK-NEXT:    ld $r1 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:  .Ltmp47:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:a <- $r1
; CHECK-NEXT:    .loc 1 232 12 # cfi-csr.c:232:12
; CHECK-NEXT:    sd -120[$r14] = $r1
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:  .Ltmp48:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:a <- [DW_OP_constu 136, DW_OP_minus] [$r14+0]
; CHECK-NEXT:    ld $r19 = 8[$r0]
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:  .Ltmp49:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:b <- $r19
; CHECK-NEXT:    .loc 1 233 12 # cfi-csr.c:233:12
; CHECK-NEXT:    ld $r20 = 16[$r0]
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:  .Ltmp50:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:c <- $r20
; CHECK-NEXT:    .loc 1 234 12 # cfi-csr.c:234:12
; CHECK-NEXT:    ld $r21 = 24[$r0]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:  .Ltmp51:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:d <- $r21
; CHECK-NEXT:    .loc 1 235 12 # cfi-csr.c:235:12
; CHECK-NEXT:    ld $r22 = 32[$r0]
; CHECK-NEXT:    ;; # (end cycle 13)
; CHECK-NEXT:  .Ltmp52:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:e <- $r22
; CHECK-NEXT:    .loc 1 236 12 # cfi-csr.c:236:12
; CHECK-NEXT:    ld $r23 = 40[$r0]
; CHECK-NEXT:    ;; # (end cycle 14)
; CHECK-NEXT:  .Ltmp53:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:f <- $r23
; CHECK-NEXT:    .loc 1 237 12 # cfi-csr.c:237:12
; CHECK-NEXT:    ld $r24 = 48[$r0]
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:  .Ltmp54:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:g <- $r24
; CHECK-NEXT:    .loc 1 238 12 # cfi-csr.c:238:12
; CHECK-NEXT:    ld $r25 = 56[$r0]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:  .Ltmp55:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:h <- $r25
; CHECK-NEXT:    .loc 1 239 12 # cfi-csr.c:239:12
; CHECK-NEXT:    ld $r26 = 64[$r0]
; CHECK-NEXT:    ;; # (end cycle 17)
; CHECK-NEXT:  .Ltmp56:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:i <- $r26
; CHECK-NEXT:    .loc 1 240 12 # cfi-csr.c:240:12
; CHECK-NEXT:    ld $r27 = 72[$r0]
; CHECK-NEXT:    ;; # (end cycle 18)
; CHECK-NEXT:  .Ltmp57:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:j <- $r27
; CHECK-NEXT:    .loc 1 241 12 # cfi-csr.c:241:12
; CHECK-NEXT:    ld $r28 = 80[$r0]
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:  .Ltmp58:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:k <- $r28
; CHECK-NEXT:    .loc 1 242 12 # cfi-csr.c:242:12
; CHECK-NEXT:    ld $r29 = 88[$r0]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:  .Ltmp59:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:l <- $r29
; CHECK-NEXT:    .loc 1 243 12 # cfi-csr.c:243:12
; CHECK-NEXT:    ld $r30 = 96[$r0]
; CHECK-NEXT:    ;; # (end cycle 21)
; CHECK-NEXT:  .Ltmp60:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:m <- $r30
; CHECK-NEXT:    .loc 1 244 12 # cfi-csr.c:244:12
; CHECK-NEXT:    ld $r31 = 104[$r0]
; CHECK-NEXT:    ;; # (end cycle 22)
; CHECK-NEXT:  .Ltmp61:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:n <- $r31
; CHECK-NEXT:    .loc 1 245 12 # cfi-csr.c:245:12
; CHECK-NEXT:    ld $r18 = 112[$r0]
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    .loc 1 249 12 # cfi-csr.c:249:12
; CHECK-NEXT:    ld $r0 = -120[$r14]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp62:
; CHECK-NEXT:    #DEBUG_VALUE: f_15_3quad1pairpack:a <- $r0
; CHECK-NEXT:    addd $r0 = $r19, $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .Ltmp63:
; CHECK-NEXT:    .loc 1 249 16 is_stmt 0 # cfi-csr.c:249:16
; CHECK-NEXT:    addd $r0 = $r0, $r20
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .loc 1 249 20 # cfi-csr.c:249:20
; CHECK-NEXT:    addd $r0 = $r0, $r21
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .loc 1 249 24 # cfi-csr.c:249:24
; CHECK-NEXT:    addd $r0 = $r0, $r22
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    .loc 1 249 28 # cfi-csr.c:249:28
; CHECK-NEXT:    addd $r0 = $r0, $r23
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    .loc 1 249 32 # cfi-csr.c:249:32
; CHECK-NEXT:    addd $r0 = $r0, $r24
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    .loc 1 249 36 # cfi-csr.c:249:36
; CHECK-NEXT:    addd $r0 = $r0, $r25
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    .loc 1 249 40 # cfi-csr.c:249:40
; CHECK-NEXT:    addd $r0 = $r0, $r26
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    .loc 1 249 44 # cfi-csr.c:249:44
; CHECK-NEXT:    addd $r0 = $r0, $r27
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    .loc 1 249 48 # cfi-csr.c:249:48
; CHECK-NEXT:    addd $r0 = $r0, $r28
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    .loc 1 249 52 # cfi-csr.c:249:52
; CHECK-NEXT:    addd $r0 = $r0, $r29
; CHECK-NEXT:    ;; # (end cycle 13)
; CHECK-NEXT:    .loc 1 249 56 # cfi-csr.c:249:56
; CHECK-NEXT:    addd $r0 = $r0, $r30
; CHECK-NEXT:    ;; # (end cycle 14)
; CHECK-NEXT:    .loc 1 249 60 # cfi-csr.c:249:60
; CHECK-NEXT:    addd $r0 = $r0, $r31
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    .loc 1 249 64 epilogue_begin # cfi-csr.c:249:64
; CHECK-NEXT:    addd $r0 = $r0, $r18
; CHECK-NEXT:    addd $r12 = $r14, -144
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    .loc 1 249 3 # cfi-csr.c:249:3
; CHECK-NEXT:    lq $r18r19 = 32[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp64:
; CHECK-NEXT:    lo $r20r21r22r23 = 48[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .Ltmp65:
; CHECK-NEXT:    lo $r24r25r26r27 = 80[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:  .Ltmp66:
; CHECK-NEXT:    lo $r28r29r30r31 = 112[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .Ltmp67:
; CHECK-NEXT:    ld $r14 = 144[$r12]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    ld $r16 = 152[$r12]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 160
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp68:
entry:
  %0 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 0), align 8, !dbg !172, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %0, metadata !157, metadata !DIExpression()), !dbg !173
  %1 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 1), align 8, !dbg !174, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %1, metadata !158, metadata !DIExpression()), !dbg !173
  %2 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 2), align 8, !dbg !175, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %2, metadata !159, metadata !DIExpression()), !dbg !173
  %3 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 3), align 8, !dbg !176, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %3, metadata !160, metadata !DIExpression()), !dbg !173
  %4 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 4), align 8, !dbg !177, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %4, metadata !161, metadata !DIExpression()), !dbg !173
  %5 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 5), align 8, !dbg !178, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %5, metadata !162, metadata !DIExpression()), !dbg !173
  %6 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 6), align 8, !dbg !179, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %6, metadata !163, metadata !DIExpression()), !dbg !173
  %7 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 7), align 8, !dbg !180, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %7, metadata !164, metadata !DIExpression()), !dbg !173
  %8 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 8), align 8, !dbg !181, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %8, metadata !165, metadata !DIExpression()), !dbg !173
  %9 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 9), align 8, !dbg !182, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %9, metadata !166, metadata !DIExpression()), !dbg !173
  %10 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 10), align 8, !dbg !183, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %10, metadata !167, metadata !DIExpression()), !dbg !173
  %11 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 11), align 8, !dbg !184, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %11, metadata !168, metadata !DIExpression()), !dbg !173
  %12 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 12), align 8, !dbg !185, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %12, metadata !169, metadata !DIExpression()), !dbg !173
  %13 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 13), align 8, !dbg !186, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %13, metadata !170, metadata !DIExpression()), !dbg !173
  %14 = load volatile i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @v, i64 0, i64 14), align 8, !dbg !187, !tbaa !22
  call void @llvm.dbg.value(metadata i64 %14, metadata !171, metadata !DIExpression()), !dbg !173
  tail call void bitcast (void (...)* @foo to void ()*)() #3, !dbg !188
  %add = add nsw i64 %1, %0, !dbg !189
  %add1 = add nsw i64 %add, %2, !dbg !190
  %add2 = add nsw i64 %add1, %3, !dbg !191
  %add3 = add nsw i64 %add2, %4, !dbg !192
  %add4 = add nsw i64 %add3, %5, !dbg !193
  %add5 = add nsw i64 %add4, %6, !dbg !194
  %add6 = add nsw i64 %add5, %7, !dbg !195
  %add7 = add nsw i64 %add6, %8, !dbg !196
  %add8 = add nsw i64 %add7, %9, !dbg !197
  %add9 = add nsw i64 %add8, %10, !dbg !198
  %add10 = add nsw i64 %add9, %11, !dbg !199
  %add11 = add nsw i64 %add10, %12, !dbg !200
  %add12 = add nsw i64 %add11, %13, !dbg !201
  %add13 = add nsw i64 %add12, %14, !dbg !202
  ret i64 %add13, !dbg !203
}

define i32 @fsum6_sum(i32 %first, i32 %second, ...) local_unnamed_addr #0 !dbg !204 {
; CHECK-LABEL: fsum6_sum:
; CHECK:       .Lfunc_begin8:
; CHECK-NEXT:    .loc 1 296 0 is_stmt 1 # cfi-csr.c:296:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:first <- $r0
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:second <- $r1
; CHECK-NEXT:    addd $r12 = $r12, -128
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 128
; CHECK-NEXT:    sd 40[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -88
; CHECK-NEXT:    sd 32[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_def_cfa 14, 96
; CHECK-NEXT:    .cfi_offset 14, -96
; CHECK-NEXT:  .Ltmp69:
; CHECK-NEXT:    .loc 1 297 22 prologue_end # cfi-csr.c:297:22
; CHECK-NEXT:    sd 24[$r12] = $r18
; CHECK-NEXT:    addw $r18 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 18, -104
; CHECK-NEXT:  .Ltmp70:
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:result <- $r18
; CHECK-NEXT:    .loc 1 0 22 is_stmt 0 # cfi-csr.c:0:22
; CHECK-NEXT:    sd 88[$r14] = $r11
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sd 80[$r14] = $r10
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    sd 72[$r14] = $r9
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    sd 64[$r14] = $r8
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    sd 56[$r14] = $r7
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sd 48[$r14] = $r6
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    sd 40[$r14] = $r5
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    sd 32[$r14] = $r4
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    sd 24[$r14] = $r3
; CHECK-NEXT:    addd $r3 = $r14, 16
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:  .Ltmp71:
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args2 <- [DW_OP_constu 120, DW_OP_minus, DW_OP_deref] $r14
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args <- [DW_OP_constu 112, DW_OP_minus, DW_OP_deref] $r14
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:result <- undef
; CHECK-NEXT:    sd 16[$r14] = $r2
; CHECK-NEXT:    ;; # (end cycle 13)
; CHECK-NEXT:    .loc 1 300 3 is_stmt 1 # cfi-csr.c:300:3
; CHECK-NEXT:    sd -24[$r14] = $r3
; CHECK-NEXT:    iord $r3 = $r3, 8
; CHECK-NEXT:    ;; # (end cycle 14)
; CHECK-NEXT:  .Ltmp72:
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args <- $r3
; CHECK-NEXT:    .loc 1 302 15 # cfi-csr.c:302:15
; CHECK-NEXT:    sd -16[$r14] = $r3
; CHECK-NEXT:    cb.wlez $r2 ? .LBB8_2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:  .Ltmp73:
; CHECK-NEXT:  .LBB8_1: # %while.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args2 <- [DW_OP_constu 120, DW_OP_minus, DW_OP_deref] $r14
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:result <- $r18
; CHECK-NEXT:    .loc 1 303 15 # cfi-csr.c:303:15
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    call other
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp74:
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:first <- [DW_OP_LLVM_entry_value 1] $r0
; CHECK-NEXT:    .loc 1 302 15 # cfi-csr.c:302:15
; CHECK-NEXT:    ld $r1 = -16[$r14]
; CHECK-NEXT:    addw $r18 = $r0, $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .Ltmp75:
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:second <- [DW_OP_LLVM_entry_value 1] $r1
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args <- $r1
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:result <- $r18
; CHECK-NEXT:    addd $r2 = $r1, 8
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .Ltmp76:
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args <- $r2
; CHECK-NEXT:    sd -16[$r14] = $r2
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    lwz $r2 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .Ltmp77:
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:v <- $r2
; CHECK-NEXT:    .loc 1 302 3 is_stmt 0 # cfi-csr.c:302:3
; CHECK-NEXT:    cb.wgtz $r2 ? .LBB8_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp78:
; CHECK-NEXT:  .LBB8_2: # %while.end
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args2 <- [DW_OP_constu 120, DW_OP_minus, DW_OP_deref] $r14
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:result <- $r18
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args <- [DW_OP_constu 112, DW_OP_minus, DW_OP_deref] $r14
; CHECK-NEXT:    .loc 1 306 15 is_stmt 1 # cfi-csr.c:306:15
; CHECK-NEXT:    ld $r0 = -24[$r14]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 306 3 is_stmt 0 # cfi-csr.c:306:3
; CHECK-NEXT:    addw $r0 = $r18, -1
; CHECK-NEXT:    addd $r1 = $r0, 8
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .Ltmp79:
; CHECK-NEXT:  .LBB8_3: # %while.cond4
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args <- [DW_OP_constu 112, DW_OP_minus, DW_OP_deref] $r14
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:result <- [DW_OP_LLVM_arg 0, DW_OP_consts 8, DW_OP_LLVM_arg 0, DW_OP_plus, DW_OP_minus, DW_OP_consts 8, DW_OP_div, DW_OP_LLVM_arg 0, DW_OP_plus, DW_OP_stack_value] undef
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args2 <- $r1
; CHECK-NEXT:    .loc 1 306 15 # cfi-csr.c:306:15
; CHECK-NEXT:    sd -24[$r14] = $r1
; CHECK-NEXT:    addw $r0 = $r0, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    addd $r1 = $r1, 8
; CHECK-NEXT:    lwz $r2 = -8[$r1]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .Ltmp80:
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:v <- $r2
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:result <- [DW_OP_LLVM_arg 0, DW_OP_consts 8, DW_OP_LLVM_arg 0, DW_OP_plus, DW_OP_minus, DW_OP_consts 8, DW_OP_div, DW_OP_consts 1, DW_OP_LLVM_arg 0, DW_OP_plus, DW_OP_plus, DW_OP_stack_value] undef
; CHECK-NEXT:    .loc 1 306 3 # cfi-csr.c:306:3
; CHECK-NEXT:    cb.wgtz $r2 ? .LBB8_3
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp81:
; CHECK-NEXT:  # %bb.4: # %while.end11
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:v <- $r2
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args <- [DW_OP_constu 112, DW_OP_minus, DW_OP_deref] $r14
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:result <- undef
; CHECK-NEXT:    #DEBUG_VALUE: fsum6_sum:args2 <- [DW_OP_constu 120, DW_OP_minus, DW_OP_deref] $r14
; CHECK-NEXT:    .loc 1 309 3 epilogue_begin is_stmt 1 # cfi-csr.c:309:3
; CHECK-NEXT:    addd $r12 = $r14, -32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r18 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r14 = 32[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .Ltmp82:
; CHECK-NEXT:    ld $r16 = 40[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 128
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp83:
entry:
  %args = alloca i8*, align 8
  %args2 = alloca i8*, align 8
  call void @llvm.dbg.value(metadata i32 %first, metadata !209, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i32 %second, metadata !210, metadata !DIExpression()), !dbg !218
  %add = add nsw i32 %second, %first, !dbg !219
  call void @llvm.dbg.value(metadata i32 %add, metadata !211, metadata !DIExpression()), !dbg !218
  %0 = bitcast i8** %args to i8*, !dbg !220
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #3, !dbg !220
  %1 = bitcast i8** %args2 to i8*, !dbg !220
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #3, !dbg !220
  call void @llvm.dbg.value(metadata i8** %args, metadata !212, metadata !DIExpression(DW_OP_deref)), !dbg !218
  call void @llvm.va_start(i8* nonnull %0), !dbg !221
  call void @llvm.dbg.value(metadata i8** %args, metadata !212, metadata !DIExpression(DW_OP_deref)), !dbg !218
  call void @llvm.dbg.value(metadata i8** %args2, metadata !216, metadata !DIExpression(DW_OP_deref)), !dbg !218
  call void @llvm.va_copy(i8* nonnull %1, i8* nonnull %0), !dbg !222
  call void @llvm.dbg.value(metadata i32 %add, metadata !211, metadata !DIExpression()), !dbg !218
  %ap.cur17 = load i8*, i8** %args, align 8, !dbg !223
  call void @llvm.dbg.value(metadata i8* %ap.cur17, metadata !212, metadata !DIExpression()), !dbg !218
  %ap.next18 = getelementptr inbounds i8, i8* %ap.cur17, i64 8, !dbg !223
  call void @llvm.dbg.value(metadata i8* %ap.next18, metadata !212, metadata !DIExpression()), !dbg !218
  store i8* %ap.next18, i8** %args, align 8, !dbg !223
  %arg.addr19 = bitcast i8* %ap.cur17 to i32*, !dbg !223
  %2 = load i32, i32* %arg.addr19, align 8, !dbg !223
  call void @llvm.dbg.value(metadata i32 %2, metadata !217, metadata !DIExpression()), !dbg !218
  %cmp20 = icmp sgt i32 %2, 0, !dbg !224
  br i1 %cmp20, label %while.body, label %while.end, !dbg !225

while.body:
  %3 = phi i32 [ %4, %while.body ], [ %2, %entry ]
  %result.021 = phi i32 [ %add2, %while.body ], [ %add, %entry ]
  call void @llvm.dbg.value(metadata i32 %result.021, metadata !211, metadata !DIExpression()), !dbg !218
  %call = call i32 @other(i32 %3) #3, !dbg !226
  %add2 = add nsw i32 %call, %result.021, !dbg !228
  call void @llvm.dbg.value(metadata i32 %add2, metadata !211, metadata !DIExpression()), !dbg !218
  %ap.cur = load i8*, i8** %args, align 8, !dbg !223
  call void @llvm.dbg.value(metadata i8* %ap.cur, metadata !212, metadata !DIExpression()), !dbg !218
  %ap.next = getelementptr inbounds i8, i8* %ap.cur, i64 8, !dbg !223
  call void @llvm.dbg.value(metadata i8* %ap.next, metadata !212, metadata !DIExpression()), !dbg !218
  store i8* %ap.next, i8** %args, align 8, !dbg !223
  %arg.addr = bitcast i8* %ap.cur to i32*, !dbg !223
  %4 = load i32, i32* %arg.addr, align 8, !dbg !223
  call void @llvm.dbg.value(metadata i32 %4, metadata !217, metadata !DIExpression()), !dbg !218
  %cmp = icmp sgt i32 %4, 0, !dbg !224
  br i1 %cmp, label %while.body, label %while.end, !dbg !225, !llvm.loop !229

while.end:
  %result.0.lcssa = phi i32 [ %add, %entry ], [ %add2, %while.body ], !dbg !218
  call void @llvm.dbg.value(metadata i32 %result.0.lcssa, metadata !211, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i8** %args, metadata !212, metadata !DIExpression(DW_OP_deref)), !dbg !218
  call void @llvm.va_end(i8* nonnull %0), !dbg !231
  %ap.cur5.pre = load i8*, i8** %args2, align 8, !dbg !232
  br label %while.cond4, !dbg !233

while.cond4:
  %ap.cur5 = phi i8* [ %ap.cur5.pre, %while.end ], [ %ap.next6, %while.cond4 ], !dbg !232
  %result.1 = phi i32 [ %result.0.lcssa, %while.end ], [ %add10, %while.cond4 ], !dbg !218
  call void @llvm.dbg.value(metadata i32 %result.1, metadata !211, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i8* %ap.cur5, metadata !216, metadata !DIExpression()), !dbg !218
  %ap.next6 = getelementptr inbounds i8, i8* %ap.cur5, i64 8, !dbg !232
  call void @llvm.dbg.value(metadata i8* %ap.next6, metadata !216, metadata !DIExpression()), !dbg !218
  store i8* %ap.next6, i8** %args2, align 8, !dbg !232
  %arg.addr7 = bitcast i8* %ap.cur5 to i32*, !dbg !232
  %5 = load i32, i32* %arg.addr7, align 8, !dbg !232
  call void @llvm.dbg.value(metadata i32 %5, metadata !217, metadata !DIExpression()), !dbg !218
  %cmp8 = icmp sgt i32 %5, 0, !dbg !234
  %add10 = add nsw i32 %result.1, 1, !dbg !235
  call void @llvm.dbg.value(metadata i32 %add10, metadata !211, metadata !DIExpression()), !dbg !218
  br i1 %cmp8, label %while.cond4, label %while.end11, !dbg !233, !llvm.loop !236

while.end11:
  call void @llvm.dbg.value(metadata i32 %result.1, metadata !211, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i32 %result.1, metadata !211, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i32 %result.1, metadata !211, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i32 %result.1, metadata !211, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i32 %result.1, metadata !211, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i32 %result.1, metadata !211, metadata !DIExpression()), !dbg !218
  call void @llvm.dbg.value(metadata i8** %args2, metadata !216, metadata !DIExpression(DW_OP_deref)), !dbg !218
  call void @llvm.va_end(i8* nonnull %1), !dbg !238
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #3, !dbg !239
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #3, !dbg !239
  ret i32 %result.1, !dbg !240
}

declare void @llvm.va_start(i8*) #3

declare void @llvm.va_copy(i8*, i8*) #3

declare i32 @other(i32) local_unnamed_addr #2

declare void @llvm.va_end(i8*) #3

declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!12, !13, !14}
!llvm.ident = !{!15}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "v", scope: !2, file: !6, line: 3, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "Kalray clang version 10.0.1 (git:software/tools/llvm-project 413660a1a7a7a2ef431d0d906778c974f42d70d8)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cfi-csr.c", directory: "d")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "cfi-csr.c", directory: "d")
!7 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 3200, elements: !10)
!8 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !9)
!9 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!10 = !{!11}
!11 = !DISubrange(count: 50)
!12 = !{i32 7, !"Dwarf Version", i32 2}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{!"Kalray clang version 10.0.1 (git:software/tools/llvm-project 413660a1a7a7a2ef431d0d906778c974f42d70d8)"}
!16 = distinct !DISubprogram(name: "f_1_nopack", scope: !6, file: !6, line: 7, type: !17, scopeLine: 7, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !19)
!17 = !DISubroutineType(types: !18)
!18 = !{!9}
!19 = !{!20}
!20 = !DILocalVariable(name: "a", scope: !16, file: !6, line: 8, type: !9)
!21 = !DILocation(line: 8, column: 12, scope: !16)
!22 = !{!23, !23, i64 0}
!23 = !{!"long", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
!26 = !DILocation(line: 0, scope: !16)
!27 = !DILocation(line: 10, column: 3, scope: !16)
!28 = !DILocation(line: 12, column: 3, scope: !16)
!29 = distinct !DISubprogram(name: "f_2_pairpack", scope: !6, file: !6, line: 28, type: !17, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !30)
!30 = !{!31, !32}
!31 = !DILocalVariable(name: "a", scope: !29, file: !6, line: 29, type: !9)
!32 = !DILocalVariable(name: "b", scope: !29, file: !6, line: 30, type: !9)
!33 = !DILocation(line: 29, column: 12, scope: !29)
!34 = !DILocation(line: 0, scope: !29)
!35 = !DILocation(line: 30, column: 12, scope: !29)
!36 = !DILocation(line: 32, column: 3, scope: !29)
!37 = !DILocation(line: 34, column: 12, scope: !29)
!38 = !DILocation(line: 34, column: 3, scope: !29)
!39 = distinct !DISubprogram(name: "f_3_pairpack", scope: !6, file: !6, line: 51, type: !17, scopeLine: 51, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !40)
!40 = !{!41, !42, !43}
!41 = !DILocalVariable(name: "a", scope: !39, file: !6, line: 52, type: !9)
!42 = !DILocalVariable(name: "b", scope: !39, file: !6, line: 53, type: !9)
!43 = !DILocalVariable(name: "c", scope: !39, file: !6, line: 54, type: !9)
!44 = !DILocation(line: 52, column: 12, scope: !39)
!45 = !DILocation(line: 0, scope: !39)
!46 = !DILocation(line: 53, column: 12, scope: !39)
!47 = !DILocation(line: 54, column: 12, scope: !39)
!48 = !DILocation(line: 56, column: 3, scope: !39)
!49 = !DILocation(line: 58, column: 12, scope: !39)
!50 = !DILocation(line: 58, column: 16, scope: !39)
!51 = !DILocation(line: 58, column: 3, scope: !39)
!52 = distinct !DISubprogram(name: "f_4_quadpack", scope: !6, file: !6, line: 79, type: !17, scopeLine: 79, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !53)
!53 = !{!54, !55, !56, !57}
!54 = !DILocalVariable(name: "a", scope: !52, file: !6, line: 80, type: !9)
!55 = !DILocalVariable(name: "b", scope: !52, file: !6, line: 81, type: !9)
!56 = !DILocalVariable(name: "c", scope: !52, file: !6, line: 82, type: !9)
!57 = !DILocalVariable(name: "d", scope: !52, file: !6, line: 83, type: !9)
!58 = !DILocation(line: 80, column: 12, scope: !52)
!59 = !DILocation(line: 0, scope: !52)
!60 = !DILocation(line: 81, column: 12, scope: !52)
!61 = !DILocation(line: 82, column: 12, scope: !52)
!62 = !DILocation(line: 83, column: 12, scope: !52)
!63 = !DILocation(line: 85, column: 3, scope: !52)
!64 = !DILocation(line: 87, column: 12, scope: !52)
!65 = !DILocation(line: 87, column: 16, scope: !52)
!66 = !DILocation(line: 87, column: 20, scope: !52)
!67 = !DILocation(line: 87, column: 3, scope: !52)
!68 = distinct !DISubprogram(name: "f_5_quadpack", scope: !6, file: !6, line: 107, type: !17, scopeLine: 107, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !69)
!69 = !{!70, !71, !72, !73, !74}
!70 = !DILocalVariable(name: "a", scope: !68, file: !6, line: 108, type: !9)
!71 = !DILocalVariable(name: "b", scope: !68, file: !6, line: 109, type: !9)
!72 = !DILocalVariable(name: "c", scope: !68, file: !6, line: 110, type: !9)
!73 = !DILocalVariable(name: "d", scope: !68, file: !6, line: 111, type: !9)
!74 = !DILocalVariable(name: "e", scope: !68, file: !6, line: 112, type: !9)
!75 = !DILocation(line: 108, column: 12, scope: !68)
!76 = !DILocation(line: 0, scope: !68)
!77 = !DILocation(line: 109, column: 12, scope: !68)
!78 = !DILocation(line: 110, column: 12, scope: !68)
!79 = !DILocation(line: 111, column: 12, scope: !68)
!80 = !DILocation(line: 112, column: 12, scope: !68)
!81 = !DILocation(line: 114, column: 3, scope: !68)
!82 = !DILocation(line: 116, column: 12, scope: !68)
!83 = !DILocation(line: 116, column: 16, scope: !68)
!84 = !DILocation(line: 116, column: 20, scope: !68)
!85 = !DILocation(line: 116, column: 24, scope: !68)
!86 = !DILocation(line: 116, column: 3, scope: !68)
!87 = distinct !DISubprogram(name: "f_6_1quad1pairpack", scope: !6, file: !6, line: 140, type: !17, scopeLine: 140, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !88)
!88 = !{!89, !90, !91, !92, !93, !94}
!89 = !DILocalVariable(name: "a", scope: !87, file: !6, line: 141, type: !9)
!90 = !DILocalVariable(name: "b", scope: !87, file: !6, line: 142, type: !9)
!91 = !DILocalVariable(name: "c", scope: !87, file: !6, line: 143, type: !9)
!92 = !DILocalVariable(name: "d", scope: !87, file: !6, line: 144, type: !9)
!93 = !DILocalVariable(name: "e", scope: !87, file: !6, line: 145, type: !9)
!94 = !DILocalVariable(name: "f", scope: !87, file: !6, line: 146, type: !9)
!95 = !DILocation(line: 141, column: 12, scope: !87)
!96 = !DILocation(line: 0, scope: !87)
!97 = !DILocation(line: 142, column: 12, scope: !87)
!98 = !DILocation(line: 143, column: 12, scope: !87)
!99 = !DILocation(line: 144, column: 12, scope: !87)
!100 = !DILocation(line: 145, column: 12, scope: !87)
!101 = !DILocation(line: 146, column: 12, scope: !87)
!102 = !DILocation(line: 148, column: 3, scope: !87)
!103 = !DILocation(line: 150, column: 12, scope: !87)
!104 = !DILocation(line: 150, column: 16, scope: !87)
!105 = !DILocation(line: 150, column: 20, scope: !87)
!106 = !DILocation(line: 150, column: 24, scope: !87)
!107 = !DILocation(line: 150, column: 28, scope: !87)
!108 = !DILocation(line: 150, column: 3, scope: !87)
!109 = distinct !DISubprogram(name: "f_14_3quad1pairpack", scope: !6, file: !6, line: 174, type: !17, scopeLine: 174, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !110)
!110 = !{!111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124}
!111 = !DILocalVariable(name: "a", scope: !109, file: !6, line: 175, type: !9)
!112 = !DILocalVariable(name: "b", scope: !109, file: !6, line: 176, type: !9)
!113 = !DILocalVariable(name: "c", scope: !109, file: !6, line: 177, type: !9)
!114 = !DILocalVariable(name: "d", scope: !109, file: !6, line: 178, type: !9)
!115 = !DILocalVariable(name: "e", scope: !109, file: !6, line: 179, type: !9)
!116 = !DILocalVariable(name: "f", scope: !109, file: !6, line: 180, type: !9)
!117 = !DILocalVariable(name: "g", scope: !109, file: !6, line: 181, type: !9)
!118 = !DILocalVariable(name: "h", scope: !109, file: !6, line: 182, type: !9)
!119 = !DILocalVariable(name: "i", scope: !109, file: !6, line: 183, type: !9)
!120 = !DILocalVariable(name: "j", scope: !109, file: !6, line: 184, type: !9)
!121 = !DILocalVariable(name: "k", scope: !109, file: !6, line: 185, type: !9)
!122 = !DILocalVariable(name: "l", scope: !109, file: !6, line: 186, type: !9)
!123 = !DILocalVariable(name: "m", scope: !109, file: !6, line: 187, type: !9)
!124 = !DILocalVariable(name: "n", scope: !109, file: !6, line: 188, type: !9)
!125 = !DILocation(line: 175, column: 12, scope: !109)
!126 = !DILocation(line: 0, scope: !109)
!127 = !DILocation(line: 176, column: 12, scope: !109)
!128 = !DILocation(line: 177, column: 12, scope: !109)
!129 = !DILocation(line: 178, column: 12, scope: !109)
!130 = !DILocation(line: 179, column: 12, scope: !109)
!131 = !DILocation(line: 180, column: 12, scope: !109)
!132 = !DILocation(line: 181, column: 12, scope: !109)
!133 = !DILocation(line: 182, column: 12, scope: !109)
!134 = !DILocation(line: 183, column: 12, scope: !109)
!135 = !DILocation(line: 184, column: 12, scope: !109)
!136 = !DILocation(line: 185, column: 12, scope: !109)
!137 = !DILocation(line: 186, column: 12, scope: !109)
!138 = !DILocation(line: 187, column: 12, scope: !109)
!139 = !DILocation(line: 188, column: 12, scope: !109)
!140 = !DILocation(line: 190, column: 3, scope: !109)
!141 = !DILocation(line: 192, column: 12, scope: !109)
!142 = !DILocation(line: 192, column: 16, scope: !109)
!143 = !DILocation(line: 192, column: 20, scope: !109)
!144 = !DILocation(line: 192, column: 24, scope: !109)
!145 = !DILocation(line: 192, column: 28, scope: !109)
!146 = !DILocation(line: 192, column: 32, scope: !109)
!147 = !DILocation(line: 192, column: 36, scope: !109)
!148 = !DILocation(line: 192, column: 40, scope: !109)
!149 = !DILocation(line: 192, column: 44, scope: !109)
!150 = !DILocation(line: 192, column: 48, scope: !109)
!151 = !DILocation(line: 192, column: 52, scope: !109)
!152 = !DILocation(line: 192, column: 56, scope: !109)
!153 = !DILocation(line: 192, column: 60, scope: !109)
!154 = !DILocation(line: 192, column: 3, scope: !109)
!155 = distinct !DISubprogram(name: "f_15_3quad1pairpack", scope: !6, file: !6, line: 230, type: !17, scopeLine: 230, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !156)
!156 = !{!157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171}
!157 = !DILocalVariable(name: "a", scope: !155, file: !6, line: 231, type: !9)
!158 = !DILocalVariable(name: "b", scope: !155, file: !6, line: 232, type: !9)
!159 = !DILocalVariable(name: "c", scope: !155, file: !6, line: 233, type: !9)
!160 = !DILocalVariable(name: "d", scope: !155, file: !6, line: 234, type: !9)
!161 = !DILocalVariable(name: "e", scope: !155, file: !6, line: 235, type: !9)
!162 = !DILocalVariable(name: "f", scope: !155, file: !6, line: 236, type: !9)
!163 = !DILocalVariable(name: "g", scope: !155, file: !6, line: 237, type: !9)
!164 = !DILocalVariable(name: "h", scope: !155, file: !6, line: 238, type: !9)
!165 = !DILocalVariable(name: "i", scope: !155, file: !6, line: 239, type: !9)
!166 = !DILocalVariable(name: "j", scope: !155, file: !6, line: 240, type: !9)
!167 = !DILocalVariable(name: "k", scope: !155, file: !6, line: 241, type: !9)
!168 = !DILocalVariable(name: "l", scope: !155, file: !6, line: 242, type: !9)
!169 = !DILocalVariable(name: "m", scope: !155, file: !6, line: 243, type: !9)
!170 = !DILocalVariable(name: "n", scope: !155, file: !6, line: 244, type: !9)
!171 = !DILocalVariable(name: "o", scope: !155, file: !6, line: 245, type: !9)
!172 = !DILocation(line: 231, column: 12, scope: !155)
!173 = !DILocation(line: 0, scope: !155)
!174 = !DILocation(line: 232, column: 12, scope: !155)
!175 = !DILocation(line: 233, column: 12, scope: !155)
!176 = !DILocation(line: 234, column: 12, scope: !155)
!177 = !DILocation(line: 235, column: 12, scope: !155)
!178 = !DILocation(line: 236, column: 12, scope: !155)
!179 = !DILocation(line: 237, column: 12, scope: !155)
!180 = !DILocation(line: 238, column: 12, scope: !155)
!181 = !DILocation(line: 239, column: 12, scope: !155)
!182 = !DILocation(line: 240, column: 12, scope: !155)
!183 = !DILocation(line: 241, column: 12, scope: !155)
!184 = !DILocation(line: 242, column: 12, scope: !155)
!185 = !DILocation(line: 243, column: 12, scope: !155)
!186 = !DILocation(line: 244, column: 12, scope: !155)
!187 = !DILocation(line: 245, column: 12, scope: !155)
!188 = !DILocation(line: 247, column: 3, scope: !155)
!189 = !DILocation(line: 249, column: 12, scope: !155)
!190 = !DILocation(line: 249, column: 16, scope: !155)
!191 = !DILocation(line: 249, column: 20, scope: !155)
!192 = !DILocation(line: 249, column: 24, scope: !155)
!193 = !DILocation(line: 249, column: 28, scope: !155)
!194 = !DILocation(line: 249, column: 32, scope: !155)
!195 = !DILocation(line: 249, column: 36, scope: !155)
!196 = !DILocation(line: 249, column: 40, scope: !155)
!197 = !DILocation(line: 249, column: 44, scope: !155)
!198 = !DILocation(line: 249, column: 48, scope: !155)
!199 = !DILocation(line: 249, column: 52, scope: !155)
!200 = !DILocation(line: 249, column: 56, scope: !155)
!201 = !DILocation(line: 249, column: 60, scope: !155)
!202 = !DILocation(line: 249, column: 64, scope: !155)
!203 = !DILocation(line: 249, column: 3, scope: !155)
!204 = distinct !DISubprogram(name: "fsum6_sum", scope: !6, file: !6, line: 296, type: !205, scopeLine: 296, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !208)
!205 = !DISubroutineType(types: !206)
!206 = !{!207, !207, !207, null}
!207 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!208 = !{!209, !210, !211, !212, !216, !217}
!209 = !DILocalVariable(name: "first", arg: 1, scope: !204, file: !6, line: 296, type: !207)
!210 = !DILocalVariable(name: "second", arg: 2, scope: !204, file: !6, line: 296, type: !207)
!211 = !DILocalVariable(name: "result", scope: !204, file: !6, line: 297, type: !207)
!212 = !DILocalVariable(name: "args", scope: !204, file: !6, line: 298, type: !213)
!213 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !6, line: 288, baseType: !214)
!214 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 298, baseType: !215)
!215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!216 = !DILocalVariable(name: "args2", scope: !204, file: !6, line: 298, type: !213)
!217 = !DILocalVariable(name: "v", scope: !204, file: !6, line: 301, type: !207)
!218 = !DILocation(line: 0, scope: !204)
!219 = !DILocation(line: 297, column: 22, scope: !204)
!220 = !DILocation(line: 298, column: 3, scope: !204)
!221 = !DILocation(line: 299, column: 3, scope: !204)
!222 = !DILocation(line: 300, column: 3, scope: !204)
!223 = !DILocation(line: 302, column: 15, scope: !204)
!224 = !DILocation(line: 302, column: 34, scope: !204)
!225 = !DILocation(line: 302, column: 3, scope: !204)
!226 = !DILocation(line: 303, column: 15, scope: !227)
!227 = distinct !DILexicalBlock(scope: !204, file: !6, line: 302, column: 39)
!228 = !DILocation(line: 303, column: 12, scope: !227)
!229 = distinct !{!229, !225, !230}
!230 = !DILocation(line: 304, column: 3, scope: !204)
!231 = !DILocation(line: 305, column: 3, scope: !204)
!232 = !DILocation(line: 306, column: 15, scope: !204)
!233 = !DILocation(line: 306, column: 3, scope: !204)
!234 = !DILocation(line: 306, column: 35, scope: !204)
!235 = !DILocation(line: 307, column: 12, scope: !204)
!236 = distinct !{!236, !233, !237}
!237 = !DILocation(line: 307, column: 15, scope: !204)
!238 = !DILocation(line: 308, column: 3, scope: !204)
!239 = !DILocation(line: 321, column: 1, scope: !204)
!240 = !DILocation(line: 309, column: 3, scope: !204)
