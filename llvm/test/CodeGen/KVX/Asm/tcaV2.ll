; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -mcpu=kv3-2 -o - %s | FileCheck %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @use_2k_buff(<2048 x i1>* nocapture readonly %0, i32 %1) {
; CHECK-LABEL: use_2k_buff:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xlo $a0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    xlo $a7 = 224[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    xlo $a6 = 192[$r0]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    xlo $a5 = 160[$r0]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    xlo $a4 = 128[$r0]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    xlo $a3 = 96[$r0]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    xlo $a2 = 64[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    xlo $a1 = 32[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:     # (here cycle 8)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    xaligno $a0 = $a0..a7, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = load <2048 x i1>, <2048 x i1>* %0
  %4 = tail call <256 x i1> asm sideeffect "xaligno $0 = $1, $2", "=x,x,r,0"(<2048 x i1> %3, i32 %1, <256 x i1> undef)
  ret void
}

define void @use_4k_buff(<4096 x i1>* nocapture readonly %0, i32 %1) {
; CHECK-LABEL: use_4k_buff:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xlo $a0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    xlo $a15 = 480[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    xlo $a14 = 448[$r0]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    xlo $a13 = 416[$r0]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    xlo $a12 = 384[$r0]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    xlo $a11 = 352[$r0]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    xlo $a10 = 320[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    xlo $a9 = 288[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    xlo $a8 = 256[$r0]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    xlo $a7 = 224[$r0]
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    xlo $a6 = 192[$r0]
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    xlo $a5 = 160[$r0]
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    xlo $a4 = 128[$r0]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    xlo $a3 = 96[$r0]
; CHECK-NEXT:    ;; # (end cycle 13)
; CHECK-NEXT:    xlo $a2 = 64[$r0]
; CHECK-NEXT:    ;; # (end cycle 14)
; CHECK-NEXT:    xlo $a1 = 32[$r0]
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:     # (here cycle 16)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    xaligno $a0 = $a0..a15, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = load <4096 x i1>, <4096 x i1>* %0
  %4 = tail call <256 x i1> asm sideeffect "xaligno $0 = $1, $2", "=x,x,r,0"(<4096 x i1> %3, i32 %1, <256 x i1> undef)
  ret void
}

define void @use_2k_buff_clobber(<4096 x i1>* nocapture readonly %0, i32 %1) {
; CHECK-LABEL: use_2k_buff_clobber:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xlo $a31 = 480[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    xlo $a30 = 448[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    xlo $a29 = 416[$r0]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    xlo $a28 = 384[$r0]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    xlo $a27 = 352[$r0]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    xlo $a26 = 320[$r0]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    xlo $a25 = 288[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    xlo $a24 = 256[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    xlo $a23 = 224[$r0]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    xlo $a22 = 192[$r0]
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    xlo $a21 = 160[$r0]
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    xlo $a20 = 128[$r0]
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    xlo $a19 = 96[$r0]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    xlo $a18 = 64[$r0]
; CHECK-NEXT:    ;; # (end cycle 13)
; CHECK-NEXT:    xlo $a17 = 32[$r0]
; CHECK-NEXT:    ;; # (end cycle 14)
; CHECK-NEXT:    xlo $a16 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:     # (here cycle 16)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    xaligno $a8 = $a16..a31, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = load <4096 x i1>, <4096 x i1>* %0
  %4 = tail call <256 x i1> asm sideeffect "xaligno $0 = $1, $2", "=x,x,r,0,~{$a0..a7}"(<4096 x i1> %3, i32 %1, <256 x i1> undef)
  ret void
}

define void @use_4k_buff_clobber(<4096 x i1>* nocapture readonly %0, i32 %1) {
; CHECK-LABEL: use_4k_buff_clobber:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xlo $a16 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    xlo $a31 = 480[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    xlo $a30 = 448[$r0]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    xlo $a29 = 416[$r0]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    xlo $a28 = 384[$r0]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    xlo $a27 = 352[$r0]
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    xlo $a26 = 320[$r0]
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    xlo $a25 = 288[$r0]
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    xlo $a24 = 256[$r0]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    xlo $a23 = 224[$r0]
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    xlo $a22 = 192[$r0]
; CHECK-NEXT:    ;; # (end cycle 10)
; CHECK-NEXT:    xlo $a21 = 160[$r0]
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    xlo $a20 = 128[$r0]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    xlo $a19 = 96[$r0]
; CHECK-NEXT:    ;; # (end cycle 13)
; CHECK-NEXT:    xlo $a18 = 64[$r0]
; CHECK-NEXT:    ;; # (end cycle 14)
; CHECK-NEXT:    xlo $a17 = 32[$r0]
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:     # (here cycle 16)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    xaligno $a16 = $a16..a31, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = load <4096 x i1>, <4096 x i1>* %0
  %4 = tail call <256 x i1> asm sideeffect "xaligno $0 = $1, $2", "=x,x,r,0,~{$a0..a15}"(<4096 x i1> %3, i32 %1, <256 x i1> undef)
  ret void
}

