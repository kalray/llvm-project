; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: llc -O2 -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <8 x i16> @asm_v8i16(i8* %0, <8 x i16> %1) {
; CHECK-LABEL: asm_v8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    copyd $r3 = $r2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    sq 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r0r1 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <8 x i16> asm sideeffect "sq 0[$1] = $2\0A\09;;\0A\09lq $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, <8 x i16> %1) #3
  ret <8 x i16> %3
}

define <16 x i8> @asm_v16i8(i8* %0, <16 x i8> %1) {
; CHECK-LABEL: asm_v16i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    copyd $r3 = $r2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    sq 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r0r1 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <16 x i8> asm sideeffect "sq 0[$1] = $2\0A\09;;\0A\09lq $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, <16 x i8> %1) #3
  ret <16 x i8> %3
}

define <8 x half> @asm_v8f16(i8* %0, <8 x half> %1) {
; CHECK-LABEL: asm_v8f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    copyd $r3 = $r2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    sq 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r0r1 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <8 x half> asm sideeffect "sq 0[$1] = $2\0A\09;;\0A\09lq $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, <8 x half> %1) #3
  ret <8 x half> %3
}

define <8 x float> @asm_v8f32(i8* %0, <8 x float> %1) {
; CHECK-LABEL: asm_v8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r2
; CHECK-NEXT:    copyd $r6 = $r3
; CHECK-NEXT:    copyd $r7 = $r4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    so 0[$r0] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r0r1r2r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <8 x float> asm sideeffect "so 0[$1] = $2\0A\09;;\0A\09lo $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, <8 x float> %1) #3
  ret <8 x float> %3
}

define <8 x i32> @asm_v8i32(i8* %0, <8 x i32> %1) {
; CHECK-LABEL: asm_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r2
; CHECK-NEXT:    copyd $r6 = $r3
; CHECK-NEXT:    copyd $r7 = $r4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    so 0[$r0] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r0r1r2r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <8 x i32> asm sideeffect "so 0[$1] = $2\0A\09;;\0A\09lo $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, <8 x i32> %1) #3
  ret <8 x i32> %3
}

define <16 x i16> @asm_v16i16(i8* %0, <16 x i16> %1) {
; CHECK-LABEL: asm_v16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r2
; CHECK-NEXT:    copyd $r6 = $r3
; CHECK-NEXT:    copyd $r7 = $r4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    so 0[$r0] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r0r1r2r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <16 x i16> asm sideeffect "so 0[$1] = $2\0A\09;;\0A\09lo $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, <16 x i16> %1) #3
  ret <16 x i16> %3
}

define <16 x half> @asm_v16f16(i8* %0, <16 x half> %1) {
; CHECK-LABEL: asm_v16f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r2
; CHECK-NEXT:    copyd $r6 = $r3
; CHECK-NEXT:    copyd $r7 = $r4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    so 0[$r0] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r0r1r2r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <16 x half> asm sideeffect "so 0[$1] = $2\0A\09;;\0A\09lo $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, <16 x half> %1) #3
  ret <16 x half> %3
}

define <32 x i8> @asm_v32i8(i8* %0, <32 x i8> %1) {
; CHECK-LABEL: asm_v32i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r2
; CHECK-NEXT:    copyd $r6 = $r3
; CHECK-NEXT:    copyd $r7 = $r4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    so 0[$r0] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r0r1r2r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <32 x i8> asm sideeffect "so 0[$1] = $2\0A\09;;\0A\09lo $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, <32 x i8> %1) #3
  ret <32 x i8> %3
}

define i128 @asm_int128(i8* %0, i128 %1) {
; CHECK-LABEL: asm_int128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    copyd $r3 = $r2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:     # (here cycle 1)
; CHECK-NEXT:    #APP
; CHECK-NEXT:    sq 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r0r1 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-EMPTY:
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call i128 asm sideeffect "sq 0[$1] = $2\0A\09;;\0A\09lq $0 = 0[$1]\0A\09;;\0A", "=r,r,r"(i8* %0, i128 %1) #3
  ret i128 %3
}

attributes #3 = { nounwind }

