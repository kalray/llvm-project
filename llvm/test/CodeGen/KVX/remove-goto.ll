; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -o - %s -O2 | FileCheck %s
; RUN: clang -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

%struct.list_head_s = type { %struct.list_head_s*, %struct.list_data_s* }
%struct.list_data_s = type { i16, i16 }

define %struct.list_head_s* @core_list_reverse(%struct.list_head_s* %list){
; CHECK-LABEL: core_list_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cb.deqz $r0 ? .LBB0_4
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %while.body.preheader
; CHECK-NEXT:    make $r2 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_2: # %while.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r0 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 0[$r1] = $r2
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    cb.dnez $r0 ? .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.3: # %while.end
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_4:
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %tobool9 = icmp eq %struct.list_head_s* %list, null
  br i1 %tobool9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %list.addr.011 = phi %struct.list_head_s* [ %0, %while.body ], [ %list, %entry ]
  %next.010 = phi %struct.list_head_s* [ %list.addr.011, %while.body ], [ null, %entry ]
  %next1 = getelementptr inbounds %struct.list_head_s, %struct.list_head_s* %list.addr.011, i64 0, i32 0
  %0 = load %struct.list_head_s*, %struct.list_head_s** %next1, align 8
  store %struct.list_head_s* %next.010, %struct.list_head_s** %next1, align 8
  %tobool = icmp eq %struct.list_head_s* %0, null
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %entry
  %next.0.lcssa = phi %struct.list_head_s* [ null, %entry ], [ %list.addr.011, %while.body ]
  ret %struct.list_head_s* %next.0.lcssa
}

