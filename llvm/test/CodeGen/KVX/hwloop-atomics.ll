; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -disable-kvx-hwloops=false -O2 -o - %s | FileCheck %s --check-prefixes=CV1
; RUN: llc -mcpu=kv3-2 -disable-kvx-hwloops=false -O2 -o - %s | FileCheck %s --check-prefixes=CV2
; RUN: clang -mllvm -disable-kvx-hwloops=false -O2 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -mllvm -disable-kvx-hwloops=false -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @set(i32* nocapture %x, i32 %num){
; CV1-LABEL: set:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    cb.weqz $r1 ? .LBB0_2
; CV1-NEXT:    addd $r12 = $r12, -32
; CV1-NEXT:    ;;
; CV1-NEXT:  # %bb.1: # %for.body.lr.ph
; CV1-NEXT:    make $r1 = 0
; CV1-NEXT:    make $r2 = 4
; CV1-NEXT:    make $r3 = 16
; CV1-NEXT:    zxwd $r4 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    loopdo $r4, .__LOOPDO_0_END_
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB0_3: # %for.body
; CV1-NEXT:    # =>This Loop Header: Depth=1
; CV1-NEXT:    # Child Loop BB0_4 Depth 2
; CV1-NEXT:    sw 28[$r12] = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB0_4: # %for.body
; CV1-NEXT:    # Parent Loop BB0_3 Depth=1
; CV1-NEXT:    # => This Inner Loop Header: Depth=2
; CV1-NEXT:    lwz.u $r7 = 28[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfw $r6 = $r2, $r7
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapw 28[$r12] = $r6r7
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r6 ? .LBB0_4
; CV1-NEXT:    ;;
; CV1-NEXT:  # %bb.5: # %for.body
; CV1-NEXT:    # in Loop: Header=BB0_3 Depth=1
; CV1-NEXT:    sw.xs $r1[$r0] = $r3
; CV1-NEXT:    addd $r1 = $r1, 1
; CV1-NEXT:    copyw $r4 = $r7
; CV1-NEXT:    ;;
; CV1-NEXT:  .__LOOPDO_0_END_:
; CV1-NEXT:  .LBB0_2: # %for.cond.cleanup
; CV1-NEXT:    addd $r12 = $r12, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: set:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    cb.weqz $r1 ? .LBB0_2
; CV2-NEXT:    addd $r12 = $r12, -32
; CV2-NEXT:    ;;
; CV2-NEXT:  # %bb.1: # %for.body.lr.ph
; CV2-NEXT:    make $r1 = 0
; CV2-NEXT:    make $r2 = 4
; CV2-NEXT:    make $r3 = 16
; CV2-NEXT:    zxwd $r4 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    loopdo $r4, .__LOOPDO_0_END_
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB0_3: # %for.body
; CV2-NEXT:    # =>This Loop Header: Depth=1
; CV2-NEXT:    # Child Loop BB0_4 Depth 2
; CV2-NEXT:    sw 28[$r12] = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB0_4: # %for.body
; CV2-NEXT:    # Parent Loop BB0_3 Depth=1
; CV2-NEXT:    # => This Inner Loop Header: Depth=2
; CV2-NEXT:    lwz.u $r7 = 28[$r12]
; CV2-NEXT:    ;;
; CV2-NEXT:    sbfw $r6 = $r2, $r7
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapw.v $r6, 28[$r12] = $r6r7
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r6 ? .LBB0_4
; CV2-NEXT:    ;;
; CV2-NEXT:  # %bb.5: # %for.body
; CV2-NEXT:    # in Loop: Header=BB0_3 Depth=1
; CV2-NEXT:    sw.xs $r1[$r0] = $r3
; CV2-NEXT:    addd $r1 = $r1, 1
; CV2-NEXT:    copyw $r4 = $r7
; CV2-NEXT:    ;;
; CV2-NEXT:  .__LOOPDO_0_END_:
; CV2-NEXT:  .LBB0_2: # %for.cond.cleanup
; CV2-NEXT:    addd $r12 = $r12, 32
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %a = alloca i32, align 4
  %cmp8 = icmp eq i32 %num, 0
  br i1 %cmp8, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %0 = bitcast i32* %a to i8*
  %1 = zext i32 %num to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = trunc i64 %indvars.iv to i32
  store i32 %2, i32* %a, align 4
  %3 = atomicrmw sub i32* %a, i32 4 monotonic
  %arrayidx = getelementptr inbounds i32, i32* %x, i64 %indvars.iv
  store i32 16, i32* %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp eq i64 %indvars.iv.next, %1
  br i1 %cmp, label %for.cond.cleanup, label %for.body
}

