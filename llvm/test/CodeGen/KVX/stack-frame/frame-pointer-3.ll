; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --frame-pointer=all < %s | FileCheck -check-prefix=FP-ALL %s

target triple = "kvx-kalray-cos"

; int g1(int, int*);
;
; int test(int sz, int x){
;   int *toto = __builtin_alloca(sz);
;   g1(x, toto);
;
;   int *tata = __builtin_alloca(sz+x);
;   g1(x, tata);
;
;   return toto[0] + tata[0];
; }

define dso_local i32 @test(i32 %sz, i32 %x) {
; FP-ALL-LABEL: test:
; FP-ALL:       # %bb.0: # %entry
; FP-ALL-NEXT:    addd $r12 = $r12, -64
; FP-ALL-NEXT:    get $r16 = $ra
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_def_cfa_offset 64
; FP-ALL-NEXT:    sd 32[$r12] = $r16
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_offset 67, -32
; FP-ALL-NEXT:    sd 24[$r12] = $r14
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_offset 14, -40
; FP-ALL-NEXT:    sd 16[$r12] = $r20
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_offset 20, -48
; FP-ALL-NEXT:    sq 0[$r12] = $r18r19
; FP-ALL-NEXT:    copyd $r14 = $r12
; FP-ALL-NEXT:    copyd $r18 = $r1
; FP-ALL-NEXT:    copyd $r19 = $r0
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_offset 19, -56
; FP-ALL-NEXT:    .cfi_offset 18, -64
; FP-ALL-NEXT:    .cfi_def_cfa_register 14
; FP-ALL-NEXT:    sxwd $r0 = $r19
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    addd $r0 = $r0, 31
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    andd $r0 = $r0, -32
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    sbfd $r20 = $r0, $r12
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    copyd $r12 = $r20
; FP-ALL-NEXT:    copyd $r0 = $r18
; FP-ALL-NEXT:    copyd $r1 = $r20
; FP-ALL-NEXT:    call g1
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    addw $r0 = $r18, $r19
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    sxwd $r0 = $r0
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    addd $r0 = $r0, 31
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    andd $r0 = $r0, -32
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    sbfd $r19 = $r0, $r12
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    copyd $r12 = $r19
; FP-ALL-NEXT:    copyd $r0 = $r18
; FP-ALL-NEXT:    copyd $r1 = $r19
; FP-ALL-NEXT:    call g1
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    lwz $r0 = 0[$r20]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    lwz $r1 = 0[$r19]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    addw $r0 = $r1, $r0
; FP-ALL-NEXT:    copyd $r12 = $r14
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_def_cfa_register 12
; FP-ALL-NEXT:    lq $r18r19 = 0[$r12]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    ld $r20 = 16[$r12]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    ld $r16 = 32[$r12]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    set $ra = $r16
; FP-ALL-NEXT:    ld $r14 = 24[$r12]
; FP-ALL-NEXT:    addd $r12 = $r12, 64
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_def_cfa_offset 0
; FP-ALL-NEXT:    ret
; FP-ALL-NEXT:    ;;
entry:
  %conv = sext i32 %sz to i64
  %0 = alloca i8, i64 %conv, align 8
  %1 = bitcast i8* %0 to i32*
  %call = call i32 @g1(i32 %x, i32* nonnull %1)
  %add = add nsw i32 %x, %sz
  %conv1 = sext i32 %add to i64
  %2 = alloca i8, i64 %conv1, align 8
  %3 = bitcast i8* %2 to i32*
  %call2 = call i32 @g1(i32 %x, i32* nonnull %3)
  %4 = load i32, i32* %1, align 8
  %5 = load i32, i32* %3, align 8
  %add4 = add nsw i32 %5, %4
  ret i32 %add4
}

declare dso_local i32 @g1(i32, i32*)
