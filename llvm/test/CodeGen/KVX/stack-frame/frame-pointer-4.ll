; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --frame-pointer=all < %s | FileCheck -check-prefix=FP-ALL %s

target triple = "kvx-kalray-cos"

; int g(int*, int*, int*);
;
; int f(int sz) {
;   int *a = __builtin_alloca_with_align(sz, 1024);
;   int *b = __builtin_alloca_with_align(8, 256);
;   int *c = __builtin_alloca_with_align(sz, 256);
;   g(a, b, c);
;   return *a + *b + *c;
; }

define dso_local i32 @f(i32 %sz) {
; FP-ALL-LABEL: f:
; FP-ALL:       # %bb.0: # %entry
; FP-ALL-NEXT:    addd $r12 = $r12, -256
; FP-ALL-NEXT:    get $r16 = $ra
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    sd 248[$r12] = $r16
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    sd 240[$r12] = $r14
; FP-ALL-NEXT:    addd $r14 = $r12, 240
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    sq 224[$r12] = $r18r19
; FP-ALL-NEXT:    sxwd $r0 = $r0
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    addd $r0 = $r0, 31
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    andd $r0 = $r0, -32
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    sbfd $r1 = $r0, $r12
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    andd $r18 = $r1, -128
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    copyd $r12 = $r18
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    sbfd $r19 = $r0, $r12
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    copyd $r12 = $r19
; FP-ALL-NEXT:    copyd $r0 = $r18
; FP-ALL-NEXT:    addd $r1 = $r14, -144
; FP-ALL-NEXT:    copyd $r2 = $r19
; FP-ALL-NEXT:    call g
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    lwz $r0 = 0[$r18]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    lwz $r1 = -144[$r14]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    lwz $r2 = 0[$r19]
; FP-ALL-NEXT:    addw $r0 = $r1, $r0
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    addw $r0 = $r0, $r2
; FP-ALL-NEXT:    addd $r12 = $r14, -240
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    lq $r18r19 = 224[$r12]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    ld $r14 = 240[$r12]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    ld $r16 = 248[$r12]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    set $ra = $r16
; FP-ALL-NEXT:    addd $r12 = $r12, 256
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    ret
; FP-ALL-NEXT:    ;;
entry:
  %conv = sext i32 %sz to i64
  %0 = alloca i8, i64 %conv, align 128
  %1 = bitcast i8* %0 to i32*
  %2 = alloca [2 x i32], align 32
  %3 = alloca i8, i64 %conv, align 32
  %.sub = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0
  %4 = bitcast i8* %3 to i32*
  %call = call i32 @g(i32* nonnull %1, i32* nonnull %.sub, i32* nonnull %4)
  %5 = load i32, i32* %1, align 128
  %6 = load i32, i32* %.sub, align 32
  %add = add nsw i32 %6, %5
  %7 = load i32, i32* %4, align 32
  %add2 = add nsw i32 %add, %7
  ret i32 %add2
}

declare dso_local i32 @g(i32*, i32*, i32*)
