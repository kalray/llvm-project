; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --frame-pointer=none < %s | FileCheck -check-prefix=FP-NONE %s
; RUN: llc --frame-pointer=all < %s | FileCheck -check-prefix=FP-ALL %s

target triple = "kvx-kalray-cos"

; typedef long t __attribute__ ((__vector_size__ (64)));
; int i(t);
;
; int h() {
;   t a = {9};
;   return i(a);
; }

define i32 @h() {
; FP-NONE-LABEL: h:
; FP-NONE:       # %bb.0: # %entry
; FP-NONE-NEXT:    addd $r12 = $r12, -96
; FP-NONE-NEXT:    get $r16 = $ra
; FP-NONE-NEXT:    ;;
; FP-NONE-NEXT:    .cfi_def_cfa_offset 96
; FP-NONE-NEXT:    .cfi_register 67, 16
; FP-NONE-NEXT:    sd 88[$r12] = $r16
; FP-NONE-NEXT:    make $r0 = 0
; FP-NONE-NEXT:    make $r4 = 9
; FP-NONE-NEXT:    ;;
; FP-NONE-NEXT:    .cfi_offset 67, -8
; FP-NONE-NEXT:    copyd $r1 = $r0
; FP-NONE-NEXT:    copyd $r2 = $r0
; FP-NONE-NEXT:    copyd $r3 = $r0
; FP-NONE-NEXT:    copyd $r5 = $r0
; FP-NONE-NEXT:    ;;
; FP-NONE-NEXT:    copyd $r6 = $r0
; FP-NONE-NEXT:    so 32[$r12] = $r0r1r2r3
; FP-NONE-NEXT:    copyd $r7 = $r0
; FP-NONE-NEXT:    addd $r0 = $r12, 0
; FP-NONE-NEXT:    ;;
; FP-NONE-NEXT:    so 0[$r12] = $r4r5r6r7
; FP-NONE-NEXT:    call i
; FP-NONE-NEXT:    ;;
; FP-NONE-NEXT:    ld $r16 = 88[$r12]
; FP-NONE-NEXT:    ;;
; FP-NONE-NEXT:    set $ra = $r16
; FP-NONE-NEXT:    addd $r12 = $r12, 96
; FP-NONE-NEXT:    ;;
; FP-NONE-NEXT:    ret
; FP-NONE-NEXT:    ;;
;
; FP-ALL-LABEL: h:
; FP-ALL:       # %bb.0: # %entry
; FP-ALL-NEXT:    addd $r12 = $r12, -96
; FP-ALL-NEXT:    get $r16 = $ra
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_def_cfa_offset 96
; FP-ALL-NEXT:    .cfi_register 67, 16
; FP-ALL-NEXT:    sd 88[$r12] = $r16
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_offset 67, -8
; FP-ALL-NEXT:    sd 80[$r12] = $r14
; FP-ALL-NEXT:    addd $r14 = $r12, 80
; FP-ALL-NEXT:    make $r0 = 0
; FP-ALL-NEXT:    make $r4 = 9
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    .cfi_offset 14, -16
; FP-ALL-NEXT:    .cfi_def_cfa 14, 16
; FP-ALL-NEXT:    copyd $r1 = $r0
; FP-ALL-NEXT:    copyd $r2 = $r0
; FP-ALL-NEXT:    copyd $r3 = $r0
; FP-ALL-NEXT:    copyd $r5 = $r0
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    copyd $r6 = $r0
; FP-ALL-NEXT:    so -48[$r14] = $r0r1r2r3
; FP-ALL-NEXT:    copyd $r7 = $r0
; FP-ALL-NEXT:    addd $r0 = $r14, -80
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    so -80[$r14] = $r4r5r6r7
; FP-ALL-NEXT:    call i
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    addd $r12 = $r14, -80
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    ld $r14 = 80[$r12]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    ld $r16 = 88[$r12]
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    set $ra = $r16
; FP-ALL-NEXT:    addd $r12 = $r12, 96
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    ret
; FP-ALL-NEXT:    ;;
entry:
  %indirect-arg-temp = alloca <8 x i64>, align 32
  store <8 x i64> <i64 9, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0>, <8 x i64>* %indirect-arg-temp, align 32
  %call = call i32 @i(<8 x i64>* nonnull %indirect-arg-temp)
  ret i32 %call
}

declare dso_local i32 @i(<8 x i64>*)
