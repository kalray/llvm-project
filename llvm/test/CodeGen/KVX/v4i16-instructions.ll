; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define <4 x i16> @test_ret_const() {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x2000100020001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  ret <4 x i16> <i16 1, i16 2, i16 1, i16 2>
}

define i16 @test_extract_0(<4 x i16> %a) {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i16> %a, i16 0
  ret i16 %e
}

define i16 @test_extract_1(<4 x i16> %a) {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r0 = $r0, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i16> %a, i16 1
  ret i16 %e
}

define i16 @test_extract_2(<4 x i16> %a) {
; CHECK-LABEL: test_extract_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r0 = $r0, 47, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i16> %a, i16 2
  ret i16 %e
}

define i16 @test_extract_3(<4 x i16> %a) {
; CHECK-LABEL: test_extract_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r0 = $r0, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i16> %a, i16 3
  ret i16 %e
}

define <4 x i16> @test_fma(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c) {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddhq $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <4 x i16> %b, %c
  %ad = add <4 x i16> %a, %m
  ret <4 x i16> %ad
}

define <4 x i16> @test_fma_imm(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_fma_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddhq $r0 = $r1, 0x3000100020007
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <4 x i16> <i16 7, i16 2, i16 1, i16 3>, %b
  %ad = add <4 x i16> %a, %m
  ret <4 x i16> %ad
}


; TODO: Prevent using sllhqs for fma
define <4 x i16> @test_fma_imm_2(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_fma_imm_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllhqs $r2 = $r1, 1
; CHECK-NEXT:    sllhqs $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r3 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r1, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r3, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 47, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addhq $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %b
  %ad = add <4 x i16> %a, %m
  ret <4 x i16> %ad
}

; Can improve this by using srld (lshl %i, 4)
define i16 @test_extract_i(<4 x i16> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andd $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r2 = $r12, 24
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.xs $r0 = $r1[$r2]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i16> %a, i64 %idx
  ret i16 %e
}

define <4 x i16> @test_add(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_add:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i16> %a, %b
  ret <4 x i16> %r
}

define <4 x i16> @test_add_imm_0(<4 x i16> %a) {
; CHECK-LABEL: test_add_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addhq.@ $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %a
  ret <4 x i16> %r
}

define <4 x i16> @test_add_imm_1(<4 x i16> %a) {
; CHECK-LABEL: test_add_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addhq.@ $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i16> %a, <i16 1, i16 2, i16 1, i16 2>
  ret <4 x i16> %r
}

define <4 x i16> @test_sub(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_sub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i16> %a, %b
  ret <4 x i16> %r
}

define <4 x i16> @test_sub_imm(<4 x i16> %a) {
; CHECK-LABEL: test_sub_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addhq.@ $r0 = $r0, 0xfffeffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i16> %a, <i16 1, i16 2, i16 1, i16 2>
  ret <4 x i16> %r
}

define <4 x i16> @test_sub_fromimm(<4 x i16> %a) {
; CHECK-LABEL: test_sub_fromimm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbfhq.@ $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %a
  ret <4 x i16> %r
}

define <4 x i16> @test_neg(<4 x i16> %a) {
; CHECK-LABEL: test_neg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    neghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i16> <i16 0, i16 0, i16 0, i16 0>, %a
  ret <4 x i16> %r
}

; FIXME: The calling convention passes 2 <2 x i16> and
; dag combine decides to not use <4 x i16> for a single
; instruction.
define <4 x i16> @test_mul(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_mul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <4 x i16> %a, %b
  ret <4 x i16> %r
}

define <4 x i16> @test_mul_2(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c) {
; CHECK-LABEL: test_mul_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulhq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulhq $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <4 x i16> %a, %b
  %r1 = mul <4 x i16> %r, %c
  ret <4 x i16> %r1
}

define <4 x i16> @test_div(<4 x i16> %a, <4 x i16> %b) #0 {
; CHECK-LABEL: test_div:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r0 = $r19, 48
; CHECK-NEXT:    srad $r1 = $r18, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r1 = $r18, 47, 32
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    extfs $r0 = $r19, 47, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    extfs $r0 = $r19, 31, 16
; CHECK-NEXT:    extfs $r1 = $r18, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r21 = $r20, 31, 16
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxhd $r1 = $r18
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    sxhd $r0 = $r19
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r21, 63, 32
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sdiv <4 x i16> %a, %b
  ret <4 x i16> %r
}

define <4 x i16> @test_rem(<4 x i16> %a, <4 x i16> %b) #0 {
; CHECK-LABEL: test_rem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r0 = $r19, 48
; CHECK-NEXT:    srad $r1 = $r18, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r1 = $r18, 47, 32
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    extfs $r0 = $r19, 47, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    extfs $r0 = $r19, 31, 16
; CHECK-NEXT:    extfs $r1 = $r18, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r21 = $r20, 31, 16
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxhd $r1 = $r18
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    sxhd $r0 = $r19
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r21, 63, 32
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = srem <4 x i16> %a, %b
  ret <4 x i16> %r
}

define void @test_ldst_v4i16(<4 x i16>* %a, <4 x i16>* %b) {
; CHECK-LABEL: test_ldst_v4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %t1 = load <4 x i16>, <4 x i16>* %a
  store <4 x i16> %t1, <4 x i16>* %b, align 16
  ret void
}

declare <4 x i16> @test_callee(<4 x i16> %a, <4 x i16> %b)

define <4 x i16> @test_call(<4 x i16> %a, <4 x i16> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i16> @test_callee(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %r
}

define <4 x i16> @test_call_flipped(<4 x i16> %a, <4 x i16> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i16> @test_callee(<4 x i16> %b, <4 x i16> %a)
  ret <4 x i16> %r
}

; Can perform swap in a single bundle
define <4 x i16> @test_tailcall_flipped(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
  %r = tail call <4 x i16> @test_callee(<4 x i16> %b, <4 x i16> %a)
  ret <4 x i16> %r
}

; This could be selected to (cmovehq(negate(is_odd %c), %a, %b)
define <4 x i16> @test_select(<4 x i16> %a, <4 x i16> %b, i1 zeroext %c) {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyw $r3 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r3 ? $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andnd $r1 = $r2, $r1
; CHECK-NEXT:    andd $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = select i1 %c, <4 x i16> %a, <4 x i16> %b
  ret <4 x i16> %r
}

define <4 x i16> @test_select_cc(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c, <4 x i16> %d) {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnhq.lt $r2 = $r2, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp slt <4 x i16> %c, %d
  %r = select <4 x i1> %cc, <4 x i16> %a, <4 x i16> %b
  ret <4 x i16> %r
}

define <4 x i64> @test_select_cc_f32_f32(<4 x i64> %a, <4 x i64> %b, <4 x i16> %c, <4 x i16> %d) {
; CHECK-LABEL: test_select_cc_f32_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnhq.ltu $r8 = $r8, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r9 = $r8, 48
; CHECK-NEXT:    extfz $r10 = $r8, 47, 32
; CHECK-NEXT:    zxhd $r11 = $r8
; CHECK-NEXT:    srlw $r8 = $r8, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxhd $r9 = $r9
; CHECK-NEXT:    sxhd $r10 = $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxhd $r11 = $r11
; CHECK-NEXT:    sxhd $r8 = $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r11 ? $r4 = $r0
; CHECK-NEXT:    cmoved.dnez $r8 ? $r5 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r10 ? $r6 = $r2
; CHECK-NEXT:    cmoved.dnez $r9 ? $r7 = $r3
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp ult <4 x i16> %c, %d
  %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i1> @test_icmp_ule(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_icmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ule <4 x i16> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_slt(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_icmp_slt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp slt <4 x i16> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ugt(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_icmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ugt <4 x i16> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_uge(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_icmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp uge <4 x i16> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ult(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_icmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ult <4 x i16> %a, %b
  ret <4 x i1> %r
}

define <4 x i8> @trunc_to_v4i8(<4 x i16> %a) {
; CHECK-LABEL: trunc_to_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = trunc <4 x i16> %a to <4 x i8>
  ret <4 x i8> %r
}

define <4 x i8> @trunc_to_v4i8_buildvector(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) {
; CHECK-LABEL: trunc_to_v4i8_buildvector:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %arg1b = trunc i32 %arg1 to i16
  %arg2b = trunc i32 %arg2 to i16
  %arg3b = trunc i32 %arg3 to i16
  %arg4b = trunc i32 %arg4 to i16
  %v0 = insertelement <4 x i16> undef, i16 %arg1b, i32 0
  %v1 = insertelement <4 x i16> %v0, i16 %arg2b, i32 1
  %v2 = insertelement <4 x i16> %v1, i16 %arg3b, i32 2
  %v3 = insertelement <4 x i16> %v2, i16 %arg4b, i32 3
  %conv = trunc <4 x i16> %v3 to <4 x i8>
  ret <4 x i8> %conv
}

define <4 x i16> @concat(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: concat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v = shufflevector <2 x i16> %a, <2 x i16> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i16> %v
}

define <4 x i64> @test_sext_2xi64(<4 x i16> %a) {
; CHECK-LABEL: test_sext_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r1 = $r0
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxhd $r4 = $r1
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    srld $r0 = $r0, 48
; CHECK-NEXT:    sxhd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxhd $r3 = $r0
; CHECK-NEXT:    sxhd $r1 = $r1
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sext <4 x i16> %a to <4 x i64>
  ret <4 x i64> %r
}

declare <4 x i16> @llvm.abs.v4i16(<4 x i16>, i1) #0

define <4 x i16> @test_abs(<4 x i16> %a) {
; CHECK-LABEL: test_abs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    abshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i16> @llvm.abs.v4i16(<4 x i16> %a, i1 false)
  ret <4 x i16> %r
}

define <4 x i16> @test_insertelement0(<4 x i16> %a, i16 %x) {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i16> %a, i16 %x, i64 0
  ret <4 x i16> %i
}

define <4 x i16> @test_insertelement1(<4 x i16> %a, i16 %x) {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i16> %a, i16 %x, i64 1
  ret <4 x i16> %i
}

define <4 x i16> @test_insertelement2(<4 x i16> %a, i16 %x) {
; CHECK-LABEL: test_insertelement2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 47, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i16> %a, i16 %x, i64 2
  ret <4 x i16> %i
}

define <4 x i16> @test_insertelement3(<4 x i16> %a, i16 %x) {
; CHECK-LABEL: test_insertelement3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i16> %a, i16 %x, i64 3
  ret <4 x i16> %i
}

define <4 x i16> @test_insertelement(<4 x i16> %a, i16 %x, i64 %p) {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r2 = $r2, 31, 16
; CHECK-NEXT:    insf $r1 = $r1, 31, 16
; CHECK-NEXT:    make $r3 = 0x3000200010000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 63, 32
; CHECK-NEXT:    insf $r1 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.eq $r2 = $r3, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.nez $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i16> %a, i16 %x, i64 %p
  ret <4 x i16> %i
}

define <4 x i16> @mulsub(<4 x i16> %a, <4 x i16> %b, <4 x i16> %c) {
; CHECK-LABEL: mulsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfhq $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %mul = mul <4 x i16> %b, %c
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @vnot(<4 x i16> %a) {
; CHECK-LABEL: vnot:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %vnot = xor <4 x i16> %a, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %vnot
}

define <4 x i16> @lnand(<4 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: lnand:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lnandhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = icmp eq <4 x i16> %0, zeroinitializer
  %4 = icmp eq <4 x i16> %1, zeroinitializer
  %5 = or <4 x i1> %4, %3
  %6 = zext <4 x i1> %5 to <4 x i16>
  ret <4 x i16> %6
}

define <4 x i16> @lnandn(<4 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: lnandn:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lnandhq $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    neghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = icmp eq <4 x i16> %0, zeroinitializer
  %4 = icmp eq <4 x i16> %1, zeroinitializer
  %5 = or <4 x i1> %4, %3
  %6 = sext <4 x i1> %5 to <4 x i16>
  ret <4 x i16> %6
}

define <4 x i16> @lor(<4 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: lor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lorhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = or <4 x i16> %1, %0
  %4 = icmp ne <4 x i16> %3, zeroinitializer
  %5 = zext <4 x i1> %4 to <4 x i16>
  ret <4 x i16> %5
}

; Not sure this is better than a (compnhq.ne (ord), (make 0))
define <4 x i16> @lorneg(<4 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: lorneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lorhq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    neghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = or <4 x i16> %1, %0
  %4 = icmp ne <4 x i16> %3, zeroinitializer
  %5 = sext <4 x i1> %4 to <4 x i16>
  ret <4 x i16> %5
}

define <4 x i16> @lnor(<4 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: lnor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lnorhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = or <4 x i16> %1, %0
  %4 = icmp eq <4 x i16> %3, zeroinitializer
  %5 = zext <4 x i1> %4 to <4 x i16>
  ret <4 x i16> %5
}

; Not sure this is better than a (compnhq.eq (ord), (make 0))
define <4 x i16> @lnorneg(<4 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: lnorneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lnorhq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    neghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = or <4 x i16> %1, %0
  %4 = icmp eq <4 x i16> %3, zeroinitializer
  %5 = sext <4 x i1> %4 to <4 x i16>
  ret <4 x i16> %5
}


define <4 x i16> @abdhq_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: abdhq_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sub = sub nsw <4 x i16> %a, %b
  %0 = tail call <4 x i16> @llvm.abs.v4i16(<4 x i16> %sub, i1 true)
  ret <4 x i16> %0
}

define <4 x i16> @abdhq_not_ri(<4 x i16> %0) {
; CHECK-LABEL: abdhq_not_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x10000f00100012
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = sub nsw <4 x i16> <i16 18, i16 16, i16 15, i16 16>, %0
  %3 = tail call <4 x i16> @llvm.abs.v4i16(<4 x i16> %2, i1 true)
  ret <4 x i16> %3
}

define <4 x i16> @abdhq_ri_(<4 x i16> %0) {
; CHECK-LABEL: abdhq_ri_:
; CHECK:       # %bb.0:
; CHECK-NEXT:    abdhq $r0 = $r0, 0x10000f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = sub nsw <4 x i16> <i16 15, i16 16, i16 0, i16 0>, %0
  %3 = tail call <4 x i16> @llvm.abs.v4i16(<4 x i16> %2, i1 true)
  ret <4 x i16> %3
}

define <4 x i16> @abdhq_ri_at(<4 x i16> %0) {
; CHECK-LABEL: abdhq_ri_at:
; CHECK:       # %bb.0:
; CHECK-NEXT:    abdhq.@ $r0 = $r0, 0x10000f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = sub nsw <4 x i16> <i16 15, i16 16, i16 15, i16 16>, %0
  %3 = tail call <4 x i16> @llvm.abs.v4i16(<4 x i16> %2, i1 true)
  ret <4 x i16> %3
}

define <4 x i16> @nandd_v4i16_rr(<4 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: nandd_v4i16_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and <4 x i16> %1, %0
  %4 = xor <4 x i16> %3, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %4
}

define <4 x i16> @nandd_v4i16_ri10(<4 x i16> %0) {
; CHECK-LABEL: nandd_v4i16_ri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i16> %0, <i16 1023, i16 0, i16 0, i16 0>
  %3 = xor <4 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %3
}

define <4 x i16> @nandd_v4i16_ri37_0(<4 x i16> %0) {
; CHECK-LABEL: nandd_v4i16_ri37_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0xfffd0400
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i16> %0, <i16 1024, i16 -3, i16 0, i16 0>
  %3 = xor <4 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %3
}

define <4 x i16> @nandd_v4i16_ri37_1(<4 x i16> %0) {
; CHECK-LABEL: nandd_v4i16_ri37_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0xfffd0400
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i16> %0, <i16 1024, i16 -3, i16 0, i16 0>
  %3 = xor <4 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %3
}

define <4 x i16> @nandd_v4i16_ri37_2(<4 x i16> %0) {
; CHECK-LABEL: nandd_v4i16_ri37_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0x1ffffd0400
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i16> %0, <i16 1024, i16 -3, i16 31, i16 0>
  %3 = xor <4 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %3
}

define <4 x i16> @nandd_v4i16_ri64_0(<4 x i16> %0) {
; CHECK-LABEL: nandd_v4i16_ri64_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0x20fffd0400
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i16> %0, <i16 1024, i16 -3, i16 32, i16 0>
  %3 = xor <4 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %3
}

define <4 x i16> @nandd_v4i16_ri64_1(<4 x i16> %0) {
; CHECK-LABEL: nandd_v4i16_ri64_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0xfffffffd0400
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i16> %0, <i16 1024, i16 -3, i16 -1, i16 0>
  %3 = xor <4 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %3
}

define <4 x i16> @nandd_v4i16_ri64_2(<4 x i16> %0) {
; CHECK-LABEL: nandd_v4i16_ri64_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0x1001ffffd0400
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i16> %0, <i16 1024, i16 -3, i16 31, i16 1>
  %3 = xor <4 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %3
}

define <4 x i16> @splat(i32 %0) {
; CHECK-LABEL: splat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x201020102010201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = trunc i32 %0 to i16
  %3 = insertelement <4 x i16> undef, i16 %2, i32 0
  %4 = shufflevector <4 x i16> %3, <4 x i16> undef, <4 x i32> zeroinitializer
  ret <4 x i16> %4
}

define <4 x i16> @splat_0(<4 x i16> %0) {
; CHECK-LABEL: splat_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x201020102010201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <4 x i32> zeroinitializer
  ret <4 x i16> %2
}

define <4 x i16> @splat_1(<4 x i16> %0) {
; CHECK-LABEL: splat_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804080408040804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  ret <4 x i16> %2
}

define <4 x i16> @splat_1_32(i32 %0) {
; CHECK-LABEL: splat_1_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804080408040804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = lshr i32 %0, 16
  %3 = trunc i32 %2 to i16
  %4 = insertelement <4 x i16> undef, i16 %3, i32 0
  %5 = shufflevector <4 x i16> %4, <4 x i16> undef, <4 x i32> zeroinitializer
  ret <4 x i16> %5
}

define <4 x i16> @splat_1_64(i64 %0) {
; CHECK-LABEL: splat_1_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804080408040804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = lshr i64 %0, 16
  %3 = trunc i64 %2 to i16
  %4 = insertelement <4 x i16> undef, i16 %3, i32 0
  %5 = shufflevector <4 x i16> %4, <4 x i16> undef, <4 x i32> zeroinitializer
  ret <4 x i16> %5
}

define <4 x i16> @splat_2(<4 x i16> %0) {
; CHECK-LABEL: splat_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x2010201020102010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  ret <4 x i16> %2
}

define <4 x i16> @splat_2_64(i64 %0) {
; CHECK-LABEL: splat_2_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x2010201020102010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = lshr i64 %0, 32
  %3 = trunc i64 %2 to i16
  %4 = insertelement <4 x i16> undef, i16 %3, i32 0
  %5 = shufflevector <4 x i16> %4, <4 x i16> undef, <4 x i32> zeroinitializer
  ret <4 x i16> %5
}

define <4 x i16> @splat_3(<4 x i16> %0) {
; CHECK-LABEL: splat_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8040804080408040
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  ret <4 x i16> %2
}

define <4 x i16> @splat_3_64(i64 %0) {
; CHECK-LABEL: splat_3_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8040804080408040
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = lshr i64 %0, 48
  %3 = trunc i64 %2 to i16
  %4 = insertelement <4 x i16> undef, i16 %3, i32 0
  %5 = shufflevector <4 x i16> %4, <4 x i16> undef, <4 x i32> zeroinitializer
  ret <4 x i16> %5
}

attributes #0 = { nounwind }
