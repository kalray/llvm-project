; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s | FileCheck %s
target triple = "kvx-kalray-cos"

define float @DOT2W_rr_1(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: DOT2W_rr_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fdot2w $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = fmul <2 x float> %0, %1
  %4 = extractelement <2 x float> %3, i32 0
  %5 = extractelement <2 x float> %3, i32 1
  %6 = fadd float %4, %5
  ret float %6
}

define float @DOT2W_rr_2(i64 %0, i64 %1) {
; CHECK-LABEL: DOT2W_rr_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fdot2w $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fmul float %4, %9
  %14 = fmul float %7, %12
  %15 = fadd float %13, %14
  ret float %15
}

define float @DOT2W_rr_3(<2 x float> %0, i64 %1) {
; CHECK-LABEL: DOT2W_rr_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fdot2w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i64 %1, 32
  %4 = insertelement <2 x i64> poison, i64 %1, i32 0
  %5 = insertelement <2 x i64> %4, i64 %3, i32 1
  %6 = trunc <2 x i64> %5 to <2 x i32>
  %7 = bitcast <2 x i32> %6 to <2 x float>
  %8 = fmul <2 x float> %7, %0
  %9 = extractelement <2 x float> %8, i32 0
  %10 = extractelement <2 x float> %8, i32 1
  %11 = fadd float %9, %10
  ret float %11
}

define float @DOT2W_rr_4(i64 %0, <2 x float> %1) {
; CHECK-LABEL: DOT2W_rr_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fdot2w $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i64 %0, 32
  %4 = insertelement <2 x i64> poison, i64 %0, i32 0
  %5 = insertelement <2 x i64> %4, i64 %3, i32 1
  %6 = trunc <2 x i64> %5 to <2 x i32>
  %7 = bitcast <2 x i32> %6 to <2 x float>
  %8 = fmul <2 x float> %7, %1
  %9 = extractelement <2 x float> %8, i32 0
  %10 = extractelement <2 x float> %8, i32 1
  %11 = fadd float %9, %10
  ret float %11
}

define float @DOT2W_ri_1(<2 x float> %0) {
; CHECK-LABEL: DOT2W_ri_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fdot2w $r0 = $r0, 0x3f333333c47fc000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = fmul <2 x float> %0, <float 1.023000e+03, float 0x3FE6666660000000>
  %3 = extractelement <2 x float> %2, i32 0
  %4 = extractelement <2 x float> %2, i32 1
  %5 = fsub float %4, %3
  ret float %5
}

define float @DOT2W_ri_2(<2 x float> %0) {
; CHECK-LABEL: DOT2W_ri_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fdot2w $r0 = $r0, 0xbf333333447fc000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = fmul <2 x float> %0, <float 1.023000e+03, float 0x3FE6666660000000>
  %3 = extractelement <2 x float> %2, i32 0
  %4 = extractelement <2 x float> %2, i32 1
  %5 = fsub float %3, %4
  ret float %5
}

define float @DOT2W_ri_3(i64 %0) {
; CHECK-LABEL: DOT2W_ri_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r1 = $r1, 0x447fc000
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r0 = $r0, 0x3f333333
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = trunc i64 %0 to i32
  %3 = bitcast i32 %2 to float
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = bitcast i32 %5 to float
  %7 = fmul float %3, 1.023000e+03
  %8 = fmul float %6, 0x3FE6666660000000
  %9 = fadd float %7, %8
  ret float %9
}

define float @DOT2W_ri_4(i64 %0) {
; CHECK-LABEL: DOT2W_ri_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r1 = $r1, 0xc47fc000
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulw $r0 = $r0, 0x3f333333
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = trunc i64 %0 to i32
  %3 = bitcast i32 %2 to float
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = bitcast i32 %5 to float
  %7 = fmul float %3, 1.023000e+03
  %8 = fmul float %6, 0x3FE6666660000000
  %9 = fsub float %8, %7
  ret float %9
}

define float @DOT2W_ri_10_5(<2 x float> %0) {
; CHECK-LABEL: DOT2W_ri_10_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fdot2w $r0 = $r0, 0x3f333333447fc000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = fmul <2 x float> %0, <float 1.023000e+03, float 0x3FE6666660000000>
  %3 = extractelement <2 x float> %2, i32 0
  %4 = extractelement <2 x float> %2, i32 1
  %5 = fadd float %3, %4
  ret float %5
}
