; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define float @fwidenhw(half %0) {
; CHECK-LABEL: fwidenhw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw.s $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = insertelement <4 x half> undef, half %0, i64 0
  %3 = tail call float @llvm.kvx.fwidenlhw(<4 x half> %2, i32 1)
  ret float %3
}

declare float @llvm.kvx.fwidenlhw(<4 x half>, i32) #1

define <4 x float> @fwidenhwq(<4 x half> %0) {
; CHECK-LABEL: fwidenhwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenmhwp.s $r1 = $r0
; CHECK-NEXT:    fwidenlhwp.s $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x float> @llvm.kvx.fwidenlhwp(<4 x half> %0, i32 1)
  %3 = tail call <2 x float> @llvm.kvx.fwidenmhwp(<4 x half> %0, i32 1)
  %4 = shufflevector <2 x float> %2, <2 x float> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %4
}

declare <2 x float> @llvm.kvx.fwidenlhwp(<4 x half>, i32) #1

declare <2 x float> @llvm.kvx.fwidenmhwp(<4 x half>, i32) #1

define <8 x float> @fwidenhwo(<8 x half> %0) {
; CHECK-LABEL: fwidenhwo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp.s $r4 = $r0
; CHECK-NEXT:    fwidenmhwp.s $r5 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    fwidenlhwp.s $r2 = $r1
; CHECK-NEXT:    fwidenmhwp.s $r3 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <2 x float> @llvm.kvx.fwidenlhwp(<4 x half> %2, i32 1)
  %4 = tail call <2 x float> @llvm.kvx.fwidenmhwp(<4 x half> %2, i32 1)
  %5 = shufflevector <2 x float> %3, <2 x float> %4, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = tail call <2 x float> @llvm.kvx.fwidenlhwp(<4 x half> %6, i32 1)
  %8 = shufflevector <2 x float> %7, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = tail call <2 x float> @llvm.kvx.fwidenmhwp(<4 x half> %6, i32 1)
  %10 = shufflevector <2 x float> %9, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x float> %5, <8 x float> %8, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x float> %11, <8 x float> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x float> %12
}

define double @fwidenwd(float %0) {
; CHECK-LABEL: fwidenwd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlwd.s $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = insertelement <2 x float> undef, float %0, i64 0
  %3 = tail call double @llvm.kvx.fwidenlwd(<2 x float> %2, i32 1)
  ret double %3
}

declare double @llvm.kvx.fwidenlwd(<2 x float>, i32) #1

define <2 x double> @fwidenwdp(<2 x float> %0) {
; CHECK-LABEL: fwidenwdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenmwd.s $r1 = $r0
; CHECK-NEXT:    fwidenlwd.s $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call double @llvm.kvx.fwidenlwd(<2 x float> %0, i32 1)
  %3 = tail call double @llvm.kvx.fwidenmwd(<2 x float> %0, i32 1)
  %4 = insertelement <2 x double> undef, double %2, i64 0
  %5 = insertelement <2 x double> %4, double %3, i64 1
  ret <2 x double> %5
}

declare double @llvm.kvx.fwidenmwd(<2 x float>, i32) #1

define <4 x double> @fwidenwdq(<4 x float> %0) {
; CHECK-LABEL: fwidenwdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlwd.s $r4 = $r0
; CHECK-NEXT:    fwidenmwd.s $r5 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    fwidenlwd.s $r2 = $r1
; CHECK-NEXT:    fwidenmwd.s $r3 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call double @llvm.kvx.fwidenlwd(<2 x float> %2, i32 1)
  %4 = tail call double @llvm.kvx.fwidenmwd(<2 x float> %2, i32 1)
  %5 = insertelement <4 x double> undef, double %3, i64 0
  %6 = insertelement <4 x double> %5, double %4, i64 1
  %7 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call double @llvm.kvx.fwidenlwd(<2 x float> %7, i32 1)
  %9 = tail call double @llvm.kvx.fwidenmwd(<2 x float> %7, i32 1)
  %10 = insertelement <4 x double> %6, double %8, i64 2
  %11 = insertelement <4 x double> %10, double %9, i64 3
  ret <4 x double> %11
}
