; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=kvx-kalray-cos | FileCheck %s
; ModuleID = 'builtin-vectors.c'
source_filename = "builtin-vectors.c"
target datalayout = "e-S256-p:64:64-i1:8-i8:8-i16:16-i32:32-i64:64-v64:64-v128:128-v256:256-v512:512-v1024:1024-f16:16-f32:32-f64:64-a:0:64-m:e-n32:64"
target triple = "kvx-kalray-cos"

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @abdhq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: abdhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.abdhq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @abdho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: abdho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdhq $r0 = $r0, $r2
; CHECK-NEXT:    abdhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @abdhx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: abdhx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdhq $r0 = $r0, $r4
; CHECK-NEXT:    abdhq $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdhq $r2 = $r2, $r6
; CHECK-NEXT:    abdhq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @abdwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: abdwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.abdwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @abdwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: abdwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdwp $r0 = $r0, $r2
; CHECK-NEXT:    abdwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @abdwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: abdwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdwp $r0 = $r0, $r4
; CHECK-NEXT:    abdwp $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdwp $r2 = $r2, $r6
; CHECK-NEXT:    abdwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @abddp(<2 x i64> %a, <2 x i64> %b) local_unnamed_addr #2 {
; CHECK-LABEL: abddp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdd $r0 = $r0, $r2
; CHECK-NEXT:    abdd $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.abdd(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.abdd(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.abdd(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @abddq(<4 x i64> %a, <4 x i64> %b) local_unnamed_addr #3 {
; CHECK-LABEL: abddq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdd $r0 = $r0, $r4
; CHECK-NEXT:    abdd $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdd $r2 = $r2, $r6
; CHECK-NEXT:    abdd $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.abdd(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.abdd(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.abdd(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.abdd(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @abdhqs(<4 x i16> %a, i16 %b) local_unnamed_addr #0 {
; CHECK-LABEL: abdhqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.sbmm8(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @abdhos(<8 x i16> %a, i16 %b) local_unnamed_addr #2 {
; CHECK-LABEL: abdhos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdhq $r0 = $r0, $r2
; CHECK-NEXT:    abdhq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @abdhxs(<16 x i16> %a, i16 %b) local_unnamed_addr #3 {
; CHECK-LABEL: abdhxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdhq $r0 = $r0, $r4
; CHECK-NEXT:    abdhq $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdhq $r2 = $r2, $r4
; CHECK-NEXT:    abdhq $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.abdhq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @abdwps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: abdwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @abdwqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: abdwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdwp $r0 = $r0, $r2
; CHECK-NEXT:    abdwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @abdwos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: abdwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdwp $r0 = $r0, $r4
; CHECK-NEXT:    abdwp $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdwp $r2 = $r2, $r4
; CHECK-NEXT:    abdwp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.abdwp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @abddps(<2 x i64> %a, i64 %b) local_unnamed_addr #2 {
; CHECK-LABEL: abddps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdd $r0 = $r0, $r2
; CHECK-NEXT:    abdd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.abdd(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.abdd(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @abddqs(<4 x i64> %a, i64 %b) local_unnamed_addr #3 {
; CHECK-LABEL: abddqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdd $r0 = $r0, $r4
; CHECK-NEXT:    abdd $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdd $r2 = $r2, $r4
; CHECK-NEXT:    abdd $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.abdd(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.abdd(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.abdd(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.abdd(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @avghq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: avghq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avghq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.avghq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @avgho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: avgho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avghq $r0 = $r0, $r2
; CHECK-NEXT:    avghq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @avghx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: avghx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avghq $r0 = $r0, $r4
; CHECK-NEXT:    avghq $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    avghq $r2 = $r2, $r6
; CHECK-NEXT:    avghq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @avgwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: avgwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.avgwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @avgwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: avgwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgwp $r0 = $r0, $r2
; CHECK-NEXT:    avgwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @avgwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: avgwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgwp $r0 = $r0, $r4
; CHECK-NEXT:    avgwp $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    avgwp $r2 = $r2, $r6
; CHECK-NEXT:    avgwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @avguhq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: avguhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.avguhq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @avguho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: avguho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguhq $r0 = $r0, $r2
; CHECK-NEXT:    avguhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @avguhx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: avguhx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguhq $r0 = $r0, $r4
; CHECK-NEXT:    avguhq $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    avguhq $r2 = $r2, $r6
; CHECK-NEXT:    avguhq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @avguwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: avguwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.avguwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @avguwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: avguwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguwp $r0 = $r0, $r2
; CHECK-NEXT:    avguwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @avguwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: avguwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguwp $r0 = $r0, $r4
; CHECK-NEXT:    avguwp $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    avguwp $r2 = $r2, $r6
; CHECK-NEXT:    avguwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @avgrhq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: avgrhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.avgrhq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @avgrho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: avgrho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrhq $r0 = $r0, $r2
; CHECK-NEXT:    avgrhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @avgrhx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: avgrhx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrhq $r0 = $r0, $r4
; CHECK-NEXT:    avgrhq $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    avgrhq $r2 = $r2, $r6
; CHECK-NEXT:    avgrhq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @avgrwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: avgrwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.avgrwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @avgrwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: avgrwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrwp $r0 = $r0, $r2
; CHECK-NEXT:    avgrwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @avgrwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: avgrwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrwp $r0 = $r0, $r4
; CHECK-NEXT:    avgrwp $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    avgrwp $r2 = $r2, $r6
; CHECK-NEXT:    avgrwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @avgruhq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: avgruhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.avgruhq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @avgruho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: avgruho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruhq $r0 = $r0, $r2
; CHECK-NEXT:    avgruhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @avgruhx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: avgruhx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruhq $r0 = $r0, $r4
; CHECK-NEXT:    avgruhq $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    avgruhq $r2 = $r2, $r6
; CHECK-NEXT:    avgruhq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @avgruwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: avgruwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.avgruwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @avgruwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: avgruwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruwp $r0 = $r0, $r2
; CHECK-NEXT:    avgruwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @avgruwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: avgruwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruwp $r0 = $r0, $r4
; CHECK-NEXT:    avgruwp $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    avgruwp $r2 = $r2, $r6
; CHECK-NEXT:    avgruwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @addshq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: addshq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addshq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.addshq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @addsho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: addsho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addshq $r0 = $r0, $r2
; CHECK-NEXT:    addshq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @addshx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: addshx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addshq $r0 = $r0, $r4
; CHECK-NEXT:    addshq $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addshq $r2 = $r2, $r6
; CHECK-NEXT:    addshq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @addswp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: addswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addswp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.addswp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @addswq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: addswq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addswp $r0 = $r0, $r2
; CHECK-NEXT:    addswp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @addswo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: addswo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addswp $r0 = $r0, $r4
; CHECK-NEXT:    addswp $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addswp $r2 = $r2, $r6
; CHECK-NEXT:    addswp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @addsdp(<2 x i64> %a, <2 x i64> %b) local_unnamed_addr #2 {
; CHECK-LABEL: addsdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addsd $r0 = $r0, $r2
; CHECK-NEXT:    addsd $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.addsd(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.addsd(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.addsd(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @addsdq(<4 x i64> %a, <4 x i64> %b) local_unnamed_addr #3 {
; CHECK-LABEL: addsdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addsd $r0 = $r0, $r4
; CHECK-NEXT:    addsd $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addsd $r2 = $r2, $r6
; CHECK-NEXT:    addsd $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.addsd(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.addsd(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.addsd(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.addsd(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @addshqs(<4 x i16> %a, i16 %b) local_unnamed_addr #0 {
; CHECK-LABEL: addshqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addshq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @addshos(<8 x i16> %a, i16 %b) local_unnamed_addr #2 {
; CHECK-LABEL: addshos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addshq $r0 = $r0, $r2
; CHECK-NEXT:    addshq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @addshxs(<16 x i16> %a, i16 %b) local_unnamed_addr #3 {
; CHECK-LABEL: addshxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addshq $r0 = $r0, $r4
; CHECK-NEXT:    addshq $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addshq $r2 = $r2, $r4
; CHECK-NEXT:    addshq $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @addswps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: addswps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addswp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @addswqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: addswqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addswp $r0 = $r0, $r2
; CHECK-NEXT:    addswp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @addswos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: addswos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addswp $r0 = $r0, $r4
; CHECK-NEXT:    addswp $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addswp $r2 = $r2, $r4
; CHECK-NEXT:    addswp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @addsdps(<2 x i64> %a, i64 %b) local_unnamed_addr #2 {
; CHECK-LABEL: addsdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addsd $r0 = $r0, $r2
; CHECK-NEXT:    addsd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.addsd(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.addsd(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @addsdqs(<4 x i64> %a, i64 %b) local_unnamed_addr #3 {
; CHECK-LABEL: addsdqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addsd $r0 = $r0, $r4
; CHECK-NEXT:    addsd $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addsd $r2 = $r2, $r4
; CHECK-NEXT:    addsd $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.addsd(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.addsd(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.addsd(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.addsd(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @sbfshq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: sbfshq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfshq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.sbfshq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @sbfsho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: sbfsho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfshq $r0 = $r0, $r2
; CHECK-NEXT:    sbfshq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @sbfshx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: sbfshx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfshq $r0 = $r0, $r4
; CHECK-NEXT:    sbfshq $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfshq $r2 = $r2, $r6
; CHECK-NEXT:    sbfshq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @sbfswp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: sbfswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfswp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.sbfswp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @sbfswq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: sbfswq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfswp $r0 = $r0, $r2
; CHECK-NEXT:    sbfswp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @sbfswo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: sbfswo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfswp $r0 = $r0, $r4
; CHECK-NEXT:    sbfswp $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfswp $r2 = $r2, $r6
; CHECK-NEXT:    sbfswp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @sbfsdp(<2 x i64> %a, <2 x i64> %b) local_unnamed_addr #2 {
; CHECK-LABEL: sbfsdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfsd $r0 = $r0, $r2
; CHECK-NEXT:    sbfsd $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.sbfsd(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.sbfsd(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.sbfsd(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @sbfsdq(<4 x i64> %a, <4 x i64> %b) local_unnamed_addr #3 {
; CHECK-LABEL: sbfsdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfsd $r0 = $r0, $r4
; CHECK-NEXT:    sbfsd $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfsd $r2 = $r2, $r6
; CHECK-NEXT:    sbfsd $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.sbfsd(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.sbfsd(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.sbfsd(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.sbfsd(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @sbfshqs(<4 x i16> %a, i16 %b) local_unnamed_addr #0 {
; CHECK-LABEL: sbfshqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfshq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @sbfshos(<8 x i16> %a, i16 %b) local_unnamed_addr #2 {
; CHECK-LABEL: sbfshos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfshq $r0 = $r0, $r2
; CHECK-NEXT:    sbfshq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @sbfshxs(<16 x i16> %a, i16 %b) local_unnamed_addr #3 {
; CHECK-LABEL: sbfshxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfshq $r0 = $r0, $r4
; CHECK-NEXT:    sbfshq $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfshq $r2 = $r2, $r4
; CHECK-NEXT:    sbfshq $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @sbfswps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: sbfswps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfswp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @sbfswqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: sbfswqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfswp $r0 = $r0, $r2
; CHECK-NEXT:    sbfswp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @sbfswos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: sbfswos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfswp $r0 = $r0, $r4
; CHECK-NEXT:    sbfswp $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfswp $r2 = $r2, $r4
; CHECK-NEXT:    sbfswp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @sbfsdps(<2 x i64> %a, i64 %b) local_unnamed_addr #2 {
; CHECK-LABEL: sbfsdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfsd $r0 = $r0, $r2
; CHECK-NEXT:    sbfsd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.sbfsd(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.sbfsd(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @sbfsdqs(<4 x i64> %a, i64 %b) local_unnamed_addr #3 {
; CHECK-LABEL: sbfsdqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfsd $r0 = $r0, $r4
; CHECK-NEXT:    sbfsd $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfsd $r2 = $r2, $r4
; CHECK-NEXT:    sbfsd $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.sbfsd(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.sbfsd(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.sbfsd(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.sbfsd(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local i32 @minw(i32 %a, i32 %b) local_unnamed_addr #4 {
; CHECK-LABEL: minw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.minw(i32 %a, i32 %b)
  ret i32 %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.kvx.minw(i32, i32) #1

; Function Attrs: nounwind readnone
define dso_local i64 @mind(i64 %a, i64 %b) local_unnamed_addr #4 {
; CHECK-LABEL: mind:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mind $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.mind(i64 %a, i64 %b)
  ret i64 %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.mind(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @minhq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: minhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.minhq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @minho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: minho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minhq $r0 = $r0, $r2
; CHECK-NEXT:    minhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @minhx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: minhx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minhq $r0 = $r0, $r4
; CHECK-NEXT:    minhq $r1 = $r1, $r5
; CHECK-NEXT:    minhq $r2 = $r2, $r6
; CHECK-NEXT:    minhq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @minwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: minwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.minwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @minwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: minwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minwp $r0 = $r0, $r2
; CHECK-NEXT:    minwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @minwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: minwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minwp $r0 = $r0, $r4
; CHECK-NEXT:    minwp $r1 = $r1, $r5
; CHECK-NEXT:    minwp $r2 = $r2, $r6
; CHECK-NEXT:    minwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @mindp(<2 x i64> %a, <2 x i64> %b) local_unnamed_addr #2 {
; CHECK-LABEL: mindp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mind $r0 = $r0, $r2
; CHECK-NEXT:    mind $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.mind(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.mind(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @mindq(<4 x i64> %a, <4 x i64> %b) local_unnamed_addr #3 {
; CHECK-LABEL: mindq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mind $r0 = $r0, $r4
; CHECK-NEXT:    mind $r1 = $r1, $r5
; CHECK-NEXT:    mind $r2 = $r2, $r6
; CHECK-NEXT:    mind $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.mind(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.mind(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.mind(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.mind(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @minhqs(<4 x i16> %a, i16 %b) local_unnamed_addr #0 {
; CHECK-LABEL: minhqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @minhos(<8 x i16> %a, i16 %b) local_unnamed_addr #2 {
; CHECK-LABEL: minhos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minhq $r0 = $r0, $r2
; CHECK-NEXT:    minhq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @minhxs(<16 x i16> %a, i16 %b) local_unnamed_addr #3 {
; CHECK-LABEL: minhxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minhq $r0 = $r0, $r4
; CHECK-NEXT:    minhq $r1 = $r1, $r4
; CHECK-NEXT:    minhq $r2 = $r2, $r4
; CHECK-NEXT:    minhq $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.minhq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @minwps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: minwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @minwqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: minwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minwp $r0 = $r0, $r2
; CHECK-NEXT:    minwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @minwos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: minwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minwp $r0 = $r0, $r4
; CHECK-NEXT:    minwp $r1 = $r1, $r4
; CHECK-NEXT:    minwp $r2 = $r2, $r4
; CHECK-NEXT:    minwp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.minwp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @mindps(<2 x i64> %a, i64 %b) local_unnamed_addr #2 {
; CHECK-LABEL: mindps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mind $r0 = $r0, $r2
; CHECK-NEXT:    mind $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.mind(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.mind(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @mindqs(<4 x i64> %a, i64 %b) local_unnamed_addr #3 {
; CHECK-LABEL: mindqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mind $r0 = $r0, $r4
; CHECK-NEXT:    mind $r1 = $r1, $r4
; CHECK-NEXT:    mind $r2 = $r2, $r4
; CHECK-NEXT:    mind $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.mind(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.mind(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.mind(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.mind(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local i32 @maxw(i32 %a, i32 %b) local_unnamed_addr #4 {
; CHECK-LABEL: maxw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.maxw(i32 %a, i32 %b)
  ret i32 %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.kvx.maxw(i32, i32) #1

; Function Attrs: nounwind readnone
define dso_local i64 @maxd(i64 %a, i64 %b) local_unnamed_addr #4 {
; CHECK-LABEL: maxd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.maxd(i64 %a, i64 %b)
  ret i64 %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.maxd(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @maxhq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: maxhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.maxhq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @maxho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxhq $r0 = $r0, $r2
; CHECK-NEXT:    maxhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @maxhx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxhx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxhq $r0 = $r0, $r4
; CHECK-NEXT:    maxhq $r1 = $r1, $r5
; CHECK-NEXT:    maxhq $r2 = $r2, $r6
; CHECK-NEXT:    maxhq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @maxwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: maxwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.maxwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @maxwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxwp $r0 = $r0, $r2
; CHECK-NEXT:    maxwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @maxwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxwp $r0 = $r0, $r4
; CHECK-NEXT:    maxwp $r1 = $r1, $r5
; CHECK-NEXT:    maxwp $r2 = $r2, $r6
; CHECK-NEXT:    maxwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @maxdp(<2 x i64> %a, <2 x i64> %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxd $r0 = $r0, $r2
; CHECK-NEXT:    maxd $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.maxd(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.maxd(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @maxdq(<4 x i64> %a, <4 x i64> %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxd $r0 = $r0, $r4
; CHECK-NEXT:    maxd $r1 = $r1, $r5
; CHECK-NEXT:    maxd $r2 = $r2, $r6
; CHECK-NEXT:    maxd $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.maxd(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.maxd(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.maxd(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.maxd(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @maxhqs(<4 x i16> %a, i16 %b) local_unnamed_addr #0 {
; CHECK-LABEL: maxhqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @maxhos(<8 x i16> %a, i16 %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxhos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxhq $r0 = $r0, $r2
; CHECK-NEXT:    maxhq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @maxhxs(<16 x i16> %a, i16 %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxhxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxhq $r0 = $r0, $r4
; CHECK-NEXT:    maxhq $r1 = $r1, $r4
; CHECK-NEXT:    maxhq $r2 = $r2, $r4
; CHECK-NEXT:    maxhq $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.maxhq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @maxwps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: maxwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @maxwqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxwp $r0 = $r0, $r2
; CHECK-NEXT:    maxwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @maxwos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxwp $r0 = $r0, $r4
; CHECK-NEXT:    maxwp $r1 = $r1, $r4
; CHECK-NEXT:    maxwp $r2 = $r2, $r4
; CHECK-NEXT:    maxwp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.maxwp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @maxdps(<2 x i64> %a, i64 %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxd $r0 = $r0, $r2
; CHECK-NEXT:    maxd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.maxd(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.maxd(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @maxdqs(<4 x i64> %a, i64 %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxdqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxd $r0 = $r0, $r4
; CHECK-NEXT:    maxd $r1 = $r1, $r4
; CHECK-NEXT:    maxd $r2 = $r2, $r4
; CHECK-NEXT:    maxd $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.maxd(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.maxd(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.maxd(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.maxd(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local i32 @minuw(i32 %a, i32 %b) local_unnamed_addr #4 {
; CHECK-LABEL: minuw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.minuw(i32 %a, i32 %b)
  ret i32 %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.kvx.minuw(i32, i32) #1

; Function Attrs: nounwind readnone
define dso_local i32 @minuw2(i32 %a) local_unnamed_addr #4 {
; CHECK-LABEL: minuw2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuw $r0 = $r0, 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.minuw(i32 %a, i32 5)
  ret i32 %0
}

; Function Attrs: nounwind readnone
define dso_local i64 @minud(i64 %a, i64 %b) local_unnamed_addr #4 {
; CHECK-LABEL: minud:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minud $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.minud(i64 %a, i64 %b)
  ret i64 %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.minud(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local i64 @minud2(i64 %a) local_unnamed_addr #4 {
; CHECK-LABEL: minud2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minud $r0 = $r0, 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.minud(i64 %a, i64 5)
  ret i64 %0
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @minuhq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: minuhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.minuhq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @minuho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: minuho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuhq $r0 = $r0, $r2
; CHECK-NEXT:    minuhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @minuhx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: minuhx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuhq $r0 = $r0, $r4
; CHECK-NEXT:    minuhq $r1 = $r1, $r5
; CHECK-NEXT:    minuhq $r2 = $r2, $r6
; CHECK-NEXT:    minuhq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @minuwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: minuwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.minuwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @minuwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: minuwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuwp $r0 = $r0, $r2
; CHECK-NEXT:    minuwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @minuwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: minuwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuwp $r0 = $r0, $r4
; CHECK-NEXT:    minuwp $r1 = $r1, $r5
; CHECK-NEXT:    minuwp $r2 = $r2, $r6
; CHECK-NEXT:    minuwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @minudp(<2 x i64> %a, <2 x i64> %b) local_unnamed_addr #2 {
; CHECK-LABEL: minudp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minud $r0 = $r0, $r2
; CHECK-NEXT:    minud $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.minud(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.minud(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @minudq(<4 x i64> %a, <4 x i64> %b) local_unnamed_addr #3 {
; CHECK-LABEL: minudq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minud $r0 = $r0, $r4
; CHECK-NEXT:    minud $r1 = $r1, $r5
; CHECK-NEXT:    minud $r2 = $r2, $r6
; CHECK-NEXT:    minud $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.minud(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.minud(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.minud(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.minud(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @minuhqs(<4 x i16> %a, i16 %b) local_unnamed_addr #0 {
; CHECK-LABEL: minuhqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minuhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @minuhos(<8 x i16> %a, i16 %b) local_unnamed_addr #2 {
; CHECK-LABEL: minuhos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minuhq $r0 = $r0, $r2
; CHECK-NEXT:    minuhq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @minuhxs(<16 x i16> %a, i16 %b) local_unnamed_addr #3 {
; CHECK-LABEL: minuhxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minuhq $r0 = $r0, $r4
; CHECK-NEXT:    minuhq $r1 = $r1, $r4
; CHECK-NEXT:    minuhq $r2 = $r2, $r4
; CHECK-NEXT:    minuhq $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.minuhq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @minuwps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: minuwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minuwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @minuwqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: minuwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minuwp $r0 = $r0, $r2
; CHECK-NEXT:    minuwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @minuwos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: minuwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minuwp $r0 = $r0, $r4
; CHECK-NEXT:    minuwp $r1 = $r1, $r4
; CHECK-NEXT:    minuwp $r2 = $r2, $r4
; CHECK-NEXT:    minuwp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.minuwp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @minudps(<2 x i64> %a, i64 %b) local_unnamed_addr #2 {
; CHECK-LABEL: minudps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minud $r0 = $r0, $r2
; CHECK-NEXT:    minud $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.minud(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.minud(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @minudqs(<4 x i64> %a, i64 %b) local_unnamed_addr #3 {
; CHECK-LABEL: minudqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minud $r0 = $r0, $r4
; CHECK-NEXT:    minud $r1 = $r1, $r4
; CHECK-NEXT:    minud $r2 = $r2, $r4
; CHECK-NEXT:    minud $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.minud(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.minud(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.minud(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.minud(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local i32 @maxuw(i32 %a, i32 %b) local_unnamed_addr #4 {
; CHECK-LABEL: maxuw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.maxuw(i32 %a, i32 %b)
  ret i32 %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.kvx.maxuw(i32, i32) #1

; Function Attrs: nounwind readnone
define dso_local i64 @maxud(i64 %a, i64 %b) local_unnamed_addr #4 {
; CHECK-LABEL: maxud:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxud $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.maxud(i64 %a, i64 %b)
  ret i64 %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.maxud(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @maxuhq(<4 x i16> %a, <4 x i16> %b) local_unnamed_addr #0 {
; CHECK-LABEL: maxuhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.maxuhq(<4 x i16>, <4 x i16>) #1

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @maxuho(<8 x i16> %a, <8 x i16> %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxuho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuhq $r0 = $r0, $r2
; CHECK-NEXT:    maxuhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @maxuhx(<16 x i16> %a, <16 x i16> %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxuhx:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuhq $r0 = $r0, $r4
; CHECK-NEXT:    maxuhq $r1 = $r1, $r5
; CHECK-NEXT:    maxuhq $r2 = $r2, $r6
; CHECK-NEXT:    maxuhq $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @maxuwp(<2 x i32> %a, <2 x i32> %b) local_unnamed_addr #0 {
; CHECK-LABEL: maxuwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.maxuwp(<2 x i32>, <2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @maxuwq(<4 x i32> %a, <4 x i32> %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxuwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuwp $r0 = $r0, $r2
; CHECK-NEXT:    maxuwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @maxuwo(<8 x i32> %a, <8 x i32> %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxuwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuwp $r0 = $r0, $r4
; CHECK-NEXT:    maxuwp $r1 = $r1, $r5
; CHECK-NEXT:    maxuwp $r2 = $r2, $r6
; CHECK-NEXT:    maxuwp $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @maxudp(<2 x i64> %a, <2 x i64> %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxudp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxud $r0 = $r0, $r2
; CHECK-NEXT:    maxud $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.maxud(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.maxud(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @maxudq(<4 x i64> %a, <4 x i64> %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxudq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxud $r0 = $r0, $r4
; CHECK-NEXT:    maxud $r1 = $r1, $r5
; CHECK-NEXT:    maxud $r2 = $r2, $r6
; CHECK-NEXT:    maxud $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.maxud(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.maxud(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.maxud(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.maxud(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @maxuhqs(<4 x i16> %a, i16 %b) local_unnamed_addr #0 {
; CHECK-LABEL: maxuhqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @maxuhos(<8 x i16> %a, i16 %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxuhos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuhq $r0 = $r0, $r2
; CHECK-NEXT:    maxuhq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @maxuhxs(<16 x i16> %a, i16 %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxuhxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuhq $r0 = $r0, $r4
; CHECK-NEXT:    maxuhq $r1 = $r1, $r4
; CHECK-NEXT:    maxuhq $r2 = $r2, $r4
; CHECK-NEXT:    maxuhq $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.maxuhq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @maxuwps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: maxuwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @maxuwqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxuwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuwp $r0 = $r0, $r2
; CHECK-NEXT:    maxuwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @maxuwos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxuwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuwp $r0 = $r0, $r4
; CHECK-NEXT:    maxuwp $r1 = $r1, $r4
; CHECK-NEXT:    maxuwp $r2 = $r2, $r4
; CHECK-NEXT:    maxuwp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.maxuwp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @maxudps(<2 x i64> %a, i64 %b) local_unnamed_addr #2 {
; CHECK-LABEL: maxudps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxud $r0 = $r0, $r2
; CHECK-NEXT:    maxud $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.maxud(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.maxud(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @maxudqs(<4 x i64> %a, i64 %b) local_unnamed_addr #3 {
; CHECK-LABEL: maxudqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxud $r0 = $r0, $r4
; CHECK-NEXT:    maxud $r1 = $r1, $r4
; CHECK-NEXT:    maxud $r2 = $r2, $r4
; CHECK-NEXT:    maxud $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.maxud(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.maxud(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.maxud(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.maxud(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @sllhqs(<4 x i16> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: sllhqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %a, i64 %conv)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.sllhqs(<4 x i16>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @sllhqsimm(<4 x i16> %a) local_unnamed_addr #0 {
; CHECK-LABEL: sllhqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllhqs $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %a, i64 3)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @sllhos(<8 x i16> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: sllhos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r0 = $r0, $r2
; CHECK-NEXT:    sllhqs $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @sllhosimm(<8 x i16> %a) local_unnamed_addr #2 {
; CHECK-LABEL: sllhosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllhqs $r0 = $r0, 3
; CHECK-NEXT:    sllhqs $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind
define dso_local void @sllhxs(<16 x i16> %a, i32 %b) local_unnamed_addr #5 {
; CHECK-LABEL: sllhxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r3 = $r3, $r4
; CHECK-NEXT:    sllhqs $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r1 = $r1, $r4
; CHECK-NEXT:    sllhqs $r2 = $r2, $r4
; CHECK-NEXT:    sd 24[$r12] = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %c = alloca <16 x i16>, align 32
  %c.0.c.0..sroa_cast = bitcast <16 x i16>* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %c.0.c.0..sroa_cast)
  %conv = zext i32 %b to i64
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %5, i64 %conv)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %9, i64 %conv)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  store volatile <16 x i16> %12, <16 x i16>* %c, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %c.0.c.0..sroa_cast)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind
define dso_local void @sllhxsimm(<16 x i16> %a) local_unnamed_addr #5 {
; CHECK-LABEL: sllhxsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    sllhqs $r3 = $r3, 3
; CHECK-NEXT:    sllhqs $r0 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r1 = $r1, 3
; CHECK-NEXT:    sllhqs $r2 = $r2, 3
; CHECK-NEXT:    sd 24[$r12] = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %c = alloca <16 x i16>, align 32
  %c.0.c.0..sroa_cast = bitcast <16 x i16>* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %c.0.c.0..sroa_cast)
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %5, i64 3)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.sllhqs(<4 x i16> %9, i64 3)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  store volatile <16 x i16> %12, <16 x i16>* %c, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %c.0.c.0..sroa_cast)
  ret void
}

; Function Attrs: nounwind
define dso_local void @sllwps(<2 x i32> %a, i32 %b) local_unnamed_addr #7 {
; CHECK-LABEL: sllwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllwps $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %c = alloca <2 x i32>, align 8
  %c.0.c.0..sroa_cast = bitcast <2 x i32>* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %c.0.c.0..sroa_cast)
  %conv = zext i32 %b to i64
  %0 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %a, i64 %conv)
  store volatile <2 x i32> %0, <2 x i32>* %c, align 8, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %c.0.c.0..sroa_cast)
  ret void
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.sllwps(<2 x i32>, i64) #1

; Function Attrs: nounwind
define dso_local void @sllwpsimm(<2 x i32> %a) local_unnamed_addr #7 {
; CHECK-LABEL: sllwpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    sllwps $r0 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %c = alloca <2 x i32>, align 8
  %c.0.c.0..sroa_cast = bitcast <2 x i32>* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %c.0.c.0..sroa_cast)
  %0 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %a, i64 3)
  store volatile <2 x i32> %0, <2 x i32>* %c, align 8, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %c.0.c.0..sroa_cast)
  ret void
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @sllwqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: sllwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllwps $r0 = $r0, $r2
; CHECK-NEXT:    sllwps $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @sllwqsimm(<4 x i32> %a) local_unnamed_addr #2 {
; CHECK-LABEL: sllwqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllwps $r0 = $r0, 3
; CHECK-NEXT:    sllwps $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %0, i64 3)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @sllwos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: sllwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllwps $r0 = $r0, $r4
; CHECK-NEXT:    sllwps $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllwps $r2 = $r2, $r4
; CHECK-NEXT:    sllwps $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %5, i64 %conv)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %9, i64 %conv)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @sllwosimm(<8 x i32> %a) local_unnamed_addr #3 {
; CHECK-LABEL: sllwosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllwps $r0 = $r0, 3
; CHECK-NEXT:    sllwps $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllwps $r2 = $r2, 3
; CHECK-NEXT:    sllwps $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %0, i64 3)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %5, i64 3)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.sllwps(<2 x i32> %9, i64 3)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @slldps(<2 x i64> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: slldps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, $r2
; CHECK-NEXT:    slld $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.slld(i64 %0, i64 %conv)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.slld(i64 %3, i64 %conv)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.slld(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @slldpsimm(<2 x i64> %a) local_unnamed_addr #2 {
; CHECK-LABEL: slldpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slld $r0 = $r0, 3
; CHECK-NEXT:    slld $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.slld(i64 %0, i64 3)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.slld(i64 %3, i64 3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @slldqs(<4 x i64> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: slldqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, $r4
; CHECK-NEXT:    slld $r1 = $r1, $r4
; CHECK-NEXT:    slld $r2 = $r2, $r4
; CHECK-NEXT:    slld $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.slld(i64 %0, i64 %conv)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.slld(i64 %3, i64 %conv)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.slld(i64 %6, i64 %conv)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.slld(i64 %9, i64 %conv)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @slldqsimm(<4 x i64> %a) local_unnamed_addr #3 {
; CHECK-LABEL: slldqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slld $r0 = $r0, 3
; CHECK-NEXT:    slld $r1 = $r1, 3
; CHECK-NEXT:    slld $r2 = $r2, 3
; CHECK-NEXT:    slld $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.slld(i64 %0, i64 3)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.slld(i64 %3, i64 3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.slld(i64 %6, i64 3)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.slld(i64 %9, i64 3)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @slshqs(<4 x i16> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: slshqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slshqs $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %a, i64 %conv)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.slshqs(<4 x i16>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @slshqsimm(<4 x i16> %a) local_unnamed_addr #0 {
; CHECK-LABEL: slshqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slshqs $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %a, i64 3)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @slshos(<8 x i16> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: slshos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slshqs $r0 = $r0, $r2
; CHECK-NEXT:    slshqs $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @slshosimm(<8 x i16> %a) local_unnamed_addr #2 {
; CHECK-LABEL: slshosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slshqs $r0 = $r0, 3
; CHECK-NEXT:    slshqs $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @slshxs(<16 x i16> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: slshxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slshqs $r0 = $r0, $r4
; CHECK-NEXT:    slshqs $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slshqs $r2 = $r2, $r4
; CHECK-NEXT:    slshqs $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %5, i64 %conv)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %9, i64 %conv)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %12
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @slshxsimm(<16 x i16> %a) local_unnamed_addr #3 {
; CHECK-LABEL: slshxsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slshqs $r0 = $r0, 3
; CHECK-NEXT:    slshqs $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slshqs $r2 = $r2, 3
; CHECK-NEXT:    slshqs $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %5, i64 3)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.slshqs(<4 x i16> %9, i64 3)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @slswps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: slswps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slswps $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %a, i64 %conv)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.slswps(<2 x i32>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @slswpsimm(<2 x i32> %a) local_unnamed_addr #0 {
; CHECK-LABEL: slswpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slswps $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %a, i64 3)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @slswqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: slswqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slswps $r0 = $r0, $r2
; CHECK-NEXT:    slswps $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @slswqsimm(<4 x i32> %a) local_unnamed_addr #2 {
; CHECK-LABEL: slswqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slswps $r0 = $r0, 3
; CHECK-NEXT:    slswps $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %0, i64 3)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @slswos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: slswos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slswps $r0 = $r0, $r4
; CHECK-NEXT:    slswps $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slswps $r2 = $r2, $r4
; CHECK-NEXT:    slswps $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %5, i64 %conv)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %9, i64 %conv)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @slswosimm(<8 x i32> %a) local_unnamed_addr #3 {
; CHECK-LABEL: slswosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slswps $r0 = $r0, 3
; CHECK-NEXT:    slswps $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slswps $r2 = $r2, 3
; CHECK-NEXT:    slswps $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %0, i64 3)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %5, i64 3)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.slswps(<2 x i32> %9, i64 3)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @slsdps(<2 x i64> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: slsdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slsd $r0 = $r0, $r2
; CHECK-NEXT:    slsd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.slsd(i64 %0, i64 %conv)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.slsd(i64 %3, i64 %conv)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.slsd(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @slsdpsimm(<2 x i64> %a) local_unnamed_addr #2 {
; CHECK-LABEL: slsdpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slsd $r0 = $r0, 3
; CHECK-NEXT:    slsd $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.slsd(i64 %0, i64 3)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.slsd(i64 %3, i64 3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @slsdqs(<4 x i64> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: slsdqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slsd $r0 = $r0, $r4
; CHECK-NEXT:    slsd $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slsd $r2 = $r2, $r4
; CHECK-NEXT:    slsd $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.slsd(i64 %0, i64 %conv)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.slsd(i64 %3, i64 %conv)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.slsd(i64 %6, i64 %conv)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.slsd(i64 %9, i64 %conv)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @slsdqsimm(<4 x i64> %a) local_unnamed_addr #3 {
; CHECK-LABEL: slsdqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slsd $r0 = $r0, 3
; CHECK-NEXT:    slsd $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slsd $r2 = $r2, 3
; CHECK-NEXT:    slsd $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.slsd(i64 %0, i64 3)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.slsd(i64 %3, i64 3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.slsd(i64 %6, i64 3)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.slsd(i64 %9, i64 3)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @srahqs(<4 x i16> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: srahqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %a, i64 %conv)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.srahqs(<4 x i16>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @srahqsimm(<4 x i16> %a) local_unnamed_addr #0 {
; CHECK-LABEL: srahqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srahqs $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %a, i64 3)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @srahos(<8 x i16> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: srahos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r0 = $r0, $r2
; CHECK-NEXT:    srahqs $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @srahosimm(<8 x i16> %a) local_unnamed_addr #2 {
; CHECK-LABEL: srahosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srahqs $r0 = $r0, 3
; CHECK-NEXT:    srahqs $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind
define dso_local void @srahxs(<16 x i16> %a, i32 %b) local_unnamed_addr #5 {
; CHECK-LABEL: srahxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r3 = $r3, $r4
; CHECK-NEXT:    srahqs $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r1 = $r1, $r4
; CHECK-NEXT:    srahqs $r2 = $r2, $r4
; CHECK-NEXT:    sd 24[$r12] = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %c = alloca <16 x i16>, align 32
  %c.0.c.0..sroa_cast = bitcast <16 x i16>* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %c.0.c.0..sroa_cast)
  %conv = zext i32 %b to i64
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %5, i64 %conv)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %9, i64 %conv)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  store volatile <16 x i16> %12, <16 x i16>* %c, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %c.0.c.0..sroa_cast)
  ret void
}

; Function Attrs: nounwind
define dso_local void @srahxsimm(<16 x i16> %a) local_unnamed_addr #5 {
; CHECK-LABEL: srahxsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    srahqs $r3 = $r3, 3
; CHECK-NEXT:    srahqs $r0 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r1 = $r1, 3
; CHECK-NEXT:    srahqs $r2 = $r2, 3
; CHECK-NEXT:    sd 24[$r12] = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %c = alloca <16 x i16>, align 32
  %c.0.c.0..sroa_cast = bitcast <16 x i16>* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %c.0.c.0..sroa_cast)
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %5, i64 3)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.srahqs(<4 x i16> %9, i64 3)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  store volatile <16 x i16> %12, <16 x i16>* %c, align 32, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %c.0.c.0..sroa_cast)
  ret void
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @srawps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: srawps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srawps $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %a, i64 %conv)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.srawps(<2 x i32>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @srawpsimm(<2 x i32> %a) local_unnamed_addr #0 {
; CHECK-LABEL: srawpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srawps $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %a, i64 3)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @srawqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: srawqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srawps $r0 = $r0, $r2
; CHECK-NEXT:    srawps $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @srawqsimm(<4 x i32> %a) local_unnamed_addr #2 {
; CHECK-LABEL: srawqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srawps $r0 = $r0, 3
; CHECK-NEXT:    srawps $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %0, i64 3)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @srawos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: srawos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srawps $r0 = $r0, $r4
; CHECK-NEXT:    srawps $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srawps $r2 = $r2, $r4
; CHECK-NEXT:    srawps $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %5, i64 %conv)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %9, i64 %conv)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @srawosimm(<8 x i32> %a) local_unnamed_addr #3 {
; CHECK-LABEL: srawosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srawps $r0 = $r0, 3
; CHECK-NEXT:    srawps $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srawps $r2 = $r2, 3
; CHECK-NEXT:    srawps $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %0, i64 3)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %5, i64 3)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.srawps(<2 x i32> %9, i64 3)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @sradps(<2 x i64> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: sradps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r0 = $r0, $r2
; CHECK-NEXT:    srad $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srad(i64 %0, i64 %conv)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srad(i64 %3, i64 %conv)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.srad(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @sradpsimm(<2 x i64> %a) local_unnamed_addr #2 {
; CHECK-LABEL: sradpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r0 = $r0, 3
; CHECK-NEXT:    srad $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srad(i64 %0, i64 3)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srad(i64 %3, i64 3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @sradqs(<4 x i64> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: sradqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r0 = $r0, $r4
; CHECK-NEXT:    srad $r1 = $r1, $r4
; CHECK-NEXT:    srad $r2 = $r2, $r4
; CHECK-NEXT:    srad $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srad(i64 %0, i64 %conv)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srad(i64 %3, i64 %conv)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.srad(i64 %6, i64 %conv)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.srad(i64 %9, i64 %conv)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @sradqsimm(<4 x i64> %a) local_unnamed_addr #3 {
; CHECK-LABEL: sradqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r0 = $r0, 3
; CHECK-NEXT:    srad $r1 = $r1, 3
; CHECK-NEXT:    srad $r2 = $r2, 3
; CHECK-NEXT:    srad $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srad(i64 %0, i64 3)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srad(i64 %3, i64 3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.srad(i64 %6, i64 3)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.srad(i64 %9, i64 3)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @srlhqs(<4 x i16> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: srlhqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %a, i64 %conv)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.srlhqs(<4 x i16>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @srlhqsimm(<4 x i16> %a) local_unnamed_addr #0 {
; CHECK-LABEL: srlhqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlhqs $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %a, i64 3)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @srlhos(<8 x i16> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: srlhos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r0 = $r0, $r2
; CHECK-NEXT:    srlhqs $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @srlhosimm(<8 x i16> %a) local_unnamed_addr #2 {
; CHECK-LABEL: srlhosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlhqs $r0 = $r0, 3
; CHECK-NEXT:    srlhqs $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @srlhxs(<16 x i16> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: srlhxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r0 = $r0, $r4
; CHECK-NEXT:    srlhqs $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r2 = $r2, $r4
; CHECK-NEXT:    srlhqs $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %5, i64 %conv)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %9, i64 %conv)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %12
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @srlhxsimm(<16 x i16> %a) local_unnamed_addr #3 {
; CHECK-LABEL: srlhxsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlhqs $r0 = $r0, 3
; CHECK-NEXT:    srlhqs $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r2 = $r2, 3
; CHECK-NEXT:    srlhqs $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %5, i64 3)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.srlhqs(<4 x i16> %9, i64 3)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @srlwps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: srlwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlwps $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %a, i64 %conv)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.srlwps(<2 x i32>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @srlwpsimm(<2 x i32> %a) local_unnamed_addr #0 {
; CHECK-LABEL: srlwpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlwps $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %a, i64 3)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @srlwqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: srlwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlwps $r0 = $r0, $r2
; CHECK-NEXT:    srlwps $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @srlwqsimm(<4 x i32> %a) local_unnamed_addr #2 {
; CHECK-LABEL: srlwqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlwps $r0 = $r0, 3
; CHECK-NEXT:    srlwps $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %0, i64 3)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @srlwos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: srlwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlwps $r0 = $r0, $r4
; CHECK-NEXT:    srlwps $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlwps $r2 = $r2, $r4
; CHECK-NEXT:    srlwps $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %5, i64 %conv)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %9, i64 %conv)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @srlwosimm(<8 x i32> %a) local_unnamed_addr #3 {
; CHECK-LABEL: srlwosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlwps $r0 = $r0, 3
; CHECK-NEXT:    srlwps $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlwps $r2 = $r2, 3
; CHECK-NEXT:    srlwps $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %0, i64 3)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %5, i64 3)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.srlwps(<2 x i32> %9, i64 3)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @srldps(<2 x i64> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: srldps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r0, $r2
; CHECK-NEXT:    srld $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srld(i64 %0, i64 %conv)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srld(i64 %3, i64 %conv)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.srld(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @srldpsimm(<2 x i64> %a) local_unnamed_addr #2 {
; CHECK-LABEL: srldpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 3
; CHECK-NEXT:    srld $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srld(i64 %0, i64 3)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srld(i64 %3, i64 3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @srldqs(<4 x i64> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: srldqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r0, $r4
; CHECK-NEXT:    srld $r1 = $r1, $r4
; CHECK-NEXT:    srld $r2 = $r2, $r4
; CHECK-NEXT:    srld $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srld(i64 %0, i64 %conv)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srld(i64 %3, i64 %conv)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.srld(i64 %6, i64 %conv)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.srld(i64 %9, i64 %conv)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @srldqsimm(<4 x i64> %a) local_unnamed_addr #3 {
; CHECK-LABEL: srldqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 3
; CHECK-NEXT:    srld $r1 = $r1, 3
; CHECK-NEXT:    srld $r2 = $r2, 3
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srld(i64 %0, i64 3)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srld(i64 %3, i64 3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.srld(i64 %6, i64 3)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.srld(i64 %9, i64 3)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @srshqs(<4 x i16> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: srshqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srshqs $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %a, i64 %conv)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.kvx.srshqs(<4 x i16>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i16> @srshqsimm(<4 x i16> %a) local_unnamed_addr #0 {
; CHECK-LABEL: srshqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srshqs $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %a, i64 3)
  ret <4 x i16> %0
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @srshos(<8 x i16> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: srshos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srshqs $r0 = $r0, $r2
; CHECK-NEXT:    srshqs $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i16> @srshosimm(<8 x i16> %a) local_unnamed_addr #2 {
; CHECK-LABEL: srshosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srshqs $r0 = $r0, 3
; CHECK-NEXT:    srshqs $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %4
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @srshxs(<16 x i16> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: srshxs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srshqs $r0 = $r0, $r4
; CHECK-NEXT:    srshqs $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srshqs $r2 = $r2, $r4
; CHECK-NEXT:    srshqs $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %0, i64 %conv)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %2, i64 %conv)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %5, i64 %conv)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %9, i64 %conv)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %12
}

; Function Attrs: nounwind readnone
define dso_local <16 x i16> @srshxsimm(<16 x i16> %a) local_unnamed_addr #3 {
; CHECK-LABEL: srshxsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srshqs $r0 = $r0, 3
; CHECK-NEXT:    srshqs $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srshqs $r2 = $r2, 3
; CHECK-NEXT:    srshqs $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %0, i64 3)
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %2, i64 3)
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %6 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %5, i64 3)
  %7 = shufflevector <4 x i16> %6, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <16 x i16> %4, <16 x i16> %7, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.srshqs(<4 x i16> %9, i64 3)
  %11 = shufflevector <4 x i16> %10, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %8, <16 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @srswps(<2 x i32> %a, i32 %b) local_unnamed_addr #0 {
; CHECK-LABEL: srswps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srswps $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %a, i64 %conv)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.srswps(<2 x i32>, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @srswpsimm(<2 x i32> %a) local_unnamed_addr #0 {
; CHECK-LABEL: srswpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srswps $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %a, i64 3)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @srswqs(<4 x i32> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: srswqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srswps $r0 = $r0, $r2
; CHECK-NEXT:    srswps $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @srswqsimm(<4 x i32> %a) local_unnamed_addr #2 {
; CHECK-LABEL: srswqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srswps $r0 = $r0, 3
; CHECK-NEXT:    srswps $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %0, i64 3)
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @srswos(<8 x i32> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: srswos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srswps $r0 = $r0, $r4
; CHECK-NEXT:    srswps $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srswps $r2 = $r2, $r4
; CHECK-NEXT:    srswps $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %0, i64 %conv)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %2, i64 %conv)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %5, i64 %conv)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %9, i64 %conv)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @srswosimm(<8 x i32> %a) local_unnamed_addr #3 {
; CHECK-LABEL: srswosimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srswps $r0 = $r0, 3
; CHECK-NEXT:    srswps $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srswps $r2 = $r2, 3
; CHECK-NEXT:    srswps $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %0, i64 3)
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %2, i64 3)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %5, i64 3)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.srswps(<2 x i32> %9, i64 3)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @srsdps(<2 x i64> %a, i32 %b) local_unnamed_addr #2 {
; CHECK-LABEL: srsdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srsd $r0 = $r0, $r2
; CHECK-NEXT:    srsd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srsd(i64 %0, i64 %conv)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srsd(i64 %3, i64 %conv)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.srsd(i64, i64) #1

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @srsdpsimm(<2 x i64> %a) local_unnamed_addr #2 {
; CHECK-LABEL: srsdpsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srsd $r0 = $r0, 3
; CHECK-NEXT:    srsd $r1 = $r1, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srsd(i64 %0, i64 3)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srsd(i64 %3, i64 3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @srsdqs(<4 x i64> %a, i32 %b) local_unnamed_addr #3 {
; CHECK-LABEL: srsdqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srsd $r0 = $r0, $r4
; CHECK-NEXT:    srsd $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srsd $r2 = $r2, $r4
; CHECK-NEXT:    srsd $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srsd(i64 %0, i64 %conv)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srsd(i64 %3, i64 %conv)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.srsd(i64 %6, i64 %conv)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.srsd(i64 %9, i64 %conv)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @srsdqsimm(<4 x i64> %a) local_unnamed_addr #3 {
; CHECK-LABEL: srsdqsimm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srsd $r0 = $r0, 3
; CHECK-NEXT:    srsd $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srsd $r2 = $r2, 3
; CHECK-NEXT:    srsd $r3 = $r3, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.srsd(i64 %0, i64 3)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.srsd(i64 %3, i64 3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.srsd(i64 %6, i64 3)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.srsd(i64 %9, i64 3)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @clswp(<2 x i32> %v) local_unnamed_addr #0 {
; CHECK-LABEL: clswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %v)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.clswp(<2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @clswq(<4 x i32> %v) local_unnamed_addr #2 {
; CHECK-LABEL: clswq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    clswp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %0)
  %2 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @clswo(<8 x i32> %v) local_unnamed_addr #3 {
; CHECK-LABEL: clswo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    clswp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clswp $r2 = $r2
; CHECK-NEXT:    clswp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %0)
  %2 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %5)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %9)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @clsdp(<2 x i64> %v) local_unnamed_addr #2 {
; CHECK-LABEL: clsdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clsd $r0 = $r0
; CHECK-NEXT:    clsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.clsd(i64 %0)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.clsd(i64 %3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.clsd(i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @clsdq(<4 x i64> %v) local_unnamed_addr #3 {
; CHECK-LABEL: clsdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clsd $r0 = $r0
; CHECK-NEXT:    clsd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clsd $r2 = $r2
; CHECK-NEXT:    clsd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.clsd(i64 %0)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.clsd(i64 %3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %v, i64 2
  %7 = tail call i64 @llvm.kvx.clsd(i64 %6)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %v, i64 3
  %10 = tail call i64 @llvm.kvx.clsd(i64 %9)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @clzwp(<2 x i32> %v) local_unnamed_addr #0 {
; CHECK-LABEL: clzwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %v)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.clzwp(<2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @clzwq(<4 x i32> %v) local_unnamed_addr #2 {
; CHECK-LABEL: clzwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    clzwp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %0)
  %2 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @clzwo(<8 x i32> %v) local_unnamed_addr #3 {
; CHECK-LABEL: clzwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    clzwp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clzwp $r2 = $r2
; CHECK-NEXT:    clzwp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %0)
  %2 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %5)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %9)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @clzdp(<2 x i64> %v) local_unnamed_addr #2 {
; CHECK-LABEL: clzdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.clzd(i64 %0)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.clzd(i64 %3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.clzd(i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @clzdq(<4 x i64> %v) local_unnamed_addr #3 {
; CHECK-LABEL: clzdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clzd $r2 = $r2
; CHECK-NEXT:    clzd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.clzd(i64 %0)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.clzd(i64 %3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %v, i64 2
  %7 = tail call i64 @llvm.kvx.clzd(i64 %6)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %v, i64 3
  %10 = tail call i64 @llvm.kvx.clzd(i64 %9)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @ctzwp(<2 x i32> %v) local_unnamed_addr #0 {
; CHECK-LABEL: ctzwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %v)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.ctzwp(<2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @ctzwq(<4 x i32> %v) local_unnamed_addr #2 {
; CHECK-LABEL: ctzwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ctzwp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %0)
  %2 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @ctzwo(<8 x i32> %v) local_unnamed_addr #3 {
; CHECK-LABEL: ctzwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ctzwp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ctzwp $r2 = $r2
; CHECK-NEXT:    ctzwp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %0)
  %2 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %5)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %9)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @ctzdp(<2 x i64> %v) local_unnamed_addr #2 {
; CHECK-LABEL: ctzdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ctzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.ctzd(i64 %0)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.ctzd(i64 %3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.ctzd(i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @ctzdq(<4 x i64> %v) local_unnamed_addr #3 {
; CHECK-LABEL: ctzdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ctzd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ctzd $r2 = $r2
; CHECK-NEXT:    ctzd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.ctzd(i64 %0)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.ctzd(i64 %3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %v, i64 2
  %7 = tail call i64 @llvm.kvx.ctzd(i64 %6)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %v, i64 3
  %10 = tail call i64 @llvm.kvx.ctzd(i64 %9)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <2 x i32> @cbswp(<2 x i32> %v) local_unnamed_addr #0 {
; CHECK-LABEL: cbswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %v)
  ret <2 x i32> %0
}

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.kvx.cbswp(<2 x i32>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i32> @cbswq(<4 x i32> %v) local_unnamed_addr #2 {
; CHECK-LABEL: cbswq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    cbswp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %0)
  %2 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

; Function Attrs: nounwind readnone
define dso_local <8 x i32> @cbswo(<8 x i32> %v) local_unnamed_addr #3 {
; CHECK-LABEL: cbswo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    cbswp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cbswp $r2 = $r2
; CHECK-NEXT:    cbswp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %0)
  %2 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %5)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %9)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

; Function Attrs: nounwind readnone
define dso_local <2 x i64> @cbsdp(<2 x i64> %v) local_unnamed_addr #2 {
; CHECK-LABEL: cbsdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    cbsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.cbsd(i64 %0)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.cbsd(i64 %3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

; Function Attrs: nounwind readnone
declare i64 @llvm.kvx.cbsd(i64) #1

; Function Attrs: nounwind readnone
define dso_local <4 x i64> @cbsdq(<4 x i64> %v) local_unnamed_addr #3 {
; CHECK-LABEL: cbsdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    cbsd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cbsd $r2 = $r2
; CHECK-NEXT:    cbsd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.cbsd(i64 %0)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.cbsd(i64 %3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %v, i64 2
  %7 = tail call i64 @llvm.kvx.cbsd(i64 %6)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %v, i64 3
  %10 = tail call i64 @llvm.kvx.cbsd(i64 %9)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

; Function Attrs: nounwind readnone
define dso_local <2 x float> @fminwps(<2 x float> %v1, float %v2) local_unnamed_addr #0 {
; CHECK-LABEL: fminwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fminwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %v1, <2 x float> %1)
  ret <2 x float> %2
}

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.kvx.fminwp(<2 x float>, <2 x float>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x float> @fminwqs(<4 x float> %v1, float %v2) local_unnamed_addr #2 {
; CHECK-LABEL: fminwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r2 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fminwp $r0 = $r0, $r2
; CHECK-NEXT:    fminwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = shufflevector <4 x float> %v1, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %2, <2 x float> %1)
  %4 = shufflevector <4 x float> %v1, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %4, <2 x float> %1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x float> @fminwos(<8 x float> %v1, float %v2) local_unnamed_addr #3 {
; CHECK-LABEL: fminwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r4 = $r4, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fminwp $r0 = $r0, $r4
; CHECK-NEXT:    fminwp $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fminwp $r2 = $r2, $r4
; CHECK-NEXT:    fminwp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %2, <2 x float> %1)
  %4 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %4, <2 x float> %1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %7, <2 x float> %1)
  %9 = shufflevector <2 x float> %8, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x float> %6, <8 x float> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %11, <2 x float> %1)
  %13 = shufflevector <2 x float> %12, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x float> %10, <8 x float> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x float> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x double> @fmindps(<2 x double> %v1, double %v2) local_unnamed_addr #2 {
; CHECK-LABEL: fmindps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmind $r0 = $r0, $r2
; CHECK-NEXT:    fmind $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x double> %v1, i64 0
  %1 = tail call double @llvm.kvx.fmind(double %0, double %v2)
  %2 = insertelement <2 x double> undef, double %1, i64 0
  %3 = extractelement <2 x double> %v1, i64 1
  %4 = tail call double @llvm.kvx.fmind(double %3, double %v2)
  %5 = insertelement <2 x double> %2, double %4, i64 1
  ret <2 x double> %5
}

; Function Attrs: nounwind readnone
declare double @llvm.kvx.fmind(double, double) #1

; Function Attrs: nounwind readnone
define dso_local <4 x double> @fmindqs(<4 x double> %v1, double %v2) local_unnamed_addr #3 {
; CHECK-LABEL: fmindqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmind $r0 = $r0, $r4
; CHECK-NEXT:    fmind $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmind $r2 = $r2, $r4
; CHECK-NEXT:    fmind $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x double> %v1, i64 0
  %1 = tail call double @llvm.kvx.fmind(double %0, double %v2)
  %2 = insertelement <4 x double> undef, double %1, i64 0
  %3 = extractelement <4 x double> %v1, i64 1
  %4 = tail call double @llvm.kvx.fmind(double %3, double %v2)
  %5 = insertelement <4 x double> %2, double %4, i64 1
  %6 = extractelement <4 x double> %v1, i64 2
  %7 = tail call double @llvm.kvx.fmind(double %6, double %v2)
  %8 = insertelement <4 x double> %5, double %7, i64 2
  %9 = extractelement <4 x double> %v1, i64 3
  %10 = tail call double @llvm.kvx.fmind(double %9, double %v2)
  %11 = insertelement <4 x double> %8, double %10, i64 3
  ret <4 x double> %11
}

; Function Attrs: nounwind readnone
define dso_local <2 x float> @fmaxwps(<2 x float> %v1, float %v2) local_unnamed_addr #0 {
; CHECK-LABEL: fmaxwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmaxwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %v1, <2 x float> %1)
  ret <2 x float> %2
}

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.kvx.fmaxwp(<2 x float>, <2 x float>) #1

; Function Attrs: nounwind readnone
define dso_local <4 x float> @fmaxwqs(<4 x float> %v1, float %v2) local_unnamed_addr #2 {
; CHECK-LABEL: fmaxwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r2 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmaxwp $r0 = $r0, $r2
; CHECK-NEXT:    fmaxwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = shufflevector <4 x float> %v1, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %2, <2 x float> %1)
  %4 = shufflevector <4 x float> %v1, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %4, <2 x float> %1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}

; Function Attrs: nounwind readnone
define dso_local <8 x float> @fmaxwos(<8 x float> %v1, float %v2) local_unnamed_addr #3 {
; CHECK-LABEL: fmaxwos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r4 = $r4, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmaxwp $r0 = $r0, $r4
; CHECK-NEXT:    fmaxwp $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmaxwp $r2 = $r2, $r4
; CHECK-NEXT:    fmaxwp $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %2, <2 x float> %1)
  %4 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %4, <2 x float> %1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %7, <2 x float> %1)
  %9 = shufflevector <2 x float> %8, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x float> %6, <8 x float> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %11, <2 x float> %1)
  %13 = shufflevector <2 x float> %12, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x float> %10, <8 x float> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x float> %14
}

; Function Attrs: nounwind readnone
define dso_local <2 x double> @fmaxdps(<2 x double> %v1, double %v2) local_unnamed_addr #2 {
; CHECK-LABEL: fmaxdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmaxd $r0 = $r0, $r2
; CHECK-NEXT:    fmaxd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x double> %v1, i64 0
  %1 = tail call double @llvm.kvx.fmaxd(double %0, double %v2)
  %2 = insertelement <2 x double> undef, double %1, i64 0
  %3 = extractelement <2 x double> %v1, i64 1
  %4 = tail call double @llvm.kvx.fmaxd(double %3, double %v2)
  %5 = insertelement <2 x double> %2, double %4, i64 1
  ret <2 x double> %5
}

; Function Attrs: nounwind readnone
declare double @llvm.kvx.fmaxd(double, double) #1

; Function Attrs: nounwind readnone
define dso_local <4 x double> @fmaxdqs(<4 x double> %v1, double %v2) local_unnamed_addr #3 {
; CHECK-LABEL: fmaxdqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmaxd $r0 = $r0, $r4
; CHECK-NEXT:    fmaxd $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmaxd $r2 = $r2, $r4
; CHECK-NEXT:    fmaxd $r3 = $r3, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x double> %v1, i64 0
  %1 = tail call double @llvm.kvx.fmaxd(double %0, double %v2)
  %2 = insertelement <4 x double> undef, double %1, i64 0
  %3 = extractelement <4 x double> %v1, i64 1
  %4 = tail call double @llvm.kvx.fmaxd(double %3, double %v2)
  %5 = insertelement <4 x double> %2, double %4, i64 1
  %6 = extractelement <4 x double> %v1, i64 2
  %7 = tail call double @llvm.kvx.fmaxd(double %6, double %v2)
  %8 = insertelement <4 x double> %5, double %7, i64 2
  %9 = extractelement <4 x double> %v1, i64 3
  %10 = tail call double @llvm.kvx.fmaxd(double %9, double %v2)
  %11 = insertelement <4 x double> %8, double %10, i64 3
  ret <4 x double> %11
}

attributes #0 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind willreturn }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Kalray clang version 10.0.0 (git@bitbucket.org:tremend/kalray.git ef2cd74b6349e382208827da1cbaa8412358c7f0)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
