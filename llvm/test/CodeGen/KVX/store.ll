; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 < %s | FileCheck %s
target triple = "kvx-unknown-cos"

@g1 = global i32 0, align 4

define void @imm10(i32* nocapture %0, i32 %1) {
; CHECK-LABEL: imm10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sw 0[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  store i32 %1, i32* %0, align 4
  ret void
}

define void @imm37(i32* nocapture %0, i32 %1) {
; CHECK-LABEL: imm37:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sw 0x3fffffffc[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = getelementptr inbounds i32, i32* %0, i64 4294967295
  store i32 %1, i32* %3, align 4
  ret void
}

define void @imm64(i32* nocapture %0, i32 %1) {
; CHECK-LABEL: imm64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sw 0x3fffffffffffc[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = getelementptr inbounds i32, i32* %0, i64 281474976710655
  store i32 %1, i32* %3, align 4
  ret void
}

define void @reg(i32* nocapture %0, i64 %1, i64 %2) {
; CHECK-LABEL: reg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sw.xs $r2[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = trunc i64 %1 to i32
  %5 = getelementptr inbounds i32, i32* %0, i64 %2
  store i32 %4, i32* %5, align 4
  ret void
}

define <4 x i32> @test0(<4 x i32> %0, i8 %1) #1 {
; CHECK-LABEL: test0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andd $r2 = $r2, 3
; CHECK-NEXT:    make $r3 = 0xfffffffb
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    addd $r4 = $r12, 0
; CHECK-NEXT:    sq 0[$r12] = $r0r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw.xs $r2[$r4] = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r0r1 = 0[$r12]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = insertelement <4 x i32> %0, i32 -5, i8 %1
  ret <4 x i32> %3
}

define i32 @test1(i32* nocapture %0, i32* nocapture readonly %1, i32 %2) #2 {
; CHECK-LABEL: test1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz.xs $r3 = $r2[$r1]
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw.xs $r2[$r0] = $r3
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = sext i32 %2 to i64
  %5 = getelementptr inbounds i32, i32* %1, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 %4
  store i32 %6, i32* %7, align 4
  ret i32 0
}

define void @test2(i32 %0, i8* nocapture readnone %1) #2 {
; CHECK-LABEL: test2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = g1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r1 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.weqz $r1 ? .LBB6_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB6_1:
; CHECK-NEXT:    make $r1 = 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = load i32, i32* @g1, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %6

5:
  store i32 1, i32* @g1, align 4
  br label %6

6:
  ret void
}
