; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CV2
target triple = "kvx-kalray-cos"

define i32 @acswapw_cv2(i32* %p, i32 %a, i32 %b){
; CV2-LABEL: acswapw_cv2:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    copyd $r3 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapw $r0, [$r0] = $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = bitcast i32* %p to i8*
  %1 = tail call i32 @llvm.kvx.acswapw.cv2(i8* %0, i32 %a, i32 %b, i32 1, i32 0)
  ret i32 %1
}

define i32 @acswapw_cv2_g(i32* %p, i32 %a, i32 %b){
; CV2-LABEL: acswapw_cv2_g:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    copyd $r3 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapw.g $r0, [$r0] = $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = bitcast i32* %p to i8*
  %1 = tail call i32 @llvm.kvx.acswapw.cv2(i8* %0, i32 %a, i32 %b, i32 1, i32 1)
  ret i32 %1
}

define i32 @acswapw_cv2_s(i32* %p, i32 %a, i32 %b){
; CV2-LABEL: acswapw_cv2_s:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    copyd $r3 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapw.s $r0, [$r0] = $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = bitcast i32* %p to i8*
  %1 = tail call i32 @llvm.kvx.acswapw.cv2(i8* %0, i32 %a, i32 %b, i32 1, i32 2)
  ret i32 %1
}

define i32 @acswapw_cv2_vg(i32* %p, i32 %a, i32 %b){
; CV2-LABEL: acswapw_cv2_vg:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    copyd $r3 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapw.v.g $r0, [$r0] = $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = bitcast i32* %p to i8*
  %1 = tail call i32 @llvm.kvx.acswapw.cv2(i8* %0, i32 %a, i32 %b, i32 0, i32 1)
  ret i32 %1
}

declare i32 @llvm.kvx.acswapw.cv2(i8*, i32, i32, i32, i32) #1

define i64 @acswapd_cv2(i32* %p, i64 %a, i64 %b){
; CV2-LABEL: acswapd_cv2:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    copyd $r3 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r0, [$r0] = $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = bitcast i32* %p to i8*
  %1 = tail call i64 @llvm.kvx.acswapd.cv2(i8* %0, i64 %a, i64 %b, i32 1, i32 0)
  ret i64 %1
}

define i64 @acswapd_cv2_g(i32* %p, i64 %a, i64 %b){
; CV2-LABEL: acswapd_cv2_g:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    copyd $r3 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd.g $r0, [$r0] = $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = bitcast i32* %p to i8*
  %1 = tail call i64 @llvm.kvx.acswapd.cv2(i8* %0, i64 %a, i64 %b, i32 1, i32 1)
  ret i64 %1
}

define i64 @acswapd_cv2_s(i32* %p, i64 %a, i64 %b){
; CV2-LABEL: acswapd_cv2_s:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    copyd $r3 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd.s $r0, [$r0] = $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = bitcast i32* %p to i8*
  %1 = tail call i64 @llvm.kvx.acswapd.cv2(i8* %0, i64 %a, i64 %b, i32 1, i32 2)
  ret i64 %1
}

define i64 @acswapd_cv2_vg(i32* %p, i64 %a, i64 %b){
; CV2-LABEL: acswapd_cv2_vg:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    copyd $r3 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd.v.g $r0, [$r0] = $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = bitcast i32* %p to i8*
  %1 = tail call i64 @llvm.kvx.acswapd.cv2(i8* %0, i64 %a, i64 %b, i32 0, i32 1)
  ret i64 %1
}

declare i64 @llvm.kvx.acswapd.cv2(i8*, i64, i64, i32, i32) #1

