; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 -disable-kvx-loadstore-packing=false | FileCheck %s
target triple = "kvx-kalray-cos"
; Reported in T12917.

@b = common global i32 0, align 4
@c = common global i32 0, align 4
@a = common global i32 0, align 4

define i32 @f(){
; CHECK-LABEL: f:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_def_cfa_offset 64
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 20, -16
; CHECK-NEXT:    .cfi_offset 21, -24
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    make $r18 = b
; CHECK-NEXT:    make $r19 = a
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 18, -32
; CHECK-NEXT:    .cfi_offset 19, -40
; CHECK-NEXT:    make $r20 = c
; CHECK-NEXT:    make $r21 = 4
; CHECK-NEXT:    call g
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r4r5r6r7 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r32r33r34r35 = 0[$r4]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r8r9r10r11 = 0[$r5]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r0r1r2r3 = 0[$r7]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r4r5r6r7 = 0[$r6]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r15 = 0[$r19]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r18] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r20] = $r21
; CHECK-NEXT:    cb.weqz $r15 ? .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    faddd $r15 = $r32, 0x0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r15 = $r15, $r33
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r15 = $r15, $r34
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r15 = $r15, $r35
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r8 = $r15, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r8 = $r8, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r8 = $r8, $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r8 = $r8, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r4 = $r8, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r4 = $r4, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r4 = $r4, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r0 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd $r0 = $r0, $r3
; CHECK-NEXT:    call h
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # %if.end
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %call = tail call i32 bitcast (i32 (...)* @g to i32 ()*)() #2
  %conv = sext i32 %call to i64
  %0 = inttoptr i64 %conv to double**
  %1 = load double*, double** %0, align 8
  %2 = load double, double* %1, align 8
  %arrayidx7.1 = getelementptr inbounds double, double* %1, i64 1
  %3 = load double, double* %arrayidx7.1, align 8
  %arrayidx7.2 = getelementptr inbounds double, double* %1, i64 2
  %4 = load double, double* %arrayidx7.2, align 8
  %arrayidx7.3 = getelementptr inbounds double, double* %1, i64 3
  %5 = load double, double* %arrayidx7.3, align 8
  %arrayidx.1 = getelementptr inbounds double*, double** %0, i64 1
  %6 = load double*, double** %arrayidx.1, align 8
  %7 = load double, double* %6, align 8
  %arrayidx7.1.1 = getelementptr inbounds double, double* %6, i64 1
  %8 = load double, double* %arrayidx7.1.1, align 8
  %arrayidx7.2.1 = getelementptr inbounds double, double* %6, i64 2
  %9 = load double, double* %arrayidx7.2.1, align 8
  %arrayidx7.3.1 = getelementptr inbounds double, double* %6, i64 3
  %10 = load double, double* %arrayidx7.3.1, align 8
  %arrayidx.2 = getelementptr inbounds double*, double** %0, i64 2
  %11 = load double*, double** %arrayidx.2, align 8
  %12 = load double, double* %11, align 8
  %arrayidx7.1.2 = getelementptr inbounds double, double* %11, i64 1
  %13 = load double, double* %arrayidx7.1.2, align 8
  %arrayidx7.2.2 = getelementptr inbounds double, double* %11, i64 2
  %14 = load double, double* %arrayidx7.2.2, align 8
  %arrayidx7.3.2 = getelementptr inbounds double, double* %11, i64 3
  %15 = load double, double* %arrayidx7.3.2, align 8
  %arrayidx.3 = getelementptr inbounds double*, double** %0, i64 3
  %16 = load double*, double** %arrayidx.3, align 8
  %17 = load double, double* %16, align 8
  %arrayidx7.1.3 = getelementptr inbounds double, double* %16, i64 1
  %18 = load double, double* %arrayidx7.1.3, align 8
  %arrayidx7.2.3 = getelementptr inbounds double, double* %16, i64 2
  %19 = load double, double* %arrayidx7.2.3, align 8
  %arrayidx7.3.3 = getelementptr inbounds double, double* %16, i64 3
  %20 = load double, double* %arrayidx7.3.3, align 8
  store i32 4, i32* @c, align 4
  store i32 4, i32* @b, align 4
  %21 = load i32, i32* @a, align 4
  %tobool = icmp eq i32 %21, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %add = fadd double %2, 0.000000e+00
  %add.1 = fadd double %add, %3
  %add.2 = fadd double %add.1, %4
  %add.3 = fadd double %add.2, %5
  %add.120 = fadd double %add.3, %7
  %add.1.1 = fadd double %add.120, %8
  %add.2.1 = fadd double %add.1.1, %9
  %add.3.1 = fadd double %add.2.1, %10
  %add.221 = fadd double %add.3.1, %12
  %add.1.2 = fadd double %add.221, %13
  %add.2.2 = fadd double %add.1.2, %14
  %add.3.2 = fadd double %add.2.2, %15
  %add.322 = fadd double %add.3.2, %17
  %add.1.3 = fadd double %add.322, %18
  %add.2.3 = fadd double %add.1.3, %19
  %add.3.3 = fadd double %add.2.3, %20
  %call11 = tail call i32 bitcast (i32 (...)* @h to i32 (double)*)(double %add.3.3) #2
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret i32 undef
}

declare i32 @g(...) #1

declare i32 @h(...) #1

