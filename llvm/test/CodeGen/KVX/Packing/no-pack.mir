# RUN: llc -mtriple kvx-kalray-cos --run-pass=kvx-load-store-packing -o - %s | FileCheck %s
#
# From C source code:
# void foo (unsigned long long int *A, unsigned long long int *B, unsigned TC) {
#   for (unsigned i = 0; i < TC; i++) A[i] = B[i + 3] + 10;
# }
#

--- |
  target datalayout = "e-S256-p:64:64-i1:8-i8:8-i16:16-i32:32-i64:64-v64:64-v128:128-v256:256-v512:256-v1024:256-f16:16-f32:32-f64:64-a:0:64-m:e-n32:64"
  target triple = "kvx-kalray-cos"
  
  ; Function Attrs: argmemonly mustprogress nofree noinline norecurse nosync nounwind uwtable
  define dso_local void @_Z3fooPyS_j(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #0 {
    %4 = icmp eq i32 %2, 0
    br i1 %4, label %.loopexit, label %5
  
  5:                                                ; preds = %3
    %6 = zext i32 %2 to i64
    %7 = add i32 %2, 2
    %8 = icmp ult i32 %7, 12
    br i1 %8, label %218, label %9
  
  9:                                                ; preds = %5
    %10 = ptrtoint ptr %0 to i64
    %11 = ptrtoint ptr %1 to i64
    %.neg5 = add i64 %10, -24
    %12 = sub i64 %.neg5, %11
    %13 = icmp ult i64 %12, 16
    br i1 %13, label %218, label %14
  
  14:                                               ; preds = %9
    %15 = and i64 %6, 4294967294
    %16 = add nsw i64 %15, -2
    %17 = lshr exact i64 %16, 1
    %18 = add nuw i64 %17, 1
    %19 = and i64 %18, 7
    %20 = icmp ult i64 %16, 14
    br i1 %20, label %.loopexit6, label %21
  
  21:                                               ; preds = %14
    %22 = add nsw i64 %17, -7
    %23 = lshr i64 %22, 3
    %24 = add nuw nsw i64 %23, 1
    %xtraiter = and i64 %24, 1
    %25 = icmp ult i64 %22, 8
    br i1 %25, label %.loopexit6.loopexit.unr-lcssa, label %.new
  
  .new:                                             ; preds = %21
    %unroll_iter = and i64 %24, 4611686018427387902
    %26 = add nsw i64 %unroll_iter, -2
    %27 = lshr i64 %26, 1
    %28 = add nuw i64 %27, 1
    br label %29
  
  29:                                               ; preds = %.split, %.new
    %lsr.iv29 = phi ptr [ %uglygep30, %.split ], [ %0, %.new ]
    %30 = phi i64 [ 0, %.new ], [ %100, %.split ]
    call void @llvm.set.loop.iterations.i64(i64 %28)
    %31 = and i64 %30, 4294967264
    %32 = or i64 %31, 3
    %33 = getelementptr inbounds i64, ptr %1, i64 %32
    %34 = load <2 x i64>, ptr %33, align 8, !tbaa !3
    %35 = add <2 x i64> %34, <i64 10, i64 10>
    store <2 x i64> %35, ptr %lsr.iv29, align 8, !tbaa !3
    %36 = or i64 %31, 5
    %37 = getelementptr inbounds i64, ptr %1, i64 %36
    %38 = load <2 x i64>, ptr %37, align 8, !tbaa !3
    %39 = add <2 x i64> %38, <i64 10, i64 10>
    %uglygep36 = getelementptr i8, ptr %lsr.iv29, i64 16
    store <2 x i64> %39, ptr %uglygep36, align 8, !tbaa !3
    %40 = or i64 %31, 7
    %41 = getelementptr inbounds i64, ptr %1, i64 %40
    %42 = load <2 x i64>, ptr %41, align 8, !tbaa !3
    %43 = add <2 x i64> %42, <i64 10, i64 10>
    %uglygep37 = getelementptr i8, ptr %lsr.iv29, i64 32
    store <2 x i64> %43, ptr %uglygep37, align 8, !tbaa !3
    %44 = or i64 %31, 9
    %45 = getelementptr inbounds i64, ptr %1, i64 %44
    %46 = load <2 x i64>, ptr %45, align 8, !tbaa !3
    %47 = add <2 x i64> %46, <i64 10, i64 10>
    %uglygep38 = getelementptr i8, ptr %lsr.iv29, i64 48
    store <2 x i64> %47, ptr %uglygep38, align 8, !tbaa !3
    %48 = or i64 %31, 11
    %49 = getelementptr inbounds i64, ptr %1, i64 %48
    %50 = load <2 x i64>, ptr %49, align 8, !tbaa !3
    %51 = add <2 x i64> %50, <i64 10, i64 10>
    %uglygep39 = getelementptr i8, ptr %lsr.iv29, i64 64
    store <2 x i64> %51, ptr %uglygep39, align 8, !tbaa !3
    %52 = or i64 %31, 13
    %53 = getelementptr inbounds i64, ptr %1, i64 %52
    %54 = load <2 x i64>, ptr %53, align 8, !tbaa !3
    %55 = add <2 x i64> %54, <i64 10, i64 10>
    %uglygep40 = getelementptr i8, ptr %lsr.iv29, i64 80
    store <2 x i64> %55, ptr %uglygep40, align 8, !tbaa !3
    %56 = or i64 %31, 15
    %57 = getelementptr inbounds i64, ptr %1, i64 %56
    %58 = load <2 x i64>, ptr %57, align 8, !tbaa !3
    %59 = add <2 x i64> %58, <i64 10, i64 10>
    %uglygep41 = getelementptr i8, ptr %lsr.iv29, i64 96
    store <2 x i64> %59, ptr %uglygep41, align 8, !tbaa !3
    %60 = and i64 %30, 4294967264
    %61 = or i64 %60, 17
    %62 = getelementptr inbounds i64, ptr %1, i64 %61
    %63 = load <2 x i64>, ptr %62, align 8, !tbaa !3
    %64 = add <2 x i64> %63, <i64 10, i64 10>
    %uglygep35 = getelementptr i8, ptr %lsr.iv29, i64 112
    store <2 x i64> %64, ptr %uglygep35, align 8, !tbaa !3
    %65 = add i64 %30, 16
    %66 = and i64 %65, 4294967280
    %67 = or i64 %66, 3
    %68 = getelementptr inbounds i64, ptr %1, i64 %67
    %69 = load <2 x i64>, ptr %68, align 8, !tbaa !3
    %70 = add <2 x i64> %69, <i64 10, i64 10>
    %uglygep32 = getelementptr i8, ptr %lsr.iv29, i64 128
    store <2 x i64> %70, ptr %uglygep32, align 8, !tbaa !3
    %71 = or i64 %66, 5
    %72 = getelementptr inbounds i64, ptr %1, i64 %71
    %73 = load <2 x i64>, ptr %72, align 8, !tbaa !3
    %74 = add <2 x i64> %73, <i64 10, i64 10>
    %uglygep33 = getelementptr i8, ptr %lsr.iv29, i64 144
    store <2 x i64> %74, ptr %uglygep33, align 8, !tbaa !3
    %75 = or i64 %66, 7
    %76 = getelementptr inbounds i64, ptr %1, i64 %75
    %77 = load <2 x i64>, ptr %76, align 8, !tbaa !3
    %78 = add <2 x i64> %77, <i64 10, i64 10>
    %uglygep34 = getelementptr i8, ptr %lsr.iv29, i64 160
    store <2 x i64> %78, ptr %uglygep34, align 8, !tbaa !3
    %79 = or i64 %66, 9
    %80 = getelementptr inbounds i64, ptr %1, i64 %79
    %81 = load <2 x i64>, ptr %80, align 8, !tbaa !3
    %82 = add <2 x i64> %81, <i64 10, i64 10>
    %uglygep42 = getelementptr i8, ptr %lsr.iv29, i64 176
    store <2 x i64> %82, ptr %uglygep42, align 8, !tbaa !3
    %83 = or i64 %66, 11
    %84 = getelementptr inbounds i64, ptr %1, i64 %83
    %85 = load <2 x i64>, ptr %84, align 8, !tbaa !3
    %86 = add <2 x i64> %85, <i64 10, i64 10>
    %uglygep43 = getelementptr i8, ptr %lsr.iv29, i64 192
    store <2 x i64> %86, ptr %uglygep43, align 8, !tbaa !3
    %87 = or i64 %66, 13
    %88 = getelementptr inbounds i64, ptr %1, i64 %87
    %89 = load <2 x i64>, ptr %88, align 8, !tbaa !3
    %90 = add <2 x i64> %89, <i64 10, i64 10>
    %uglygep44 = getelementptr i8, ptr %lsr.iv29, i64 208
    store <2 x i64> %90, ptr %uglygep44, align 8, !tbaa !3
    %91 = or i64 %66, 15
    %92 = getelementptr inbounds i64, ptr %1, i64 %91
    %93 = load <2 x i64>, ptr %92, align 8, !tbaa !3
    %94 = add <2 x i64> %93, <i64 10, i64 10>
    %uglygep45 = getelementptr i8, ptr %lsr.iv29, i64 224
    store <2 x i64> %94, ptr %uglygep45, align 8, !tbaa !3
    %95 = add i64 %30, 33
    %96 = and i64 %95, 4294967265
    %97 = getelementptr inbounds i64, ptr %1, i64 %96
    %98 = load <2 x i64>, ptr %97, align 8, !tbaa !3
    %99 = add <2 x i64> %98, <i64 10, i64 10>
    %uglygep31 = getelementptr i8, ptr %lsr.iv29, i64 240
    store <2 x i64> %99, ptr %uglygep31, align 8, !tbaa !3
    %100 = add i64 %30, 32
    %uglygep30 = getelementptr i8, ptr %lsr.iv29, i64 256
    br label %.split
  
  .split:                                           ; preds = %29
    %101 = call i64 @llvm.kvx.loopdoexit()
    %102 = icmp ult i64 %101, 1
    br i1 %102, label %29, label %.loopexit6.loopexit.unr-lcssa, !llvm.loop !7
  
  .loopexit6.loopexit.unr-lcssa:                    ; preds = %.split, %21
    %.lcssa.ph = phi i64 [ undef, %21 ], [ %100, %.split ]
    %.unr = phi i64 [ 0, %21 ], [ %100, %.split ]
    %lcmp.mod.not = icmp eq i64 %xtraiter, 0
    br i1 %lcmp.mod.not, label %.loopexit6, label %.loopexit6.loopexit.epilog-lcssa
  
  .loopexit6.loopexit.epilog-lcssa:                 ; preds = %.loopexit6.loopexit.unr-lcssa
    %103 = and i64 %.unr, 4294967280
    %104 = or i64 %103, 3
    %105 = getelementptr inbounds i64, ptr %1, i64 %104
    %106 = load <2 x i64>, ptr %105, align 8, !tbaa !3
    %107 = add <2 x i64> %106, <i64 10, i64 10>
    %108 = getelementptr inbounds i64, ptr %0, i64 %.unr
    store <2 x i64> %107, ptr %108, align 8, !tbaa !3
    %109 = or i64 %.unr, 2
    %110 = or i64 %103, 5
    %111 = getelementptr inbounds i64, ptr %1, i64 %110
    %112 = load <2 x i64>, ptr %111, align 8, !tbaa !3
    %113 = add <2 x i64> %112, <i64 10, i64 10>
    %114 = getelementptr inbounds i64, ptr %0, i64 %109
    store <2 x i64> %113, ptr %114, align 8, !tbaa !3
    %115 = or i64 %.unr, 4
    %116 = or i64 %103, 7
    %117 = getelementptr inbounds i64, ptr %1, i64 %116
    %118 = load <2 x i64>, ptr %117, align 8, !tbaa !3
    %119 = add <2 x i64> %118, <i64 10, i64 10>
    %120 = getelementptr inbounds i64, ptr %0, i64 %115
    store <2 x i64> %119, ptr %120, align 8, !tbaa !3
    %121 = or i64 %.unr, 6
    %122 = or i64 %103, 9
    %123 = getelementptr inbounds i64, ptr %1, i64 %122
    %124 = load <2 x i64>, ptr %123, align 8, !tbaa !3
    %125 = add <2 x i64> %124, <i64 10, i64 10>
    %126 = getelementptr inbounds i64, ptr %0, i64 %121
    store <2 x i64> %125, ptr %126, align 8, !tbaa !3
    %127 = or i64 %.unr, 8
    %128 = or i64 %103, 11
    %129 = getelementptr inbounds i64, ptr %1, i64 %128
    %130 = load <2 x i64>, ptr %129, align 8, !tbaa !3
    %131 = add <2 x i64> %130, <i64 10, i64 10>
    %132 = getelementptr inbounds i64, ptr %0, i64 %127
    store <2 x i64> %131, ptr %132, align 8, !tbaa !3
    %133 = or i64 %.unr, 10
    %134 = or i64 %103, 13
    %135 = getelementptr inbounds i64, ptr %1, i64 %134
    %136 = load <2 x i64>, ptr %135, align 8, !tbaa !3
    %137 = add <2 x i64> %136, <i64 10, i64 10>
    %138 = getelementptr inbounds i64, ptr %0, i64 %133
    store <2 x i64> %137, ptr %138, align 8, !tbaa !3
    %139 = or i64 %.unr, 12
    %140 = or i64 %103, 15
    %141 = getelementptr inbounds i64, ptr %1, i64 %140
    %142 = load <2 x i64>, ptr %141, align 8, !tbaa !3
    %143 = add <2 x i64> %142, <i64 10, i64 10>
    %144 = getelementptr inbounds i64, ptr %0, i64 %139
    store <2 x i64> %143, ptr %144, align 8, !tbaa !3
    %145 = or i64 %.unr, 14
    %146 = add nuw i64 %.unr, 17
    %147 = and i64 %146, 4294967281
    %148 = getelementptr inbounds i64, ptr %1, i64 %147
    %149 = load <2 x i64>, ptr %148, align 8, !tbaa !3
    %150 = add <2 x i64> %149, <i64 10, i64 10>
    %151 = getelementptr inbounds i64, ptr %0, i64 %145
    store <2 x i64> %150, ptr %151, align 8, !tbaa !3
    %152 = add nuw i64 %.unr, 16
    br label %.loopexit6
  
  .loopexit6:                                       ; preds = %.loopexit6.loopexit.epilog-lcssa, %.loopexit6.loopexit.unr-lcssa, %14
    %153 = phi i64 [ 0, %14 ], [ %.lcssa.ph, %.loopexit6.loopexit.unr-lcssa ], [ %152, %.loopexit6.loopexit.epilog-lcssa ]
    %154 = icmp eq i64 %19, 0
    br i1 %154, label %216, label %155
  
  155:                                              ; preds = %.loopexit6
    %156 = add nuw i64 %153, 3
    %157 = and i64 %156, 4294967295
    %158 = getelementptr inbounds i64, ptr %1, i64 %157
    %159 = load <2 x i64>, ptr %158, align 8, !tbaa !3
    %160 = add <2 x i64> %159, <i64 10, i64 10>
    %161 = getelementptr inbounds i64, ptr %0, i64 %153
    store <2 x i64> %160, ptr %161, align 8, !tbaa !3
    %162 = icmp eq i64 %19, 1
    br i1 %162, label %216, label %163
  
  163:                                              ; preds = %155
    %164 = add nuw i64 %153, 2
    %165 = add nuw i64 %153, 5
    %166 = and i64 %165, 4294967295
    %167 = getelementptr inbounds i64, ptr %1, i64 %166
    %168 = load <2 x i64>, ptr %167, align 8, !tbaa !3
    %169 = add <2 x i64> %168, <i64 10, i64 10>
    %170 = getelementptr inbounds i64, ptr %0, i64 %164
    store <2 x i64> %169, ptr %170, align 8, !tbaa !3
    %171 = icmp eq i64 %19, 2
    br i1 %171, label %216, label %172
  
  172:                                              ; preds = %163
    %173 = add nuw i64 %153, 4
    %174 = add nuw i64 %153, 7
    %175 = and i64 %174, 4294967295
    %176 = getelementptr inbounds i64, ptr %1, i64 %175
    %177 = load <2 x i64>, ptr %176, align 8, !tbaa !3
    %178 = add <2 x i64> %177, <i64 10, i64 10>
    %179 = getelementptr inbounds i64, ptr %0, i64 %173
    store <2 x i64> %178, ptr %179, align 8, !tbaa !3
    %180 = icmp eq i64 %19, 3
    br i1 %180, label %216, label %181
  
  181:                                              ; preds = %172
    %182 = add nuw i64 %153, 6
    %183 = add nuw i64 %153, 9
    %184 = and i64 %183, 4294967295
    %185 = getelementptr inbounds i64, ptr %1, i64 %184
    %186 = load <2 x i64>, ptr %185, align 8, !tbaa !3
    %187 = add <2 x i64> %186, <i64 10, i64 10>
    %188 = getelementptr inbounds i64, ptr %0, i64 %182
    store <2 x i64> %187, ptr %188, align 8, !tbaa !3
    %189 = icmp eq i64 %19, 4
    br i1 %189, label %216, label %190
  
  190:                                              ; preds = %181
    %191 = add nuw i64 %153, 8
    %192 = add nuw i64 %153, 11
    %193 = and i64 %192, 4294967295
    %194 = getelementptr inbounds i64, ptr %1, i64 %193
    %195 = load <2 x i64>, ptr %194, align 8, !tbaa !3
    %196 = add <2 x i64> %195, <i64 10, i64 10>
    %197 = getelementptr inbounds i64, ptr %0, i64 %191
    store <2 x i64> %196, ptr %197, align 8, !tbaa !3
    %198 = icmp eq i64 %19, 5
    br i1 %198, label %216, label %199
  
  199:                                              ; preds = %190
    %200 = add nuw i64 %153, 10
    %201 = add nuw i64 %153, 13
    %202 = and i64 %201, 4294967295
    %203 = getelementptr inbounds i64, ptr %1, i64 %202
    %204 = load <2 x i64>, ptr %203, align 8, !tbaa !3
    %205 = add <2 x i64> %204, <i64 10, i64 10>
    %206 = getelementptr inbounds i64, ptr %0, i64 %200
    store <2 x i64> %205, ptr %206, align 8, !tbaa !3
    %207 = icmp eq i64 %19, 6
    br i1 %207, label %216, label %208
  
  208:                                              ; preds = %199
    %209 = add nuw i64 %153, 12
    %210 = add nuw i64 %153, 15
    %211 = and i64 %210, 4294967295
    %212 = getelementptr inbounds i64, ptr %1, i64 %211
    %213 = load <2 x i64>, ptr %212, align 8, !tbaa !3
    %214 = add <2 x i64> %213, <i64 10, i64 10>
    %215 = getelementptr inbounds i64, ptr %0, i64 %209
    store <2 x i64> %214, ptr %215, align 8, !tbaa !3
    br label %216
  
  216:                                              ; preds = %155, %163, %172, %181, %190, %199, %208, %.loopexit6
    %217 = icmp eq i64 %15, %6
    br i1 %217, label %.loopexit, label %218
  
  218:                                              ; preds = %9, %5, %216
    %219 = phi i64 [ 0, %9 ], [ 0, %5 ], [ %15, %216 ]
    %220 = sub nsw i64 %6, %219
    %221 = xor i64 %219, -1
    %222 = add nsw i64 %221, %6
    %223 = and i64 %220, 7
    %224 = icmp eq i64 %223, 0
    br i1 %224, label %282, label %225
  
  225:                                              ; preds = %218
    %226 = add nuw nsw i64 %219, 3
    %227 = and i64 %226, 4294967295
    %228 = getelementptr inbounds i64, ptr %1, i64 %227
    %229 = load i64, ptr %228, align 8, !tbaa !3
    %230 = add i64 %229, 10
    %231 = getelementptr inbounds i64, ptr %0, i64 %219
    store i64 %230, ptr %231, align 8, !tbaa !3
    %232 = or i64 %219, 1
    %233 = icmp eq i64 %223, 1
    br i1 %233, label %282, label %234
  
  234:                                              ; preds = %225
    %235 = add nuw nsw i64 %219, 4
    %236 = and i64 %235, 4294967294
    %237 = getelementptr inbounds i64, ptr %1, i64 %236
    %238 = load i64, ptr %237, align 8, !tbaa !3
    %239 = add i64 %238, 10
    %240 = getelementptr inbounds i64, ptr %0, i64 %232
    store i64 %239, ptr %240, align 8, !tbaa !3
    %241 = add nuw nsw i64 %219, 2
    %242 = icmp eq i64 %223, 2
    br i1 %242, label %282, label %243
  
  243:                                              ; preds = %234
    %244 = add nuw nsw i64 %219, 5
    %245 = and i64 %244, 4294967295
    %246 = getelementptr inbounds i64, ptr %1, i64 %245
    %247 = load i64, ptr %246, align 8, !tbaa !3
    %248 = add i64 %247, 10
    %249 = getelementptr inbounds i64, ptr %0, i64 %241
    store i64 %248, ptr %249, align 8, !tbaa !3
    %250 = icmp eq i64 %223, 3
    br i1 %250, label %282, label %251
  
  251:                                              ; preds = %243
    %252 = add nuw nsw i64 %219, 6
    %253 = and i64 %252, 4294967294
    %254 = getelementptr inbounds i64, ptr %1, i64 %253
    %255 = load i64, ptr %254, align 8, !tbaa !3
    %256 = add i64 %255, 10
    %257 = getelementptr inbounds i64, ptr %0, i64 %226
    store i64 %256, ptr %257, align 8, !tbaa !3
    %258 = icmp eq i64 %223, 4
    br i1 %258, label %282, label %259
  
  259:                                              ; preds = %251
    %260 = add nuw nsw i64 %219, 7
    %261 = and i64 %260, 4294967295
    %262 = getelementptr inbounds i64, ptr %1, i64 %261
    %263 = load i64, ptr %262, align 8, !tbaa !3
    %264 = add i64 %263, 10
    %265 = getelementptr inbounds i64, ptr %0, i64 %235
    store i64 %264, ptr %265, align 8, !tbaa !3
    %266 = icmp eq i64 %223, 5
    br i1 %266, label %282, label %267
  
  267:                                              ; preds = %259
    %268 = add nuw nsw i64 %219, 8
    %269 = and i64 %268, 4294967294
    %270 = getelementptr inbounds i64, ptr %1, i64 %269
    %271 = load i64, ptr %270, align 8, !tbaa !3
    %272 = add i64 %271, 10
    %273 = getelementptr inbounds i64, ptr %0, i64 %244
    store i64 %272, ptr %273, align 8, !tbaa !3
    %274 = icmp eq i64 %223, 6
    br i1 %274, label %282, label %275
  
  275:                                              ; preds = %267
    %276 = add nuw nsw i64 %219, 9
    %277 = and i64 %276, 4294967295
    %278 = getelementptr inbounds i64, ptr %1, i64 %277
    %279 = load i64, ptr %278, align 8, !tbaa !3
    %280 = add i64 %279, 10
    %281 = getelementptr inbounds i64, ptr %0, i64 %252
    store i64 %280, ptr %281, align 8, !tbaa !3
    br label %282
  
  282:                                              ; preds = %225, %234, %243, %251, %259, %267, %275, %218
    %283 = phi i64 [ %219, %218 ], [ %232, %225 ], [ %241, %234 ], [ %226, %243 ], [ %235, %251 ], [ %244, %259 ], [ %252, %267 ], [ %260, %275 ]
    %284 = icmp ult i64 %222, 7
    br i1 %284, label %.loopexit, label %.preheader.preheader
  
  .preheader.preheader:                             ; preds = %282
    %285 = add nuw nsw i64 %283, 18
    %286 = sub i64 0, %6
    %287 = shl nuw nsw i64 %283, 3
    %uglygep = getelementptr i8, ptr %0, i64 %287
    br label %.preheader
  
  .loopexit:                                        ; preds = %.preheader, %.preheader.1, %282, %216, %3
    ret void
  
  .preheader:                                       ; preds = %.preheader.preheader, %.preheader.1
    %lsr.iv10 = phi ptr [ %uglygep, %.preheader.preheader ], [ %uglygep11, %.preheader.1 ]
    %lsr.iv = phi i64 [ %285, %.preheader.preheader ], [ %lsr.iv.next, %.preheader.1 ]
    %288 = add i64 %lsr.iv, -15
    %289 = and i64 %288, 4294967295
    %290 = getelementptr inbounds i64, ptr %1, i64 %289
    %291 = load i64, ptr %290, align 8, !tbaa !3
    %292 = add i64 %291, 10
    store i64 %292, ptr %lsr.iv10, align 8, !tbaa !3
    %293 = add i64 %lsr.iv, -14
    %294 = and i64 %293, 4294967295
    %295 = getelementptr inbounds i64, ptr %1, i64 %294
    %296 = load i64, ptr %295, align 8, !tbaa !3
    %297 = add i64 %296, 10
    %uglygep14 = getelementptr i8, ptr %lsr.iv10, i64 8
    store i64 %297, ptr %uglygep14, align 8, !tbaa !3
    %298 = add i64 %lsr.iv, -13
    %299 = and i64 %298, 4294967295
    %300 = getelementptr inbounds i64, ptr %1, i64 %299
    %301 = load i64, ptr %300, align 8, !tbaa !3
    %302 = add i64 %301, 10
    %uglygep19 = getelementptr i8, ptr %lsr.iv10, i64 16
    store i64 %302, ptr %uglygep19, align 8, !tbaa !3
    %303 = add i64 %lsr.iv, -12
    %304 = and i64 %303, 4294967295
    %305 = getelementptr inbounds i64, ptr %1, i64 %304
    %306 = load i64, ptr %305, align 8, !tbaa !3
    %307 = add i64 %306, 10
    %uglygep16 = getelementptr i8, ptr %lsr.iv10, i64 24
    store i64 %307, ptr %uglygep16, align 8, !tbaa !3
    %308 = add i64 %lsr.iv, -11
    %309 = and i64 %308, 4294967295
    %310 = getelementptr inbounds i64, ptr %1, i64 %309
    %311 = load i64, ptr %310, align 8, !tbaa !3
    %312 = add i64 %311, 10
    %uglygep18 = getelementptr i8, ptr %lsr.iv10, i64 32
    store i64 %312, ptr %uglygep18, align 8, !tbaa !3
    %313 = add i64 %lsr.iv, -10
    %314 = add i64 %286, %lsr.iv
    %315 = add i64 %314, 8
    %316 = and i64 %313, 4294967295
    %317 = getelementptr inbounds i64, ptr %1, i64 %316
    %318 = load i64, ptr %317, align 8, !tbaa !3
    %319 = add i64 %318, 10
    %uglygep21 = getelementptr i8, ptr %lsr.iv10, i64 40
    store i64 %319, ptr %uglygep21, align 8, !tbaa !3
    %320 = add i64 %lsr.iv, -9
    %321 = and i64 %320, 4294967295
    %322 = getelementptr inbounds i64, ptr %1, i64 %321
    %323 = load i64, ptr %322, align 8, !tbaa !3
    %324 = add i64 %323, 10
    %uglygep23 = getelementptr i8, ptr %lsr.iv10, i64 48
    store i64 %324, ptr %uglygep23, align 8, !tbaa !3
    %325 = add i64 %lsr.iv, -8
    %326 = and i64 %325, 4294967295
    %327 = getelementptr inbounds i64, ptr %1, i64 %326
    %328 = load i64, ptr %327, align 8, !tbaa !3
    %329 = add i64 %328, 10
    %uglygep25 = getelementptr i8, ptr %lsr.iv10, i64 56
    store i64 %329, ptr %uglygep25, align 8, !tbaa !3
    %330 = icmp eq i64 %315, 18
    br i1 %330, label %.loopexit, label %.preheader.1, !llvm.loop !10
  
  .preheader.1:                                     ; preds = %.preheader
    %331 = add i64 %lsr.iv, -7
    %332 = and i64 %331, 4294967295
    %333 = getelementptr inbounds i64, ptr %1, i64 %332
    %334 = load i64, ptr %333, align 8, !tbaa !3
    %335 = add i64 %334, 10
    %uglygep12 = getelementptr i8, ptr %lsr.iv10, i64 64
    store i64 %335, ptr %uglygep12, align 8, !tbaa !3
    %336 = add i64 %lsr.iv, -6
    %337 = and i64 %336, 4294967295
    %338 = getelementptr inbounds i64, ptr %1, i64 %337
    %339 = load i64, ptr %338, align 8, !tbaa !3
    %340 = add i64 %339, 10
    %uglygep24 = getelementptr i8, ptr %lsr.iv10, i64 72
    store i64 %340, ptr %uglygep24, align 8, !tbaa !3
    %341 = add i64 %lsr.iv, -5
    %342 = and i64 %341, 4294967295
    %343 = getelementptr inbounds i64, ptr %1, i64 %342
    %344 = load i64, ptr %343, align 8, !tbaa !3
    %345 = add i64 %344, 10
    %uglygep20 = getelementptr i8, ptr %lsr.iv10, i64 80
    store i64 %345, ptr %uglygep20, align 8, !tbaa !3
    %346 = add i64 %lsr.iv, -4
    %347 = and i64 %346, 4294967295
    %348 = getelementptr inbounds i64, ptr %1, i64 %347
    %349 = load i64, ptr %348, align 8, !tbaa !3
    %350 = add i64 %349, 10
    %uglygep26 = getelementptr i8, ptr %lsr.iv10, i64 88
    store i64 %350, ptr %uglygep26, align 8, !tbaa !3
    %351 = add i64 %lsr.iv, -3
    %352 = and i64 %351, 4294967295
    %353 = getelementptr inbounds i64, ptr %1, i64 %352
    %354 = load i64, ptr %353, align 8, !tbaa !3
    %355 = add i64 %354, 10
    %uglygep22 = getelementptr i8, ptr %lsr.iv10, i64 96
    store i64 %355, ptr %uglygep22, align 8, !tbaa !3
    %356 = add i64 %lsr.iv, -2
    %357 = and i64 %356, 4294967295
    %358 = getelementptr inbounds i64, ptr %1, i64 %357
    %359 = load i64, ptr %358, align 8, !tbaa !3
    %360 = add i64 %359, 10
    %uglygep17 = getelementptr i8, ptr %lsr.iv10, i64 104
    store i64 %360, ptr %uglygep17, align 8, !tbaa !3
    %361 = add i64 %lsr.iv, -1
    %362 = and i64 %361, 4294967295
    %363 = getelementptr inbounds i64, ptr %1, i64 %362
    %364 = load i64, ptr %363, align 8, !tbaa !3
    %365 = add i64 %364, 10
    %uglygep15 = getelementptr i8, ptr %lsr.iv10, i64 112
    store i64 %365, ptr %uglygep15, align 8, !tbaa !3
    %366 = and i64 %lsr.iv, 4294967295
    %367 = getelementptr inbounds i64, ptr %1, i64 %366
    %368 = load i64, ptr %367, align 8, !tbaa !3
    %369 = add i64 %368, 10
    %uglygep13 = getelementptr i8, ptr %lsr.iv10, i64 120
    store i64 %369, ptr %uglygep13, align 8, !tbaa !3
    %lsr.iv.next = add i64 %lsr.iv, 16
    %370 = add i64 %286, %lsr.iv.next
    %uglygep11 = getelementptr i8, ptr %lsr.iv10, i64 128
    %371 = icmp eq i64 %370, 18
    br i1 %371, label %.loopexit, label %.preheader, !llvm.loop !10
  }
  
  declare void @_Unwind_SjLj_Register(ptr)
  
  declare void @_Unwind_SjLj_Unregister(ptr)
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
  declare ptr @llvm.frameaddress.p0(i32 immarg) #1
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn
  declare ptr @llvm.stacksave() #2
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn
  declare void @llvm.stackrestore(ptr) #2
  
  ; Function Attrs: nounwind
  declare void @llvm.eh.sjlj.setup.dispatch() #3
  
  ; Function Attrs: nounwind readnone
  declare ptr @llvm.eh.sjlj.lsda() #4
  
  ; Function Attrs: nounwind readnone
  declare void @llvm.eh.sjlj.callsite(i32 immarg) #4
  
  ; Function Attrs: nounwind
  declare void @llvm.eh.sjlj.functioncontext(ptr) #3
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare void @llvm.set.loop.iterations.i64(i64) #5
  
  ; Function Attrs: nocallback noduplicate nofree nosync nounwind willreturn
  declare i1 @llvm.loop.decrement.i64(i64) #5
  
  ; Function Attrs: noduplicate nounwind
  declare i64 @llvm.kvx.loopdoexit() #6
  
  attributes #0 = { argmemonly mustprogress nofree noinline norecurse nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
  attributes #1 = { nocallback nofree nosync nounwind readnone willreturn }
  attributes #2 = { nocallback nofree nosync nounwind willreturn }
  attributes #3 = { nounwind }
  attributes #4 = { nounwind readnone }
  attributes #5 = { nocallback noduplicate nofree nosync nounwind willreturn }
  attributes #6 = { noduplicate nounwind }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"uwtable", i32 2}
  !2 = !{!"Kalray clang version 15.0.7"}
  !3 = !{!4, !4, i64 0}
  !4 = !{!"long long", !5, i64 0}
  !5 = !{!"omnipotent char", !6, i64 0}
  !6 = !{!"Simple C++ TBAA"}
  !7 = distinct !{!7, !8, !9}
  !8 = !{!"llvm.loop.mustprogress"}
  !9 = !{!"llvm.loop.isvectorized", i32 1}
  !10 = distinct !{!10, !8, !11, !9}
  !11 = !{!"llvm.loop.remainder"}

...
---
name:            _Z3fooPyS_j
alignment:       64
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: singlereg, preferred-register: '' }
  - { id: 1, class: singlereg, preferred-register: '' }
  - { id: 2, class: singlereg, preferred-register: '' }
  - { id: 3, class: singlereg, preferred-register: '' }
  - { id: 4, class: singlereg, preferred-register: '' }
  - { id: 5, class: singlereg, preferred-register: '' }
  - { id: 6, class: singlereg, preferred-register: '' }
  - { id: 7, class: singlereg, preferred-register: '' }
  - { id: 8, class: singlereg, preferred-register: '' }
  - { id: 9, class: singlereg, preferred-register: '' }
  - { id: 10, class: singlereg, preferred-register: '' }
  - { id: 11, class: singlereg, preferred-register: '' }
  - { id: 12, class: singlereg, preferred-register: '' }
  - { id: 13, class: singlereg, preferred-register: '' }
  - { id: 14, class: singlereg, preferred-register: '' }
  - { id: 15, class: singlereg, preferred-register: '' }
  - { id: 16, class: singlereg, preferred-register: '' }
  - { id: 17, class: singlereg, preferred-register: '' }
  - { id: 18, class: singlereg, preferred-register: '' }
  - { id: 19, class: singlereg, preferred-register: '' }
  - { id: 20, class: singlereg, preferred-register: '' }
  - { id: 21, class: singlereg, preferred-register: '' }
  - { id: 22, class: singlereg, preferred-register: '' }
  - { id: 23, class: singlereg, preferred-register: '' }
  - { id: 24, class: singlereg, preferred-register: '' }
  - { id: 25, class: singlereg, preferred-register: '' }
  - { id: 26, class: singlereg, preferred-register: '' }
  - { id: 27, class: singlereg, preferred-register: '' }
  - { id: 28, class: singlereg, preferred-register: '' }
  - { id: 29, class: singlereg, preferred-register: '' }
  - { id: 30, class: singlereg, preferred-register: '' }
  - { id: 31, class: singlereg, preferred-register: '' }
  - { id: 32, class: singlereg, preferred-register: '' }
  - { id: 33, class: singlereg, preferred-register: '' }
  - { id: 34, class: singlereg, preferred-register: '' }
  - { id: 35, class: singlereg, preferred-register: '' }
  - { id: 36, class: singlereg, preferred-register: '' }
  - { id: 37, class: singlereg, preferred-register: '' }
  - { id: 38, class: singlereg, preferred-register: '' }
  - { id: 39, class: singlereg, preferred-register: '' }
  - { id: 40, class: singlereg, preferred-register: '' }
  - { id: 41, class: singlereg, preferred-register: '' }
  - { id: 42, class: singlereg, preferred-register: '' }
  - { id: 43, class: singlereg, preferred-register: '' }
  - { id: 44, class: singlereg, preferred-register: '' }
  - { id: 45, class: singlereg, preferred-register: '' }
  - { id: 46, class: singlereg, preferred-register: '' }
  - { id: 47, class: singlereg, preferred-register: '' }
  - { id: 48, class: singlereg, preferred-register: '' }
  - { id: 49, class: singlereg, preferred-register: '' }
  - { id: 50, class: singlereg, preferred-register: '' }
  - { id: 51, class: singlereg, preferred-register: '' }
  - { id: 52, class: singlereg, preferred-register: '' }
  - { id: 53, class: singlereg, preferred-register: '' }
  - { id: 54, class: singlereg, preferred-register: '' }
  - { id: 55, class: singlereg, preferred-register: '' }
  - { id: 56, class: singlereg, preferred-register: '' }
  - { id: 57, class: singlereg, preferred-register: '' }
  - { id: 58, class: pairedreg, preferred-register: '' }
  - { id: 59, class: singlereg, preferred-register: '' }
  - { id: 60, class: singlereg, preferred-register: '' }
  - { id: 61, class: pairedreg, preferred-register: '' }
  - { id: 62, class: pairedreg, preferred-register: '' }
  - { id: 63, class: singlereg, preferred-register: '' }
  - { id: 64, class: singlereg, preferred-register: '' }
  - { id: 65, class: pairedreg, preferred-register: '' }
  - { id: 66, class: pairedreg, preferred-register: '' }
  - { id: 67, class: singlereg, preferred-register: '' }
  - { id: 68, class: singlereg, preferred-register: '' }
  - { id: 69, class: pairedreg, preferred-register: '' }
  - { id: 70, class: pairedreg, preferred-register: '' }
  - { id: 71, class: singlereg, preferred-register: '' }
  - { id: 72, class: singlereg, preferred-register: '' }
  - { id: 73, class: pairedreg, preferred-register: '' }
  - { id: 74, class: pairedreg, preferred-register: '' }
  - { id: 75, class: singlereg, preferred-register: '' }
  - { id: 76, class: singlereg, preferred-register: '' }
  - { id: 77, class: pairedreg, preferred-register: '' }
  - { id: 78, class: pairedreg, preferred-register: '' }
  - { id: 79, class: singlereg, preferred-register: '' }
  - { id: 80, class: singlereg, preferred-register: '' }
  - { id: 81, class: pairedreg, preferred-register: '' }
  - { id: 82, class: pairedreg, preferred-register: '' }
  - { id: 83, class: singlereg, preferred-register: '' }
  - { id: 84, class: singlereg, preferred-register: '' }
  - { id: 85, class: pairedreg, preferred-register: '' }
  - { id: 86, class: pairedreg, preferred-register: '' }
  - { id: 87, class: singlereg, preferred-register: '' }
  - { id: 88, class: singlereg, preferred-register: '' }
  - { id: 89, class: pairedreg, preferred-register: '' }
  - { id: 90, class: pairedreg, preferred-register: '' }
  - { id: 91, class: singlereg, preferred-register: '' }
  - { id: 92, class: singlereg, preferred-register: '' }
  - { id: 93, class: pairedreg, preferred-register: '' }
  - { id: 94, class: pairedreg, preferred-register: '' }
  - { id: 95, class: singlereg, preferred-register: '' }
  - { id: 96, class: singlereg, preferred-register: '' }
  - { id: 97, class: pairedreg, preferred-register: '' }
  - { id: 98, class: pairedreg, preferred-register: '' }
  - { id: 99, class: singlereg, preferred-register: '' }
  - { id: 100, class: singlereg, preferred-register: '' }
  - { id: 101, class: pairedreg, preferred-register: '' }
  - { id: 102, class: pairedreg, preferred-register: '' }
  - { id: 103, class: singlereg, preferred-register: '' }
  - { id: 104, class: singlereg, preferred-register: '' }
  - { id: 105, class: pairedreg, preferred-register: '' }
  - { id: 106, class: pairedreg, preferred-register: '' }
  - { id: 107, class: singlereg, preferred-register: '' }
  - { id: 108, class: singlereg, preferred-register: '' }
  - { id: 109, class: pairedreg, preferred-register: '' }
  - { id: 110, class: pairedreg, preferred-register: '' }
  - { id: 111, class: singlereg, preferred-register: '' }
  - { id: 112, class: singlereg, preferred-register: '' }
  - { id: 113, class: pairedreg, preferred-register: '' }
  - { id: 114, class: pairedreg, preferred-register: '' }
  - { id: 115, class: singlereg, preferred-register: '' }
  - { id: 116, class: singlereg, preferred-register: '' }
  - { id: 117, class: pairedreg, preferred-register: '' }
  - { id: 118, class: pairedreg, preferred-register: '' }
  - { id: 119, class: singlereg, preferred-register: '' }
  - { id: 120, class: singlereg, preferred-register: '' }
  - { id: 121, class: pairedreg, preferred-register: '' }
  - { id: 122, class: singlereg, preferred-register: '' }
  - { id: 123, class: singlereg, preferred-register: '' }
  - { id: 124, class: singlereg, preferred-register: '' }
  - { id: 125, class: pairedreg, preferred-register: '' }
  - { id: 126, class: singlereg, preferred-register: '' }
  - { id: 127, class: singlereg, preferred-register: '' }
  - { id: 128, class: pairedreg, preferred-register: '' }
  - { id: 129, class: pairedreg, preferred-register: '' }
  - { id: 130, class: singlereg, preferred-register: '' }
  - { id: 131, class: singlereg, preferred-register: '' }
  - { id: 132, class: pairedreg, preferred-register: '' }
  - { id: 133, class: pairedreg, preferred-register: '' }
  - { id: 134, class: singlereg, preferred-register: '' }
  - { id: 135, class: singlereg, preferred-register: '' }
  - { id: 136, class: pairedreg, preferred-register: '' }
  - { id: 137, class: pairedreg, preferred-register: '' }
  - { id: 138, class: singlereg, preferred-register: '' }
  - { id: 139, class: singlereg, preferred-register: '' }
  - { id: 140, class: pairedreg, preferred-register: '' }
  - { id: 141, class: pairedreg, preferred-register: '' }
  - { id: 142, class: singlereg, preferred-register: '' }
  - { id: 143, class: singlereg, preferred-register: '' }
  - { id: 144, class: pairedreg, preferred-register: '' }
  - { id: 145, class: pairedreg, preferred-register: '' }
  - { id: 146, class: singlereg, preferred-register: '' }
  - { id: 147, class: singlereg, preferred-register: '' }
  - { id: 148, class: pairedreg, preferred-register: '' }
  - { id: 149, class: pairedreg, preferred-register: '' }
  - { id: 150, class: singlereg, preferred-register: '' }
  - { id: 151, class: singlereg, preferred-register: '' }
  - { id: 152, class: pairedreg, preferred-register: '' }
  - { id: 153, class: pairedreg, preferred-register: '' }
  - { id: 154, class: singlereg, preferred-register: '' }
  - { id: 155, class: singlereg, preferred-register: '' }
  - { id: 156, class: pairedreg, preferred-register: '' }
  - { id: 157, class: pairedreg, preferred-register: '' }
  - { id: 158, class: singlereg, preferred-register: '' }
  - { id: 159, class: singlereg, preferred-register: '' }
  - { id: 160, class: pairedreg, preferred-register: '' }
  - { id: 161, class: pairedreg, preferred-register: '' }
  - { id: 162, class: singlereg, preferred-register: '' }
  - { id: 163, class: singlereg, preferred-register: '' }
  - { id: 164, class: pairedreg, preferred-register: '' }
  - { id: 165, class: pairedreg, preferred-register: '' }
  - { id: 166, class: singlereg, preferred-register: '' }
  - { id: 167, class: singlereg, preferred-register: '' }
  - { id: 168, class: pairedreg, preferred-register: '' }
  - { id: 169, class: pairedreg, preferred-register: '' }
  - { id: 170, class: singlereg, preferred-register: '' }
  - { id: 171, class: singlereg, preferred-register: '' }
  - { id: 172, class: pairedreg, preferred-register: '' }
  - { id: 173, class: pairedreg, preferred-register: '' }
  - { id: 174, class: singlereg, preferred-register: '' }
  - { id: 175, class: singlereg, preferred-register: '' }
  - { id: 176, class: pairedreg, preferred-register: '' }
  - { id: 177, class: pairedreg, preferred-register: '' }
  - { id: 178, class: singlereg, preferred-register: '' }
  - { id: 179, class: singlereg, preferred-register: '' }
  - { id: 180, class: pairedreg, preferred-register: '' }
  - { id: 181, class: singlereg, preferred-register: '' }
  - { id: 182, class: singlereg, preferred-register: '' }
  - { id: 183, class: singlereg, preferred-register: '' }
  - { id: 184, class: pairedreg, preferred-register: '' }
  - { id: 185, class: singlereg, preferred-register: '' }
  - { id: 186, class: singlereg, preferred-register: '' }
  - { id: 187, class: pairedreg, preferred-register: '' }
  - { id: 188, class: pairedreg, preferred-register: '' }
  - { id: 189, class: singlereg, preferred-register: '' }
  - { id: 190, class: singlereg, preferred-register: '' }
  - { id: 191, class: pairedreg, preferred-register: '' }
  - { id: 192, class: singlereg, preferred-register: '' }
  - { id: 193, class: singlereg, preferred-register: '' }
  - { id: 194, class: singlereg, preferred-register: '' }
  - { id: 195, class: pairedreg, preferred-register: '' }
  - { id: 196, class: singlereg, preferred-register: '' }
  - { id: 197, class: singlereg, preferred-register: '' }
  - { id: 198, class: pairedreg, preferred-register: '' }
  - { id: 199, class: pairedreg, preferred-register: '' }
  - { id: 200, class: singlereg, preferred-register: '' }
  - { id: 201, class: singlereg, preferred-register: '' }
  - { id: 202, class: pairedreg, preferred-register: '' }
  - { id: 203, class: singlereg, preferred-register: '' }
  - { id: 204, class: pairedreg, preferred-register: '' }
  - { id: 205, class: singlereg, preferred-register: '' }
  - { id: 206, class: singlereg, preferred-register: '' }
  - { id: 207, class: pairedreg, preferred-register: '' }
  - { id: 208, class: pairedreg, preferred-register: '' }
  - { id: 209, class: singlereg, preferred-register: '' }
  - { id: 210, class: singlereg, preferred-register: '' }
  - { id: 211, class: pairedreg, preferred-register: '' }
  - { id: 212, class: singlereg, preferred-register: '' }
  - { id: 213, class: pairedreg, preferred-register: '' }
  - { id: 214, class: singlereg, preferred-register: '' }
  - { id: 215, class: singlereg, preferred-register: '' }
  - { id: 216, class: pairedreg, preferred-register: '' }
  - { id: 217, class: pairedreg, preferred-register: '' }
  - { id: 218, class: singlereg, preferred-register: '' }
  - { id: 219, class: singlereg, preferred-register: '' }
  - { id: 220, class: pairedreg, preferred-register: '' }
  - { id: 221, class: singlereg, preferred-register: '' }
  - { id: 222, class: pairedreg, preferred-register: '' }
  - { id: 223, class: singlereg, preferred-register: '' }
  - { id: 224, class: singlereg, preferred-register: '' }
  - { id: 225, class: pairedreg, preferred-register: '' }
  - { id: 226, class: pairedreg, preferred-register: '' }
  - { id: 227, class: singlereg, preferred-register: '' }
  - { id: 228, class: singlereg, preferred-register: '' }
  - { id: 229, class: pairedreg, preferred-register: '' }
  - { id: 230, class: singlereg, preferred-register: '' }
  - { id: 231, class: pairedreg, preferred-register: '' }
  - { id: 232, class: singlereg, preferred-register: '' }
  - { id: 233, class: singlereg, preferred-register: '' }
  - { id: 234, class: pairedreg, preferred-register: '' }
  - { id: 235, class: pairedreg, preferred-register: '' }
  - { id: 236, class: singlereg, preferred-register: '' }
  - { id: 237, class: singlereg, preferred-register: '' }
  - { id: 238, class: pairedreg, preferred-register: '' }
  - { id: 239, class: singlereg, preferred-register: '' }
  - { id: 240, class: pairedreg, preferred-register: '' }
  - { id: 241, class: singlereg, preferred-register: '' }
  - { id: 242, class: singlereg, preferred-register: '' }
  - { id: 243, class: pairedreg, preferred-register: '' }
  - { id: 244, class: pairedreg, preferred-register: '' }
  - { id: 245, class: singlereg, preferred-register: '' }
  - { id: 246, class: singlereg, preferred-register: '' }
  - { id: 247, class: pairedreg, preferred-register: '' }
  - { id: 248, class: singlereg, preferred-register: '' }
  - { id: 249, class: pairedreg, preferred-register: '' }
  - { id: 250, class: singlereg, preferred-register: '' }
  - { id: 251, class: singlereg, preferred-register: '' }
  - { id: 252, class: pairedreg, preferred-register: '' }
  - { id: 253, class: pairedreg, preferred-register: '' }
  - { id: 254, class: singlereg, preferred-register: '' }
  - { id: 255, class: singlereg, preferred-register: '' }
  - { id: 256, class: pairedreg, preferred-register: '' }
  - { id: 257, class: singlereg, preferred-register: '' }
  - { id: 258, class: singlereg, preferred-register: '' }
  - { id: 259, class: singlereg, preferred-register: '' }
  - { id: 260, class: singlereg, preferred-register: '' }
  - { id: 261, class: pairedreg, preferred-register: '' }
  - { id: 262, class: singlereg, preferred-register: '' }
  - { id: 263, class: singlereg, preferred-register: '' }
  - { id: 264, class: pairedreg, preferred-register: '' }
  - { id: 265, class: pairedreg, preferred-register: '' }
  - { id: 266, class: singlereg, preferred-register: '' }
  - { id: 267, class: singlereg, preferred-register: '' }
  - { id: 268, class: pairedreg, preferred-register: '' }
  - { id: 269, class: singlereg, preferred-register: '' }
  - { id: 270, class: singlereg, preferred-register: '' }
  - { id: 271, class: singlereg, preferred-register: '' }
  - { id: 272, class: singlereg, preferred-register: '' }
  - { id: 273, class: pairedreg, preferred-register: '' }
  - { id: 274, class: singlereg, preferred-register: '' }
  - { id: 275, class: singlereg, preferred-register: '' }
  - { id: 276, class: pairedreg, preferred-register: '' }
  - { id: 277, class: pairedreg, preferred-register: '' }
  - { id: 278, class: singlereg, preferred-register: '' }
  - { id: 279, class: singlereg, preferred-register: '' }
  - { id: 280, class: pairedreg, preferred-register: '' }
  - { id: 281, class: singlereg, preferred-register: '' }
  - { id: 282, class: singlereg, preferred-register: '' }
  - { id: 283, class: singlereg, preferred-register: '' }
  - { id: 284, class: singlereg, preferred-register: '' }
  - { id: 285, class: singlereg, preferred-register: '' }
  - { id: 286, class: pairedreg, preferred-register: '' }
  - { id: 287, class: singlereg, preferred-register: '' }
  - { id: 288, class: singlereg, preferred-register: '' }
  - { id: 289, class: pairedreg, preferred-register: '' }
  - { id: 290, class: pairedreg, preferred-register: '' }
  - { id: 291, class: singlereg, preferred-register: '' }
  - { id: 292, class: singlereg, preferred-register: '' }
  - { id: 293, class: pairedreg, preferred-register: '' }
  - { id: 294, class: singlereg, preferred-register: '' }
  - { id: 295, class: singlereg, preferred-register: '' }
  - { id: 296, class: singlereg, preferred-register: '' }
  - { id: 297, class: singlereg, preferred-register: '' }
  - { id: 298, class: singlereg, preferred-register: '' }
  - { id: 299, class: pairedreg, preferred-register: '' }
  - { id: 300, class: singlereg, preferred-register: '' }
  - { id: 301, class: singlereg, preferred-register: '' }
  - { id: 302, class: pairedreg, preferred-register: '' }
  - { id: 303, class: pairedreg, preferred-register: '' }
  - { id: 304, class: singlereg, preferred-register: '' }
  - { id: 305, class: singlereg, preferred-register: '' }
  - { id: 306, class: pairedreg, preferred-register: '' }
  - { id: 307, class: singlereg, preferred-register: '' }
  - { id: 308, class: singlereg, preferred-register: '' }
  - { id: 309, class: singlereg, preferred-register: '' }
  - { id: 310, class: singlereg, preferred-register: '' }
  - { id: 311, class: singlereg, preferred-register: '' }
  - { id: 312, class: pairedreg, preferred-register: '' }
  - { id: 313, class: singlereg, preferred-register: '' }
  - { id: 314, class: singlereg, preferred-register: '' }
  - { id: 315, class: pairedreg, preferred-register: '' }
  - { id: 316, class: pairedreg, preferred-register: '' }
  - { id: 317, class: singlereg, preferred-register: '' }
  - { id: 318, class: singlereg, preferred-register: '' }
  - { id: 319, class: pairedreg, preferred-register: '' }
  - { id: 320, class: singlereg, preferred-register: '' }
  - { id: 321, class: singlereg, preferred-register: '' }
  - { id: 322, class: singlereg, preferred-register: '' }
  - { id: 323, class: singlereg, preferred-register: '' }
  - { id: 324, class: singlereg, preferred-register: '' }
  - { id: 325, class: pairedreg, preferred-register: '' }
  - { id: 326, class: singlereg, preferred-register: '' }
  - { id: 327, class: singlereg, preferred-register: '' }
  - { id: 328, class: pairedreg, preferred-register: '' }
  - { id: 329, class: pairedreg, preferred-register: '' }
  - { id: 330, class: singlereg, preferred-register: '' }
  - { id: 331, class: singlereg, preferred-register: '' }
  - { id: 332, class: pairedreg, preferred-register: '' }
  - { id: 333, class: singlereg, preferred-register: '' }
  - { id: 334, class: singlereg, preferred-register: '' }
  - { id: 335, class: singlereg, preferred-register: '' }
  - { id: 336, class: singlereg, preferred-register: '' }
  - { id: 337, class: singlereg, preferred-register: '' }
  - { id: 338, class: pairedreg, preferred-register: '' }
  - { id: 339, class: singlereg, preferred-register: '' }
  - { id: 340, class: singlereg, preferred-register: '' }
  - { id: 341, class: pairedreg, preferred-register: '' }
  - { id: 342, class: pairedreg, preferred-register: '' }
  - { id: 343, class: singlereg, preferred-register: '' }
  - { id: 344, class: singlereg, preferred-register: '' }
  - { id: 345, class: pairedreg, preferred-register: '' }
  - { id: 346, class: singlereg, preferred-register: '' }
  - { id: 347, class: singlereg, preferred-register: '' }
  - { id: 348, class: singlereg, preferred-register: '' }
  - { id: 349, class: singlereg, preferred-register: '' }
  - { id: 350, class: singlereg, preferred-register: '' }
  - { id: 351, class: pairedreg, preferred-register: '' }
  - { id: 352, class: singlereg, preferred-register: '' }
  - { id: 353, class: singlereg, preferred-register: '' }
  - { id: 354, class: pairedreg, preferred-register: '' }
  - { id: 355, class: pairedreg, preferred-register: '' }
  - { id: 356, class: singlereg, preferred-register: '' }
  - { id: 357, class: singlereg, preferred-register: '' }
  - { id: 358, class: pairedreg, preferred-register: '' }
  - { id: 359, class: singlereg, preferred-register: '' }
  - { id: 360, class: singlereg, preferred-register: '' }
  - { id: 361, class: singlereg, preferred-register: '' }
  - { id: 362, class: singlereg, preferred-register: '' }
  - { id: 363, class: singlereg, preferred-register: '' }
  - { id: 364, class: singlereg, preferred-register: '' }
  - { id: 365, class: singlereg, preferred-register: '' }
  - { id: 366, class: singlereg, preferred-register: '' }
  - { id: 367, class: singlereg, preferred-register: '' }
  - { id: 368, class: singlereg, preferred-register: '' }
  - { id: 369, class: singlereg, preferred-register: '' }
  - { id: 370, class: singlereg, preferred-register: '' }
  - { id: 371, class: singlereg, preferred-register: '' }
  - { id: 372, class: singlereg, preferred-register: '' }
  - { id: 373, class: singlereg, preferred-register: '' }
  - { id: 374, class: singlereg, preferred-register: '' }
  - { id: 375, class: singlereg, preferred-register: '' }
  - { id: 376, class: singlereg, preferred-register: '' }
  - { id: 377, class: singlereg, preferred-register: '' }
  - { id: 378, class: singlereg, preferred-register: '' }
  - { id: 379, class: singlereg, preferred-register: '' }
  - { id: 380, class: singlereg, preferred-register: '' }
  - { id: 381, class: singlereg, preferred-register: '' }
  - { id: 382, class: singlereg, preferred-register: '' }
  - { id: 383, class: singlereg, preferred-register: '' }
  - { id: 384, class: singlereg, preferred-register: '' }
  - { id: 385, class: singlereg, preferred-register: '' }
  - { id: 386, class: singlereg, preferred-register: '' }
  - { id: 387, class: singlereg, preferred-register: '' }
  - { id: 388, class: singlereg, preferred-register: '' }
  - { id: 389, class: singlereg, preferred-register: '' }
  - { id: 390, class: singlereg, preferred-register: '' }
  - { id: 391, class: singlereg, preferred-register: '' }
  - { id: 392, class: singlereg, preferred-register: '' }
  - { id: 393, class: singlereg, preferred-register: '' }
  - { id: 394, class: singlereg, preferred-register: '' }
  - { id: 395, class: singlereg, preferred-register: '' }
  - { id: 396, class: singlereg, preferred-register: '' }
  - { id: 397, class: singlereg, preferred-register: '' }
  - { id: 398, class: singlereg, preferred-register: '' }
  - { id: 399, class: singlereg, preferred-register: '' }
  - { id: 400, class: singlereg, preferred-register: '' }
  - { id: 401, class: singlereg, preferred-register: '' }
  - { id: 402, class: singlereg, preferred-register: '' }
  - { id: 403, class: singlereg, preferred-register: '' }
  - { id: 404, class: singlereg, preferred-register: '' }
  - { id: 405, class: singlereg, preferred-register: '' }
  - { id: 406, class: singlereg, preferred-register: '' }
  - { id: 407, class: singlereg, preferred-register: '' }
  - { id: 408, class: singlereg, preferred-register: '' }
  - { id: 409, class: singlereg, preferred-register: '' }
  - { id: 410, class: singlereg, preferred-register: '' }
  - { id: 411, class: singlereg, preferred-register: '' }
  - { id: 412, class: singlereg, preferred-register: '' }
  - { id: 413, class: singlereg, preferred-register: '' }
  - { id: 414, class: singlereg, preferred-register: '' }
  - { id: 415, class: singlereg, preferred-register: '' }
  - { id: 416, class: singlereg, preferred-register: '' }
  - { id: 417, class: singlereg, preferred-register: '' }
  - { id: 418, class: singlereg, preferred-register: '' }
  - { id: 419, class: singlereg, preferred-register: '' }
  - { id: 420, class: singlereg, preferred-register: '' }
  - { id: 421, class: singlereg, preferred-register: '' }
  - { id: 422, class: singlereg, preferred-register: '' }
  - { id: 423, class: singlereg, preferred-register: '' }
  - { id: 424, class: singlereg, preferred-register: '' }
  - { id: 425, class: singlereg, preferred-register: '' }
  - { id: 426, class: singlereg, preferred-register: '' }
  - { id: 427, class: singlereg, preferred-register: '' }
  - { id: 428, class: singlereg, preferred-register: '' }
  - { id: 429, class: singlereg, preferred-register: '' }
  - { id: 430, class: singlereg, preferred-register: '' }
  - { id: 431, class: singlereg, preferred-register: '' }
  - { id: 432, class: singlereg, preferred-register: '' }
  - { id: 433, class: singlereg, preferred-register: '' }
  - { id: 434, class: singlereg, preferred-register: '' }
  - { id: 435, class: singlereg, preferred-register: '' }
  - { id: 436, class: singlereg, preferred-register: '' }
  - { id: 437, class: singlereg, preferred-register: '' }
  - { id: 438, class: singlereg, preferred-register: '' }
  - { id: 439, class: singlereg, preferred-register: '' }
  - { id: 440, class: singlereg, preferred-register: '' }
  - { id: 441, class: singlereg, preferred-register: '' }
  - { id: 442, class: singlereg, preferred-register: '' }
  - { id: 443, class: singlereg, preferred-register: '' }
  - { id: 444, class: singlereg, preferred-register: '' }
  - { id: 445, class: singlereg, preferred-register: '' }
  - { id: 446, class: singlereg, preferred-register: '' }
  - { id: 447, class: singlereg, preferred-register: '' }
  - { id: 448, class: singlereg, preferred-register: '' }
  - { id: 449, class: singlereg, preferred-register: '' }
  - { id: 450, class: singlereg, preferred-register: '' }
  - { id: 451, class: singlereg, preferred-register: '' }
  - { id: 452, class: singlereg, preferred-register: '' }
  - { id: 453, class: singlereg, preferred-register: '' }
  - { id: 454, class: singlereg, preferred-register: '' }
  - { id: 455, class: singlereg, preferred-register: '' }
  - { id: 456, class: singlereg, preferred-register: '' }
  - { id: 457, class: singlereg, preferred-register: '' }
  - { id: 458, class: singlereg, preferred-register: '' }
  - { id: 459, class: singlereg, preferred-register: '' }
liveins:
  - { reg: '$r0', virtual-reg: '%33' }
  - { reg: '$r1', virtual-reg: '%34' }
  - { reg: '$r2', virtual-reg: '%35' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: _Z3fooPyS_j
  ; CHECK: body:
  ; CHECK-NOT: SOri10
  ; CHECK: ...

  bb.0 (%ir-block.3):
    successors: %bb.29(0x30000000), %bb.1(0x50000000)
    liveins: $r0, $r1, $r2
  
    %35:singlereg = COPY $r2
    %34:singlereg = COPY $r1
    %33:singlereg = COPY $r0
    CB %35, %bb.29, 9
    GOTO %bb.1
  
  bb.1 (%ir-block.5):
    successors: %bb.19(0x40000000), %bb.2(0x40000000)
  
    %0:singlereg = ZXWD %35
    %37:singlereg = ADDWri10 %35, 2
    %36:singlereg = MAKEi16 0
    %38:singlereg = COMPWri killed %37, 12, 6
    CB killed %38, %bb.19, 6
    GOTO %bb.2
  
  bb.2 (%ir-block.9):
    successors: %bb.19(0x40000000), %bb.3(0x40000000)
  
    %40:singlereg = SBFDrr %34, %33
    %41:singlereg = ADDDri10 killed %40, -24
    %42:singlereg = COMPDri10 killed %41, 16, 6
    CB killed %42, %bb.19, 6
    GOTO %bb.3
  
  bb.3 (%ir-block.14):
    successors: %bb.10(0x40000000), %bb.4(0x40000000)
  
    %1:singlereg = CLRF %0, 0, 31
    %44:singlereg = nsw ADDDri10 %1, -2
    %2:singlereg = exact SRLDri %44, 1
    %45:singlereg = nuw ADDDri10 %2, 1
    %3:singlereg = ANDDri10 killed %45, 7
    %43:singlereg = MAKEi16 0
    %46:singlereg = COMPDri10 %44, 14, 6
    CB killed %46, %bb.10, 6
    GOTO %bb.4
  
  bb.4 (%ir-block.21):
    successors: %bb.32(0x40000000), %bb.5(0x40000000)
  
    %49:singlereg = nsw ADDDri10 %2, -7
    %50:singlereg = SRLDri %49, 3
    %4:singlereg = nuw nsw ADDDri10 killed %50, 1
    %5:singlereg = ANDDri10 %4, 1
    %51:singlereg = COMPDri10 %49, 8, 6
    CB killed %51, %bb.5, 7
  
  bb.32:
    successors: %bb.8(0x80000000)
  
    %48:singlereg = MAKEi16 0
    %47:singlereg = IMPLICIT_DEF
    GOTO %bb.8
  
  bb.5..new:
    successors: %bb.6(0x80000000)
  
    %53:singlereg = CLRF %4, 0, 61
    %54:singlereg = nsw ADDDri10 killed %53, -2
    %55:singlereg = SRLDri killed %54, 1
    %6:singlereg = nuw ADDDri10 killed %55, 1
    %52:singlereg = MAKEi16 0
    %62:pairedreg = IMPLICIT_DEF
    %70:pairedreg = IMPLICIT_DEF
    %78:pairedreg = IMPLICIT_DEF
    %86:pairedreg = IMPLICIT_DEF
    %94:pairedreg = IMPLICIT_DEF
    %102:pairedreg = IMPLICIT_DEF
    %110:pairedreg = IMPLICIT_DEF
    %118:pairedreg = IMPLICIT_DEF
    %129:pairedreg = IMPLICIT_DEF
    %137:pairedreg = IMPLICIT_DEF
    %145:pairedreg = IMPLICIT_DEF
    %153:pairedreg = IMPLICIT_DEF
    %161:pairedreg = IMPLICIT_DEF
    %169:pairedreg = IMPLICIT_DEF
    %177:pairedreg = IMPLICIT_DEF
    %188:pairedreg = IMPLICIT_DEF
  
  bb.6 (%ir-block.29):
    successors: %bb.7(0x80000000)
  
    %7:singlereg = PHI %33, %bb.5, %10, %bb.7
    %8:singlereg = PHI %52, %bb.5, %9, %bb.7
    LOOPDOp %6, implicit-def dead $lc, implicit-def dead $le, implicit-def dead $ls
    %56:singlereg = CLRF %8, 4, 31
    %57:singlereg = ADDX8Drr killed %56, %34
    %58:pairedreg = LQri10 24, %57, 0 :: (load (s128) from %ir.33, align 8, !tbaa !3)
    %59:singlereg = COPY %58.sub_d0
    %60:singlereg = ADDDri10 killed %59, 10
    %61:pairedreg = INSERT_SUBREG %62, killed %60, %subreg.sub_d0
    %63:singlereg = COPY %58.sub_d1
    %64:singlereg = ADDDri10 killed %63, 10
    %65:pairedreg = INSERT_SUBREG %61, killed %64, %subreg.sub_d1
    SQri10 0, %7, killed %65 :: (store (s128) into %ir.lsr.iv29, align 8, !tbaa !3)
    %66:pairedreg = LQri10 40, %57, 0 :: (load (s128) from %ir.37, align 8, !tbaa !3)
    %67:singlereg = COPY %66.sub_d0
    %68:singlereg = ADDDri10 killed %67, 10
    %69:pairedreg = INSERT_SUBREG %70, killed %68, %subreg.sub_d0
    %71:singlereg = COPY %66.sub_d1
    %72:singlereg = ADDDri10 killed %71, 10
    %73:pairedreg = INSERT_SUBREG %69, killed %72, %subreg.sub_d1
    SQri10 16, %7, killed %73 :: (store (s128) into %ir.uglygep36, align 8, !tbaa !3)
    %74:pairedreg = LQri10 56, %57, 0 :: (load (s128) from %ir.41, align 8, !tbaa !3)
    %75:singlereg = COPY %74.sub_d0
    %76:singlereg = ADDDri10 killed %75, 10
    %77:pairedreg = INSERT_SUBREG %78, killed %76, %subreg.sub_d0
    %79:singlereg = COPY %74.sub_d1
    %80:singlereg = ADDDri10 killed %79, 10
    %81:pairedreg = INSERT_SUBREG %77, killed %80, %subreg.sub_d1
    SQri10 32, %7, killed %81 :: (store (s128) into %ir.uglygep37, align 8, !tbaa !3)
    %82:pairedreg = LQri10 72, %57, 0 :: (load (s128) from %ir.45, align 8, !tbaa !3)
    %83:singlereg = COPY %82.sub_d0
    %84:singlereg = ADDDri10 killed %83, 10
    %85:pairedreg = INSERT_SUBREG %86, killed %84, %subreg.sub_d0
    %87:singlereg = COPY %82.sub_d1
    %88:singlereg = ADDDri10 killed %87, 10
    %89:pairedreg = INSERT_SUBREG %85, killed %88, %subreg.sub_d1
    SQri10 48, %7, killed %89 :: (store (s128) into %ir.uglygep38, align 8, !tbaa !3)
    %90:pairedreg = LQri10 88, %57, 0 :: (load (s128) from %ir.49, align 8, !tbaa !3)
    %91:singlereg = COPY %90.sub_d0
    %92:singlereg = ADDDri10 killed %91, 10
    %93:pairedreg = INSERT_SUBREG %94, killed %92, %subreg.sub_d0
    %95:singlereg = COPY %90.sub_d1
    %96:singlereg = ADDDri10 killed %95, 10
    %97:pairedreg = INSERT_SUBREG %93, killed %96, %subreg.sub_d1
    SQri10 64, %7, killed %97 :: (store (s128) into %ir.uglygep39, align 8, !tbaa !3)
    %98:pairedreg = LQri10 104, %57, 0 :: (load (s128) from %ir.53, align 8, !tbaa !3)
    %99:singlereg = COPY %98.sub_d0
    %100:singlereg = ADDDri10 killed %99, 10
    %101:pairedreg = INSERT_SUBREG %102, killed %100, %subreg.sub_d0
    %103:singlereg = COPY %98.sub_d1
    %104:singlereg = ADDDri10 killed %103, 10
    %105:pairedreg = INSERT_SUBREG %101, killed %104, %subreg.sub_d1
    SQri10 80, %7, killed %105 :: (store (s128) into %ir.uglygep40, align 8, !tbaa !3)
    %106:pairedreg = LQri10 120, %57, 0 :: (load (s128) from %ir.57, align 8, !tbaa !3)
    %107:singlereg = COPY %106.sub_d0
    %108:singlereg = ADDDri10 killed %107, 10
    %109:pairedreg = INSERT_SUBREG %110, killed %108, %subreg.sub_d0
    %111:singlereg = COPY %106.sub_d1
    %112:singlereg = ADDDri10 killed %111, 10
    %113:pairedreg = INSERT_SUBREG %109, killed %112, %subreg.sub_d1
    SQri10 96, %7, killed %113 :: (store (s128) into %ir.uglygep41, align 8, !tbaa !3)
    %114:pairedreg = LQri10 136, %57, 0 :: (load (s128) from %ir.62, align 8, !tbaa !3)
    %115:singlereg = COPY %114.sub_d0
    %116:singlereg = ADDDri10 killed %115, 10
    %117:pairedreg = INSERT_SUBREG %118, killed %116, %subreg.sub_d0
    %119:singlereg = COPY %114.sub_d1
    %120:singlereg = ADDDri10 killed %119, 10
    %121:pairedreg = INSERT_SUBREG %117, killed %120, %subreg.sub_d1
    SQri10 112, %7, killed %121 :: (store (s128) into %ir.uglygep35, align 8, !tbaa !3)
    %122:singlereg = ADDDri10 %8, 16
    %123:singlereg = CLRF killed %122, 3, 31
    %124:singlereg = ADDX8Drr killed %123, %34
    %125:pairedreg = LQri10 24, %124, 0 :: (load (s128) from %ir.68, align 8, !tbaa !3)
    %126:singlereg = COPY %125.sub_d0
    %127:singlereg = ADDDri10 killed %126, 10
    %128:pairedreg = INSERT_SUBREG %129, killed %127, %subreg.sub_d0
    %130:singlereg = COPY %125.sub_d1
    %131:singlereg = ADDDri10 killed %130, 10
    %132:pairedreg = INSERT_SUBREG %128, killed %131, %subreg.sub_d1
    SQri10 128, %7, killed %132 :: (store (s128) into %ir.uglygep32, align 8, !tbaa !3)
    %133:pairedreg = LQri10 40, %124, 0 :: (load (s128) from %ir.72, align 8, !tbaa !3)
    %134:singlereg = COPY %133.sub_d0
    %135:singlereg = ADDDri10 killed %134, 10
    %136:pairedreg = INSERT_SUBREG %137, killed %135, %subreg.sub_d0
    %138:singlereg = COPY %133.sub_d1
    %139:singlereg = ADDDri10 killed %138, 10
    %140:pairedreg = INSERT_SUBREG %136, killed %139, %subreg.sub_d1
    SQri10 144, %7, killed %140 :: (store (s128) into %ir.uglygep33, align 8, !tbaa !3)
    %141:pairedreg = LQri10 56, %124, 0 :: (load (s128) from %ir.76, align 8, !tbaa !3)
    %142:singlereg = COPY %141.sub_d0
    %143:singlereg = ADDDri10 killed %142, 10
    %144:pairedreg = INSERT_SUBREG %145, killed %143, %subreg.sub_d0
    %146:singlereg = COPY %141.sub_d1
    %147:singlereg = ADDDri10 killed %146, 10
    %148:pairedreg = INSERT_SUBREG %144, killed %147, %subreg.sub_d1
    SQri10 160, %7, killed %148 :: (store (s128) into %ir.uglygep34, align 8, !tbaa !3)
    %149:pairedreg = LQri10 72, %124, 0 :: (load (s128) from %ir.80, align 8, !tbaa !3)
    %150:singlereg = COPY %149.sub_d0
    %151:singlereg = ADDDri10 killed %150, 10
    %152:pairedreg = INSERT_SUBREG %153, killed %151, %subreg.sub_d0
    %154:singlereg = COPY %149.sub_d1
    %155:singlereg = ADDDri10 killed %154, 10
    %156:pairedreg = INSERT_SUBREG %152, killed %155, %subreg.sub_d1
    SQri10 176, %7, killed %156 :: (store (s128) into %ir.uglygep42, align 8, !tbaa !3)
    %157:pairedreg = LQri10 88, %124, 0 :: (load (s128) from %ir.84, align 8, !tbaa !3)
    %158:singlereg = COPY %157.sub_d0
    %159:singlereg = ADDDri10 killed %158, 10
    %160:pairedreg = INSERT_SUBREG %161, killed %159, %subreg.sub_d0
    %162:singlereg = COPY %157.sub_d1
    %163:singlereg = ADDDri10 killed %162, 10
    %164:pairedreg = INSERT_SUBREG %160, killed %163, %subreg.sub_d1
    SQri10 192, %7, killed %164 :: (store (s128) into %ir.uglygep43, align 8, !tbaa !3)
    %165:pairedreg = LQri10 104, %124, 0 :: (load (s128) from %ir.88, align 8, !tbaa !3)
    %166:singlereg = COPY %165.sub_d0
    %167:singlereg = ADDDri10 killed %166, 10
    %168:pairedreg = INSERT_SUBREG %169, killed %167, %subreg.sub_d0
    %170:singlereg = COPY %165.sub_d1
    %171:singlereg = ADDDri10 killed %170, 10
    %172:pairedreg = INSERT_SUBREG %168, killed %171, %subreg.sub_d1
    SQri10 208, %7, killed %172 :: (store (s128) into %ir.uglygep44, align 8, !tbaa !3)
    %173:pairedreg = LQri10 120, %124, 0 :: (load (s128) from %ir.92, align 8, !tbaa !3)
    %174:singlereg = COPY %173.sub_d0
    %175:singlereg = ADDDri10 killed %174, 10
    %176:pairedreg = INSERT_SUBREG %177, killed %175, %subreg.sub_d0
    %178:singlereg = COPY %173.sub_d1
    %179:singlereg = ADDDri10 killed %178, 10
    %180:pairedreg = INSERT_SUBREG %176, killed %179, %subreg.sub_d1
    SQri10 224, %7, killed %180 :: (store (s128) into %ir.uglygep45, align 8, !tbaa !3)
    %181:singlereg = ADDDri10 %8, 33
    %182:singlereg = ANDDri37 killed %181, 4294967265
    %183:singlereg = SLLDri killed %182, 3
    %184:pairedreg = LQrr killed %183, %34, 0, 0 :: (load (s128) from %ir.97, align 8, !tbaa !3)
    %185:singlereg = COPY %184.sub_d0
    %186:singlereg = ADDDri10 killed %185, 10
    %187:pairedreg = INSERT_SUBREG %188, killed %186, %subreg.sub_d0
    %189:singlereg = COPY %184.sub_d1
    %190:singlereg = ADDDri10 killed %189, 10
    %191:pairedreg = INSERT_SUBREG %187, killed %190, %subreg.sub_d1
    SQri10 240, %7, killed %191 :: (store (s128) into %ir.uglygep31, align 8, !tbaa !3)
    %9:singlereg = ADDDri10 %8, 32
    %10:singlereg = ADDDri10 %7, 256
  
  bb.7..split:
    successors: %bb.6(0x7c000000), %bb.8(0x04000000)
  
    %192:singlereg = LOOPDO_ENDp
    CB killed %192, %bb.6, 1
    GOTO %bb.8
  
  bb.8..loopexit6.loopexit.unr-lcssa:
    successors: %bb.10(0x40000000), %bb.9(0x40000000)
  
    %11:singlereg = PHI %47, %bb.32, %9, %bb.7
    %12:singlereg = PHI %48, %bb.32, %9, %bb.7
    CB %5, %bb.10, 1
    GOTO %bb.9
  
  bb.9..loopexit6.loopexit.epilog-lcssa:
    successors: %bb.10(0x80000000)
  
    %193:singlereg = CLRF %12, 3, 31
    %194:singlereg = ADDX8Drr killed %193, %34
    %195:pairedreg = LQri10 24, %194, 0 :: (load (s128) from %ir.105, align 8, !tbaa !3)
    %196:singlereg = COPY %195.sub_d0
    %197:singlereg = ADDDri10 killed %196, 10
    %199:pairedreg = IMPLICIT_DEF
    %198:pairedreg = INSERT_SUBREG %199, killed %197, %subreg.sub_d0
    %200:singlereg = COPY %195.sub_d1
    %201:singlereg = ADDDri10 killed %200, 10
    %202:pairedreg = INSERT_SUBREG %198, killed %201, %subreg.sub_d1
    %203:singlereg = SLLDri %12, 3
    SQrr %203, %33, killed %202, 0 :: (store (s128) into %ir.108, align 8, !tbaa !3)
    %204:pairedreg = LQri10 40, %194, 0 :: (load (s128) from %ir.111, align 8, !tbaa !3)
    %205:singlereg = COPY %204.sub_d0
    %206:singlereg = ADDDri10 killed %205, 10
    %208:pairedreg = IMPLICIT_DEF
    %207:pairedreg = INSERT_SUBREG %208, killed %206, %subreg.sub_d0
    %209:singlereg = COPY %204.sub_d1
    %210:singlereg = ADDDri10 killed %209, 10
    %211:pairedreg = INSERT_SUBREG %207, killed %210, %subreg.sub_d1
    %212:singlereg = ORDri10 %203, 16
    SQrr killed %212, %33, killed %211, 0 :: (store (s128) into %ir.114, align 8, !tbaa !3)
    %213:pairedreg = LQri10 56, %194, 0 :: (load (s128) from %ir.117, align 8, !tbaa !3)
    %214:singlereg = COPY %213.sub_d0
    %215:singlereg = ADDDri10 killed %214, 10
    %217:pairedreg = IMPLICIT_DEF
    %216:pairedreg = INSERT_SUBREG %217, killed %215, %subreg.sub_d0
    %218:singlereg = COPY %213.sub_d1
    %219:singlereg = ADDDri10 killed %218, 10
    %220:pairedreg = INSERT_SUBREG %216, killed %219, %subreg.sub_d1
    %221:singlereg = ORDri10 %203, 32
    SQrr killed %221, %33, killed %220, 0 :: (store (s128) into %ir.120, align 8, !tbaa !3)
    %222:pairedreg = LQri10 72, %194, 0 :: (load (s128) from %ir.123, align 8, !tbaa !3)
    %223:singlereg = COPY %222.sub_d0
    %224:singlereg = ADDDri10 killed %223, 10
    %226:pairedreg = IMPLICIT_DEF
    %225:pairedreg = INSERT_SUBREG %226, killed %224, %subreg.sub_d0
    %227:singlereg = COPY %222.sub_d1
    %228:singlereg = ADDDri10 killed %227, 10
    %229:pairedreg = INSERT_SUBREG %225, killed %228, %subreg.sub_d1
    %230:singlereg = ORDri10 %203, 48
    SQrr killed %230, %33, killed %229, 0 :: (store (s128) into %ir.126, align 8, !tbaa !3)
    %231:pairedreg = LQri10 88, %194, 0 :: (load (s128) from %ir.129, align 8, !tbaa !3)
    %232:singlereg = COPY %231.sub_d0
    %233:singlereg = ADDDri10 killed %232, 10
    %235:pairedreg = IMPLICIT_DEF
    %234:pairedreg = INSERT_SUBREG %235, killed %233, %subreg.sub_d0
    %236:singlereg = COPY %231.sub_d1
    %237:singlereg = ADDDri10 killed %236, 10
    %238:pairedreg = INSERT_SUBREG %234, killed %237, %subreg.sub_d1
    %239:singlereg = ORDri10 %203, 64
    SQrr killed %239, %33, killed %238, 0 :: (store (s128) into %ir.132, align 8, !tbaa !3)
    %240:pairedreg = LQri10 104, %194, 0 :: (load (s128) from %ir.135, align 8, !tbaa !3)
    %241:singlereg = COPY %240.sub_d0
    %242:singlereg = ADDDri10 killed %241, 10
    %244:pairedreg = IMPLICIT_DEF
    %243:pairedreg = INSERT_SUBREG %244, killed %242, %subreg.sub_d0
    %245:singlereg = COPY %240.sub_d1
    %246:singlereg = ADDDri10 killed %245, 10
    %247:pairedreg = INSERT_SUBREG %243, killed %246, %subreg.sub_d1
    %248:singlereg = ORDri10 %203, 80
    SQrr killed %248, %33, killed %247, 0 :: (store (s128) into %ir.138, align 8, !tbaa !3)
    %249:pairedreg = LQri10 120, %194, 0 :: (load (s128) from %ir.141, align 8, !tbaa !3)
    %250:singlereg = COPY %249.sub_d0
    %251:singlereg = ADDDri10 killed %250, 10
    %253:pairedreg = IMPLICIT_DEF
    %252:pairedreg = INSERT_SUBREG %253, killed %251, %subreg.sub_d0
    %254:singlereg = COPY %249.sub_d1
    %255:singlereg = ADDDri10 killed %254, 10
    %256:pairedreg = INSERT_SUBREG %252, killed %255, %subreg.sub_d1
    %257:singlereg = ORDri10 %203, 96
    SQrr killed %257, %33, killed %256, 0 :: (store (s128) into %ir.144, align 8, !tbaa !3)
    %258:singlereg = nuw ADDDri10 %12, 17
    %259:singlereg = ANDDri37 killed %258, 4294967281
    %260:singlereg = SLLDri killed %259, 3
    %261:pairedreg = LQrr killed %260, %34, 0, 0 :: (load (s128) from %ir.148, align 8, !tbaa !3)
    %262:singlereg = COPY %261.sub_d0
    %263:singlereg = ADDDri10 killed %262, 10
    %265:pairedreg = IMPLICIT_DEF
    %264:pairedreg = INSERT_SUBREG %265, killed %263, %subreg.sub_d0
    %266:singlereg = COPY %261.sub_d1
    %267:singlereg = ADDDri10 killed %266, 10
    %268:pairedreg = INSERT_SUBREG %264, killed %267, %subreg.sub_d1
    %269:singlereg = ORDri10 %203, 112
    SQrr killed %269, %33, killed %268, 0 :: (store (s128) into %ir.151, align 8, !tbaa !3)
    %13:singlereg = nuw ADDDri10 %12, 16
  
  bb.10..loopexit6:
    successors: %bb.18(0x30000000), %bb.11(0x50000000)
  
    %14:singlereg = PHI %43, %bb.3, %11, %bb.8, %13, %bb.9
    CB %3, %bb.18, 1
    GOTO %bb.11
  
  bb.11 (%ir-block.155):
    successors: %bb.18(0x40000000), %bb.12(0x40000000)
  
    %270:singlereg = nuw ADDDri10 %14, 3
    %271:singlereg = ZXWD killed %270
    %272:singlereg = SLLDri killed %271, 3
    %273:pairedreg = LQrr killed %272, %34, 0, 0 :: (load (s128) from %ir.158, align 8, !tbaa !3)
    %274:singlereg = COPY %273.sub_d0
    %275:singlereg = ADDDri10 killed %274, 10
    %277:pairedreg = IMPLICIT_DEF
    %276:pairedreg = INSERT_SUBREG %277, killed %275, %subreg.sub_d0
    %278:singlereg = COPY %273.sub_d1
    %279:singlereg = ADDDri10 killed %278, 10
    %280:pairedreg = INSERT_SUBREG %276, killed %279, %subreg.sub_d1
    %281:singlereg = SLLDri %14, 3
    SQrr killed %281, %33, killed %280, 0 :: (store (s128) into %ir.161, align 8, !tbaa !3)
    %282:singlereg = COMPDri10 %3, 1, 1
    CB killed %282, %bb.18, 6
    GOTO %bb.12
  
  bb.12 (%ir-block.163):
    successors: %bb.18(0x40000000), %bb.13(0x40000000)
  
    %283:singlereg = nuw ADDDri10 %14, 5
    %284:singlereg = ZXWD killed %283
    %285:singlereg = SLLDri killed %284, 3
    %286:pairedreg = LQrr killed %285, %34, 0, 0 :: (load (s128) from %ir.167, align 8, !tbaa !3)
    %287:singlereg = COPY %286.sub_d0
    %288:singlereg = ADDDri10 killed %287, 10
    %290:pairedreg = IMPLICIT_DEF
    %289:pairedreg = INSERT_SUBREG %290, killed %288, %subreg.sub_d0
    %291:singlereg = COPY %286.sub_d1
    %292:singlereg = ADDDri10 killed %291, 10
    %293:pairedreg = INSERT_SUBREG %289, killed %292, %subreg.sub_d1
    %294:singlereg = ADDX8Drr %14, %33
    SQri10 16, %294, killed %293 :: (store (s128) into %ir.170, align 8, !tbaa !3)
    %295:singlereg = COMPDri10 %3, 2, 1
    CB killed %295, %bb.18, 6
    GOTO %bb.13
  
  bb.13 (%ir-block.172):
    successors: %bb.18(0x40000000), %bb.14(0x40000000)
  
    %296:singlereg = nuw ADDDri10 %14, 7
    %297:singlereg = ZXWD killed %296
    %298:singlereg = SLLDri killed %297, 3
    %299:pairedreg = LQrr killed %298, %34, 0, 0 :: (load (s128) from %ir.176, align 8, !tbaa !3)
    %300:singlereg = COPY %299.sub_d0
    %301:singlereg = ADDDri10 killed %300, 10
    %303:pairedreg = IMPLICIT_DEF
    %302:pairedreg = INSERT_SUBREG %303, killed %301, %subreg.sub_d0
    %304:singlereg = COPY %299.sub_d1
    %305:singlereg = ADDDri10 killed %304, 10
    %306:pairedreg = INSERT_SUBREG %302, killed %305, %subreg.sub_d1
    SQri10 32, %294, killed %306 :: (store (s128) into %ir.179, align 8, !tbaa !3)
    %308:singlereg = COMPDri10 %3, 3, 1
    CB killed %308, %bb.18, 6
    GOTO %bb.14
  
  bb.14 (%ir-block.181):
    successors: %bb.18(0x40000000), %bb.15(0x40000000)
  
    %309:singlereg = nuw ADDDri10 %14, 9
    %310:singlereg = ZXWD killed %309
    %311:singlereg = SLLDri killed %310, 3
    %312:pairedreg = LQrr killed %311, %34, 0, 0 :: (load (s128) from %ir.185, align 8, !tbaa !3)
    %313:singlereg = COPY %312.sub_d0
    %314:singlereg = ADDDri10 killed %313, 10
    %316:pairedreg = IMPLICIT_DEF
    %315:pairedreg = INSERT_SUBREG %316, killed %314, %subreg.sub_d0
    %317:singlereg = COPY %312.sub_d1
    %318:singlereg = ADDDri10 killed %317, 10
    %319:pairedreg = INSERT_SUBREG %315, killed %318, %subreg.sub_d1
    SQri10 48, %294, killed %319 :: (store (s128) into %ir.188, align 8, !tbaa !3)
    %321:singlereg = COMPDri10 %3, 4, 1
    CB killed %321, %bb.18, 6
    GOTO %bb.15
  
  bb.15 (%ir-block.190):
    successors: %bb.18(0x40000000), %bb.16(0x40000000)
  
    %322:singlereg = nuw ADDDri10 %14, 11
    %323:singlereg = ZXWD killed %322
    %324:singlereg = SLLDri killed %323, 3
    %325:pairedreg = LQrr killed %324, %34, 0, 0 :: (load (s128) from %ir.194, align 8, !tbaa !3)
    %326:singlereg = COPY %325.sub_d0
    %327:singlereg = ADDDri10 killed %326, 10
    %329:pairedreg = IMPLICIT_DEF
    %328:pairedreg = INSERT_SUBREG %329, killed %327, %subreg.sub_d0
    %330:singlereg = COPY %325.sub_d1
    %331:singlereg = ADDDri10 killed %330, 10
    %332:pairedreg = INSERT_SUBREG %328, killed %331, %subreg.sub_d1
    SQri10 64, %294, killed %332 :: (store (s128) into %ir.197, align 8, !tbaa !3)
    %334:singlereg = COMPDri10 %3, 5, 1
    CB killed %334, %bb.18, 6
    GOTO %bb.16
  
  bb.16 (%ir-block.199):
    successors: %bb.18(0x40000000), %bb.17(0x40000000)
  
    %335:singlereg = nuw ADDDri10 %14, 13
    %336:singlereg = ZXWD killed %335
    %337:singlereg = SLLDri killed %336, 3
    %338:pairedreg = LQrr killed %337, %34, 0, 0 :: (load (s128) from %ir.203, align 8, !tbaa !3)
    %339:singlereg = COPY %338.sub_d0
    %340:singlereg = ADDDri10 killed %339, 10
    %342:pairedreg = IMPLICIT_DEF
    %341:pairedreg = INSERT_SUBREG %342, killed %340, %subreg.sub_d0
    %343:singlereg = COPY %338.sub_d1
    %344:singlereg = ADDDri10 killed %343, 10
    %345:pairedreg = INSERT_SUBREG %341, killed %344, %subreg.sub_d1
    SQri10 80, %294, killed %345 :: (store (s128) into %ir.206, align 8, !tbaa !3)
    %347:singlereg = COMPDri10 %3, 6, 1
    CB killed %347, %bb.18, 6
    GOTO %bb.17
  
  bb.17 (%ir-block.208):
    successors: %bb.18(0x80000000)
  
    %348:singlereg = nuw ADDDri10 %14, 15
    %349:singlereg = ZXWD killed %348
    %350:singlereg = SLLDri killed %349, 3
    %351:pairedreg = LQrr killed %350, %34, 0, 0 :: (load (s128) from %ir.212, align 8, !tbaa !3)
    %352:singlereg = COPY %351.sub_d0
    %353:singlereg = ADDDri10 killed %352, 10
    %355:pairedreg = IMPLICIT_DEF
    %354:pairedreg = INSERT_SUBREG %355, killed %353, %subreg.sub_d0
    %356:singlereg = COPY %351.sub_d1
    %357:singlereg = ADDDri10 killed %356, 10
    %358:pairedreg = INSERT_SUBREG %354, killed %357, %subreg.sub_d1
    SQri10 96, %294, killed %358 :: (store (s128) into %ir.215, align 8, !tbaa !3)
  
  bb.18 (%ir-block.216):
    successors: %bb.29(0x40000000), %bb.19(0x40000000)
  
    %360:singlereg = COMPDrr %1, %0, 1
    CB killed %360, %bb.29, 6
    GOTO %bb.19
  
  bb.19 (%ir-block.218):
    successors: %bb.27(0x30000000), %bb.20(0x50000000)
  
    %15:singlereg = PHI %36, %bb.1, %36, %bb.2, %1, %bb.18
    %361:singlereg = nsw SBFDrr %15, %0
    %362:singlereg = NOTD %15
    %16:singlereg = nsw ADDUWDrr %0, killed %362
    %17:singlereg = ANDDri10 killed %361, 7
    CB %17, %bb.27, 1
    GOTO %bb.20
  
  bb.20 (%ir-block.225):
    successors: %bb.27(0x40000000), %bb.21(0x40000000)
  
    %18:singlereg = nuw nsw ADDDri10 %15, 3
    %363:singlereg = ZXWD %18
    %364:singlereg = LDrr killed %363, %34, 0, 1 :: (load (s64) from %ir.228, !tbaa !3)
    %365:singlereg = ADDDri10 killed %364, 10
    SDrr %15, %33, killed %365, 1 :: (store (s64) into %ir.231, !tbaa !3)
    %19:singlereg = ORDri10 %15, 1
    %366:singlereg = COMPDri10 %17, 1, 1
    CB killed %366, %bb.27, 6
    GOTO %bb.21
  
  bb.21 (%ir-block.234):
    successors: %bb.27(0x40000000), %bb.22(0x40000000)
  
    %20:singlereg = nuw nsw ADDDri10 %15, 4
    %367:singlereg = CLRF %20, 0, 31
    %368:singlereg = LDrr killed %367, %34, 0, 1 :: (load (s64) from %ir.237, !tbaa !3)
    %369:singlereg = ADDDri10 killed %368, 10
    SDrr %19, %33, killed %369, 1 :: (store (s64) into %ir.240, !tbaa !3)
    %21:singlereg = nuw nsw ADDDri10 %15, 2
    %370:singlereg = COMPDri10 %17, 2, 1
    CB killed %370, %bb.27, 6
    GOTO %bb.22
  
  bb.22 (%ir-block.243):
    successors: %bb.27(0x40000000), %bb.23(0x40000000)
  
    %22:singlereg = nuw nsw ADDDri10 %15, 5
    %371:singlereg = ZXWD %22
    %372:singlereg = LDrr killed %371, %34, 0, 1 :: (load (s64) from %ir.246, !tbaa !3)
    %373:singlereg = ADDDri10 killed %372, 10
    SDrr %21, %33, killed %373, 1 :: (store (s64) into %ir.249, !tbaa !3)
    %374:singlereg = COMPDri10 %17, 3, 1
    CB killed %374, %bb.27, 6
    GOTO %bb.23
  
  bb.23 (%ir-block.251):
    successors: %bb.27(0x40000000), %bb.24(0x40000000)
  
    %23:singlereg = nuw nsw ADDDri10 %15, 6
    %375:singlereg = CLRF %23, 0, 31
    %376:singlereg = LDrr killed %375, %34, 0, 1 :: (load (s64) from %ir.254, !tbaa !3)
    %377:singlereg = ADDDri10 killed %376, 10
    SDrr %18, %33, killed %377, 1 :: (store (s64) into %ir.257, !tbaa !3)
    %378:singlereg = COMPDri10 %17, 4, 1
    CB killed %378, %bb.27, 6
    GOTO %bb.24
  
  bb.24 (%ir-block.259):
    successors: %bb.27(0x40000000), %bb.25(0x40000000)
  
    %24:singlereg = nuw nsw ADDDri10 %15, 7
    %379:singlereg = ZXWD %24
    %380:singlereg = LDrr killed %379, %34, 0, 1 :: (load (s64) from %ir.262, !tbaa !3)
    %381:singlereg = ADDDri10 killed %380, 10
    SDrr %20, %33, killed %381, 1 :: (store (s64) into %ir.265, !tbaa !3)
    %382:singlereg = COMPDri10 %17, 5, 1
    CB killed %382, %bb.27, 6
    GOTO %bb.25
  
  bb.25 (%ir-block.267):
    successors: %bb.27(0x40000000), %bb.26(0x40000000)
  
    %383:singlereg = nuw nsw ADDDri10 %15, 8
    %384:singlereg = CLRF killed %383, 0, 31
    %385:singlereg = LDrr killed %384, %34, 0, 1 :: (load (s64) from %ir.270, !tbaa !3)
    %386:singlereg = ADDDri10 killed %385, 10
    SDrr %22, %33, killed %386, 1 :: (store (s64) into %ir.273, !tbaa !3)
    %387:singlereg = COMPDri10 %17, 6, 1
    CB killed %387, %bb.27, 6
    GOTO %bb.26
  
  bb.26 (%ir-block.275):
    successors: %bb.27(0x80000000)
  
    %388:singlereg = nuw nsw ADDDri10 %15, 9
    %389:singlereg = ZXWD killed %388
    %390:singlereg = LDrr killed %389, %34, 0, 1 :: (load (s64) from %ir.278, !tbaa !3)
    %391:singlereg = ADDDri10 killed %390, 10
    SDrr %23, %33, killed %391, 1 :: (store (s64) into %ir.281, !tbaa !3)
  
  bb.27 (%ir-block.282):
    successors: %bb.29(0x40000000), %bb.28(0x40000000)
  
    %25:singlereg = PHI %15, %bb.19, %19, %bb.20, %21, %bb.21, %18, %bb.22, %20, %bb.23, %22, %bb.24, %23, %bb.25, %24, %bb.26
    %392:singlereg = COMPDri10 %16, 7, 6
    CB killed %392, %bb.29, 6
    GOTO %bb.28
  
  bb.28..preheader.preheader:
    successors: %bb.30(0x80000000)
  
    %26:singlereg = nuw nsw ADDDri10 %25, 18
    %27:singlereg = NEGD %0
    %28:singlereg = ADDX8Drr %25, %33
    GOTO %bb.30
  
  bb.29..loopexit:
    RET implicit $ra
  
  bb.30..preheader:
    successors: %bb.29(0x04000000), %bb.31(0x7c000000)
  
    %29:singlereg = PHI %28, %bb.28, %32, %bb.31
    %30:singlereg = PHI %26, %bb.28, %31, %bb.31
    %393:singlereg = ADDDri10 %30, -15
    %394:singlereg = ZXWD killed %393
    %395:singlereg = LDrr killed %394, %34, 0, 1 :: (load (s64) from %ir.290, !tbaa !3)
    %396:singlereg = ADDDri10 killed %395, 10
    SDri10 0, %29, killed %396 :: (store (s64) into %ir.lsr.iv10, !tbaa !3)
    %397:singlereg = ADDDri10 %30, -14
    %398:singlereg = ZXWD killed %397
    %399:singlereg = LDrr killed %398, %34, 0, 1 :: (load (s64) from %ir.295, !tbaa !3)
    %400:singlereg = ADDDri10 killed %399, 10
    SDri10 8, %29, killed %400 :: (store (s64) into %ir.uglygep14, !tbaa !3)
    %401:singlereg = ADDDri10 %30, -13
    %402:singlereg = ZXWD killed %401
    %403:singlereg = LDrr killed %402, %34, 0, 1 :: (load (s64) from %ir.300, !tbaa !3)
    %404:singlereg = ADDDri10 killed %403, 10
    SDri10 16, %29, killed %404 :: (store (s64) into %ir.uglygep19, !tbaa !3)
    %405:singlereg = ADDDri10 %30, -12
    %406:singlereg = ZXWD killed %405
    %407:singlereg = LDrr killed %406, %34, 0, 1 :: (load (s64) from %ir.305, !tbaa !3)
    %408:singlereg = ADDDri10 killed %407, 10
    SDri10 24, %29, killed %408 :: (store (s64) into %ir.uglygep16, !tbaa !3)
    %409:singlereg = ADDDri10 %30, -11
    %410:singlereg = ZXWD killed %409
    %411:singlereg = LDrr killed %410, %34, 0, 1 :: (load (s64) from %ir.310, !tbaa !3)
    %412:singlereg = ADDDri10 killed %411, 10
    SDri10 32, %29, killed %412 :: (store (s64) into %ir.uglygep18, !tbaa !3)
    %413:singlereg = ADDDri10 %30, -10
    %414:singlereg = ADDDrr %27, %30
    %415:singlereg = ZXWD killed %413
    %416:singlereg = LDrr killed %415, %34, 0, 1 :: (load (s64) from %ir.317, !tbaa !3)
    %417:singlereg = ADDDri10 killed %416, 10
    SDri10 40, %29, killed %417 :: (store (s64) into %ir.uglygep21, !tbaa !3)
    %418:singlereg = ADDDri10 %30, -9
    %419:singlereg = ZXWD killed %418
    %420:singlereg = LDrr killed %419, %34, 0, 1 :: (load (s64) from %ir.322, !tbaa !3)
    %421:singlereg = ADDDri10 killed %420, 10
    SDri10 48, %29, killed %421 :: (store (s64) into %ir.uglygep23, !tbaa !3)
    %422:singlereg = ADDDri10 %30, -8
    %423:singlereg = ZXWD killed %422
    %424:singlereg = LDrr killed %423, %34, 0, 1 :: (load (s64) from %ir.327, !tbaa !3)
    %425:singlereg = ADDDri10 killed %424, 10
    SDri10 56, %29, killed %425 :: (store (s64) into %ir.uglygep25, !tbaa !3)
    %426:singlereg = COMPDri10 killed %414, 10, 1
    CB killed %426, %bb.29, 6
    GOTO %bb.31
  
  bb.31..preheader.1:
    successors: %bb.29(0x04000000), %bb.30(0x7c000000)
  
    %427:singlereg = ADDDri10 %30, -7
    %428:singlereg = ZXWD killed %427
    %429:singlereg = LDrr killed %428, %34, 0, 1 :: (load (s64) from %ir.333, !tbaa !3)
    %430:singlereg = ADDDri10 killed %429, 10
    SDri10 64, %29, killed %430 :: (store (s64) into %ir.uglygep12, !tbaa !3)
    %431:singlereg = ADDDri10 %30, -6
    %432:singlereg = ZXWD killed %431
    %433:singlereg = LDrr killed %432, %34, 0, 1 :: (load (s64) from %ir.338, !tbaa !3)
    %434:singlereg = ADDDri10 killed %433, 10
    SDri10 72, %29, killed %434 :: (store (s64) into %ir.uglygep24, !tbaa !3)
    %435:singlereg = ADDDri10 %30, -5
    %436:singlereg = ZXWD killed %435
    %437:singlereg = LDrr killed %436, %34, 0, 1 :: (load (s64) from %ir.343, !tbaa !3)
    %438:singlereg = ADDDri10 killed %437, 10
    SDri10 80, %29, killed %438 :: (store (s64) into %ir.uglygep20, !tbaa !3)
    %439:singlereg = ADDDri10 %30, -4
    %440:singlereg = ZXWD killed %439
    %441:singlereg = LDrr killed %440, %34, 0, 1 :: (load (s64) from %ir.348, !tbaa !3)
    %442:singlereg = ADDDri10 killed %441, 10
    SDri10 88, %29, killed %442 :: (store (s64) into %ir.uglygep26, !tbaa !3)
    %443:singlereg = ADDDri10 %30, -3
    %444:singlereg = ZXWD killed %443
    %445:singlereg = LDrr killed %444, %34, 0, 1 :: (load (s64) from %ir.353, !tbaa !3)
    %446:singlereg = ADDDri10 killed %445, 10
    SDri10 96, %29, killed %446 :: (store (s64) into %ir.uglygep22, !tbaa !3)
    %447:singlereg = ADDDri10 %30, -2
    %448:singlereg = ZXWD killed %447
    %449:singlereg = LDrr killed %448, %34, 0, 1 :: (load (s64) from %ir.358, !tbaa !3)
    %450:singlereg = ADDDri10 killed %449, 10
    SDri10 104, %29, killed %450 :: (store (s64) into %ir.uglygep17, !tbaa !3)
    %451:singlereg = ADDDri10 %30, -1
    %452:singlereg = ZXWD killed %451
    %453:singlereg = LDrr killed %452, %34, 0, 1 :: (load (s64) from %ir.363, !tbaa !3)
    %454:singlereg = ADDDri10 killed %453, 10
    SDri10 112, %29, killed %454 :: (store (s64) into %ir.uglygep15, !tbaa !3)
    %455:singlereg = ZXWD %30
    %456:singlereg = LDrr killed %455, %34, 0, 1 :: (load (s64) from %ir.367, !tbaa !3)
    %457:singlereg = ADDDri10 killed %456, 10
    SDri10 120, %29, killed %457 :: (store (s64) into %ir.uglygep13, !tbaa !3)
    %31:singlereg = ADDDri10 %30, 16
    %458:singlereg = ADDDrr %27, %31
    %32:singlereg = ADDDri10 %29, 128
    %459:singlereg = COMPDri10 killed %458, 18, 1
    CB killed %459, %bb.29, 6
    GOTO %bb.30

...
