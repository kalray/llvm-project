; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s

target triple = "kvx-kalray-cos"


define <2 x float> @fmulwc(<2 x float> %a, <2 x float> %b) {
; CHECK-LABEL: fmulwc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x float> @llvm.kvx.fmulwc(<2 x float> %a, <2 x float> %b, i32 0, i32 0, i32 0)
  ret <2 x float> %0
}


declare <2 x float> @llvm.kvx.fmulwc(<2 x float>, <2 x float>, i32, i32, i32)


define <2 x float> @ffmawc(<2 x float> %a, <2 x float> %b, <2 x float> %c) {
; CHECK-LABEL: ffmawc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.rn $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x float> @llvm.kvx.ffmawc(<2 x float> %a, <2 x float> %b, <2 x float> %c, i32 0, i32 0, i32 0)
  ret <2 x float> %0
}


declare <2 x float> @llvm.kvx.ffmawc(<2 x float>, <2 x float>, <2 x float>, i32, i32, i32)

define <2 x float> @ffmswc(<2 x float> %a, <2 x float> %b, <2 x float> %c) {
; CHECK-LABEL: ffmswc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.rn $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x float> @llvm.kvx.ffmswc(<2 x float> %a, <2 x float> %b, <2 x float> %c, i32 0, i32 0, i32 0)
  ret <2 x float> %0
}

declare <2 x float> @llvm.kvx.ffmswc(<2 x float>, <2 x float>, <2 x float>, i32, i32, i32)


define <2 x float> @fmulcwc(<2 x float> %a, <2 x float> %b) {
; CHECK-LABEL: fmulcwc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x float> @llvm.kvx.fmulwc(<2 x float> %a, <2 x float> %b, i32 1, i32 0, i32 0)
  ret <2 x float> %0
}


define <2 x float> @ffmacwc(<2 x float> %a, <2 x float> %b, <2 x float> %c) {
; CHECK-LABEL: ffmacwc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.c.rn $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x float> @llvm.kvx.ffmawc(<2 x float> %a, <2 x float> %b, <2 x float> %c, i32 1, i32 0, i32 0)
  ret <2 x float> %0
}


define <2 x float> @ffmscwc(<2 x float> %a, <2 x float> %b, <2 x float> %c) {
; CHECK-LABEL: ffmscwc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.c.rn $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x float> @llvm.kvx.ffmswc(<2 x float> %a, <2 x float> %b, <2 x float> %c, i32 1, i32 0, i32 0)
  ret <2 x float> %0
}


define <2 x float> @fconjwc(<2 x float> %a) {
; CHECK-LABEL: fconjwc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x float> @llvm.kvx.fconjwc(<2 x float> %a)
  ret <2 x float> %0
}


declare <2 x float> @llvm.kvx.fconjwc(<2 x float>)


define <4 x float> @fmulwcp(<4 x float> %a, <4 x float> %b) {
; CHECK-LABEL: fmulwcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x float> @llvm.kvx.fmulwcp(<4 x float> %a, <4 x float> %b, i32 0, i32 0, i32 0)
  ret <4 x float> %0
}


declare <4 x float> @llvm.kvx.fmulwcp(<4 x float>, <4 x float>, i32, i32, i32)


define <4 x float> @ffmawcp(<4 x float> %a, <4 x float> %b, <4 x float> %c) {
; CHECK-LABEL: ffmawcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r1 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.rn $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.rn $r0 = $r0, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x float> @llvm.kvx.ffmawcp(<4 x float> %a, <4 x float> %b, <4 x float> %c, i32 0, i32 0, i32 0)
  ret <4 x float> %0
}


declare <4 x float> @llvm.kvx.ffmawcp(<4 x float>, <4 x float>, <4 x float>, i32, i32, i32)


define <4 x float> @ffmswcp(<4 x float> %a, <4 x float> %b, <4 x float> %c) {
; CHECK-LABEL: ffmswcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r1 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.rn $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.rn $r0 = $r0, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x float> @llvm.kvx.ffmswcp(<4 x float> %a, <4 x float> %b, <4 x float> %c, i32 0, i32 0, i32 0)
  ret <4 x float> %0
}


declare <4 x float> @llvm.kvx.ffmswcp(<4 x float>, <4 x float>, <4 x float>,  i32, i32, i32)


define <4 x float> @fmulcwcp(<4 x float> %a, <4 x float> %b) {
; CHECK-LABEL: fmulcwcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x float> @llvm.kvx.fmulwcp(<4 x float> %a, <4 x float> %b, i32 1, i32 0, i32 0)
  ret <4 x float> %0
}


define <4 x float> @ffmacwcp(<4 x float> %a, <4 x float> %b, <4 x float> %c) {
; CHECK-LABEL: ffmacwcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r1 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.c.rn $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.c.rn $r0 = $r0, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x float> @llvm.kvx.ffmawcp(<4 x float> %a, <4 x float> %b, <4 x float> %c, i32 1, i32 0, i32 0)
  ret <4 x float> %0
}


define <4 x float> @ffmscwcp(<4 x float> %a, <4 x float> %b, <4 x float> %c) {
; CHECK-LABEL: ffmscwcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r1 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.c.rn $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.c.rn $r0 = $r0, $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x float> @llvm.kvx.ffmswcp(<4 x float> %a, <4 x float> %b, <4 x float> %c, i32 1, i32 0, i32 0)
  ret <4 x float> %0
}


define <4 x float> @fconjwcp(<4 x float> %a) {
; CHECK-LABEL: fconjwcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegd $r0 = $r0
; CHECK-NEXT:    fnegd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x float> @llvm.kvx.fconjwcp(<4 x float> %a)
  ret <4 x float> %0
}


declare <4 x float> @llvm.kvx.fconjwcp(<4 x float>)


define <8 x float> @fmulwcq(<8 x float> %a, <8 x float> %b) local_unnamed_addr #3 {
; CHECK-LABEL: fmulwcq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r3 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r2 = $r2, $r6
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x float> @llvm.kvx.fmulwcp(<4 x float> %0, <4 x float> %1, i32 0, i32 0, i32 0)
  %3 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x float> @llvm.kvx.fmulwcp(<4 x float> %3, <4 x float> %4,  i32 0, i32 0, i32 0)
  %6 = shufflevector <4 x float> %2, <4 x float> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %6
}


define <8 x float> @ffmawcq(<8 x float> %a, <8 x float> %b, <8 x float> %c) local_unnamed_addr #3 {
; CHECK-LABEL: ffmawcq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r1 = $r5, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r0 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r3 = $r7, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r2 = $r6, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.rn $r1 = $r1, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.rn $r0 = $r0, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.rn $r3 = $r3, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.rn $r2 = $r2, $r10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = shufflevector <8 x float> %c, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x float> @llvm.kvx.ffmawcp(<4 x float> %0, <4 x float> %1, <4 x float> %2,  i32 0, i32 0, i32 0)
  %4 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6 = shufflevector <8 x float> %c, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = tail call <4 x float> @llvm.kvx.ffmawcp(<4 x float> %4, <4 x float> %5, <4 x float> %6,  i32 0, i32 0, i32 0)
  %8 = shufflevector <4 x float> %3, <4 x float> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %8
}


define <8 x float> @ffmswcq(<8 x float> %a, <8 x float> %b, <8 x float> %c) local_unnamed_addr #3 {
; CHECK-LABEL: ffmswcq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.rn $r1 = $r5, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r0 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r3 = $r7, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.rn $r2 = $r6, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.rn $r1 = $r1, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.rn $r0 = $r0, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.rn $r3 = $r3, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.rn $r2 = $r2, $r10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = shufflevector <8 x float> %c, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x float> @llvm.kvx.ffmswcp(<4 x float> %0, <4 x float> %1, <4 x float> %2,  i32 0, i32 0, i32 0)
  %4 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6 = shufflevector <8 x float> %c, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = tail call <4 x float> @llvm.kvx.ffmswcp(<4 x float> %4, <4 x float> %5, <4 x float> %6,  i32 0, i32 0, i32 0)
  %8 = shufflevector <4 x float> %3, <4 x float> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %8
}


define <8 x float> @fmulcwcq(<8 x float> %a, <8 x float> %b) local_unnamed_addr #3 {
; CHECK-LABEL: fmulcwcq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r3 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r2 = $r2, $r6
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x float> @llvm.kvx.fmulwcp(<4 x float> %0, <4 x float> %1, i32 1, i32 0, i32 0)
  %3 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x float> @llvm.kvx.fmulwcp(<4 x float> %3, <4 x float> %4, i32 1, i32 0, i32 0)
  %6 = shufflevector <4 x float> %2, <4 x float> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %6
}


define <8 x float> @ffmacwcq(<8 x float> %a, <8 x float> %b, <8 x float> %c) local_unnamed_addr #3 {
; CHECK-LABEL: ffmacwcq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r1 = $r5, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r3 = $r7, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r2 = $r6, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.c.rn $r1 = $r1, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.c.rn $r0 = $r0, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.c.rn $r3 = $r3, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwp.c.rn $r2 = $r2, $r10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = shufflevector <8 x float> %c, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x float> @llvm.kvx.ffmawcp(<4 x float> %0, <4 x float> %1, <4 x float> %2, i32 1, i32 0, i32 0)
  %4 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6 = shufflevector <8 x float> %c, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = tail call <4 x float> @llvm.kvx.ffmawcp(<4 x float> %4, <4 x float> %5, <4 x float> %6, i32 1, i32 0, i32 0)
  %8 = shufflevector <4 x float> %3, <4 x float> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %8
}


define <8 x float> @ffmscwcq(<8 x float> %a, <8 x float> %b, <8 x float> %c) local_unnamed_addr #3 {
; CHECK-LABEL: ffmscwcq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwc.c.rn $r1 = $r5, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r0 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r3 = $r7, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulwc.c.rn $r2 = $r6, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.c.rn $r1 = $r1, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.c.rn $r0 = $r0, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.c.rn $r3 = $r3, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwp.c.rn $r2 = $r2, $r10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = shufflevector <8 x float> %c, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x float> @llvm.kvx.ffmswcp(<4 x float> %0, <4 x float> %1, <4 x float> %2, i32 1, i32 0, i32 0)
  %4 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = shufflevector <8 x float> %b, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6 = shufflevector <8 x float> %c, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = tail call <4 x float> @llvm.kvx.ffmswcp(<4 x float> %4, <4 x float> %5, <4 x float> %6, i32 1, i32 0, i32 0)
  %8 = shufflevector <4 x float> %3, <4 x float> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %8
}


define <8 x float> @fconjwcq(<8 x float> %a) local_unnamed_addr #3 {
; CHECK-LABEL: fconjwcq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegd $r0 = $r0
; CHECK-NEXT:    fnegd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnegd $r2 = $r2
; CHECK-NEXT:    fnegd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = tail call <4 x float> @llvm.kvx.fconjwcp(<4 x float> %0)
  %2 = shufflevector <8 x float> %a, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3 = tail call <4 x float> @llvm.kvx.fconjwcp(<4 x float> %2)
  %4 = shufflevector <4 x float> %1, <4 x float> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %4
}


define <2 x double> @fmuldc(<2 x double> %a, <2 x double> %b) {
; CHECK-LABEL: fmuldc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r5 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r5 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r0 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x double> @llvm.kvx.fmuldc(<2 x double> %a, <2 x double> %b,  i32 0, i32 0)
  ret <2 x double> %0
}


declare <2 x double> @llvm.kvx.fmuldc(<2 x double>, <2 x double>,  i32, i32)


define <2 x double> @ffmadc(<2 x double> %a, <2 x double> %b, <2 x double> %c) {
; CHECK-LABEL: ffmadc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r7 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r6 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r7 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r6 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp.rn $r0r1 = $r6r7, $r4r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x double> @llvm.kvx.ffmadc(<2 x double> %a, <2 x double> %b, <2 x double> %c,  i32 0, i32 0)
  ret <2 x double> %0
}


declare <2 x double> @llvm.kvx.ffmadc(<2 x double>, <2 x double>, <2 x double>,  i32, i32)


define <2 x double> @ffmsdc(<2 x double> %a, <2 x double> %b, <2 x double> %c) {
; CHECK-LABEL: ffmsdc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r7 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r6 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r7 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r6 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp.rn $r0r1 = $r6r7, $r4r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x double> @llvm.kvx.ffmsdc(<2 x double> %a, <2 x double> %b, <2 x double> %c,  i32 0, i32 0)
  ret <2 x double> %0
}


declare <2 x double> @llvm.kvx.ffmsdc(<2 x double>, <2 x double>, <2 x double>,  i32, i32)


define <2 x double> @fmulcdc(<2 x double> %a, <2 x double> %b) {
; CHECK-LABEL: fmulcdc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r5 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r5 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r0 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x double> @llvm.kvx.fmulcdc(<2 x double> %a, <2 x double> %b,  i32 0, i32 0)
  ret <2 x double> %0
}


declare <2 x double> @llvm.kvx.fmulcdc(<2 x double>, <2 x double>,  i32, i32)


define <2 x double> @ffmacdc(<2 x double> %a, <2 x double> %b, <2 x double> %c) {
; CHECK-LABEL: ffmacdc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r7 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r6 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r7 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r6 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp.c.rn $r0r1 = $r6r7, $r4r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x double> @llvm.kvx.ffmacdc(<2 x double> %a, <2 x double> %b, <2 x double> %c,  i32 0, i32 0)
  ret <2 x double> %0
}


declare <2 x double> @llvm.kvx.ffmacdc(<2 x double>, <2 x double>, <2 x double>,  i32, i32)


define <2 x double> @ffmscdc(<2 x double> %a, <2 x double> %b, <2 x double> %c) {
; CHECK-LABEL: ffmscdc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r7 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r6 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r7 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r6 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp.c.rn $r0r1 = $r6r7, $r4r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x double> @llvm.kvx.ffmscdc(<2 x double> %a, <2 x double> %b, <2 x double> %c,  i32 0, i32 0)
  ret <2 x double> %0
}


declare <2 x double> @llvm.kvx.ffmscdc(<2 x double>, <2 x double>, <2 x double>,  i32, i32)


define <2 x double> @fconjdc(<2 x double> %a) {
; CHECK-LABEL: fconjdc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x double> @llvm.kvx.fconjdc(<2 x double> %a)
  ret <2 x double> %0
}


declare <2 x double> @llvm.kvx.fconjdc(<2 x double>)


define <4 x double> @fmuldcp(<4 x double> %a, <4 x double> %b) {
; CHECK-LABEL: fmuldcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r9 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r11 = $r2, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r2 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r9 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r11 = $r3, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r0 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r2 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r3 = $r11
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x double> @llvm.kvx.fmuldc(<2 x double> %0, <2 x double> %1,  i32 0, i32 0)
  %3 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x double> @llvm.kvx.fmuldc(<2 x double> %3, <2 x double> %4,  i32 0, i32 0)
  %6 = shufflevector <2 x double> %2, <2 x double> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %6
}


define <4 x double> @ffmadcp(<4 x double> %a, <4 x double> %b, <4 x double> %c) {
; CHECK-LABEL: ffmadcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r17 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r33 = $r3, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r16 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r32 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r17 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r33 = $r2, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r16 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r32 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp.rn $r0r1 = $r16r17, $r8r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp.rn $r2r3 = $r32r33, $r10r11
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %2 = shufflevector <4 x double> %c, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x double> @llvm.kvx.ffmadc(<2 x double> %0, <2 x double> %1, <2 x double> %2,  i32 0, i32 0)
  %4 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %5 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %6 = shufflevector <4 x double> %c, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %7 = tail call <2 x double> @llvm.kvx.ffmadc(<2 x double> %4, <2 x double> %5, <2 x double> %6,  i32 0, i32 0)
  %8 = shufflevector <2 x double> %3, <2 x double> %7, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %8
}


define <4 x double> @ffmsdcp(<4 x double> %a, <4 x double> %b, <4 x double> %c) {
; CHECK-LABEL: ffmsdcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r17 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r33 = $r3, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r16 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r32 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r17 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r33 = $r2, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r16 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r32 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp.rn $r0r1 = $r16r17, $r8r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp.rn $r2r3 = $r32r33, $r10r11
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %2 = shufflevector <4 x double> %c, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x double> @llvm.kvx.ffmsdc(<2 x double> %0, <2 x double> %1, <2 x double> %2,  i32 0, i32 0)
  %4 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %5 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %6 = shufflevector <4 x double> %c, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %7 = tail call <2 x double> @llvm.kvx.ffmsdc(<2 x double> %4, <2 x double> %5, <2 x double> %6,  i32 0, i32 0)
  %8 = shufflevector <2 x double> %3, <2 x double> %7, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %8
}


define <4 x double> @fmulcdcp(<4 x double> %a, <4 x double> %b) {
; CHECK-LABEL: fmulcdcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r9 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r11 = $r2, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r2 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r9 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r11 = $r3, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r0 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r2 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r3 = $r11
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x double> @llvm.kvx.fmulcdc(<2 x double> %0, <2 x double> %1,  i32 0, i32 0)
  %3 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x double> @llvm.kvx.fmulcdc(<2 x double> %3, <2 x double> %4,  i32 0, i32 0)
  %6 = shufflevector <2 x double> %2, <2 x double> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %6
}


define <4 x double> @ffmacdcp(<4 x double> %a, <4 x double> %b, <4 x double> %c) {
; CHECK-LABEL: ffmacdcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r17 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r33 = $r3, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r16 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r32 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r17 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r33 = $r2, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r16 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r32 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp.c.rn $r0r1 = $r16r17, $r8r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp.c.rn $r2r3 = $r32r33, $r10r11
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %2 = shufflevector <4 x double> %c, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x double> @llvm.kvx.ffmacdc(<2 x double> %0, <2 x double> %1, <2 x double> %2,  i32 0, i32 0)
  %4 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %5 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %6 = shufflevector <4 x double> %c, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %7 = tail call <2 x double> @llvm.kvx.ffmacdc(<2 x double> %4, <2 x double> %5, <2 x double> %6,  i32 0, i32 0)
  %8 = shufflevector <2 x double> %3, <2 x double> %7, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %8
}


define <4 x double> @ffmscdcp(<4 x double> %a, <4 x double> %b, <4 x double> %c) {
; CHECK-LABEL: ffmscdcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rn $r17 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r33 = $r3, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r16 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld.rn $r32 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r17 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmsd.rn $r33 = $r2, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r16 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad.rn $r32 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp.c.rn $r0r1 = $r16r17, $r8r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp.c.rn $r2r3 = $r32r33, $r10r11
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %2 = shufflevector <4 x double> %c, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x double> @llvm.kvx.ffmscdc(<2 x double> %0, <2 x double> %1, <2 x double> %2,  i32 0, i32 0)
  %4 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %5 = shufflevector <4 x double> %b, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %6 = shufflevector <4 x double> %c, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %7 = tail call <2 x double> @llvm.kvx.ffmscdc(<2 x double> %4, <2 x double> %5, <2 x double> %6,  i32 0, i32 0)
  %8 = shufflevector <2 x double> %3, <2 x double> %7, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %8
}


define <4 x double> @fconjdcp(<4 x double> %a) {
; CHECK-LABEL: fconjdcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegd $r1 = $r1
; CHECK-NEXT:    fnegd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x double> @llvm.kvx.fconjdc(<2 x double> %0)
  %2 = shufflevector <4 x double> %a, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x double> @llvm.kvx.fconjdc(<2 x double> %2)
  %4 = shufflevector <2 x double> %1, <2 x double> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %4
}
