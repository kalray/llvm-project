; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define <2 x half> @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x40003c00
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  ret <2 x half> <half 1.0, half 2.0>
}

define half @test_extract_0(<2 x half> %a) #0 {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x half> %a, i32 0
  ret half %e
}

define half @test_extract_1(<2 x half> %a) #0 {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x half> %a, i32 1
  ret half %e
}

; TODO: lower as: lshr(shl(idx, 4))
define half @test_extract_i(<2 x half> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 28[$r12] = $r0
; CHECK-NEXT:    andd $r1 = $r1, 1
; CHECK-NEXT:    addd $r0 = $r12, 28
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x half> %a, i64 %idx
  ret half %e
}

define <2 x half> @test_fadd(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <2 x half> %a, %b
  ret <2 x half> %r
}

; TODO: This could use the RI variant
define <2 x half> @test_fadd_imm_0(<2 x half> %a) #0 {
; CHECK-LABEL: test_fadd_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x40003c00
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <2 x half> <half 1.0, half 2.0>, %a
  ret <2 x half> %r
}

define <2 x half> @test_fadd_imm_1(<2 x half> %a) #0 {
; CHECK-LABEL: test_fadd_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x40003c00
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <2 x half> %a, <half 1.0, half 2.0>
  ret <2 x half> %r
}

define <2 x half> @test_fsub(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <2 x half> %a, %b
  ret <2 x half> %r
}

define <2 x half> @test_fsub_imm(<2 x half> %a) #0 {
; CHECK-LABEL: test_fsub_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0xffffffffc000bc00
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <2 x half> %a, <half 1.0, half 2.0>
  ret <2 x half> %r
}

; TODO: Could use ri variant
define <2 x half> @test_fsub_fromimm(<2 x half> %a) #0 {
; CHECK-LABEL: test_fsub_fromimm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x40003c00
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <2 x half> <half 1.0, half 2.0>, %a
  ret <2 x half> %r
}

define <2 x half> @test_fneg(<2 x half> %a) #0 {
; CHECK-LABEL: test_fneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fneghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <2 x half> <half 0.0, half 0.0>, %a
  ret <2 x half> %r
}

define <2 x half> @test_fmul(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fmul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fmul <2 x half> %a, %b
  ret <2 x half> %r
}

define <2 x half> @test_fdiv(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fdiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r19, 16
; CHECK-NEXT:    srld $r1 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r20 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r0 = $r19
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fdiv <2 x half> %a, %b
  ret <2 x half> %r
}

define <2 x half> @test_frem(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_frem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r19, 16
; CHECK-NEXT:    srld $r1 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r20 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r0 = $r19
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = frem <2 x half> %a, %b
  ret <2 x half> %r
}

define void @test_ldst_v2f16(<2 x half>* %a, <2 x half>* %b) {
; CHECK-LABEL: test_ldst_v2f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %t1 = load <2 x half>, <2 x half>* %a
  store <2 x half> %t1, <2 x half>* %b, align 16
  ret void
}

declare <2 x half> @test_callee(<2 x half> %a, <2 x half> %b) #0

define <2 x half> @test_call(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @test_callee(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_call_flipped(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @test_callee(<2 x half> %b, <2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_tailcall_flipped(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
  %r = tail call <2 x half> @test_callee(<2 x half> %b, <2 x half> %a)
  ret <2 x half> %r
}

; This could be selected to (cmovehq(sra(sll %c, 31), 31), %a, %b)
define <2 x half> @test_select(<2 x half> %a, <2 x half> %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyw $r3 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r3 ? $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    notw $r3 = $r2
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = select i1 %c, <2 x half> %a, <2 x half> %b
  ret <2 x half> %r
}

define <2 x half> @test_select_cc(<2 x half> %a, <2 x half> %b, <2 x half> %c, <2 x half> %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r2 = $r2, $r3
; CHECK-NEXT:    srld $r4 = $r1, 16
; CHECK-NEXT:    srld $r5 = $r0, 16
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r3 = $r2, 16
; CHECK-NEXT:    zxhd $r2 = $r2
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r4 = $r5
; CHECK-NEXT:    cmoved.wnez $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r4, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = fcmp une <2 x half> %c, %d
  %r = select <2 x i1> %cc, <2 x half> %a, <2 x half> %b
  ret <2 x half> %r
}

define <2 x float> @test_select_cc_f32_f16(<2 x float> %a, <2 x float> %b, <2 x half> %c, <2 x half> %d) #0 {
; CHECK-LABEL: test_select_cc_f32_f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r2 = $r2, $r3
; CHECK-NEXT:    srad $r4 = $r1, 32
; CHECK-NEXT:    srad $r5 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r3 = $r2, 32
; CHECK-NEXT:    cmoved.wnez $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r4 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r4, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = fcmp une <2 x half> %c, %d
  %r = select <2 x i1> %cc, <2 x float> %a, <2 x float> %b
  ret <2 x float> %r
}

define <2 x half> @test_select_cc_f16_f32(<2 x half> %a, <2 x half> %b, <2 x float> %c, <2 x float> %d) #0 {
; CHECK-LABEL: test_select_cc_f16_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnwp.une $r2 = $r2, $r3
; CHECK-NEXT:    srld $r4 = $r1, 16
; CHECK-NEXT:    srld $r5 = $r0, 16
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r3 = $r2, 32
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r4 = $r5
; CHECK-NEXT:    cmoved.wnez $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r4, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = fcmp une <2 x float> %c, %d
  %r = select <2 x i1> %cc, <2 x half> %a, <2 x half> %b
  ret <2 x half> %r
}

define <2 x i1> @test_fcmp_une(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_une:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp une <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ueq(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ueq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ueq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ueq <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ugt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ugt <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_uge(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp uge <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ult(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ult <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ule(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ule <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_uno(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_uno:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r2 = $r0, $r1
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp uno <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_one(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_one:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp one <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_oeq(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_oeq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp oeq <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ogt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ogt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ogt <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_oge(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_oge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp oge <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_olt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_olt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp olt <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ole(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ole:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ole <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ord(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ord:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r2 = $r0, $r1
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ord <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i16> @test_fptosi_i16(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r0, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <2 x half> %a to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i32> @test_fptosi_i32(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <2 x half> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i64> @test_fptosi_i64(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenmwd $r1 = $r0
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <2 x half> %a to <2 x i64>
  ret <2 x i64> %r
}

define <2 x i16> @test_fptoui_2xi16(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_2xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixeduwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r0, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <2 x half> %a to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i32> @test_fptoui_2xi32(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixeduwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <2 x half> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i64> @test_fptoui_2xi64(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenmwd $r1 = $r0
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <2 x half> %a to <2 x i64>
  ret <2 x i64> %r
}

define <2 x half> @test_uitofp_2xi16(<2 x i16> %a) #0 {
; CHECK-LABEL: test_uitofp_2xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatuw.rn $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatuw.rn $r0 = $r0, 0
; CHECK-NEXT:    fnarrowwh.rn $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = uitofp <2 x i16> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_uitofp_2xi32(<2 x i32> %a) #0 {
; CHECK-LABEL: test_uitofp_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatuwp.rn $r0 = $r0, 0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = uitofp <2 x i32> %a to <2 x half>
  ret <2 x half> %r
}

; Could use vector fnarrow variants
define <2 x half> @test_uitofp_2xi64(<2 x i64> %a) #0 {
; CHECK-LABEL: test_uitofp_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatud.rn $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r0 = $r0, 0
; CHECK-NEXT:    fnarrowdw.rn $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    fnarrowwh.rn $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = uitofp <2 x i64> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_sitofp_2xi32(<2 x i32> %a) #0 {
; CHECK-LABEL: test_sitofp_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatwp.rn $r0 = $r0, 0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sitofp <2 x i32> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_sitofp_2xi64(<2 x i64> %a) #0 {
; CHECK-LABEL: test_sitofp_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatd.rn $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r0 = $r0, 0
; CHECK-NEXT:    fnarrowdw.rn $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    fnarrowwh.rn $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sitofp <2 x i64> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_uitofp_2xi32_fadd(<2 x i32> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_uitofp_2xi32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatuwp.rn $r2 = $r0, 0
; CHECK-NEXT:    make $r3 = 0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %c = uitofp <2 x i32> %a to <2 x half>
  %r = fadd <2 x half> %b, %c
  ret <2 x half> %r
}

define <2 x half> @test_sitofp_2xi32_fadd(<2 x i32> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_sitofp_2xi32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatwp.rn $r2 = $r0, 0
; CHECK-NEXT:    make $r3 = 0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %c = sitofp <2 x i32> %a to <2 x half>
  %r = fadd <2 x half> %b, %c
  ret <2 x half> %r
}

define <2 x half> @test_fptrunc_2xfloat(<2 x float> %a) #0 {
; CHECK-LABEL: test_fptrunc_2xfloat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andw $r1 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptrunc <2 x float> %a to <2 x half>
  ret <2 x half> %r
}

; Could use vector fnarrow variants
define <2 x half> @test_fptrunc_2xdouble(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptrunc_2xdouble:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnarrowdw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw $r0 = $r0
; CHECK-NEXT:    fnarrowwh $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptrunc <2 x double> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x float> @test_fpext_2xfloat(<2 x half> %a) #0 {
; CHECK-LABEL: test_fpext_2xfloat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fpext <2 x half> %a to <2 x float>
  ret <2 x float> %r
}

define <2 x double> @test_fpext_2xdouble(<2 x half> %a) #0 {
; CHECK-LABEL: test_fpext_2xdouble:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r1 = $r0
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    fwidenlhw $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlwd $r0 = $r1
; CHECK-NEXT:    fwidenlwd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fpext <2 x half> %a to <2 x double>
  ret <2 x double> %r
}

define <2 x i16> @test_bitcast_2xhalf_to_2xi16(<2 x half> %a) #0 {
; CHECK-LABEL: test_bitcast_2xhalf_to_2xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = bitcast <2 x half> %a to <2 x i16>
  ret <2 x i16> %r
}

define <2 x half> @test_bitcast_2xi16_to_2xhalf(<2 x i16> %a) #0 {
; CHECK-LABEL: test_bitcast_2xi16_to_2xhalf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = bitcast <2 x i16> %a to <2 x half>
  ret <2 x half> %r
}

declare <2 x half> @llvm.sqrt.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.powi.v2f16(<2 x half> %a, i32 %b) #0
declare <2 x half> @llvm.sin.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.cos.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.pow.v2f16(<2 x half> %a, <2 x half> %b) #0
declare <2 x half> @llvm.exp.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.exp2.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.log.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.log10.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.log2.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.fma.v2f16(<2 x half> %a, <2 x half> %b, <2 x half> %c) #0
declare <2 x half> @llvm.fabs.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.minnum.v2f16(<2 x half> %a, <2 x half> %b) #0
declare <2 x half> @llvm.maxnum.v2f16(<2 x half> %a, <2 x half> %b) #0
declare <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %b) #0
declare <2 x half> @llvm.floor.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.ceil.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.trunc.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.rint.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.nearbyint.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.round.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.fmuladd.v2f16(<2 x half> %a, <2 x half> %b, <2 x half> %c) #0

define <2 x half> @test_sqrt(<2 x half> %a) #0 {
; CHECK-LABEL: test_sqrt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.sqrt.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_powi(<2 x half> %a, i32 %b) #0 {
; CHECK-LABEL: test_powi:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r19, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r20 = $r0
; CHECK-NEXT:    zxhd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.powi.v2f16(<2 x half> %a, i32 %b)
 ret <2 x half> %r
}

define <2 x half> @test_sin(<2 x half> %a) #0 {
; CHECK-LABEL: test_sin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.sin.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_cos(<2 x half> %a) #0 {
; CHECK-LABEL: test_cos:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.cos.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_pow(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_pow:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r19, 16
; CHECK-NEXT:    srld $r1 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r20 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r0 = $r19
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.pow.v2f16(<2 x half> %a, <2 x half> %b)
 ret <2 x half> %r
}

define <2 x half> @test_exp(<2 x half> %a) #0 {
; CHECK-LABEL: test_exp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.exp.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

define <2 x half> @test_exp2(<2 x half> %a) #0 {
; CHECK-LABEL: test_exp2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.exp2.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

define <2 x half> @test_log(<2 x half> %a) #0 {
; CHECK-LABEL: test_log:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.log.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

define <2 x half> @test_log10(<2 x half> %a) #0 {
; CHECK-LABEL: test_log10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.log10.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

;;; XCHECK-LABEL: test_log2(
define <2 x half> @test_log2(<2 x half> %a) #0 {
; CHECK-LABEL: test_log2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.log2.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

define <2 x half> @test_fma(<2 x half> %a, <2 x half> %b, <2 x half> %c) #0 {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r3 = $r0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    zxwd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmahq $r0 = $r3, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.fma.v2f16(<2 x half> %a, <2 x half> %b, <2 x half> %c)
  ret <2 x half> %r
}

define <2 x half> @test_fabs(<2 x half> %a) #0 {
; CHECK-LABEL: test_fabs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.fabs.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_minnum(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_minnum:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    fwidenlhwp $r18 = $r1
; CHECK-NEXT:    fwidenlhwp $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r0 = $r19, 32
; CHECK-NEXT:    srad $r1 = $r18, 32
; CHECK-NEXT:    call fminf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call fminf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 63, 32
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    andw $r1 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    fnarrowwhq $r0 = $r0r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.minnum.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_minnum_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_minnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fminhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call fast <2 x half> @llvm.minnum.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_maxnum(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_maxnum:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    fwidenlhwp $r18 = $r1
; CHECK-NEXT:    fwidenlhwp $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r0 = $r19, 32
; CHECK-NEXT:    srad $r1 = $r18, 32
; CHECK-NEXT:    call fmaxf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call fmaxf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 63, 32
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    andw $r1 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    fnarrowwhq $r0 = $r0r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.maxnum.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_maxnum_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_maxnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmaxhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call fast <2 x half> @llvm.maxnum.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_copysign(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_copysign:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r1, 16
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    srld $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r2 = $r2, 15
; CHECK-NEXT:    sraw $r1 = $r1, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r2, 15, 15
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_copysign_f32(<2 x half> %a, <2 x float> %b) #0 {
; CHECK-LABEL: test_copysign_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r2 = $r1, 32
; CHECK-NEXT:    srld $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    sraw $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r2 = $r2, 31
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r2, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %tb = fptrunc <2 x float> %b to <2 x half>
  %r = call <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %tb)
  ret <2 x half> %r
}

define <2 x half> @test_copysign_f64(<2 x half> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_copysign_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r3 = $r0, 16
; CHECK-NEXT:    srad $r2 = $r2, 63
; CHECK-NEXT:    srad $r1 = $r1, 63
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r2, 15, 15
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %tb = fptrunc <2 x double> %b to <2 x half>
  %r = call <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %tb)
  ret <2 x half> %r
}

define <2 x float> @test_copysign_extended(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_copysign_extended:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r1, 16
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    srld $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r2 = $r2, 15
; CHECK-NEXT:    sraw $r1 = $r1, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r2, 15, 15
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %b)
  %xr = fpext <2 x half> %r to <2 x float>
  ret <2 x float> %xr
}

define <2 x half> @test_floor(<2 x half> %a) #0 {
; CHECK-LABEL: test_floor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.floor.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_ceil(<2 x half> %a) #0 {
; CHECK-LABEL: test_ceil:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.ceil.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_trunc(<2 x half> %a) #0 {
; CHECK-LABEL: test_trunc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.trunc.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_rint(<2 x half> %a) #0 {
; CHECK-LABEL: test_rint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.rint.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_nearbyint(<2 x half> %a) #0 {
; CHECK-LABEL: test_nearbyint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.nearbyint.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_round(<2 x half> %a) #0 {
; CHECK-LABEL: test_round:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r18, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.round.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_fmuladd(<2 x half> %a, <2 x half> %b, <2 x half> %c) #0 {
; CHECK-LABEL: test_fmuladd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmulhq $r0 = $r0, $r1
; CHECK-NEXT:    zxwd $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.fmuladd.v2f16(<2 x half> %a, <2 x half> %b, <2 x half> %c)
  ret <2 x half> %r
}

define <2 x half> @test_shufflevector(<2 x half> %a) #0 {
; CHECK-LABEL: test_shufflevector:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r1 = $r0
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %s = shufflevector <2 x half> %a, <2 x half> undef, <2 x i32> <i32 1, i32 0>
  ret <2 x half> %s
}

define <2 x half> @test_insertelement0(<2 x half> %a, half %x) #0 {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x half> %a, half %x, i64 0
  ret <2 x half> %i
}

define <2 x half> @test_insertelement1(<2 x half> %a, half %x) #0 {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x half> %a, half %x, i64 1
  ret <2 x half> %i
}

define <2 x half> @test_insertelement(<2 x half> %a, half %x, i64 %p) #0 {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andd $r2 = $r2, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r3 = $r12, 28
; CHECK-NEXT:    sw 28[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sh.xs $r2[$r3] = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r0 = 28[$r12]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x half> %a, half %x, i64 %p
  ret <2 x half> %i
}

attributes #0 = { nounwind }
