; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O1 -o - %s | FileCheck %s --check-prefixes=CV1
; RUN: clang -O1 -march=kv3-1 -c -o /dev/null %s
; RUN: llc -mcpu=kv3-2 -O1 -o - %s | FileCheck %s --check-prefixes=CV2
; RUN: clang -O1 -march=kv3-2 -c -o /dev/null %s
;
; Generated with llvm/utils/Target/KVX/copro-regs.rb script.
; Please modify the script to modify the tests in this file.
;
; This test showcases register allocation on coprocessor.
; On CV1, only $a0..$a47 registers should be used
; On CV2, only $a0..$a63 registers should be used

target triple = "kvx-kalray-cos"

define void @move_all(ptr %from, ptr %to) {
; CV1-LABEL: move_all:
; CV1:       # %bb.0:
; CV1-NEXT:    addd $r12 = $r12, -512
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 64[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 480[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 224[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a28 = 96[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a9 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 32[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 448[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 320[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a20 = 192[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a6 = 128[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a7 = 160[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 416[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 448[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a32 = 352[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a10 = 256[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a11 = 288[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 384[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 576[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a44 = 480[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a14 = 384[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a15 = 416[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 352[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 704[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a17 = 608[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a18 = 512[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a19 = 544[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 320[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 832[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a21 = 736[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a22 = 640[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a23 = 672[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 288[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 960[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a25 = 864[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a26 = 768[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a27 = 800[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 256[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 0x440[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a29 = 992[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a30 = 896[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a31 = 928[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 224[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 0x4c0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a33 = 0x460[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a34 = 1024[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a35 = 0x420[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 192[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 0x540[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a37 = 0x4e0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a38 = 0x480[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a39 = 0x4a0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 160[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 0x5c0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a41 = 0x560[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a42 = 0x500[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a43 = 0x520[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 128[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 0x640[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a45 = 0x5e0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a46 = 0x580[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a47 = 0x5a0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 96[$r12] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a1 = 0x6c0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a16 = 0x660[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a5 = 0x600[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 0x620[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 64[$r12] = $a1
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a2 = 0x740[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a40 = 0x6e0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a13 = 0x680[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a1 = 0x6a0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 32[$r12] = $a2
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a4 = 0x7c0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a24 = 0x760[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a8 = 0x700[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a2 = 0x720[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0[$r12] = $a4
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a36 = 0x7e0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a12 = 0x780[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a4 = 0x7a0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 32[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0[$r1] = $a9
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 96[$r1] = $a28
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 480[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 160[$r1] = $a7
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 128[$r1] = $a6
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 192[$r1] = $a20
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 64[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 448[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 288[$r1] = $a11
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 256[$r1] = $a10
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 352[$r1] = $a32
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 224[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 416[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 416[$r1] = $a15
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 384[$r1] = $a14
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 480[$r1] = $a44
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 320[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 384[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 544[$r1] = $a19
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 512[$r1] = $a18
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 608[$r1] = $a17
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 448[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 352[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 672[$r1] = $a23
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 640[$r1] = $a22
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 736[$r1] = $a21
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 576[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 320[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 800[$r1] = $a27
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 768[$r1] = $a26
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 864[$r1] = $a25
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 704[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 288[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 928[$r1] = $a31
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 896[$r1] = $a30
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 992[$r1] = $a29
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 832[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 256[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x420[$r1] = $a35
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 1024[$r1] = $a34
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x460[$r1] = $a33
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 960[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 224[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x4a0[$r1] = $a39
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x480[$r1] = $a38
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x4e0[$r1] = $a37
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x440[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 192[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x520[$r1] = $a43
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x500[$r1] = $a42
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x560[$r1] = $a41
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x4c0[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 160[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x5a0[$r1] = $a47
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x580[$r1] = $a46
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x5e0[$r1] = $a45
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x540[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a3 = 128[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x620[$r1] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x600[$r1] = $a5
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x660[$r1] = $a16
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x5c0[$r1] = $a3
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 96[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x6a0[$r1] = $a1
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x680[$r1] = $a13
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x6e0[$r1] = $a40
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x640[$r1] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 64[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x720[$r1] = $a2
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x700[$r1] = $a8
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x760[$r1] = $a24
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x6c0[$r1] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 32[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x7a0[$r1] = $a4
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x780[$r1] = $a12
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x7e0[$r1] = $a36
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x740[$r1] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    xlo.u $a0 = 0[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    xso 0x7c0[$r1] = $a0
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r12 = $r12, 512
; CV1-NEXT:    ;;
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: move_all:
; CV2:       # %bb.0:
; CV2-NEXT:    xlo $a0 = 64[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a1 = 96[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a2 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a3 = 32[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a4 = 224[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a5 = 192[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a6 = 128[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a7 = 160[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a8 = 320[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a9 = 352[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a10 = 256[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a11 = 288[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a12 = 448[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a13 = 480[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a14 = 384[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a15 = 416[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a16 = 576[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a17 = 608[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a18 = 512[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a19 = 544[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a20 = 704[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a21 = 736[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a22 = 640[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a23 = 672[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a24 = 832[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a25 = 864[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a26 = 768[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a27 = 800[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a28 = 960[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a29 = 992[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a30 = 896[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a31 = 928[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a32 = 0x440[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a33 = 0x460[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a34 = 1024[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a35 = 0x420[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a36 = 0x4c0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a37 = 0x4e0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a38 = 0x480[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a39 = 0x4a0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a40 = 0x540[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a41 = 0x560[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a42 = 0x500[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a43 = 0x520[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a44 = 0x5c0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a45 = 0x5e0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a46 = 0x580[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a47 = 0x5a0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a48 = 0x640[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a49 = 0x660[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a50 = 0x600[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a51 = 0x620[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a52 = 0x6c0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a53 = 0x6e0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a54 = 0x680[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a55 = 0x6a0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a56 = 0x740[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a57 = 0x760[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a58 = 0x700[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a59 = 0x720[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a60 = 0x7c0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a61 = 0x7e0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a62 = 0x780[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xlo $a63 = 0x7a0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 32[$r1] = $a3
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0[$r1] = $a2
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 96[$r1] = $a1
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 64[$r1] = $a0
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 160[$r1] = $a7
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 128[$r1] = $a6
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 192[$r1] = $a5
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 224[$r1] = $a4
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 288[$r1] = $a11
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 256[$r1] = $a10
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 352[$r1] = $a9
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 320[$r1] = $a8
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 416[$r1] = $a15
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 384[$r1] = $a14
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 480[$r1] = $a13
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 448[$r1] = $a12
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 544[$r1] = $a19
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 512[$r1] = $a18
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 608[$r1] = $a17
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 576[$r1] = $a16
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 672[$r1] = $a23
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 640[$r1] = $a22
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 736[$r1] = $a21
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 704[$r1] = $a20
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 800[$r1] = $a27
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 768[$r1] = $a26
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 864[$r1] = $a25
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 832[$r1] = $a24
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 928[$r1] = $a31
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 896[$r1] = $a30
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 992[$r1] = $a29
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 960[$r1] = $a28
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x420[$r1] = $a35
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 1024[$r1] = $a34
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x460[$r1] = $a33
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x440[$r1] = $a32
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x4a0[$r1] = $a39
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x480[$r1] = $a38
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x4e0[$r1] = $a37
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x4c0[$r1] = $a36
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x520[$r1] = $a43
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x500[$r1] = $a42
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x560[$r1] = $a41
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x540[$r1] = $a40
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x5a0[$r1] = $a47
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x580[$r1] = $a46
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x5e0[$r1] = $a45
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x5c0[$r1] = $a44
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x620[$r1] = $a51
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x600[$r1] = $a50
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x660[$r1] = $a49
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x640[$r1] = $a48
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x6a0[$r1] = $a55
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x680[$r1] = $a54
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x6e0[$r1] = $a53
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x6c0[$r1] = $a52
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x720[$r1] = $a59
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x700[$r1] = $a58
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x760[$r1] = $a57
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x740[$r1] = $a56
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x7a0[$r1] = $a63
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x780[$r1] = $a62
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x7e0[$r1] = $a61
; CV2-NEXT:    ;;
; CV2-NEXT:    xso 0x7c0[$r1] = $a60
; CV2-NEXT:    ;;
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %from.addr.0 = getelementptr <256 x i1>, ptr %from, i64 0
  %reg.0 = load <256 x i1>, ptr %from.addr.0
  %from.addr.1 = getelementptr <256 x i1>, ptr %from, i64 1
  %reg.1 = load <256 x i1>, ptr %from.addr.1
  %from.addr.2 = getelementptr <256 x i1>, ptr %from, i64 2
  %reg.2 = load <256 x i1>, ptr %from.addr.2
  %from.addr.3 = getelementptr <256 x i1>, ptr %from, i64 3
  %reg.3 = load <256 x i1>, ptr %from.addr.3
  %from.addr.4 = getelementptr <256 x i1>, ptr %from, i64 4
  %reg.4 = load <256 x i1>, ptr %from.addr.4
  %from.addr.5 = getelementptr <256 x i1>, ptr %from, i64 5
  %reg.5 = load <256 x i1>, ptr %from.addr.5
  %from.addr.6 = getelementptr <256 x i1>, ptr %from, i64 6
  %reg.6 = load <256 x i1>, ptr %from.addr.6
  %from.addr.7 = getelementptr <256 x i1>, ptr %from, i64 7
  %reg.7 = load <256 x i1>, ptr %from.addr.7
  %from.addr.8 = getelementptr <256 x i1>, ptr %from, i64 8
  %reg.8 = load <256 x i1>, ptr %from.addr.8
  %from.addr.9 = getelementptr <256 x i1>, ptr %from, i64 9
  %reg.9 = load <256 x i1>, ptr %from.addr.9
  %from.addr.10 = getelementptr <256 x i1>, ptr %from, i64 10
  %reg.10 = load <256 x i1>, ptr %from.addr.10
  %from.addr.11 = getelementptr <256 x i1>, ptr %from, i64 11
  %reg.11 = load <256 x i1>, ptr %from.addr.11
  %from.addr.12 = getelementptr <256 x i1>, ptr %from, i64 12
  %reg.12 = load <256 x i1>, ptr %from.addr.12
  %from.addr.13 = getelementptr <256 x i1>, ptr %from, i64 13
  %reg.13 = load <256 x i1>, ptr %from.addr.13
  %from.addr.14 = getelementptr <256 x i1>, ptr %from, i64 14
  %reg.14 = load <256 x i1>, ptr %from.addr.14
  %from.addr.15 = getelementptr <256 x i1>, ptr %from, i64 15
  %reg.15 = load <256 x i1>, ptr %from.addr.15
  %from.addr.16 = getelementptr <256 x i1>, ptr %from, i64 16
  %reg.16 = load <256 x i1>, ptr %from.addr.16
  %from.addr.17 = getelementptr <256 x i1>, ptr %from, i64 17
  %reg.17 = load <256 x i1>, ptr %from.addr.17
  %from.addr.18 = getelementptr <256 x i1>, ptr %from, i64 18
  %reg.18 = load <256 x i1>, ptr %from.addr.18
  %from.addr.19 = getelementptr <256 x i1>, ptr %from, i64 19
  %reg.19 = load <256 x i1>, ptr %from.addr.19
  %from.addr.20 = getelementptr <256 x i1>, ptr %from, i64 20
  %reg.20 = load <256 x i1>, ptr %from.addr.20
  %from.addr.21 = getelementptr <256 x i1>, ptr %from, i64 21
  %reg.21 = load <256 x i1>, ptr %from.addr.21
  %from.addr.22 = getelementptr <256 x i1>, ptr %from, i64 22
  %reg.22 = load <256 x i1>, ptr %from.addr.22
  %from.addr.23 = getelementptr <256 x i1>, ptr %from, i64 23
  %reg.23 = load <256 x i1>, ptr %from.addr.23
  %from.addr.24 = getelementptr <256 x i1>, ptr %from, i64 24
  %reg.24 = load <256 x i1>, ptr %from.addr.24
  %from.addr.25 = getelementptr <256 x i1>, ptr %from, i64 25
  %reg.25 = load <256 x i1>, ptr %from.addr.25
  %from.addr.26 = getelementptr <256 x i1>, ptr %from, i64 26
  %reg.26 = load <256 x i1>, ptr %from.addr.26
  %from.addr.27 = getelementptr <256 x i1>, ptr %from, i64 27
  %reg.27 = load <256 x i1>, ptr %from.addr.27
  %from.addr.28 = getelementptr <256 x i1>, ptr %from, i64 28
  %reg.28 = load <256 x i1>, ptr %from.addr.28
  %from.addr.29 = getelementptr <256 x i1>, ptr %from, i64 29
  %reg.29 = load <256 x i1>, ptr %from.addr.29
  %from.addr.30 = getelementptr <256 x i1>, ptr %from, i64 30
  %reg.30 = load <256 x i1>, ptr %from.addr.30
  %from.addr.31 = getelementptr <256 x i1>, ptr %from, i64 31
  %reg.31 = load <256 x i1>, ptr %from.addr.31
  %from.addr.32 = getelementptr <256 x i1>, ptr %from, i64 32
  %reg.32 = load <256 x i1>, ptr %from.addr.32
  %from.addr.33 = getelementptr <256 x i1>, ptr %from, i64 33
  %reg.33 = load <256 x i1>, ptr %from.addr.33
  %from.addr.34 = getelementptr <256 x i1>, ptr %from, i64 34
  %reg.34 = load <256 x i1>, ptr %from.addr.34
  %from.addr.35 = getelementptr <256 x i1>, ptr %from, i64 35
  %reg.35 = load <256 x i1>, ptr %from.addr.35
  %from.addr.36 = getelementptr <256 x i1>, ptr %from, i64 36
  %reg.36 = load <256 x i1>, ptr %from.addr.36
  %from.addr.37 = getelementptr <256 x i1>, ptr %from, i64 37
  %reg.37 = load <256 x i1>, ptr %from.addr.37
  %from.addr.38 = getelementptr <256 x i1>, ptr %from, i64 38
  %reg.38 = load <256 x i1>, ptr %from.addr.38
  %from.addr.39 = getelementptr <256 x i1>, ptr %from, i64 39
  %reg.39 = load <256 x i1>, ptr %from.addr.39
  %from.addr.40 = getelementptr <256 x i1>, ptr %from, i64 40
  %reg.40 = load <256 x i1>, ptr %from.addr.40
  %from.addr.41 = getelementptr <256 x i1>, ptr %from, i64 41
  %reg.41 = load <256 x i1>, ptr %from.addr.41
  %from.addr.42 = getelementptr <256 x i1>, ptr %from, i64 42
  %reg.42 = load <256 x i1>, ptr %from.addr.42
  %from.addr.43 = getelementptr <256 x i1>, ptr %from, i64 43
  %reg.43 = load <256 x i1>, ptr %from.addr.43
  %from.addr.44 = getelementptr <256 x i1>, ptr %from, i64 44
  %reg.44 = load <256 x i1>, ptr %from.addr.44
  %from.addr.45 = getelementptr <256 x i1>, ptr %from, i64 45
  %reg.45 = load <256 x i1>, ptr %from.addr.45
  %from.addr.46 = getelementptr <256 x i1>, ptr %from, i64 46
  %reg.46 = load <256 x i1>, ptr %from.addr.46
  %from.addr.47 = getelementptr <256 x i1>, ptr %from, i64 47
  %reg.47 = load <256 x i1>, ptr %from.addr.47
  %from.addr.48 = getelementptr <256 x i1>, ptr %from, i64 48
  %reg.48 = load <256 x i1>, ptr %from.addr.48
  %from.addr.49 = getelementptr <256 x i1>, ptr %from, i64 49
  %reg.49 = load <256 x i1>, ptr %from.addr.49
  %from.addr.50 = getelementptr <256 x i1>, ptr %from, i64 50
  %reg.50 = load <256 x i1>, ptr %from.addr.50
  %from.addr.51 = getelementptr <256 x i1>, ptr %from, i64 51
  %reg.51 = load <256 x i1>, ptr %from.addr.51
  %from.addr.52 = getelementptr <256 x i1>, ptr %from, i64 52
  %reg.52 = load <256 x i1>, ptr %from.addr.52
  %from.addr.53 = getelementptr <256 x i1>, ptr %from, i64 53
  %reg.53 = load <256 x i1>, ptr %from.addr.53
  %from.addr.54 = getelementptr <256 x i1>, ptr %from, i64 54
  %reg.54 = load <256 x i1>, ptr %from.addr.54
  %from.addr.55 = getelementptr <256 x i1>, ptr %from, i64 55
  %reg.55 = load <256 x i1>, ptr %from.addr.55
  %from.addr.56 = getelementptr <256 x i1>, ptr %from, i64 56
  %reg.56 = load <256 x i1>, ptr %from.addr.56
  %from.addr.57 = getelementptr <256 x i1>, ptr %from, i64 57
  %reg.57 = load <256 x i1>, ptr %from.addr.57
  %from.addr.58 = getelementptr <256 x i1>, ptr %from, i64 58
  %reg.58 = load <256 x i1>, ptr %from.addr.58
  %from.addr.59 = getelementptr <256 x i1>, ptr %from, i64 59
  %reg.59 = load <256 x i1>, ptr %from.addr.59
  %from.addr.60 = getelementptr <256 x i1>, ptr %from, i64 60
  %reg.60 = load <256 x i1>, ptr %from.addr.60
  %from.addr.61 = getelementptr <256 x i1>, ptr %from, i64 61
  %reg.61 = load <256 x i1>, ptr %from.addr.61
  %from.addr.62 = getelementptr <256 x i1>, ptr %from, i64 62
  %reg.62 = load <256 x i1>, ptr %from.addr.62
  %from.addr.63 = getelementptr <256 x i1>, ptr %from, i64 63
  %reg.63 = load <256 x i1>, ptr %from.addr.63
  %to.addr.0 = getelementptr <256 x i1>, ptr %to, i64 0
  store <256 x i1> %reg.0, ptr %to.addr.0
  %to.addr.1 = getelementptr <256 x i1>, ptr %to, i64 1
  store <256 x i1> %reg.1, ptr %to.addr.1
  %to.addr.2 = getelementptr <256 x i1>, ptr %to, i64 2
  store <256 x i1> %reg.2, ptr %to.addr.2
  %to.addr.3 = getelementptr <256 x i1>, ptr %to, i64 3
  store <256 x i1> %reg.3, ptr %to.addr.3
  %to.addr.4 = getelementptr <256 x i1>, ptr %to, i64 4
  store <256 x i1> %reg.4, ptr %to.addr.4
  %to.addr.5 = getelementptr <256 x i1>, ptr %to, i64 5
  store <256 x i1> %reg.5, ptr %to.addr.5
  %to.addr.6 = getelementptr <256 x i1>, ptr %to, i64 6
  store <256 x i1> %reg.6, ptr %to.addr.6
  %to.addr.7 = getelementptr <256 x i1>, ptr %to, i64 7
  store <256 x i1> %reg.7, ptr %to.addr.7
  %to.addr.8 = getelementptr <256 x i1>, ptr %to, i64 8
  store <256 x i1> %reg.8, ptr %to.addr.8
  %to.addr.9 = getelementptr <256 x i1>, ptr %to, i64 9
  store <256 x i1> %reg.9, ptr %to.addr.9
  %to.addr.10 = getelementptr <256 x i1>, ptr %to, i64 10
  store <256 x i1> %reg.10, ptr %to.addr.10
  %to.addr.11 = getelementptr <256 x i1>, ptr %to, i64 11
  store <256 x i1> %reg.11, ptr %to.addr.11
  %to.addr.12 = getelementptr <256 x i1>, ptr %to, i64 12
  store <256 x i1> %reg.12, ptr %to.addr.12
  %to.addr.13 = getelementptr <256 x i1>, ptr %to, i64 13
  store <256 x i1> %reg.13, ptr %to.addr.13
  %to.addr.14 = getelementptr <256 x i1>, ptr %to, i64 14
  store <256 x i1> %reg.14, ptr %to.addr.14
  %to.addr.15 = getelementptr <256 x i1>, ptr %to, i64 15
  store <256 x i1> %reg.15, ptr %to.addr.15
  %to.addr.16 = getelementptr <256 x i1>, ptr %to, i64 16
  store <256 x i1> %reg.16, ptr %to.addr.16
  %to.addr.17 = getelementptr <256 x i1>, ptr %to, i64 17
  store <256 x i1> %reg.17, ptr %to.addr.17
  %to.addr.18 = getelementptr <256 x i1>, ptr %to, i64 18
  store <256 x i1> %reg.18, ptr %to.addr.18
  %to.addr.19 = getelementptr <256 x i1>, ptr %to, i64 19
  store <256 x i1> %reg.19, ptr %to.addr.19
  %to.addr.20 = getelementptr <256 x i1>, ptr %to, i64 20
  store <256 x i1> %reg.20, ptr %to.addr.20
  %to.addr.21 = getelementptr <256 x i1>, ptr %to, i64 21
  store <256 x i1> %reg.21, ptr %to.addr.21
  %to.addr.22 = getelementptr <256 x i1>, ptr %to, i64 22
  store <256 x i1> %reg.22, ptr %to.addr.22
  %to.addr.23 = getelementptr <256 x i1>, ptr %to, i64 23
  store <256 x i1> %reg.23, ptr %to.addr.23
  %to.addr.24 = getelementptr <256 x i1>, ptr %to, i64 24
  store <256 x i1> %reg.24, ptr %to.addr.24
  %to.addr.25 = getelementptr <256 x i1>, ptr %to, i64 25
  store <256 x i1> %reg.25, ptr %to.addr.25
  %to.addr.26 = getelementptr <256 x i1>, ptr %to, i64 26
  store <256 x i1> %reg.26, ptr %to.addr.26
  %to.addr.27 = getelementptr <256 x i1>, ptr %to, i64 27
  store <256 x i1> %reg.27, ptr %to.addr.27
  %to.addr.28 = getelementptr <256 x i1>, ptr %to, i64 28
  store <256 x i1> %reg.28, ptr %to.addr.28
  %to.addr.29 = getelementptr <256 x i1>, ptr %to, i64 29
  store <256 x i1> %reg.29, ptr %to.addr.29
  %to.addr.30 = getelementptr <256 x i1>, ptr %to, i64 30
  store <256 x i1> %reg.30, ptr %to.addr.30
  %to.addr.31 = getelementptr <256 x i1>, ptr %to, i64 31
  store <256 x i1> %reg.31, ptr %to.addr.31
  %to.addr.32 = getelementptr <256 x i1>, ptr %to, i64 32
  store <256 x i1> %reg.32, ptr %to.addr.32
  %to.addr.33 = getelementptr <256 x i1>, ptr %to, i64 33
  store <256 x i1> %reg.33, ptr %to.addr.33
  %to.addr.34 = getelementptr <256 x i1>, ptr %to, i64 34
  store <256 x i1> %reg.34, ptr %to.addr.34
  %to.addr.35 = getelementptr <256 x i1>, ptr %to, i64 35
  store <256 x i1> %reg.35, ptr %to.addr.35
  %to.addr.36 = getelementptr <256 x i1>, ptr %to, i64 36
  store <256 x i1> %reg.36, ptr %to.addr.36
  %to.addr.37 = getelementptr <256 x i1>, ptr %to, i64 37
  store <256 x i1> %reg.37, ptr %to.addr.37
  %to.addr.38 = getelementptr <256 x i1>, ptr %to, i64 38
  store <256 x i1> %reg.38, ptr %to.addr.38
  %to.addr.39 = getelementptr <256 x i1>, ptr %to, i64 39
  store <256 x i1> %reg.39, ptr %to.addr.39
  %to.addr.40 = getelementptr <256 x i1>, ptr %to, i64 40
  store <256 x i1> %reg.40, ptr %to.addr.40
  %to.addr.41 = getelementptr <256 x i1>, ptr %to, i64 41
  store <256 x i1> %reg.41, ptr %to.addr.41
  %to.addr.42 = getelementptr <256 x i1>, ptr %to, i64 42
  store <256 x i1> %reg.42, ptr %to.addr.42
  %to.addr.43 = getelementptr <256 x i1>, ptr %to, i64 43
  store <256 x i1> %reg.43, ptr %to.addr.43
  %to.addr.44 = getelementptr <256 x i1>, ptr %to, i64 44
  store <256 x i1> %reg.44, ptr %to.addr.44
  %to.addr.45 = getelementptr <256 x i1>, ptr %to, i64 45
  store <256 x i1> %reg.45, ptr %to.addr.45
  %to.addr.46 = getelementptr <256 x i1>, ptr %to, i64 46
  store <256 x i1> %reg.46, ptr %to.addr.46
  %to.addr.47 = getelementptr <256 x i1>, ptr %to, i64 47
  store <256 x i1> %reg.47, ptr %to.addr.47
  %to.addr.48 = getelementptr <256 x i1>, ptr %to, i64 48
  store <256 x i1> %reg.48, ptr %to.addr.48
  %to.addr.49 = getelementptr <256 x i1>, ptr %to, i64 49
  store <256 x i1> %reg.49, ptr %to.addr.49
  %to.addr.50 = getelementptr <256 x i1>, ptr %to, i64 50
  store <256 x i1> %reg.50, ptr %to.addr.50
  %to.addr.51 = getelementptr <256 x i1>, ptr %to, i64 51
  store <256 x i1> %reg.51, ptr %to.addr.51
  %to.addr.52 = getelementptr <256 x i1>, ptr %to, i64 52
  store <256 x i1> %reg.52, ptr %to.addr.52
  %to.addr.53 = getelementptr <256 x i1>, ptr %to, i64 53
  store <256 x i1> %reg.53, ptr %to.addr.53
  %to.addr.54 = getelementptr <256 x i1>, ptr %to, i64 54
  store <256 x i1> %reg.54, ptr %to.addr.54
  %to.addr.55 = getelementptr <256 x i1>, ptr %to, i64 55
  store <256 x i1> %reg.55, ptr %to.addr.55
  %to.addr.56 = getelementptr <256 x i1>, ptr %to, i64 56
  store <256 x i1> %reg.56, ptr %to.addr.56
  %to.addr.57 = getelementptr <256 x i1>, ptr %to, i64 57
  store <256 x i1> %reg.57, ptr %to.addr.57
  %to.addr.58 = getelementptr <256 x i1>, ptr %to, i64 58
  store <256 x i1> %reg.58, ptr %to.addr.58
  %to.addr.59 = getelementptr <256 x i1>, ptr %to, i64 59
  store <256 x i1> %reg.59, ptr %to.addr.59
  %to.addr.60 = getelementptr <256 x i1>, ptr %to, i64 60
  store <256 x i1> %reg.60, ptr %to.addr.60
  %to.addr.61 = getelementptr <256 x i1>, ptr %to, i64 61
  store <256 x i1> %reg.61, ptr %to.addr.61
  %to.addr.62 = getelementptr <256 x i1>, ptr %to, i64 62
  store <256 x i1> %reg.62, ptr %to.addr.62
  %to.addr.63 = getelementptr <256 x i1>, ptr %to, i64 63
  store <256 x i1> %reg.63, ptr %to.addr.63
  ret void
}
