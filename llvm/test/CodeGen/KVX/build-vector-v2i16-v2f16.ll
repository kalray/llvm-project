; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s | FileCheck %s
target triple = "kvx-kalray-cos-O2"

define <2 x i16> @foo_v2i16(<2 x i16> %x){
; CHECK-LABEL: foo_v2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    orw $r0 = $r0, 0xffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r0, 0xfffffffffffe0000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %x.addr = alloca <2 x i16>, align 4
  store <2 x i16> %x, <2 x i16>* %x.addr, align 4
  %0 = load <2 x i16>, <2 x i16>* %x.addr, align 4
  %vecins = insertelement <2 x i16> %0, i16 -1, i32 0
  store <2 x i16> %vecins, <2 x i16>* %x.addr, align 4
  %1 = load <2 x i16>, <2 x i16>* %x.addr, align 4
  %vecins1 = insertelement <2 x i16> %1, i16 -2, i32 1
  store <2 x i16> %vecins1, <2 x i16>* %x.addr, align 4
  %2 = load <2 x i16>, <2 x i16>* %x.addr, align 4
  ret <2 x i16> %2
}

define <2 x half> @foo_v2f16(<2 x half> %x){
; CHECK-LABEL: foo_v2f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andw $r0 = $r0, 0xffffffffffff0000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    orw $r0 = $r0, 0xbe00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r0, 0xffffffffc1330000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %x.addr = alloca <2 x half>, align 4
  store <2 x half> %x, <2 x half>* %x.addr, align 4
  %0 = load <2 x half>, <2 x half>* %x.addr, align 4
  %vecins = insertelement <2 x half> %0, half 0xHBE00, i32 0
  store <2 x half> %vecins, <2 x half>* %x.addr, align 4
  %1 = load <2 x half>, <2 x half>* %x.addr, align 4
  %vecins1 = insertelement <2 x half> %1, half 0xHC133, i32 1
  store <2 x half> %vecins1, <2 x half>* %x.addr, align 4
  %2 = load <2 x half>, <2 x half>* %x.addr, align 4
  ret <2 x half> %2
}

