; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --disable-kvx-hwloops=false < %s | FileCheck %s
target triple = "kvx-kalray-cos"

; Test that we generate a hardware loop for long long counters.
; Tests signed/unsigned GT, EQ, and NEQ cases.

; signed GT case
define i32 @f0(i32* nocapture %a0) #0 {
; CHECK-LABEL: f0:
; CHECK:       # %bb.0: # %b0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    make $r2 = 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    loopdo $r2, .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_1: # %b1
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz $r2 = 0[$r0]
; CHECK-NEXT:    addd $r0 = $r0, 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addw $r1 = $r2, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # Block address taken
; CHECK-NEXT:    # %b2
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
b0:
  br label %b1
b1:                                               ; preds = %b1, %b0
  %v0 = phi i32 [ 0, %b0 ], [ %v5, %b1 ]
  %v1 = phi i64 [ 0, %b0 ], [ %v6, %b1 ]
  %v2 = trunc i64 %v1 to i32
  %v3 = getelementptr inbounds i32, i32* %a0, i32 %v2
  %v4 = load i32, i32* %v3, align 4
  %v5 = add nsw i32 %v4, %v0
  %v6 = add nsw i64 %v1, 1
  %v7 = icmp slt i64 %v6, 8
  br i1 %v7, label %b1, label %b2

b2:                                               ; preds = %b1
  ret i32 %v5
}

; unsigned signed GT case
define i32 @f1(i32* nocapture %a0) #0 {
; CHECK-LABEL: f1:
; CHECK:       # %bb.0: # %b0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    make $r2 = 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    loopdo $r2, .LBB1_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB1_1: # %b1
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz $r2 = 0[$r0]
; CHECK-NEXT:    addd $r0 = $r0, 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addw $r1 = $r2, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB1_2: # Block address taken
; CHECK-NEXT:    # %b2
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
b0:
  br label %b1
b1:                                               ; preds = %b1, %b0
  %v0 = phi i32 [ 0, %b0 ], [ %v5, %b1 ]
  %v1 = phi i64 [ 0, %b0 ], [ %v6, %b1 ]
  %v2 = trunc i64 %v1 to i32
  %v3 = getelementptr inbounds i32, i32* %a0, i32 %v2
  %v4 = load i32, i32* %v3, align 4
  %v5 = add nsw i32 %v4, %v0
  %v6 = add i64 %v1, 1
  %v7 = icmp ult i64 %v6, 8
  br i1 %v7, label %b1, label %b2

b2:                                               ; preds = %b1
  ret i32 %v5
}

; EQ case
define i32 @f2(i32* nocapture %a0) #0 {
; CHECK-LABEL: f2:
; CHECK:       # %bb.0: # %b0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    make $r2 = 0
; CHECK-NEXT:    make $r3 = 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    loopdo $r3, .LBB2_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB2_1: # %b1
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz $r3 = $r2[$r0]
; CHECK-NEXT:    addd $r2 = $r2, 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addw $r1 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB2_2: # Block address taken
; CHECK-NEXT:    # %b2
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
b0:
  br label %b1

b1:                                               ; preds = %b1, %b0
  %v0 = phi i32 [ 0, %b0 ], [ %v5, %b1 ]
  %v1 = phi i64 [ 0, %b0 ], [ %v6, %b1 ]
  %v2 = trunc i64 %v1 to i32
  %v3 = getelementptr inbounds i32, i32* %a0, i32 %v2
  %v4 = load i32, i32* %v3, align 4
  %v5 = add nsw i32 %v4, %v0
  %v6 = add nsw i64 %v1, 1
  %v7 = icmp eq i64 %v6, 8
  br i1 %v7, label %b2, label %b1

b2:                                               ; preds = %b1
  ret i32 %v5
}
