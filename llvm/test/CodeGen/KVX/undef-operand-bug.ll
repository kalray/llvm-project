; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc  -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define void @zext_dagcombine_fail() {
; CHECK-LABEL: zext_dagcombine_fail:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_11
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_11
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_11
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.3: # %.preheader3
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_11
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.4:
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_10
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.weqz $r0 ? .LBB0_10
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.6:
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_10
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.7:
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_10
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.8:
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_10
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.9:
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_10:
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_11:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  br i1 undef, label %2, label %1

1:
  br label %3

2:
  ret void

3:
  br i1 undef, label %7, label %4

4:
  br i1 undef, label %5, label %6

5:
  br label %7

6:
  br label %8

7:
  br i1 undef, label %2, label %3

8:
  br i1 undef, label %26, label %9

9:
  br i1 undef, label %11, label %10

10:
  br i1 undef, label %11, label %10

11:
  br i1 undef, label %13, label %12

12:
  br i1 undef, label %13, label %28

13:
  %14 = phi <16 x i8> [ undef, %11 ], [ undef, %12 ], [ undef, %28 ], [ undef, %29 ], [ undef, %30 ], [ %32, %31 ], [ undef, %33 ], [ undef, %34 ]
  %15 = shufflevector <16 x i8> %14, <16 x i8> poison, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = select <16 x i1> undef, <16 x i8> %14, <16 x i8> %15
  %17 = shufflevector <16 x i8> %16, <16 x i8> poison, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = select <16 x i1> undef, <16 x i8> %16, <16 x i8> %17
  %19 = select <16 x i1> zeroinitializer, <16 x i8> %18, <16 x i8> undef
  %20 = shufflevector <16 x i8> %19, <16 x i8> poison, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = icmp ult <16 x i8> %19, %20
  %22 = select <16 x i1> %21, <16 x i8> %19, <16 x i8> %20
  %23 = extractelement <16 x i8> %22, i32 0
  br i1 undef, label %25, label %26

24:
  br i1 undef, label %7, label %6

25:
  br i1 undef, label %24, label %8

26:
  %27 = phi i8 [ undef, %26 ], [ undef, %8 ], [ %23, %13 ]
  br i1 undef, label %26, label %25

28:
  br i1 undef, label %13, label %29

29:
  br i1 undef, label %13, label %30

30:
  br i1 undef, label %13, label %31

31:
  %32 = select <16 x i1> undef, <16 x i8> undef, <16 x i8> undef
  br i1 undef, label %13, label %33

33:
  br i1 undef, label %13, label %34

34:
  br label %13
}
