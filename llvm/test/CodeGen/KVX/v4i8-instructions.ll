; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define <4 x i8> @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x2010201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  ret <4 x i8> <i8 1, i8 2, i8 1, i8 2>
}

define i8 @test_extract_0(<4 x i8> %a) #0 {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxbd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i8> %a, i8 0
  ret i8 %e
}

define i8 @test_extract_1(<4 x i8> %a) #0 {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r0 = $r0, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i8> %a, i8 1
  ret i8 %e
}

define i8 @test_extract_2(<4 x i8> %a) #0 {
; CHECK-LABEL: test_extract_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r0 = $r0, 23, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i8> %a, i8 2
  ret i8 %e
}

define i8 @test_extract_3(<4 x i8> %a) #0 {
; CHECK-LABEL: test_extract_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r0 = $r0, 24
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i8> %a, i8 3
  ret i8 %e
}

define <4 x i8> @test_fma(<4 x i8> %a, <4 x i8> %b, <4 x i8> %c) #0 {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r2 = $r2
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddhq $r0 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <4 x i8> %b, %c
  %ad = add <4 x i8> %a, %m
  ret <4 x i8> %ad
}

define <4 x i8> @test_fma_imm(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_fma_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddhq $r0 = $r1, 0x3000100020007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <4 x i8> <i8 7, i8 2, i8 1, i8 3>, %b
  %ad = add <4 x i8> %a, %m
  ret <4 x i8> %ad
}


define <4 x i8> @test_fma_imm_2(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_fma_imm_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddhq $r0 = $r1, 0x2000100020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %b
  %ad = add <4 x i8> %a, %m
  ret <4 x i8> %ad
}

; Can improve this by using srld (lshl %i, 4)
define i8 @test_extract_i(<4 x i8> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andd $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r2 = $r12, 28
; CHECK-NEXT:    sw 28[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = $r1[$r2]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i8> %a, i64 %idx
  ret i8 %e
}

define <4 x i8> @test_add(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_add:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addhq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i8> %a, %b
  ret <4 x i8> %r
}

define <4 x i8> @test_add_imm_0(<4 x i8> %a) #0 {
; CHECK-LABEL: test_add_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addhq.@ $r0 = $r0, 0x20001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %a
  ret <4 x i8> %r
}

define <4 x i8> @test_add_imm_1(<4 x i8> %a) #0 {
; CHECK-LABEL: test_add_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addhq.@ $r0 = $r0, 0x20001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i8> %a, <i8 1, i8 2, i8 1, i8 2>
  ret <4 x i8> %r
}

define <4 x i8> @test_sub(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_sub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i8> %a, %b
  ret <4 x i8> %r
}

define <4 x i8> @test_sub_imm(<4 x i8> %a) #0 {
; CHECK-LABEL: test_sub_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addhq.@ $r0 = $r0, 0xfffeffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i8> %a, <i8 1, i8 2, i8 1, i8 2>
  ret <4 x i8> %r
}

define <4 x i8> @test_sub_fromimm(<4 x i8> %a) #0 {
; CHECK-LABEL: test_sub_fromimm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfhq.@ $r0 = $r0, 0x20001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %a
  ret <4 x i8> %r
}

define <4 x i8> @test_neg(<4 x i8> %a) #0 {
; CHECK-LABEL: test_neg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    neghq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i8> <i8 0, i8 0, i8 0, i8 0>, %a
  ret <4 x i8> %r
}

; FIXME: The calling convention passes 2 <2 x i8> and
; dag combine decides to not use <4 x i8> for a single
; instruction.
define <4 x i8> @test_mul(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_mul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulhq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <4 x i8> %a, %b
  ret <4 x i8> %r
}

define <4 x i8> @test_mul_2(<4 x i8> %a, <4 x i8> %b, <4 x i8> %c) #0 {
; CHECK-LABEL: test_mul_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulhq $r0 = $r0, $r1
; CHECK-NEXT:    sxlbhq $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulhq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <4 x i8> %a, %b
  %r1 = mul <4 x i8> %r, %c
  ret <4 x i8> %r1
}

define <4 x i8> @test_div(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_div:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r19, 24
; CHECK-NEXT:    srlw $r1 = $r18, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r1 = $r18, 23, 16
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    extfz $r0 = $r19, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    extfz $r0 = $r19, 15, 8
; CHECK-NEXT:    extfz $r1 = $r18, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r21 = $r20, 15, 8
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxbd $r1 = $r18
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    zxbd $r0 = $r19
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 15, 8
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r21, 31, 16
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sdiv <4 x i8> %a, %b
  ret <4 x i8> %r
}

; TODO: Eliminate duplicate sxwd after a sxbd
define <4 x i8> @test_rem(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_rem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r19, 24
; CHECK-NEXT:    srlw $r1 = $r18, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r1 = $r18, 23, 16
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    extfz $r0 = $r19, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    extfz $r0 = $r19, 15, 8
; CHECK-NEXT:    extfz $r1 = $r18, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r21 = $r20, 15, 8
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxbd $r1 = $r18
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    zxbd $r0 = $r19
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 15, 8
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r21, 31, 16
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = srem <4 x i8> %a, %b
  ret <4 x i8> %r
}

define void @test_ldst_v4i8(<4 x i8>* %a, <4 x i8>* %b) {
; CHECK-LABEL: test_ldst_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %t1 = load <4 x i8>, <4 x i8>* %a
  store <4 x i8> %t1, <4 x i8>* %b, align 16
  ret void
}

declare <4 x i8> @test_callee(<4 x i8> %a, <4 x i8> %b) #0

define <4 x i8> @test_call(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i8> @test_callee(<4 x i8> %a, <4 x i8> %b)
  ret <4 x i8> %r
}

define <4 x i8> @test_call_flipped(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i8> @test_callee(<4 x i8> %b, <4 x i8> %a)
  ret <4 x i8> %r
}

; Can perform swap in a single bundle
define <4 x i8> @test_tailcall_flipped(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
  %r = tail call <4 x i8> @test_callee(<4 x i8> %b, <4 x i8> %a)
  ret <4 x i8> %r
}

define <4 x i8> @test_select(<4 x i8> %a, <4 x i8> %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyw $r3 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r3 ? $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andnw $r1 = $r2, $r1
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = select i1 %c, <4 x i8> %a, <4 x i8> %b
  ret <4 x i8> %r
}

define <4 x i8> @test_select_cc(<4 x i8> %a, <4 x i8> %b, <4 x i8> %c, <4 x i8> %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r3 = $r3
; CHECK-NEXT:    sxlbhq $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.lt $r2 = $r2, $r3
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r2 = $r2, 0xff00ff00ff00ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp slt <4 x i8> %c, %d
  %r = select <4 x i1> %cc, <4 x i8> %a, <4 x i8> %b
  ret <4 x i8> %r
}

define <4 x i64> @test_select_cc_f32_f32(<4 x i64> %a, <4 x i64> %b, <4 x i8> %c, <4 x i8> %d) #0 {
; CHECK-LABEL: test_select_cc_f32_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r9 = $r9, 0x8000400020001
; CHECK-NEXT:    sbmm8 $r8 = $r8, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ltu $r8 = $r8, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r8 = $r8, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r9 = $r8, 24
; CHECK-NEXT:    extfz $r10 = $r8, 23, 16
; CHECK-NEXT:    zxbd $r11 = $r8
; CHECK-NEXT:    extfz $r8 = $r8, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r9 = $r9
; CHECK-NEXT:    sxbd $r10 = $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r11 = $r11
; CHECK-NEXT:    sxbd $r8 = $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r11 ? $r4 = $r0
; CHECK-NEXT:    cmoved.dnez $r8 ? $r5 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r10 ? $r6 = $r2
; CHECK-NEXT:    cmoved.dnez $r9 ? $r7 = $r3
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp ult <4 x i8> %c, %d
  %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i1> @test_icmp_ule(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_icmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ule <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_slt(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_icmp_slt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp slt <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ugt(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_icmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ugt <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_uge(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_icmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp uge <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ult(<4 x i8> %a, <4 x i8> %b) #0 {
; CHECK-LABEL: test_icmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ult <4 x i8> %a, %b
  ret <4 x i1> %r
}

define <4 x i64> @test_sext_2xi64(<4 x i8> %a) #0 {
; CHECK-LABEL: test_sext_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxbd $r1 = $r0
; CHECK-NEXT:    extfz $r2 = $r0, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r4 = $r1
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    srlw $r0 = $r0, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r3 = $r0
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r2 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sext <4 x i8> %a to <4 x i64>
  ret <4 x i64> %r
}

declare <4 x i8> @llvm.abs.v4i8(<4 x i8>, i1) #0

define <4 x i8> @test_abs(<4 x i8> %a) #0 {
; CHECK-LABEL: test_abs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r1 = $r0, 24
; CHECK-NEXT:    extfz $r2 = $r0, 23, 16
; CHECK-NEXT:    extfz $r3 = $r0, 15, 8
; CHECK-NEXT:    zxbd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    sxbd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r3 = $r3
; CHECK-NEXT:    sxbd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    absw $r1 = $r1
; CHECK-NEXT:    absw $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    absw $r3 = $r3
; CHECK-NEXT:    absw $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i8> @llvm.abs.v4i8(<4 x i8> %a, i1 false)
  ret <4 x i8> %r
}

define <4 x i8> @test_insertelement0(<4 x i8> %a, i8 %x) #0 {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 7, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i8> %a, i8 %x, i64 0
  ret <4 x i8> %i
}

define <4 x i8> @test_insertelement1(<4 x i8> %a, i8 %x) #0 {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i8> %a, i8 %x, i64 1
  ret <4 x i8> %i
}

define <4 x i8> @test_insertelement2(<4 x i8> %a, i8 %x) #0 {
; CHECK-LABEL: test_insertelement2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 23, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i8> %a, i8 %x, i64 2
  ret <4 x i8> %i
}

define <4 x i8> @test_insertelement3(<4 x i8> %a, i8 %x) #0 {
; CHECK-LABEL: test_insertelement3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 24
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i8> %a, i8 %x, i64 3
  ret <4 x i8> %i
}

define <4 x i8> @test_insertelement(<4 x i8> %a, i8 %x, i64 %p) #0 {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andd $r2 = $r2, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r3 = $r12, 28
; CHECK-NEXT:    sw 28[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sb $r2[$r3] = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r0 = 28[$r12]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i8> %a, i8 %x, i64 %p
  ret <4 x i8> %i
}

define <4 x i8> @mulsub(<4 x i8> %a, <4 x i8> %b, <4 x i8> %c) #0 {
; CHECK-LABEL: mulsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r2 = $r2
; CHECK-NEXT:    sxlbhq $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    msbfhq $r0 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %mul = mul <4 x i8> %b, %c
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @vnot(<4 x i8> %a) #0 {
; CHECK-LABEL: vnot:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %vnot = xor <4 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %vnot
}

define <4 x i8> @nandw_v2i8_rr(<4 x i8> %0, <4 x i8> %1) {
; CHECK-LABEL: nandw_v2i8_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and <4 x i8> %1, %0
  %4 = xor <4 x i8> %3, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %4
}

define <4 x i8> @nandw_v2i8_ri10(<4 x i8> %0) {
; CHECK-LABEL: nandw_v2i8_ri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandw $r0 = $r0, 0xff00ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i8> %0, <i8 1023, i8 0, i8 1023, i8 0>
  %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %3
}

define <4 x i8> @nandw_v2i8_ri37(<4 x i8> %0) {
; CHECK-LABEL: nandw_v2i8_ri37:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandw $r0 = $r0, 0xfc00fc
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i8> %0, <i8 252, i8 0, i8 252, i8 0>
  %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %3
}

define <4 x i8> @nandw_v2i8_ri37_2(<4 x i8> %0) {
; CHECK-LABEL: nandw_v2i8_ri37_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandw $r0 = $r0, 0xd0d0d0d
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = and <4 x i8> %0, <i8 13, i8 13, i8 13, i8 13>
  %3 = xor <4 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1>
  ret <4 x i8> %3
}

define <4 x i8> @concat(<2 x i8> %a, <2 x i8> %b){
; CHECK-LABEL: concat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v = shufflevector <2 x i8> %a, <2 x i8> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i8> %v
}

attributes #0 = { nounwind }
