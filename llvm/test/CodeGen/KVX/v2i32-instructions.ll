; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=V2
target triple = "kvx-kalray-cos"

define <2 x i32> @test_ret_const() {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x200000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_ret_const:
; V2:       # %bb.0:
; V2-NEXT:    make $r0 = 0x200000001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  ret <2 x i32> <i32 1, i32 2>
}

define i32 @test_extract_0(<2 x i32> %a) {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_extract_0:
; V2:       # %bb.0:
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %e = extractelement <2 x i32> %a, i32 0
  ret i32 %e
}

define i32 @test_extract_1(<2 x i32> %a) {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_extract_1:
; V2:       # %bb.0:
; V2-NEXT:    srad $r0 = $r0, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %e = extractelement <2 x i32> %a, i32 1
  ret i32 %e
}

define i32 @test_extract_i(<2 x i32> %a, i64 %idx) {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllw $r1 = $r1, 6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_extract_i:
; V2:       # %bb.0:
; V2-NEXT:    sllw $r1 = $r1, 6
; V2-NEXT:    ;;
; V2-NEXT:    srld $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %e = extractelement <2 x i32> %a, i64 %idx
  ret i32 %e
}

define <2 x i32> @test_add(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_add:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_add:
; V2:       # %bb.0:
; V2-NEXT:    addwp $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = add <2 x i32> %a, %b
  ret <2 x i32> %r
}

define <2 x i32> @test_add_imm_0(<2 x i32> %a) {
; CHECK-LABEL: test_add_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x200000001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_add_imm_0:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x200000001
; V2-NEXT:    ;;
; V2-NEXT:    addwp $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = add <2 x i32> <i32 1, i32 2>, %a
  ret <2 x i32> %r
}

define <2 x i32> @test_add_imm_1(<2 x i32> %a) {
; CHECK-LABEL: test_add_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x200000001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_add_imm_1:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x200000001
; V2-NEXT:    ;;
; V2-NEXT:    addwp $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = add <2 x i32> %a, <i32 1, i32 2>
  ret <2 x i32> %r
}

define <2 x i32> @test_sub(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_sub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbfwp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_sub:
; V2:       # %bb.0:
; V2-NEXT:    sbfwp $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = sub <2 x i32> %a, %b
  ret <2 x i32> %r
}

define <2 x i32> @test_sub_imm(<2 x i32> %a) {
; CHECK-LABEL: test_sub_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x200000001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfwp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_sub_imm:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x200000001
; V2-NEXT:    ;;
; V2-NEXT:    sbfwp $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = sub <2 x i32> %a, <i32 1, i32 2>
  ret <2 x i32> %r
}

define <2 x i32> @test_sub_fromimm(<2 x i32> %a) {
; CHECK-LABEL: test_sub_fromimm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x200000001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_sub_fromimm:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x200000001
; V2-NEXT:    ;;
; V2-NEXT:    sbfwp $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = sub <2 x i32> <i32 1, i32 2>, %a
  ret <2 x i32> %r
}


define <2 x i32> @test_fma(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c) {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddwp $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_fma:
; V2:       # %bb.0:
; V2-NEXT:    maddwp $r0 = $r1, $r2
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %m = mul <2 x i32> %b, %c
  %ad = add <2 x i32> %a, %m
  ret <2 x i32> %ad
}

define <2 x i32> @test_fma_imm(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_fma_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddwp $r0 = $r1, 0x200000005
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_fma_imm:
; V2:       # %bb.0:
; V2-NEXT:    maddwp $r0 = $r1, 0x200000005
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %m = mul <2 x i32> <i32 5, i32 2>, %b
  %ad = add <2 x i32> %a, %m
  ret <2 x i32> %ad
}

define <2 x i32> @test_fma_imm_2(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_fma_imm_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddwp $r0 = $r1, 0x200000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_fma_imm_2:
; V2:       # %bb.0:
; V2-NEXT:    maddwp $r0 = $r1, 0x200000001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %m = mul <2 x i32> <i32 1, i32 2>, %b
  %ad = add <2 x i32> %a, %m
  ret <2 x i32> %ad
}

define <2 x i32> @test_neg(<2 x i32> %a) {
; CHECK-LABEL: test_neg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    negwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_neg:
; V2:       # %bb.0:
; V2-NEXT:    negwp $r0 = $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = sub <2 x i32> <i32 0, i32 0>, %a
  ret <2 x i32> %r
}

define <2 x i32> @test_mul(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_mul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_mul:
; V2:       # %bb.0:
; V2-NEXT:    mulwp $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = mul <2 x i32> %a, %b
  ret <2 x i32> %r
}

define <2 x i32> @test_mul_2(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c) {
; CHECK-LABEL: test_mul_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulwp $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwp $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_mul_2:
; V2:       # %bb.0:
; V2-NEXT:    mulwp $r0 = $r0, $r1
; V2-NEXT:    ;;
; V2-NEXT:    mulwp $r0 = $r0, $r2
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = mul <2 x i32> %a, %b
  %r1 = mul <2 x i32> %r, %c
  ret <2 x i32> %r1
}

define <2 x i32> @test_div(<2 x i32> %a, <2 x i32> %b) #0 {
; CHECK-LABEL: test_div:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r0 = $r19, 32
; CHECK-NEXT:    srad $r1 = $r18, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    sxwd $r0 = $r19
; CHECK-NEXT:    sxwd $r1 = $r18
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 63, 32
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_div:
; V2:       # %bb.0:
; V2-NEXT:    addd $r12 = $r12, -32
; V2-NEXT:    get $r16 = $ra
; V2-NEXT:    ;;
; V2-NEXT:    sd 24[$r12] = $r16
; V2-NEXT:    ;;
; V2-NEXT:    sd 16[$r12] = $r20
; V2-NEXT:    ;;
; V2-NEXT:    sq 0[$r12] = $r18r19
; V2-NEXT:    copyd $r18 = $r1
; V2-NEXT:    copyd $r19 = $r0
; V2-NEXT:    ;;
; V2-NEXT:    srad $r0 = $r19, 32
; V2-NEXT:    srad $r1 = $r18, 32
; V2-NEXT:    ;;
; V2-NEXT:    sxwd $r0 = $r0
; V2-NEXT:    sxwd $r1 = $r1
; V2-NEXT:    call __divdi3
; V2-NEXT:    ;;
; V2-NEXT:    copyd $r20 = $r0
; V2-NEXT:    sxwd $r0 = $r19
; V2-NEXT:    sxwd $r1 = $r18
; V2-NEXT:    call __divdi3
; V2-NEXT:    ;;
; V2-NEXT:    insf $r0 = $r20, 63, 32
; V2-NEXT:    lq $r18r19 = 0[$r12]
; V2-NEXT:    ;;
; V2-NEXT:    ld $r20 = 16[$r12]
; V2-NEXT:    ;;
; V2-NEXT:    ld $r16 = 24[$r12]
; V2-NEXT:    ;;
; V2-NEXT:    set $ra = $r16
; V2-NEXT:    addd $r12 = $r12, 32
; V2-NEXT:    ;;
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = sdiv <2 x i32> %a, %b
  ret <2 x i32> %r
}

define <2 x i32> @test_rem(<2 x i32> %a, <2 x i32> %b) #0 {
; CHECK-LABEL: test_rem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r0 = $r19, 32
; CHECK-NEXT:    srad $r1 = $r18, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    sxwd $r0 = $r19
; CHECK-NEXT:    sxwd $r1 = $r18
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r20, 63, 32
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_rem:
; V2:       # %bb.0:
; V2-NEXT:    addd $r12 = $r12, -32
; V2-NEXT:    get $r16 = $ra
; V2-NEXT:    ;;
; V2-NEXT:    sd 24[$r12] = $r16
; V2-NEXT:    ;;
; V2-NEXT:    sd 16[$r12] = $r20
; V2-NEXT:    ;;
; V2-NEXT:    sq 0[$r12] = $r18r19
; V2-NEXT:    copyd $r18 = $r1
; V2-NEXT:    copyd $r19 = $r0
; V2-NEXT:    ;;
; V2-NEXT:    srad $r0 = $r19, 32
; V2-NEXT:    srad $r1 = $r18, 32
; V2-NEXT:    ;;
; V2-NEXT:    sxwd $r0 = $r0
; V2-NEXT:    sxwd $r1 = $r1
; V2-NEXT:    call __moddi3
; V2-NEXT:    ;;
; V2-NEXT:    copyd $r20 = $r0
; V2-NEXT:    sxwd $r0 = $r19
; V2-NEXT:    sxwd $r1 = $r18
; V2-NEXT:    call __moddi3
; V2-NEXT:    ;;
; V2-NEXT:    insf $r0 = $r20, 63, 32
; V2-NEXT:    lq $r18r19 = 0[$r12]
; V2-NEXT:    ;;
; V2-NEXT:    ld $r20 = 16[$r12]
; V2-NEXT:    ;;
; V2-NEXT:    ld $r16 = 24[$r12]
; V2-NEXT:    ;;
; V2-NEXT:    set $ra = $r16
; V2-NEXT:    addd $r12 = $r12, 32
; V2-NEXT:    ;;
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = srem <2 x i32> %a, %b
  ret <2 x i32> %r
}

define void @test_ldst_v2i32(<2 x i32>* %a, <2 x i32>* %b) {
; CHECK-LABEL: test_ldst_v2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_ldst_v2i32:
; V2:       # %bb.0:
; V2-NEXT:    ld $r0 = 0[$r0]
; V2-NEXT:    ;;
; V2-NEXT:    sd 0[$r1] = $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %t1 = load <2 x i32>, <2 x i32>* %a
  store <2 x i32> %t1, <2 x i32>* %b, align 16
  ret void
}

declare <2 x i32> @test_callee(<2 x i32> %a, <2 x i32> %b)

define <2 x i32> @test_call(<2 x i32> %a, <2 x i32> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_call:
; V2:       # %bb.0:
; V2-NEXT:    addd $r12 = $r12, -32
; V2-NEXT:    get $r16 = $ra
; V2-NEXT:    ;;
; V2-NEXT:    sd 24[$r12] = $r16
; V2-NEXT:    call test_callee
; V2-NEXT:    ;;
; V2-NEXT:    ld $r16 = 24[$r12]
; V2-NEXT:    ;;
; V2-NEXT:    set $ra = $r16
; V2-NEXT:    addd $r12 = $r12, 32
; V2-NEXT:    ;;
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = call <2 x i32> @test_callee(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %r
}

define <2 x i32> @test_call_flipped(<2 x i32> %a, <2 x i32> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_call_flipped:
; V2:       # %bb.0:
; V2-NEXT:    addd $r12 = $r12, -32
; V2-NEXT:    get $r16 = $ra
; V2-NEXT:    ;;
; V2-NEXT:    sd 24[$r12] = $r16
; V2-NEXT:    copyd $r2 = $r0
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ;;
; V2-NEXT:    copyd $r1 = $r2
; V2-NEXT:    call test_callee
; V2-NEXT:    ;;
; V2-NEXT:    ld $r16 = 24[$r12]
; V2-NEXT:    ;;
; V2-NEXT:    set $ra = $r16
; V2-NEXT:    addd $r12 = $r12, 32
; V2-NEXT:    ;;
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = call <2 x i32> @test_callee(<2 x i32> %b, <2 x i32> %a)
  ret <2 x i32> %r
}

define <2 x i32> @test_tailcall_flipped(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_tailcall_flipped:
; V2:       # %bb.0:
; V2-NEXT:    copyd $r2 = $r0
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ;;
; V2-NEXT:    copyd $r1 = $r2
; V2-NEXT:    goto test_callee
; V2-NEXT:    ;;
  %r = tail call <2 x i32> @test_callee(<2 x i32> %b, <2 x i32> %a)
  ret <2 x i32> %r
}

define <2 x i32> @test_select(<2 x i32> %a, <2 x i32> %b, i1 zeroext %c) {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_select:
; V2:       # %bb.0:
; V2-NEXT:    cmoved.even $r2 ? $r0 = $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = select i1 %c, <2 x i32> %a, <2 x i32> %b
  ret <2 x i32> %r
}

define <2 x i32> @test_select_cc(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c, <2 x i32> %d) {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnwp.lt $r2 = $r2, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovewp.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_select_cc:
; V2:       # %bb.0:
; V2-NEXT:    compnwp.lt $r2 = $r2, $r3
; V2-NEXT:    ;;
; V2-NEXT:    cmovewp.even $r2 ? $r0 = $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %cc = icmp slt <2 x i32> %c, %d
  %r = select <2 x i1> %cc, <2 x i32> %a, <2 x i32> %b
  ret <2 x i32> %r
}

define <2 x i64> @test_select_cc_f32_f32(<2 x i64> %a, <2 x i64> %b, <2 x i32> %c, <2 x i32> %d) {
; CHECK-LABEL: test_select_cc_f32_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnwp.ltu $r4 = $r4, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r5 = $r4, 63, 32
; CHECK-NEXT:    sxwd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r4 ? $r2 = $r0
; CHECK-NEXT:    cmoved.dnez $r5 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_select_cc_f32_f32:
; V2:       # %bb.0:
; V2-NEXT:    compnwp.ltu $r4 = $r4, $r5
; V2-NEXT:    ;;
; V2-NEXT:    extfs $r5 = $r4, 63, 32
; V2-NEXT:    sxwd $r4 = $r4
; V2-NEXT:    ;;
; V2-NEXT:    cmoved.dnez $r4 ? $r2 = $r0
; V2-NEXT:    cmoved.dnez $r5 ? $r3 = $r1
; V2-NEXT:    ;;
; V2-NEXT:    copyd $r0 = $r2
; V2-NEXT:    copyd $r1 = $r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %cc = icmp ult <2 x i32> %c, %d
  %r = select <2 x i1> %cc, <2 x i64> %a, <2 x i64> %b
  ret <2 x i64> %r
}

define <2 x i1> @test_icmp_ule(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_icmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnwp.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x1001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_icmp_ule:
; V2:       # %bb.0:
; V2-NEXT:    compnwp.leu $r0 = $r0, $r1
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r0 = $r0, 0x1001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = icmp ule <2 x i32> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_slt(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_icmp_slt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnwp.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x1001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_icmp_slt:
; V2:       # %bb.0:
; V2-NEXT:    compnwp.lt $r0 = $r0, $r1
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r0 = $r0, 0x1001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = icmp slt <2 x i32> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_ugt(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_icmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnwp.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x1001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_icmp_ugt:
; V2:       # %bb.0:
; V2-NEXT:    compnwp.gtu $r0 = $r0, $r1
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r0 = $r0, 0x1001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = icmp ugt <2 x i32> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_uge(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_icmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnwp.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x1001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_icmp_uge:
; V2:       # %bb.0:
; V2-NEXT:    compnwp.geu $r0 = $r0, $r1
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r0 = $r0, 0x1001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = icmp uge <2 x i32> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_icmp_ult(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_icmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compnwp.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x1001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_icmp_ult:
; V2:       # %bb.0:
; V2-NEXT:    compnwp.ltu $r0 = $r0, $r1
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r0 = $r0, 0x1001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = icmp ult <2 x i32> %a, %b
  ret <2 x i1> %r
}

define <2 x i64> @test_sext_2xi64(<2 x i32> %a) {
; CHECK-LABEL: test_sext_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfs $r1 = $r0, 63, 32
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_sext_2xi64:
; V2:       # %bb.0:
; V2-NEXT:    extfs $r1 = $r0, 63, 32
; V2-NEXT:    sxwd $r0 = $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = sext <2 x i32> %a to <2 x i64>
  ret <2 x i64> %r
}

declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1) #0

define <2 x i32> @test_abs(<2 x i32> %a) {
; CHECK-LABEL: test_abs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    abswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_abs:
; V2:       # %bb.0:
; V2-NEXT:    abswp $r0 = $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %a, i1 false)
  ret <2 x i32> %r
}

define <2 x i32> @test_insertelement0(<2 x i32> %a, i32 %x) {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_insertelement0:
; V2:       # %bb.0:
; V2-NEXT:    insf $r0 = $r1, 31, 0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %i = insertelement <2 x i32> %a, i32 %x, i64 0
  ret <2 x i32> %i
}

define <2 x i32> @test_insertelement1(<2 x i32> %a, i32 %x) {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_insertelement1:
; V2:       # %bb.0:
; V2-NEXT:    insf $r0 = $r1, 63, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %i = insertelement <2 x i32> %a, i32 %x, i64 1
  ret <2 x i32> %i
}

define <2 x i32> @test_insertelement(<2 x i32> %a, i32 %x, i64 %p) {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r3 = $r0
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r1, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r2 ? $r0 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: test_insertelement:
; V2:       # %bb.0:
; V2-NEXT:    copyd $r3 = $r0
; V2-NEXT:    insf $r0 = $r1, 63, 32
; V2-NEXT:    ;;
; V2-NEXT:    insf $r3 = $r1, 31, 0
; V2-NEXT:    ;;
; V2-NEXT:    cmoved.even $r2 ? $r0 = $r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %i = insertelement <2 x i32> %a, i32 %x, i64 %p
  ret <2 x i32> %i
}

define <2 x i32> @mulsub(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c) {
; CHECK-LABEL: mulsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfwp $r0 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: mulsub:
; V2:       # %bb.0:
; V2-NEXT:    msbfwp $r0 = $r1, $r2
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %mul = mul <2 x i32> %b, %c
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @vnot(<2 x i32> %a) {
; CHECK-LABEL: vnot:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: vnot:
; V2:       # %bb.0:
; V2-NEXT:    notd $r0 = $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %vnot = xor <2 x i32> %a, <i32 -1, i32 -1>
  ret <2 x i32> %vnot
}

define <2 x i32> @shuffle_v2i32_0_0(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_0_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r0, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_0_0:
; V2:       # %bb.0: # %entry
; V2-NEXT:    insf $r0 = $r0, 63, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 0, i32 0>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_0_1(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_0_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_0_1:
; V2:       # %bb.0: # %entry
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 0, i32 1>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_0_2(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_0_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_0_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    insf $r0 = $r1, 63, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 0, i32 2>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_0_3(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_0_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r1 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_0_3:
; V2:       # %bb.0: # %entry
; V2-NEXT:    srad $r1 = $r1, 32
; V2-NEXT:    ;;
; V2-NEXT:    insf $r0 = $r1, 63, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 0, i32 3>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_1_0(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_1_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_1_0:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbmm8 $r0 = $r0, 0x804020180402010
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 1, i32 0>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_1_1(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_1_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8040201080402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_1_1:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbmm8 $r0 = $r0, 0x8040201080402010
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 1, i32 1>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_1_2(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_1_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_1_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    insf $r0 = $r1, 31, 0
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r0 = $r0, 0x804020180402010
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 1, i32 2>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_1_3(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_1_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r1 = $r1, 32
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_1_3:
; V2:       # %bb.0: # %entry
; V2-NEXT:    srad $r1 = $r1, 32
; V2-NEXT:    srad $r0 = $r0, 32
; V2-NEXT:    ;;
; V2-NEXT:    insf $r0 = $r1, 63, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 1, i32 3>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_2_0(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_2_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r1 = $r0, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_2_0:
; V2:       # %bb.0: # %entry
; V2-NEXT:    insf $r1 = $r0, 63, 32
; V2-NEXT:    ;;
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 2, i32 0>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_2_1(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_2_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r2 = $r0, 32
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_2_1:
; V2:       # %bb.0: # %entry
; V2-NEXT:    srad $r2 = $r0, 32
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ;;
; V2-NEXT:    insf $r0 = $r2, 63, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 2, i32 1>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_2_2(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_2_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r0, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_2_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ;;
; V2-NEXT:    insf $r0 = $r0, 63, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 2, i32 2>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_2_3(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_2_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_2_3:
; V2:       # %bb.0: # %entry
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 2, i32 3>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_3_0(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_3_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r1 = $r0, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r1, 0x804020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_3_0:
; V2:       # %bb.0: # %entry
; V2-NEXT:    insf $r1 = $r0, 31, 0
; V2-NEXT:    ;;
; V2-NEXT:    sbmm8 $r0 = $r1, 0x804020180402010
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 3, i32 0>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_3_1(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_3_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r2 = $r0, 32
; CHECK-NEXT:    srad $r0 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_3_1:
; V2:       # %bb.0: # %entry
; V2-NEXT:    srad $r2 = $r0, 32
; V2-NEXT:    srad $r0 = $r1, 32
; V2-NEXT:    ;;
; V2-NEXT:    insf $r0 = $r2, 63, 32
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 3, i32 1>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_3_2(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_3_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r1, 0x804020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_3_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbmm8 $r0 = $r1, 0x804020180402010
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 3, i32 2>
  ret <2 x i32> %2
}

define <2 x i32> @shuffle_v2i32_3_3(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: shuffle_v2i32_3_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r1, 0x8040201080402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: shuffle_v2i32_3_3:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbmm8 $r0 = $r1, 0x8040201080402010
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %2 = shufflevector <2 x i32> %0, <2 x i32> %1, <2 x i32> <i32 3, i32 3>
  ret <2 x i32> %2
}

define <2 x i32> @lnand(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: lnand:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lnandwp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: lnand:
; V2:       # %bb.0:
; V2-NEXT:    make $r2 = 0
; V2-NEXT:    ;;
; V2-NEXT:    compnwp.eq $r0 = $r0, $r2
; V2-NEXT:    compnwp.eq $r1 = $r1, $r2
; V2-NEXT:    ;;
; V2-NEXT:    ord $r0 = $r1, $r0
; V2-NEXT:    ;;
; V2-NEXT:    andd $r0 = $r0, 0x100000001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = icmp eq <2 x i32> %0, zeroinitializer
  %4 = icmp eq <2 x i32> %1, zeroinitializer
  %5 = or <2 x i1> %4, %3
  %6 = zext <2 x i1> %5 to <2 x i32>
  ret <2 x i32> %6
}

define <2 x i32> @lnandn(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: lnandn:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lnandwp $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: lnandn:
; V2:       # %bb.0:
; V2-NEXT:    make $r2 = 0
; V2-NEXT:    ;;
; V2-NEXT:    compnwp.eq $r0 = $r0, $r2
; V2-NEXT:    compnwp.eq $r1 = $r1, $r2
; V2-NEXT:    ;;
; V2-NEXT:    ord $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = icmp eq <2 x i32> %0, zeroinitializer
  %4 = icmp eq <2 x i32> %1, zeroinitializer
  %5 = or <2 x i1> %4, %3
  %6 = sext <2 x i1> %5 to <2 x i32>
  ret <2 x i32> %6
}

define <2 x i32> @lor(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: lor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lorwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: lor:
; V2:       # %bb.0:
; V2-NEXT:    ord $r0 = $r1, $r0
; V2-NEXT:    make $r1 = 0
; V2-NEXT:    ;;
; V2-NEXT:    compnwp.ne $r0 = $r0, $r1
; V2-NEXT:    ;;
; V2-NEXT:    andd $r0 = $r0, 0x100000001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = or <2 x i32> %1, %0
  %4 = icmp ne <2 x i32> %3, zeroinitializer
  %5 = zext <2 x i1> %4 to <2 x i32>
  ret <2 x i32> %5
}

; Not sure this is better than a (compnwq.ne (ord), (make 0))
define <2 x i32> @lorneg(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: lorneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lorwp $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: lorneg:
; V2:       # %bb.0:
; V2-NEXT:    ord $r0 = $r1, $r0
; V2-NEXT:    make $r1 = 0
; V2-NEXT:    ;;
; V2-NEXT:    compnwp.ne $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = or <2 x i32> %1, %0
  %4 = icmp ne <2 x i32> %3, zeroinitializer
  %5 = sext <2 x i1> %4 to <2 x i32>
  ret <2 x i32> %5
}

define <2 x i32> @lnor(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: lnor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lnorwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: lnor:
; V2:       # %bb.0:
; V2-NEXT:    ord $r0 = $r1, $r0
; V2-NEXT:    make $r1 = 0
; V2-NEXT:    ;;
; V2-NEXT:    compnwp.eq $r0 = $r0, $r1
; V2-NEXT:    ;;
; V2-NEXT:    andd $r0 = $r0, 0x100000001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = or <2 x i32> %1, %0
  %4 = icmp eq <2 x i32> %3, zeroinitializer
  %5 = zext <2 x i1> %4 to <2 x i32>
  ret <2 x i32> %5
}

; Not sure this is better than a (compnwq.eq (ord), (make 0))
define <2 x i32> @lnorneg(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: lnorneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lnorwp $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: lnorneg:
; V2:       # %bb.0:
; V2-NEXT:    ord $r0 = $r1, $r0
; V2-NEXT:    make $r1 = 0
; V2-NEXT:    ;;
; V2-NEXT:    compnwp.eq $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = or <2 x i32> %1, %0
  %4 = icmp eq <2 x i32> %3, zeroinitializer
  %5 = sext <2 x i1> %4 to <2 x i32>
  ret <2 x i32> %5
}


define <2 x i32> @abdwp_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: abdwp_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdwp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: abdwp_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    abdwp $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %sub = sub nsw <2 x i32> %a, %b
  %0 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %sub, i1 true)
  ret <2 x i32> %0
}

define <2 x i32> @abdwp_not_ri(<2 x i32> %0) {
; CHECK-LABEL: abdwp_not_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x100000000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    abdwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: abdwp_not_ri:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x100000000f
; V2-NEXT:    ;;
; V2-NEXT:    abdwp $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %2 = sub nsw <2 x i32> <i32 15, i32 16>, %0
  %3 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2, i1 true)
  ret <2 x i32> %3
}

define <2 x i32> @abdwp_ri_(<2 x i32> %0) {
; CHECK-LABEL: abdwp_ri_:
; CHECK:       # %bb.0:
; CHECK-NEXT:    abdwp $r0 = $r0, 15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: abdwp_ri_:
; V2:       # %bb.0:
; V2-NEXT:    abdwp $r0 = $r0, 15
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %2 = sub nsw <2 x i32> <i32 15, i32 0>, %0
  %3 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2, i1 true)
  ret <2 x i32> %3
}

define <2 x i32> @abdwp_ri_at(<2 x i32> %0) {
; CHECK-LABEL: abdwp_ri_at:
; CHECK:       # %bb.0:
; CHECK-NEXT:    abdwp.@ $r0 = $r0, 0xf
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: abdwp_ri_at:
; V2:       # %bb.0:
; V2-NEXT:    abdwp.@ $r0 = $r0, 0xf
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %2 = sub nsw <2 x i32> <i32 15, i32 15>, %0
  %3 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2, i1 true)
  ret <2 x i32> %3
}

define <2 x i32> @nandd_v2i32_rr(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: nandd_v2i32_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: nandd_v2i32_rr:
; V2:       # %bb.0:
; V2-NEXT:    nandd $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = and <2 x i32> %1, %0
  %4 = xor <2 x i32> %3, <i32 -1, i32 -1>
  ret <2 x i32> %4
}

define <2 x i32> @nandd_v2i32_ri10(<2 x i32> %0) {
; CHECK-LABEL: nandd_v2i32_ri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: nandd_v2i32_ri10:
; V2:       # %bb.0:
; V2-NEXT:    nandd $r0 = $r0, 1023
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %2 = and <2 x i32> %0, <i32 1023, i32 0>
  %3 = xor <2 x i32> %2, <i32 -1, i32 -1>
  ret <2 x i32> %3
}

define <2 x i32> @nandd_v2i32_ri37(<2 x i32> %0) {
; CHECK-LABEL: nandd_v2i32_ri37:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 1024
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: nandd_v2i32_ri37:
; V2:       # %bb.0:
; V2-NEXT:    nandd $r0 = $r0, 1024
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %2 = and <2 x i32> %0, <i32 1024, i32 0>
  %3 = xor <2 x i32> %2, <i32 -1, i32 -1>
  ret <2 x i32> %3
}

define <2 x i32> @nandd_v2i32_ri37_2(<2 x i32> %0) {
; CHECK-LABEL: nandd_v2i32_ri37_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0xd0000000d
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: nandd_v2i32_ri37_2:
; V2:       # %bb.0:
; V2-NEXT:    nandd $r0 = $r0, 0xd0000000d
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %2 = and <2 x i32> %0, <i32 13, i32 13>
  %3 = xor <2 x i32> %2, <i32 -1, i32 -1>
  ret <2 x i32> %3
}

define <2 x i32> @nandd_v2i32_ri64(<2 x i32> %0) {
; CHECK-LABEL: nandd_v2i32_ri64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0xdae1c0000000d
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: nandd_v2i32_ri64:
; V2:       # %bb.0:
; V2-NEXT:    nandd $r0 = $r0, 0xdae1c0000000d
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %2 = and <2 x i32> %0, <i32 13, i32 896540>
  %3 = xor <2 x i32> %2, <i32 -1, i32 -1>
  ret <2 x i32> %3
}

define <2 x i8> @trunc_to_v2i8(<2 x i32> %a){
; CHECK-LABEL: trunc_to_v2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x1001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: trunc_to_v2i8:
; V2:       # %bb.0:
; V2-NEXT:    sbmm8 $r0 = $r0, 0x1001
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %r = trunc <2 x i32> %a to <2 x i8>
  ret <2 x i8> %r
}

define <2 x i8> @trunc_to_v2i8_buildvector(i32 %arg1, i32 %arg2) {
; CHECK-LABEL: trunc_to_v2i8_buildvector:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: trunc_to_v2i8_buildvector:
; V2:       # %bb.0:
; V2-NEXT:    insf $r0 = $r1, 15, 8
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %v0 = insertelement <2 x i32> undef, i32 %arg1, i32 0
  %v1 = insertelement <2 x i32> %v0, i32 %arg2, i32 1
  %conv = trunc <2 x i32> %v1 to <2 x i8>
  ret <2 x i8> %conv
}

define <2 x i32> @MULHWQ(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: MULHWQ:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulhwq $r0r1 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: MULHWQ:
; V2:       # %bb.0: # %entry
; V2-NEXT:    mulhwq $r0r1 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %0 = sext <2 x i16> %a to <2 x i32>
  %1 = sext <2 x i16> %b to <2 x i32>
  %mul = mul nsw <2 x i32> %1, %0
  ret <2 x i32> %mul
}

define <2 x i32> @MULSUHWQ(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: MULSUHWQ:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulsuhwq $r0r1 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: MULSUHWQ:
; V2:       # %bb.0: # %entry
; V2-NEXT:    mulsuhwq $r0r1 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %0 = sext <2 x i16> %a to <2 x i32>
  %1 = zext <2 x i16> %b to <2 x i32>
  %mul = mul nsw <2 x i32> %1, %0
  ret <2 x i32> %mul
}

define <2 x i32> @MULUHWQ(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: MULUHWQ:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    muluhwq $r0r1 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: MULUHWQ:
; V2:       # %bb.0: # %entry
; V2-NEXT:    muluhwq $r0r1 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %0 = zext <2 x i16> %a to <2 x i32>
  %1 = zext <2 x i16> %b to <2 x i32>
  %mul = mul nuw <2 x i32> %1, %0
  ret <2 x i32> %mul
}

define <2 x i32> @MADDHWQ(<2 x i32> %0, <2 x i16> %1, <2 x i16> %2) {
; CHECK-LABEL: MADDHWQ:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddhwq $r0r1 = $r2, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: MADDHWQ:
; V2:       # %bb.0:
; V2-NEXT:    maddhwq $r0r1 = $r2, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %4 = sext <2 x i16> %1 to <2 x i32>
  %5 = sext <2 x i16> %2 to <2 x i32>
  %6 = mul nsw <2 x i32> %5, %4
  %7 = add <2 x i32> %6, %0
  ret <2 x i32> %7
}

define <2 x i32> @MADDSUHWQ(<2 x i32> %0, <2 x i16> %1, <2 x i16> %2) {
; CHECK-LABEL: MADDSUHWQ:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddsuhwq $r0r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: MADDSUHWQ:
; V2:       # %bb.0:
; V2-NEXT:    maddsuhwq $r0r1 = $r1, $r2
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %4 = sext <2 x i16> %1 to <2 x i32>
  %5 = zext <2 x i16> %2 to <2 x i32>
  %6 = mul nsw <2 x i32> %5, %4
  %7 = add <2 x i32> %6, %0
  ret <2 x i32> %7
}

define <2 x i32> @MADDUHWQ(<2 x i32> %0, <2 x i16> %1, <2 x i16> %2) {
; CHECK-LABEL: MADDUHWQ:
; CHECK:       # %bb.0:
; CHECK-NEXT:    madduhwq $r0r1 = $r2, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: MADDUHWQ:
; V2:       # %bb.0:
; V2-NEXT:    madduhwq $r0r1 = $r2, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %4 = zext <2 x i16> %1 to <2 x i32>
  %5 = zext <2 x i16> %2 to <2 x i32>
  %6 = mul nuw <2 x i32> %5, %4
  %7 = add <2 x i32> %6, %0
  ret <2 x i32> %7
}

define <2 x i32> @MSBFHWQ(<2 x i32> %0, <2 x i16> %1, <2 x i16> %2) {
; CHECK-LABEL: MSBFHWQ:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfhwq $r0r1 = $r2, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: MSBFHWQ:
; V2:       # %bb.0:
; V2-NEXT:    msbfhwq $r0r1 = $r2, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %4 = sext <2 x i16> %1 to <2 x i32>
  %5 = sext <2 x i16> %2 to <2 x i32>
  %6 = mul nsw <2 x i32> %5, %4
  %7 = sub <2 x i32> %0, %6
  ret <2 x i32> %7
}

define <2 x i32> @MSBFSUHWQ(<2 x i32> %0, <2 x i16> %1, <2 x i16> %2) {
; CHECK-LABEL: MSBFSUHWQ:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfsuhwq $r0r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: MSBFSUHWQ:
; V2:       # %bb.0:
; V2-NEXT:    msbfsuhwq $r0r1 = $r1, $r2
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %4 = sext <2 x i16> %1 to <2 x i32>
  %5 = zext <2 x i16> %2 to <2 x i32>
  %6 = mul nsw <2 x i32> %5, %4
  %7 = sub <2 x i32> %0, %6
  ret <2 x i32> %7
}

attributes #0 = { nounwind }
