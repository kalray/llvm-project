; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -mcpu=kv3-2 -o - %s | FileCheck %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <2 x i64> @stsudp(<2 x i64> %0) {
; CHECK-LABEL: stsudp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsud $r0 = $r0, 0xbeef
; CHECK-NEXT:    stsud.@ $r1 = $r1, 0xbeeeeeef
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.stsu.i64(i64 %2, i64 48879)
  %4 = extractelement <2 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.stsu.i64(i64 %4, i64 -4688547448578183441)
  %6 = insertelement <2 x i64> undef, i64 %3, i32 0
  %7 = insertelement <2 x i64> %6, i64 %5, i32 1
  ret <2 x i64> %7
}

declare i64 @llvm.kvx.stsu.i64(i64, i64)

define i64 @stsud_ri(i64 %0) {
; CHECK-LABEL: stsud_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0xdeadbeef
; CHECK-NEXT:    ;;
; CHECK-NEXT:    stsud $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.stsu.i64(i64 %0, i64 3735928559)
  ret i64 %2
}

define i64 @stsud_riat(i64 %0) {
; CHECK-LABEL: stsud_riat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsud.@ $r0 = $r0, 0xdeadbeef
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.stsu.i64(i64 %0, i64 -2401053088876216593)
  ret i64 %2
}

define i32 @stsuw_ri(i32 %0) {
; CHECK-LABEL: stsuw_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuw $r0 = $r0, 17
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.stsu.i32(i32 %0, i32 17)
  ret i32 %2
}

declare i32 @llvm.kvx.stsu.i32(i32, i32)

define <2 x i16> @stsuhp(<2 x i16> %0, <2 x i16> %1) {
; CHECK-LABEL: stsuhp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <2 x i16> @llvm.kvx.stsu.v2i16(<2 x i16> %0, <2 x i16> %1)
  ret <2 x i16> %3
}

declare <2 x i16> @llvm.kvx.stsu.v2i16(<2 x i16>, <2 x i16>)

define <2 x i16> @stsuhpri(<2 x i16> %0) {
; CHECK-LABEL: stsuhpri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuhq $r0 = $r0, 0x660096
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i16> @llvm.kvx.stsu.v2i16(<2 x i16> %0, <2 x i16> <i16 150, i16 102>)
  ret <2 x i16> %2
}

define <4 x i16> @stsuhq(<4 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: stsuhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <4 x i16> @llvm.kvx.stsu.v4i16(<4 x i16> %0, <4 x i16> %1)
  ret <4 x i16> %3
}

declare <4 x i16> @llvm.kvx.stsu.v4i16(<4 x i16>, <4 x i16>)

define <4 x i16> @stsuhqri(<4 x i16> %0) {
; CHECK-LABEL: stsuhqri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuhq $r0 = $r0, 0xc000f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <4 x i16> @llvm.kvx.stsu.v4i16(<4 x i16> %0, <4 x i16> <i16 15, i16 12, i16 0, i16 0>)
  ret <4 x i16> %2
}

define <4 x i16> @stsuhqriat(<4 x i16> %0) {
; CHECK-LABEL: stsuhqriat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuhq.@ $r0 = $r0, 0xc000f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <4 x i16> @llvm.kvx.stsu.v4i16(<4 x i16> %0, <4 x i16> <i16 15, i16 12, i16 15, i16 12>)
  ret <4 x i16> %2
}

define <2 x i32> @stsuwp(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: stsuwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call <2 x i32> @llvm.kvx.stsu.v2i32(<2 x i32> %0, <2 x i32> %1)
  ret <2 x i32> %3
}

declare <2 x i32> @llvm.kvx.stsu.v2i32(<2 x i32>, <2 x i32>)

define <2 x i32> @stsuwpri(<2 x i32> %0) {
; CHECK-LABEL: stsuwpri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuwp $r0 = $r0, 999
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.stsu.v2i32(<2 x i32> %0, <2 x i32> <i32 999, i32 0>)
  ret <2 x i32> %2
}

define <2 x i32> @stsuwpriat(<2 x i32> %0) {
; CHECK-LABEL: stsuwpriat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stsuwp.@ $r0 = $r0, 0x3e7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.stsu.v2i32(<2 x i32> %0, <2 x i32> <i32 999, i32 999>)
  ret <2 x i32> %2
}

