; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define <8 x i8> @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x201020102010201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  ret <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
}

define i8 @test_extract_0(<8 x i8> %a) #0 {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i8 0
  ret i8 %e
}

define i8 @test_extract_1(<8 x i8> %a) #0 {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r0 = $r0, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i8 1
  ret i8 %e
}

define i8 @test_extract_2(<8 x i8> %a) #0 {
; CHECK-LABEL: test_extract_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r0 = $r0, 23, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i8 2
  ret i8 %e
}

define i8 @test_extract_3(<8 x i8> %a) #0 {
; CHECK-LABEL: test_extract_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r0 = $r0, 31, 24
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i8 3
  ret i8 %e
}

define <8 x i8> @test_fma(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c) #0 {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r3 = $r2, 56
; CHECK-NEXT:    srld $r4 = $r1, 56
; CHECK-NEXT:    extfz $r5 = $r1, 55, 48
; CHECK-NEXT:    extfz $r6 = $r2, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r3 = $r4, $r3
; CHECK-NEXT:    extfz $r4 = $r2, 55, 48
; CHECK-NEXT:    extfz $r7 = $r2, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r8 = $r1, 39, 32
; CHECK-NEXT:    extfz $r9 = $r2, 47, 40
; CHECK-NEXT:    mulw $r4 = $r5, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r5 = $r1, 7, 0
; CHECK-NEXT:    extfz $r10 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r5 = $r5, $r6
; CHECK-NEXT:    extfz $r6 = $r1, 31, 24
; CHECK-NEXT:    insf $r4 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r6 = $r6, $r7
; CHECK-NEXT:    extfz $r7 = $r2, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r7 = $r8, $r7
; CHECK-NEXT:    extfz $r8 = $r1, 47, 40
; CHECK-NEXT:    extfz $r1 = $r1, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r8 = $r8, $r9
; CHECK-NEXT:    extfz $r9 = $r2, 15, 8
; CHECK-NEXT:    extfz $r2 = $r2, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r1 = $r1, $r2
; CHECK-NEXT:    insf $r7 = $r8, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r7 = $r4, 31, 16
; CHECK-NEXT:    mulw $r9 = $r10, $r9
; CHECK-NEXT:    insf $r1 = $r6, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r9, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r1, 31, 16
; CHECK-NEXT:    andd $r1 = $r0, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r7, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r5
; CHECK-NEXT:    andd $r2 = $r5, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    addd $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <8 x i8> %b, %c
  %ad = add <8 x i8> %a, %m
  ret <8 x i8> %ad
}

define <8 x i8> @test_fma_imm(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_fma_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r1, 56
; CHECK-NEXT:    extfz $r3 = $r1, 31, 24
; CHECK-NEXT:    extfz $r4 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r5 = $r1, 39, 32
; CHECK-NEXT:    extfz $r6 = $r1, 47, 40
; CHECK-NEXT:    mulw $r2 = $r2, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r7 = $r1, 15, 8
; CHECK-NEXT:    extfz $r8 = $r1, 55, 48
; CHECK-NEXT:    sllw $r6 = $r6, 1
; CHECK-NEXT:    mulw $r5 = $r5, 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r1 = $r1, 23, 16
; CHECK-NEXT:    sllw $r7 = $r7, 1
; CHECK-NEXT:    insf $r8 = $r2, 15, 8
; CHECK-NEXT:    mulw $r4 = $r4, 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r6, 15, 8
; CHECK-NEXT:    mulw $r3 = $r3, 3
; CHECK-NEXT:    insf $r4 = $r7, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r8, 31, 16
; CHECK-NEXT:    insf $r1 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r1, 31, 16
; CHECK-NEXT:    andd $r1 = $r0, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r5, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r4
; CHECK-NEXT:    andd $r2 = $r4, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    addd $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <8 x i8> <i8 7, i8 2, i8 1, i8 3, i8 7, i8 2, i8 1, i8 3>, %b
  %ad = add <8 x i8> %a, %m
  ret <8 x i8> %ad
}


; TODO: Prevent using sllhqs for fma
define <8 x i8> @test_fma_imm_2(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_fma_imm_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r3 = $r1, 47, 40
; CHECK-NEXT:    extfz $r2 = $r1, 15, 8
; CHECK-NEXT:    srld $r7 = $r1, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r4 = $r1, 31, 24
; CHECK-NEXT:    sllw $r3 = $r3, 1
; CHECK-NEXT:    extfz $r5 = $r1, 39, 32
; CHECK-NEXT:    sllw $r7 = $r7, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r3, 15, 8
; CHECK-NEXT:    extfz $r6 = $r1, 23, 16
; CHECK-NEXT:    sllw $r4 = $r4, 1
; CHECK-NEXT:    sllw $r2 = $r2, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r3 = $r1, 7, 0
; CHECK-NEXT:    extfz $r1 = $r1, 55, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r7, 15, 8
; CHECK-NEXT:    insf $r6 = $r4, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r2, 15, 8
; CHECK-NEXT:    insf $r5 = $r1, 31, 16
; CHECK-NEXT:    andd $r1 = $r0, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r6, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r5, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r3
; CHECK-NEXT:    andd $r2 = $r3, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    addd $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %b
  %ad = add <8 x i8> %a, %m
  ret <8 x i8> %ad
}

; Can improve this by using srld (lshl %i, 4)
define i8 @test_extract_i(<8 x i8> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andd $r1 = $r1, 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r2 = $r12, 24
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = $r1[$r2]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i64 %idx
  ret i8 %e
}

define <8 x i8> @test_add(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_add:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xord $r2 = $r0, $r1
; CHECK-NEXT:    andd $r1 = $r1, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    andd $r0 = $r0, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r2 = $r2, 0x8080808080808080
; CHECK-NEXT:    addd $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @test_add_imm_0(<8 x i8> %a) #0 {
; CHECK-LABEL: test_add_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x201020102010201
; CHECK-NEXT:    andd $r2 = $r0, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r1
; CHECK-NEXT:    andd $r1 = $r1, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    addd $r1 = $r2, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %a
  ret <8 x i8> %r
}

define <8 x i8> @test_add_imm_1(<8 x i8> %a) #0 {
; CHECK-LABEL: test_add_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x201020102010201
; CHECK-NEXT:    andd $r2 = $r0, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r1
; CHECK-NEXT:    andd $r1 = $r1, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    addd $r1 = $r2, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <8 x i8> %a, <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
  ret <8 x i8> %r
}

define <8 x i8> @test_sub(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_sub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nxord $r2 = $r0, $r1
; CHECK-NEXT:    ord $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    andd $r1 = $r1, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r2 = $r2, 0x8080808080808080
; CHECK-NEXT:    sbfd $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r2, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @test_sub_imm(<8 x i8> %a) #0 {
; CHECK-LABEL: test_sub_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x201020102010201
; CHECK-NEXT:    ord $r2 = $r0, 0x8080808080808080
; CHECK-NEXT:    ;;
; CHECK-NEXT:    nxord $r0 = $r0, $r1
; CHECK-NEXT:    andd $r1 = $r1, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    sbfd $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <8 x i8> %a, <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
  ret <8 x i8> %r
}

define <8 x i8> @test_sub_fromimm(<8 x i8> %a) #0 {
; CHECK-LABEL: test_sub_fromimm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x201020102010201
; CHECK-NEXT:    andd $r2 = $r0, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    nxord $r0 = $r1, $r0
; CHECK-NEXT:    ord $r1 = $r1, 0x8080808080808080
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    sbfd $r1 = $r2, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %a
  ret <8 x i8> %r
}

define <8 x i8> @test_neg(<8 x i8> %a) #0 {
; CHECK-LABEL: test_neg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    andd $r2 = $r0, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    nxord $r0 = $r1, $r0
; CHECK-NEXT:    ord $r1 = $r1, 0x8080808080808080
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    sbfd $r1 = $r2, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, %a
  ret <8 x i8> %r
}

; FIXME: The calling convention passes 2 <2 x i8> and
; dag combine decides to not use <8 x i8> for a single
; instruction.
define <8 x i8> @test_mul(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_mul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r1, 56
; CHECK-NEXT:    srld $r3 = $r0, 56
; CHECK-NEXT:    extfz $r4 = $r0, 55, 48
; CHECK-NEXT:    extfz $r5 = $r1, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r3 = $r3, $r2
; CHECK-NEXT:    extfz $r2 = $r1, 55, 48
; CHECK-NEXT:    extfz $r6 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r7 = $r1, 47, 40
; CHECK-NEXT:    extfz $r8 = $r1, 39, 32
; CHECK-NEXT:    mulw $r4 = $r4, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r2 = $r0, 23, 16
; CHECK-NEXT:    extfz $r9 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r5 = $r2, $r5
; CHECK-NEXT:    extfz $r2 = $r0, 15, 8
; CHECK-NEXT:    extfz $r1 = $r1, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r3, 15, 8
; CHECK-NEXT:    mulw $r6 = $r2, $r6
; CHECK-NEXT:    extfz $r2 = $r0, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r7 = $r2, $r7
; CHECK-NEXT:    extfz $r2 = $r0, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r8 = $r2, $r8
; CHECK-NEXT:    extfz $r2 = $r0, 7, 0
; CHECK-NEXT:    extfz $r0 = $r0, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r2 = $r2, $r9
; CHECK-NEXT:    insf $r8 = $r7, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r8 = $r4, 31, 16
; CHECK-NEXT:    mulw $r0 = $r0, $r1
; CHECK-NEXT:    insf $r2 = $r6, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r0, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r5, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r8, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @test_mul_2(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c) #0 {
; CHECK-LABEL: test_mul_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r3 = $r1, 56
; CHECK-NEXT:    srld $r4 = $r0, 56
; CHECK-NEXT:    extfz $r5 = $r0, 55, 48
; CHECK-NEXT:    extfz $r6 = $r1, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r3 = $r4, $r3
; CHECK-NEXT:    extfz $r4 = $r1, 55, 48
; CHECK-NEXT:    extfz $r7 = $r1, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r8 = $r0, 15, 8
; CHECK-NEXT:    extfz $r9 = $r0, 31, 24
; CHECK-NEXT:    mulw $r4 = $r5, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r5 = $r0, 23, 16
; CHECK-NEXT:    extfz $r10 = $r0, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r5 = $r5, $r6
; CHECK-NEXT:    extfz $r6 = $r0, 47, 40
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r6 = $r6, $r7
; CHECK-NEXT:    extfz $r7 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r7 = $r8, $r7
; CHECK-NEXT:    extfz $r8 = $r1, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r8 = $r9, $r8
; CHECK-NEXT:    extfz $r9 = $r1, 39, 32
; CHECK-NEXT:    extfz $r1 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r0 = $r0, $r1
; CHECK-NEXT:    extfz $r1 = $r2, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r1 = $r7, $r1
; CHECK-NEXT:    extfz $r7 = $r2, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r7 = $r8, $r7
; CHECK-NEXT:    extfz $r8 = $r2, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r0 = $r0, $r8
; CHECK-NEXT:    extfz $r8 = $r2, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r6 = $r6, $r8
; CHECK-NEXT:    srld $r8 = $r2, 56
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r3 = $r3, $r8
; CHECK-NEXT:    extfz $r8 = $r2, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r9 = $r10, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r5 = $r5, $r8
; CHECK-NEXT:    extfz $r8 = $r2, 55, 48
; CHECK-NEXT:    extfz $r2 = $r2, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r4 = $r4, $r8
; CHECK-NEXT:    insf $r5 = $r7, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r5, 31, 16
; CHECK-NEXT:    mulw $r2 = $r9, $r2
; CHECK-NEXT:    insf $r4 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r6, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r4, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <8 x i8> %a, %b
  %r1 = mul <8 x i8> %r, %c
  ret <8 x i8> %r1
}

define <8 x i8> @test_div(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_div:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -128
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 120[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 88[$r12] = $r28r29r30r31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 56[$r12] = $r24r25r26r27
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 24[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 8[$r12] = $r18r19
; CHECK-NEXT:    extfz $r3 = $r0, 55, 48
; CHECK-NEXT:    extfz $r4 = $r0, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r5 = $r0, 39, 32
; CHECK-NEXT:    extfz $r16 = $r0, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r17 = $r0, 23, 16
; CHECK-NEXT:    extfz $r32 = $r0, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r15 = $r0, 7, 0
; CHECK-NEXT:    srld $r0 = $r0, 56
; CHECK-NEXT:    extfz $r10 = $r1, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r2 = $r1, 55, 48
; CHECK-NEXT:    sxbd $r34 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r10
; CHECK-NEXT:    extfz $r6 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r7 = $r1, 15, 8
; CHECK-NEXT:    extfz $r8 = $r1, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r9 = $r1, 31, 24
; CHECK-NEXT:    extfz $r11 = $r1, 47, 40
; CHECK-NEXT:    srld $r1 = $r1, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r33 = $r1
; CHECK-NEXT:    sxbd $r1 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxbd $r10 = $r15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r6 = $r7
; CHECK-NEXT:    sxbd $r7 = $r8
; CHECK-NEXT:    sd 0[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r8 = $r9
; CHECK-NEXT:    sxbd $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r16 = $r16
; CHECK-NEXT:    sxbd $r17 = $r17
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r32 = $r32
; CHECK-NEXT:    sxbd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r5 = $r5
; CHECK-NEXT:    sxbd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r9 = $r11
; CHECK-NEXT:    sxwd $r0 = $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    sxwd $r18 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r20 = $r9
; CHECK-NEXT:    sxwd $r21 = $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r22 = $r2
; CHECK-NEXT:    sxwd $r23 = $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r24 = $r6
; CHECK-NEXT:    sxwd $r25 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r26 = $r5
; CHECK-NEXT:    sxwd $r27 = $r34
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r28 = $r33
; CHECK-NEXT:    sxwd $r29 = $r17
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r30 = $r32
; CHECK-NEXT:    sxwd $r31 = $r16
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r30
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r31
; CHECK-NEXT:    copyd $r1 = $r24
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r24 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    copyd $r1 = $r22
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r27
; CHECK-NEXT:    copyd $r1 = $r28
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r22 = $r0
; CHECK-NEXT:    copyd $r0 = $r25
; CHECK-NEXT:    copyd $r1 = $r20
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r26
; CHECK-NEXT:    ld $r1 = 0[$r12]
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r25 = $r0
; CHECK-NEXT:    copyd $r0 = $r29
; CHECK-NEXT:    copyd $r1 = $r23
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r1 = $r19
; CHECK-NEXT:    zxwd $r6 = $r24
; CHECK-NEXT:    zxwd $r2 = $r25
; CHECK-NEXT:    zxwd $r3 = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    zxwd $r4 = $r21
; CHECK-NEXT:    zxwd $r5 = $r18
; CHECK-NEXT:    zxwd $r7 = $r22
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    insf $r5 = $r7, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r4, 15, 8
; CHECK-NEXT:    insf $r1 = $r6, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    insf $r2 = $r5, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r24r25r26r27 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r28r29r30r31 = 88[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 120[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 128
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sdiv <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @test_rem(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_rem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -128
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 120[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 88[$r12] = $r28r29r30r31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 56[$r12] = $r24r25r26r27
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 24[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 8[$r12] = $r18r19
; CHECK-NEXT:    extfz $r3 = $r0, 55, 48
; CHECK-NEXT:    extfz $r4 = $r0, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r5 = $r0, 39, 32
; CHECK-NEXT:    extfz $r16 = $r0, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r17 = $r0, 23, 16
; CHECK-NEXT:    extfz $r32 = $r0, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r15 = $r0, 7, 0
; CHECK-NEXT:    srld $r0 = $r0, 56
; CHECK-NEXT:    extfz $r10 = $r1, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r2 = $r1, 55, 48
; CHECK-NEXT:    sxbd $r34 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r0 = $r10
; CHECK-NEXT:    extfz $r6 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r7 = $r1, 15, 8
; CHECK-NEXT:    extfz $r8 = $r1, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r9 = $r1, 31, 24
; CHECK-NEXT:    extfz $r11 = $r1, 47, 40
; CHECK-NEXT:    srld $r1 = $r1, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r33 = $r1
; CHECK-NEXT:    sxbd $r1 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    sxbd $r10 = $r15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r6 = $r7
; CHECK-NEXT:    sxbd $r7 = $r8
; CHECK-NEXT:    sd 0[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r8 = $r9
; CHECK-NEXT:    sxbd $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r16 = $r16
; CHECK-NEXT:    sxbd $r17 = $r17
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r32 = $r32
; CHECK-NEXT:    sxbd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r5 = $r5
; CHECK-NEXT:    sxbd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r9 = $r11
; CHECK-NEXT:    sxwd $r0 = $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    sxwd $r18 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r20 = $r9
; CHECK-NEXT:    sxwd $r21 = $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r22 = $r2
; CHECK-NEXT:    sxwd $r23 = $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r24 = $r6
; CHECK-NEXT:    sxwd $r25 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r26 = $r5
; CHECK-NEXT:    sxwd $r27 = $r34
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r28 = $r33
; CHECK-NEXT:    sxwd $r29 = $r17
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r30 = $r32
; CHECK-NEXT:    sxwd $r31 = $r16
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r30
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r31
; CHECK-NEXT:    copyd $r1 = $r24
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r24 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    copyd $r1 = $r22
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r27
; CHECK-NEXT:    copyd $r1 = $r28
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r22 = $r0
; CHECK-NEXT:    copyd $r0 = $r25
; CHECK-NEXT:    copyd $r1 = $r20
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r26
; CHECK-NEXT:    ld $r1 = 0[$r12]
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r25 = $r0
; CHECK-NEXT:    copyd $r0 = $r29
; CHECK-NEXT:    copyd $r1 = $r23
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r1 = $r19
; CHECK-NEXT:    zxwd $r6 = $r24
; CHECK-NEXT:    zxwd $r2 = $r25
; CHECK-NEXT:    zxwd $r3 = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    zxwd $r4 = $r21
; CHECK-NEXT:    zxwd $r5 = $r18
; CHECK-NEXT:    zxwd $r7 = $r22
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    insf $r5 = $r7, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r4, 15, 8
; CHECK-NEXT:    insf $r1 = $r6, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    insf $r2 = $r5, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r24r25r26r27 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r28r29r30r31 = 88[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 120[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 128
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = srem <8 x i8> %a, %b
  ret <8 x i8> %r
}

define void @test_ldst_v8i8(<8 x i8>* %a, <8 x i8>* %b) {
; CHECK-LABEL: test_ldst_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %t1 = load <8 x i8>, <8 x i8>* %a
  store <8 x i8> %t1, <8 x i8>* %b, align 16
  ret void
}

declare <8 x i8> @test_callee(<8 x i8> %a, <8 x i8> %b) #0

define <8 x i8> @test_call(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <8 x i8> @test_callee(<8 x i8> %a, <8 x i8> %b)
  ret <8 x i8> %r
}

define <8 x i8> @test_call_flipped(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <8 x i8> @test_callee(<8 x i8> %b, <8 x i8> %a)
  ret <8 x i8> %r
}

; Can perform swap in a single bundle
define <8 x i8> @test_tailcall_flipped(<8 x i8> %a, <8 x i8> %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
  %r = tail call <8 x i8> @test_callee(<8 x i8> %b, <8 x i8> %a)
  ret <8 x i8> %r
}

define <8 x i8> @test_select(<8 x i8> %a, <8 x i8> %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyw $r3 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r3 ? $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andnd $r1 = $r2, $r1
; CHECK-NEXT:    andd $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = select i1 %c, <8 x i8> %a, <8 x i8> %b
  ret <8 x i8> %r
}

define <8 x i8> @test_select_cc(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c, <8 x i8> %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r4 = $r3, 63, 32
; CHECK-NEXT:    extfz $r5 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r3 = $r3, 31, 0
; CHECK-NEXT:    extfz $r2 = $r2, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r7 = $r4, 7, 0
; CHECK-NEXT:    extfz $r10 = $r4, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r11 = $r4, 23, 16
; CHECK-NEXT:    extfz $r4 = $r4, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r32 = $r5, 15, 8
; CHECK-NEXT:    extfz $r6 = $r3, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r8 = $r2, 15, 8
; CHECK-NEXT:    extfz $r15 = $r3, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r16 = $r3, 23, 16
; CHECK-NEXT:    extfz $r3 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r17 = $r5, 7, 0
; CHECK-NEXT:    extfz $r33 = $r2, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r32 = $r32
; CHECK-NEXT:    sxbd $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r9 = $r5, 31, 24
; CHECK-NEXT:    extfz $r5 = $r5, 23, 16
; CHECK-NEXT:    compw.lt $r4 = $r32, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r33 = $r33
; CHECK-NEXT:    sxbd $r7 = $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r17 = $r17
; CHECK-NEXT:    sxbd $r8 = $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r3 = $r3
; CHECK-NEXT:    sxbd $r15 = $r15
; CHECK-NEXT:    compw.lt $r7 = $r17, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compw.lt $r3 = $r8, $r3
; CHECK-NEXT:    compw.lt $r8 = $r33, $r15
; CHECK-NEXT:    copyw $r15 = $r4
; CHECK-NEXT:    make $r4 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r5 = $r5
; CHECK-NEXT:    sxbd $r11 = $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r4 = 0
; CHECK-NEXT:    copyw $r15 = $r7
; CHECK-NEXT:    make $r7 = -1
; CHECK-NEXT:    compw.lt $r5 = $r5, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r36 = $r0, 31, 0
; CHECK-NEXT:    extfz $r0 = $r0, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r34 = $r2, 23, 16
; CHECK-NEXT:    extfz $r35 = $r1, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r1 = $r1, 63, 32
; CHECK-NEXT:    extfz $r2 = $r2, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r7 = 0
; CHECK-NEXT:    copyw $r15 = $r5
; CHECK-NEXT:    make $r5 = -1
; CHECK-NEXT:    sxbd $r6 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r2 = $r2
; CHECK-NEXT:    sxbd $r34 = $r34
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r16 = $r16
; CHECK-NEXT:    sxbd $r9 = $r9
; CHECK-NEXT:    compw.lt $r2 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r10 = $r10
; CHECK-NEXT:    extfz $r41 = $r0, 23, 16
; CHECK-NEXT:    compw.lt $r6 = $r34, $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r44 = $r1, 23, 16
; CHECK-NEXT:    cmoved.weqz $r15 ? $r5 = 0
; CHECK-NEXT:    compw.lt $r9 = $r9, $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r5 ? $r44 = $r41
; CHECK-NEXT:    make $r5 = -1
; CHECK-NEXT:    copyw $r15 = $r9
; CHECK-NEXT:    extfz $r40 = $r0, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r42 = $r1, 15, 8
; CHECK-NEXT:    cmoved.weqz $r6 ? $r5 = 0
; CHECK-NEXT:    copyw $r6 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r9 = -1
; CHECK-NEXT:    cmoved.wnez $r4 ? $r42 = $r40
; CHECK-NEXT:    make $r4 = -1
; CHECK-NEXT:    cmoved.weqz $r6 ? $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r6 = $r3
; CHECK-NEXT:    make $r3 = -1
; CHECK-NEXT:    extfz $r43 = $r1, 31, 24
; CHECK-NEXT:    extfz $r37 = $r35, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r38 = $r36, 23, 16
; CHECK-NEXT:    extfz $r17 = $r35, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r39 = $r36, 31, 24
; CHECK-NEXT:    extfz $r45 = $r0, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r46 = $r0, 7, 0
; CHECK-NEXT:    extfz $r1 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r9 = 0
; CHECK-NEXT:    extfz $r16 = $r36, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r6 ? $r3 = 0
; CHECK-NEXT:    extfz $r11 = $r36, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r0 = $r35, 7, 0
; CHECK-NEXT:    extfz $r10 = $r35, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r8 ? $r4 = 0
; CHECK-NEXT:    cmoved.wnez $r7 ? $r1 = $r46
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r9 ? $r43 = $r45
; CHECK-NEXT:    cmoved.wnez $r4 ? $r10 = $r39
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r5 ? $r17 = $r38
; CHECK-NEXT:    cmoved.wnez $r2 ? $r0 = $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r37 = $r16
; CHECK-NEXT:    insf $r1 = $r42, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r44 = $r43, 15, 8
; CHECK-NEXT:    insf $r17 = $r10, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r37, 15, 8
; CHECK-NEXT:    insf $r1 = $r44, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r17, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp slt <8 x i8> %c, %d
  %r = select <8 x i1> %cc, <8 x i8> %a, <8 x i8> %b
  ret <8 x i8> %r
}

define <8 x i32> @test_sext_2xi64(<8 x i8> %a) #0 {
; CHECK-LABEL: test_sext_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxmbhq $r1 = $r0
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r3 = $r1
; CHECK-NEXT:    sxlhwp $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sext <8 x i8> %a to <8 x i32>
  ret <8 x i32> %r
}

declare <8 x i8> @llvm.abs.v8i8(<8 x i8>, i1) #0

define <8 x i8> @test_abs(<8 x i8> %a) #0 {
; CHECK-LABEL: test_abs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r5 = $r0, 15, 8
; CHECK-NEXT:    srld $r6 = $r0, 56
; CHECK-NEXT:    extfz $r7 = $r0, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r1 = $r0, 55, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r3 = $r0, 39, 32
; CHECK-NEXT:    extfz $r4 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r0 = $r0, 31, 24
; CHECK-NEXT:    sxbd $r6 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r8 = $r0
; CHECK-NEXT:    sxbd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r1 = $r2
; CHECK-NEXT:    sxbd $r2 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r3 = $r4
; CHECK-NEXT:    absw $r4 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    absw $r6 = $r0
; CHECK-NEXT:    sxbd $r5 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxbd $r7 = $r7
; CHECK-NEXT:    absw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    absw $r2 = $r2
; CHECK-NEXT:    absw $r0 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r6 = $r4, 15, 8
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    absw $r3 = $r5
; CHECK-NEXT:    absw $r1 = $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    absw $r4 = $r8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r4, 15, 8
; CHECK-NEXT:    insf $r2 = $r6, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <8 x i8> @llvm.abs.v8i8(<8 x i8> %a, i1 false)
  ret <8 x i8> %r
}

define <8 x i8> @test_insertelement0(<8 x i8> %a, i8 %x) #0 {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 7, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 0
  ret <8 x i8> %i
}

define <8 x i8> @test_insertelement1(<8 x i8> %a, i8 %x) #0 {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 1
  ret <8 x i8> %i
}

define <8 x i8> @test_insertelement2(<8 x i8> %a, i8 %x) #0 {
; CHECK-LABEL: test_insertelement2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 23, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 2
  ret <8 x i8> %i
}

define <8 x i8> @test_insertelement3(<8 x i8> %a, i8 %x) #0 {
; CHECK-LABEL: test_insertelement3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 24
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 3
  ret <8 x i8> %i
}

define <8 x i8> @test_insertelement(<8 x i8> %a, i8 %x, i64 %p) #0 {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andd $r2 = $r2, 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r3 = $r12, 24
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sb $r2[$r3] = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r0 = 24[$r12]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 %p
  ret <8 x i8> %i
}

define <8 x i8> @mulsub(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c) #0 {
; CHECK-LABEL: mulsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r3 = $r2, 56
; CHECK-NEXT:    srld $r4 = $r1, 56
; CHECK-NEXT:    extfz $r5 = $r1, 55, 48
; CHECK-NEXT:    extfz $r6 = $r2, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r3 = $r4, $r3
; CHECK-NEXT:    extfz $r4 = $r2, 55, 48
; CHECK-NEXT:    extfz $r7 = $r2, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r8 = $r1, 39, 32
; CHECK-NEXT:    extfz $r9 = $r2, 47, 40
; CHECK-NEXT:    mulw $r4 = $r5, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r5 = $r1, 7, 0
; CHECK-NEXT:    extfz $r10 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r5 = $r5, $r6
; CHECK-NEXT:    extfz $r6 = $r1, 31, 24
; CHECK-NEXT:    insf $r4 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r6 = $r6, $r7
; CHECK-NEXT:    extfz $r7 = $r2, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r7 = $r8, $r7
; CHECK-NEXT:    extfz $r8 = $r1, 47, 40
; CHECK-NEXT:    extfz $r1 = $r1, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r8 = $r8, $r9
; CHECK-NEXT:    extfz $r9 = $r2, 15, 8
; CHECK-NEXT:    extfz $r2 = $r2, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r1 = $r1, $r2
; CHECK-NEXT:    insf $r7 = $r8, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r7 = $r4, 31, 16
; CHECK-NEXT:    mulw $r9 = $r10, $r9
; CHECK-NEXT:    insf $r1 = $r6, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r9, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r1, 31, 16
; CHECK-NEXT:    ord $r1 = $r0, 0x8080808080808080
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r7, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    nxord $r0 = $r0, $r5
; CHECK-NEXT:    andd $r2 = $r5, 0x7f7f7f7f7f7f7f7f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CHECK-NEXT:    sbfd $r1 = $r2, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    xord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %mul = mul <8 x i8> %b, %c
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @vnot(<8 x i8> %a) #0 {
; CHECK-LABEL: vnot:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %vnot = xor <8 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <8 x i8> %vnot
}

attributes #0 = { nounwind }
