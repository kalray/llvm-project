; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=ALL
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=ALL
target triple = "kvx-kalray-cos"

define <8 x i8> @test_ret_const() #0 {
; ALL-LABEL: test_ret_const:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r0 = 0x201020102010201
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  ret <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
}

define i8 @test_extract_0(<8 x i8> %a) #0 {
; ALL-LABEL: test_extract_0:
; ALL:       # %bb.0:
; ALL-NEXT:    zxbd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i8 0
  ret i8 %e
}

define i8 @test_extract_1(<8 x i8> %a) #0 {
; ALL-LABEL: test_extract_1:
; ALL:       # %bb.0:
; ALL-NEXT:    extfz $r0 = $r0, 15, 8
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i8 1
  ret i8 %e
}

define i8 @test_extract_2(<8 x i8> %a) #0 {
; ALL-LABEL: test_extract_2:
; ALL:       # %bb.0:
; ALL-NEXT:    extfz $r0 = $r0, 23, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i8 2
  ret i8 %e
}

define i8 @test_extract_3(<8 x i8> %a) #0 {
; ALL-LABEL: test_extract_3:
; ALL:       # %bb.0:
; ALL-NEXT:    srlw $r0 = $r0, 24
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i8 3
  ret i8 %e
}

define <8 x i8> @test_fma(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c) #0 {
; CV1-LABEL: test_fma:
; CV1:       # %bb.0:
; CV1-NEXT:    sxmbhq $r3 = $r2
; CV1-NEXT:    sxmbhq $r4 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlbhq $r2 = $r2
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    mulhq $r3 = $r4, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    mulhq $r1 = $r1, $r2
; CV1-NEXT:    sbmm8 $r2 = $r3, 0x40100401
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r1 = $r2, 63, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r1, $r0
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_fma:
; CV2:       # %bb.0:
; CV2-NEXT:    sxmbhq $r3 = $r2
; CV2-NEXT:    sxmbhq $r4 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    sxlbhq $r2 = $r2
; CV2-NEXT:    sxlbhq $r1 = $r1
; CV2-NEXT:    mulhq $r3 = $r4, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    mulhq $r1 = $r1, $r2
; CV2-NEXT:    sbmm8 $r2 = $r3, 0x40100401
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r1 = $r2, 63, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    addbo $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %m = mul <8 x i8> %b, %c
  %ad = add <8 x i8> %a, %m
  ret <8 x i8> %ad
}

define <8 x i8> @test_fma_imm(<8 x i8> %a, <8 x i8> %b) #0 {
; CV1-LABEL: test_fma_imm:
; CV1:       # %bb.0:
; CV1-NEXT:    sxmbhq $r2 = $r1
; CV1-NEXT:    make $r3 = 0x3000100020007
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    mulhq $r2 = $r2, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    mulhq $r1 = $r1, $r3
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r1 = $r2, 63, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r1, $r0
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_fma_imm:
; CV2:       # %bb.0:
; CV2-NEXT:    sxmbhq $r2 = $r1
; CV2-NEXT:    make $r3 = 0x3000100020007
; CV2-NEXT:    sxlbhq $r1 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    mulhq $r2 = $r2, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    mulhq $r1 = $r1, $r3
; CV2-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r1 = $r2, 63, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    addbo $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %m = mul <8 x i8> <i8 7, i8 2, i8 1, i8 3, i8 7, i8 2, i8 1, i8 3>, %b
  %ad = add <8 x i8> %a, %m
  ret <8 x i8> %ad
}


define <8 x i8> @test_fma_imm_2(<8 x i8> %a, <8 x i8> %b) #0 {
; CV1-LABEL: test_fma_imm_2:
; CV1:       # %bb.0:
; CV1-NEXT:    sxmbhq $r2 = $r1
; CV1-NEXT:    make $r3 = 0x2000100020001
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    mulhq $r2 = $r2, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    mulhq $r1 = $r1, $r3
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r1 = $r2, 63, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r1, $r0
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_fma_imm_2:
; CV2:       # %bb.0:
; CV2-NEXT:    sxmbhq $r2 = $r1
; CV2-NEXT:    make $r3 = 0x2000100020001
; CV2-NEXT:    sxlbhq $r1 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    mulhq $r2 = $r2, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    mulhq $r1 = $r1, $r3
; CV2-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r1 = $r2, 63, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    addbo $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %m = mul <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %b
  %ad = add <8 x i8> %a, %m
  ret <8 x i8> %ad
}

define i8 @test_extract_i(<8 x i8> %a, i64 %idx) #0 {
; ALL-LABEL: test_extract_i:
; ALL:       # %bb.0:
; ALL-NEXT:    sllw $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    srld $r0 = $r0, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    zxbd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %e = extractelement <8 x i8> %a, i64 %idx
  ret i8 %e
}

define <8 x i8> @test_add(<8 x i8> %a, <8 x i8> %b) #0 {
; CV1-LABEL: test_add:
; CV1:       # %bb.0:
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r1, $r0
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_add:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = add <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @test_add_imm_0(<8 x i8> %a) #0 {
; CV1-LABEL: test_add_imm_0:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r1 = 0x201020102010201
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r1, $r0
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_add_imm_0:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo.@ $r0 = $r0, 0x2010201
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = add <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %a
  ret <8 x i8> %r
}

define <8 x i8> @test_add_imm_not_at(<8 x i8> %a) #0 {
; CV1-LABEL: test_add_imm_not_at:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r1 = 0x2010201
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r1, $r0
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_add_imm_not_at:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo $r0 = $r0, 0x2010201
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = add <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %a
  ret <8 x i8> %r
}

define <8 x i8> @test_add_imm_1(<8 x i8> %a) #0 {
; CV1-LABEL: test_add_imm_1:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r1 = 0x201020102010201
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r1, $r0
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_add_imm_1:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo.@ $r0 = $r0, 0x2010201
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = add <8 x i8> %a, <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
  ret <8 x i8> %r
}

define <8 x i8> @test_sub(<8 x i8> %a, <8 x i8> %b) #0 {
; CV1-LABEL: test_sub:
; CV1:       # %bb.0:
; CV1-NEXT:    ord $r2 = $r0, 0x8080808080808080
; CV1-NEXT:    nxord $r0 = $r0, $r1
; CV1-NEXT:    andd $r3 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_sub:
; CV2:       # %bb.0:
; CV2-NEXT:    sbfbo $r0 = $r1, $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = sub <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @test_sub_imm(<8 x i8> %a) #0 {
; CV1-LABEL: test_sub_imm:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r1 = 0x201020102010201
; CV1-NEXT:    ord $r2 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    nxord $r0 = $r0, $r1
; CV1-NEXT:    andd $r3 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_sub_imm:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo.@ $r0 = $r0, 0xfefffeff
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = sub <8 x i8> %a, <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
  ret <8 x i8> %r
}

define <8 x i8> @test_sub_fromimm(<8 x i8> %a) #0 {
; CV1-LABEL: test_sub_fromimm:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r1 = 0x201020102010201
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    nxord $r0 = $r1, $r0
; CV1-NEXT:    ord $r2 = $r1, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_sub_fromimm:
; CV2:       # %bb.0:
; CV2-NEXT:    sbfbo.@ $r0 = $r0, 0x2010201
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %a
  ret <8 x i8> %r
}

define <8 x i8> @test_neg(<8 x i8> %a) #0 {
; CV1-LABEL: test_neg:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r1 = 0
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    nxord $r0 = $r1, $r0
; CV1-NEXT:    ord $r2 = $r1, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_neg:
; CV2:       # %bb.0:
; CV2-NEXT:    negbo $r0 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = sub <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, %a
  ret <8 x i8> %r
}

define <8 x i8> @test_mul(<8 x i8> %a, <8 x i8> %b) #0 {
; ALL-LABEL: test_mul:
; ALL:       # %bb.0:
; ALL-NEXT:    sxmbhq $r2 = $r1
; ALL-NEXT:    sxmbhq $r3 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    mulhq $r2 = $r3, $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulhq $r0 = $r0, $r1
; ALL-NEXT:    sbmm8 $r1 = $r2, 0x40100401
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = mul <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @test_mul_2(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c) #0 {
; ALL-LABEL: test_mul_2:
; ALL:       # %bb.0:
; ALL-NEXT:    sxmbhq $r3 = $r1
; ALL-NEXT:    sxmbhq $r4 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxlbhq $r1 = $r1
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    mulhq $r3 = $r4, $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    mulhq $r0 = $r0, $r1
; ALL-NEXT:    sxmbhq $r1 = $r2
; ALL-NEXT:    sxlbhq $r2 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulhq $r1 = $r3, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    mulhq $r0 = $r0, $r2
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; ALL-NEXT:    ;;
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = mul <8 x i8> %a, %b
  %r1 = mul <8 x i8> %r, %c
  ret <8 x i8> %r1
}

define <8 x i8> @test_div(<8 x i8> %a, <8 x i8> %b) #0 {
; ALL-LABEL: test_div:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -64
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 56[$r12] = $r16
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 48[$r12] = $r22
; ALL-NEXT:    ;;
; ALL-NEXT:    sq 32[$r12] = $r20r21
; ALL-NEXT:    ;;
; ALL-NEXT:    sq 16[$r12] = $r18r19
; ALL-NEXT:    copyd $r18 = $r1
; ALL-NEXT:    copyd $r19 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    srld $r0 = $r19, 56
; ALL-NEXT:    srld $r1 = $r18, 56
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    extfz $r1 = $r18, 55, 48
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 55, 48
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r21 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 47, 40
; ALL-NEXT:    extfz $r1 = $r18, 47, 40
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r21 = $r20, 15, 8
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    extfz $r1 = $r18, 39, 32
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 39, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r22 = $r0
; ALL-NEXT:    srlw $r0 = $r19, 24
; ALL-NEXT:    srlw $r1 = $r18, 24
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r22 = $r20, 15, 8
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    insf $r22 = $r21, 31, 16
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    extfz $r1 = $r18, 23, 16
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 23, 16
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r21 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 15, 8
; ALL-NEXT:    extfz $r1 = $r18, 15, 8
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r21 = $r20, 15, 8
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    zxbd $r1 = $r18
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    zxbd $r0 = $r19
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __divdi3
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r20, 15, 8
; ALL-NEXT:    lq $r18r19 = 16[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r21, 31, 16
; ALL-NEXT:    lq $r20r21 = 32[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r22, 63, 32
; ALL-NEXT:    ld $r22 = 48[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r16 = 56[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 64
; ALL-NEXT:    ;;
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sdiv <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @test_rem(<8 x i8> %a, <8 x i8> %b) #0 {
; ALL-LABEL: test_rem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -64
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 56[$r12] = $r16
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 48[$r12] = $r22
; ALL-NEXT:    ;;
; ALL-NEXT:    sq 32[$r12] = $r20r21
; ALL-NEXT:    ;;
; ALL-NEXT:    sq 16[$r12] = $r18r19
; ALL-NEXT:    copyd $r18 = $r1
; ALL-NEXT:    copyd $r19 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    srld $r0 = $r19, 56
; ALL-NEXT:    srld $r1 = $r18, 56
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    extfz $r1 = $r18, 55, 48
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 55, 48
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r21 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 47, 40
; ALL-NEXT:    extfz $r1 = $r18, 47, 40
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r21 = $r20, 15, 8
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    extfz $r1 = $r18, 39, 32
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 39, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r22 = $r0
; ALL-NEXT:    srlw $r0 = $r19, 24
; ALL-NEXT:    srlw $r1 = $r18, 24
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r22 = $r20, 15, 8
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    insf $r22 = $r21, 31, 16
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    extfz $r1 = $r18, 23, 16
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 23, 16
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r21 = $r0
; ALL-NEXT:    extfz $r0 = $r19, 15, 8
; ALL-NEXT:    extfz $r1 = $r18, 15, 8
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r21 = $r20, 15, 8
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    zxbd $r1 = $r18
; ALL-NEXT:    copyd $r20 = $r0
; ALL-NEXT:    zxbd $r0 = $r19
; ALL-NEXT:    ;;
; ALL-NEXT:    sxbd $r0 = $r0
; ALL-NEXT:    sxbd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxwd $r0 = $r0
; ALL-NEXT:    sxwd $r1 = $r1
; ALL-NEXT:    call __moddi3
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r20, 15, 8
; ALL-NEXT:    lq $r18r19 = 16[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r21, 31, 16
; ALL-NEXT:    lq $r20r21 = 32[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r0 = $r22, 63, 32
; ALL-NEXT:    ld $r22 = 48[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r16 = 56[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 64
; ALL-NEXT:    ;;
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = srem <8 x i8> %a, %b
  ret <8 x i8> %r
}

define void @test_ldst_v8i8(<8 x i8>* %a, <8 x i8>* %b) {
; ALL-LABEL: test_ldst_v8i8:
; ALL:       # %bb.0:
; ALL-NEXT:    ld $r0 = 0[$r0]
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 0[$r1] = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %t1 = load <8 x i8>, <8 x i8>* %a
  store <8 x i8> %t1, <8 x i8>* %b, align 16
  ret void
}

declare <8 x i8> @test_callee(<8 x i8> %a, <8 x i8> %b) #0

define <8 x i8> @test_call(<8 x i8> %a, <8 x i8> %b) #0 {
; ALL-LABEL: test_call:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <8 x i8> @test_callee(<8 x i8> %a, <8 x i8> %b)
  ret <8 x i8> %r
}

define <8 x i8> @test_call_flipped(<8 x i8> %a, <8 x i8> %b) #0 {
; ALL-LABEL: test_call_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;;
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r1 = $r2
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;;
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <8 x i8> @test_callee(<8 x i8> %b, <8 x i8> %a)
  ret <8 x i8> %r
}

; TODO: Can perform swap in a single bundle
define <8 x i8> @test_tailcall_flipped(<8 x i8> %a, <8 x i8> %b) #0 {
; ALL-LABEL: test_tailcall_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r1 = $r2
; ALL-NEXT:    goto test_callee
; ALL-NEXT:    ;;
  %r = tail call <8 x i8> @test_callee(<8 x i8> %b, <8 x i8> %a)
  ret <8 x i8> %r
}

define <8 x i8> @test_select(<8 x i8> %a, <8 x i8> %b, i1 zeroext %c) #0 {
; ALL-LABEL: test_select:
; ALL:       # %bb.0:
; ALL-NEXT:    cmoved.even $r2 ? $r0 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = select i1 %c, <8 x i8> %a, <8 x i8> %b
  ret <8 x i8> %r
}

define <8 x i8> @test_select_cc(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c, <8 x i8> %d) #0 {
; CV1-LABEL: test_select_cc:
; CV1:       # %bb.0:
; CV1-NEXT:    sxlbhq $r4 = $r3
; CV1-NEXT:    sxlbhq $r5 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    sxmbhq $r3 = $r3
; CV1-NEXT:    sxmbhq $r2 = $r2
; CV1-NEXT:    compnhq.lt $r4 = $r5, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r5 = $r1, 0x80004000200010
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CV1-NEXT:    compnhq.lt $r2 = $r2, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r3 = $r0, 0x80004000200010
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    ;;
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff00ff00ff
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff00ff00ff
; CV1-NEXT:    ;;
; CV1-NEXT:    cmovehq.even $r4 ? $r0 = $r1
; CV1-NEXT:    cmovehq.even $r2 ? $r3 = $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    sbmm8 $r1 = $r3, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_select_cc:
; CV2:       # %bb.0:
; CV2-NEXT:    zxwd $r4 = $r3
; CV2-NEXT:    zxwd $r5 = $r2
; CV2-NEXT:    srld $r3 = $r3, 32
; CV2-NEXT:    srld $r2 = $r2, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    compnbo.lt $r4 = $r5, $r4
; CV2-NEXT:    compnbo.lt $r2 = $r2, $r3
; CV2-NEXT:    srld $r3 = $r0, 32
; CV2-NEXT:    zxwd $r0 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    srld $r5 = $r1, 32
; CV2-NEXT:    zxwd $r1 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    cmovebo.even $r2 ? $r3 = $r5
; CV2-NEXT:    cmovebo.even $r4 ? $r0 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r0 = $r3, 63, 32
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %cc = icmp slt <8 x i8> %c, %d
  %r = select <8 x i1> %cc, <8 x i8> %a, <8 x i8> %b
  ret <8 x i8> %r
}

define <8 x i32> @test_sext_2xi64(<8 x i8> %a) #0 {
; ALL-LABEL: test_sext_2xi64:
; ALL:       # %bb.0:
; ALL-NEXT:    sxmbhq $r1 = $r0
; ALL-NEXT:    sxlbhq $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sxmhwp $r3 = $r1
; ALL-NEXT:    sxlhwp $r2 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sxmhwp $r1 = $r0
; ALL-NEXT:    sxlhwp $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sext <8 x i8> %a to <8 x i32>
  ret <8 x i32> %r
}

declare <8 x i8> @llvm.abs.v8i8(<8 x i8>, i1) #0

define <8 x i8> @test_abs(<8 x i8> %a) #0 {
; CV1-LABEL: test_abs:
; CV1:       # %bb.0:
; CV1-NEXT:    sxmbhq $r1 = $r0
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    abshq $r1 = $r1
; CV1-NEXT:    abshq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 32, 63
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_abs:
; CV2:       # %bb.0:
; CV2-NEXT:    absbo $r0 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <8 x i8> @llvm.abs.v8i8(<8 x i8> %a, i1 false)
  ret <8 x i8> %r
}

define <8 x i8> @test_insertelement0(<8 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement0:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r1, 7, 0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 0
  ret <8 x i8> %i
}

define <8 x i8> @test_insertelement1(<8 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement1:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r1, 15, 8
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 1
  ret <8 x i8> %i
}

define <8 x i8> @test_insertelement2(<8 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement2:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r1, 23, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 2
  ret <8 x i8> %i
}

define <8 x i8> @test_insertelement3(<8 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement3:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r1, 31, 24
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 3
  ret <8 x i8> %i
}

define <8 x i8> @test_insertelement(<8 x i8> %a, i8 %x, i64 %p) #0 {
; ALL-LABEL: test_insertelement:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    andd $r2 = $r2, 7
; ALL-NEXT:    ;;
; ALL-NEXT:    addd $r3 = $r12, 24
; ALL-NEXT:    sd 24[$r12] = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    sb $r2[$r3] = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    ld $r0 = 24[$r12]
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %i = insertelement <8 x i8> %a, i8 %x, i64 %p
  ret <8 x i8> %i
}

define <8 x i8> @mulsub(<8 x i8> %a, <8 x i8> %b, <8 x i8> %c) #0 {
; CV1-LABEL: mulsub:
; CV1:       # %bb.0:
; CV1-NEXT:    sxmbhq $r3 = $r2
; CV1-NEXT:    sxmbhq $r4 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlbhq $r2 = $r2
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    mulhq $r3 = $r4, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    mulhq $r1 = $r1, $r2
; CV1-NEXT:    sbmm8 $r2 = $r3, 0x40100401
; CV1-NEXT:    ord $r3 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r1 = $r2, 63, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    nxord $r0 = $r0, $r1
; CV1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r1 = $r2, $r3
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: mulsub:
; CV2:       # %bb.0:
; CV2-NEXT:    sxmbhq $r3 = $r2
; CV2-NEXT:    sxmbhq $r4 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    sxlbhq $r2 = $r2
; CV2-NEXT:    sxlbhq $r1 = $r1
; CV2-NEXT:    mulhq $r3 = $r4, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    mulhq $r1 = $r1, $r2
; CV2-NEXT:    sbmm8 $r2 = $r3, 0x40100401
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r1 = $r2, 63, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    sbfbo $r0 = $r1, $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %mul = mul <8 x i8> %b, %c
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @vnot(<8 x i8> %a) #0 {
; ALL-LABEL: vnot:
; ALL:       # %bb.0:
; ALL-NEXT:    notd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %vnot = xor <8 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <8 x i8> %vnot
}

define <8 x i8> @nandd_rr(<8 x i8> %0, <8 x i8> %1) {
; ALL-LABEL: nandd_rr:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r1, $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = and <8 x i8> %1, %0
  %4 = xor <8 x i8> %3, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <8 x i8> %4
}

define <8 x i8> @nandd_ri10(<8 x i8> %0) {
; ALL-LABEL: nandd_ri10:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 252
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = and <8 x i8> %0, <i8 252, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %3 = xor <8 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <8 x i8> %3
}

define <8 x i8> @nandd_ri37(<8 x i8> %0) {
; ALL-LABEL: nandd_ri37:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 0x17ffea00df00fc
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = and <8 x i8> %0, <i8 252, i8 0, i8 223, i8 0, i8 234, i8 -1, i8 23, i8 0>
  %3 = xor <8 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <8 x i8> %3
}

define <8 x i8> @nandd_ri37_2(<8 x i8> %0) {
; ALL-LABEL: nandd_ri37_2:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 0x1700ea00df00fc
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = and <8 x i8> %0, <i8 252, i8 0, i8 223, i8 0, i8 234, i8 0, i8 23, i8 0>
  %3 = xor <8 x i8> %2, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <8 x i8> %3
}

define <8 x i8> @concat(<4 x i8> %a) #0 {
; ALL-LABEL: concat:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r0, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = shufflevector <4 x i8> %a, <4 x i8> undef,
                        <8 x i32> <i32 0, i32 1, i32 2, i32 3,
                        i32 0, i32 1, i32 2, i32 3>
  ret <8 x i8> %r
}

define <8 x i8> @concat2(<4 x i8> %a, <4 x i8> %b){
; ALL-LABEL: concat2:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v = shufflevector <4 x i8> %a, <4 x i8> %b, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i8> %v
}

define <8 x i8> @splat_v8i8(i32 %s) {
; ALL-LABEL: splat_v8i8:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x101010101010101
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
entry:
  %conv = trunc i32 %s to i8
  %vecinit = insertelement <8 x i8> undef, i8 %conv, i32 0
  %vecinit14 = shufflevector <8 x i8> %vecinit, <8 x i8> undef, <8 x i32> zeroinitializer
  ret <8 x i8> %vecinit14
}

define <8 x i8> @splat_v8i8_ri() {
; ALL-LABEL: splat_v8i8_ri:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0x202020202020202
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
entry:
  ret <8 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
}

define <8 x i8> @shl(<8 x i8> %v, i32 %s) {
; CV1-LABEL: shl:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andd $r2 = $r0, 0xff00ff00ff00ff
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00ff00ff00
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, $r1
; CV1-NEXT:    slld $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    andd $r1 = $r2, 0xff00ff00ff00ff
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00ff00ff00
; CV1-NEXT:    ;;
; CV1-NEXT:    ord $r0 = $r0, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: shl:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = trunc i32 %s to i8
  %1 = insertelement <8 x i8> undef, i8 %0, i32 0
  %sh_prom = shufflevector <8 x i8> %1, <8 x i8> undef, <8 x i32> zeroinitializer
  %shl = shl <8 x i8> %v, %sh_prom
  ret <8 x i8> %shl
}

define <8 x i8> @lsr(<8 x i8> %v, i32 %s) {
; CV1-LABEL: lsr:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andd $r2 = $r0, 0xff00ff00ff00ff
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00ff00ff00
; CV1-NEXT:    ;;
; CV1-NEXT:    srld $r0 = $r0, $r1
; CV1-NEXT:    srld $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    andd $r1 = $r2, 0xff00ff00ff00ff
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00ff00ff00
; CV1-NEXT:    ;;
; CV1-NEXT:    ord $r0 = $r0, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: lsr:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = trunc i32 %s to i8
  %1 = insertelement <8 x i8> undef, i8 %0, i32 0
  %sh_prom = shufflevector <8 x i8> %1, <8 x i8> undef, <8 x i32> zeroinitializer
  %shr = lshr <8 x i8> %v, %sh_prom
  ret <8 x i8> %shr
}

define <8 x i8> @rotl(<8 x i8> %v, i32 %s) {
; ALL-LABEL: rotl:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    sbmm8 $r2 = $r0, 0x4040101004040101
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x8080202008080202
; ALL-NEXT:    ;;
; ALL-NEXT:    sllhqs $r0 = $r0, $r1
; ALL-NEXT:    sllhqs $r2 = $r2, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    srlhqs $r1 = $r2, 8
; ALL-NEXT:    andd $r0 = $r0, 0xff00ff00ff00ff00
; ALL-NEXT:    ;;
; ALL-NEXT:    ord $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
entry:
  %0 = trunc i32 %s to i8
  %1 = insertelement <8 x i8> undef, i8 %0, i32 0
  %sh_prom = shufflevector <8 x i8> %1, <8 x i8> undef, <8 x i32> zeroinitializer
  %shl = shl <8 x i8> %v, %sh_prom
  %2 = sub i8 8, %0
  %3 = insertelement <8 x i8> undef, i8 %2, i32 0
  %sh_prom3 = shufflevector <8 x i8> %3, <8 x i8> undef, <8 x i32> zeroinitializer
  %shr = lshr <8 x i8> %v, %sh_prom3
  %or = or <8 x i8> %shr, %shl
  ret <8 x i8> %or
}

define <8 x i8> @rotr(<8 x i8> %v, i32 %s) {
; ALL-LABEL: rotr:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    sbmm8 $r2 = $r0, 0x8080202008080202
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x4040101004040101
; ALL-NEXT:    ;;
; ALL-NEXT:    srlhqs $r0 = $r0, $r1
; ALL-NEXT:    srlhqs $r2 = $r2, $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    sllhqs $r1 = $r2, 8
; ALL-NEXT:    andnd $r0 = $r0, 0xff00ff00ff00ff00
; ALL-NEXT:    ;;
; ALL-NEXT:    ord $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
entry:
  %0 = trunc i32 %s to i8
  %1 = insertelement <8 x i8> undef, i8 %0, i32 0
  %sh_prom = shufflevector <8 x i8> %1, <8 x i8> undef, <8 x i32> zeroinitializer
  %shr = lshr <8 x i8> %v, %sh_prom
  %2 = sub i8 8, %0
  %3 = insertelement <8 x i8> undef, i8 %2, i32 0
  %sh_prom3 = shufflevector <8 x i8> %3, <8 x i8> undef, <8 x i32> zeroinitializer
  %shl = shl <8 x i8> %v, %sh_prom3
  %or = or <8 x i8> %shl, %shr
  ret <8 x i8> %or
}

define <8 x i8> @abdbo_rr(<8 x i8> %a, <8 x i8> %b) {
; CV1-LABEL: abdbo_rr:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    ord $r2 = $r0, 0x8080808080808080
; CV1-NEXT:    nxord $r0 = $r0, $r1
; CV1-NEXT:    andd $r3 = $r1, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sxmbhq $r1 = $r0
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    abshq $r1 = $r1
; CV1-NEXT:    abshq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 32, 63
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: abdbo_rr:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    abdbo $r0 = $r1, $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %sub = sub nsw <8 x i8> %a, %b
  %0 = tail call <8 x i8> @llvm.abs.v8i8(<8 x i8> %sub, i1 true)
  ret <8 x i8> %0
}

define <8 x i8> @abdbo_ri_(<8 x i8> %0) {
; CV1-LABEL: abdbo_ri_:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r1 = 0x100f100f
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    nxord $r0 = $r1, $r0
; CV1-NEXT:    ord $r2 = $r1, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sxmbhq $r1 = $r0
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    abshq $r1 = $r1
; CV1-NEXT:    abshq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 32, 63
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: abdbo_ri_:
; CV2:       # %bb.0:
; CV2-NEXT:    abdbo $r0 = $r0, 0x100f100f
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = sub nsw <8 x i8> <i8 15, i8 16, i8 15, i8 16, i8 0, i8 0, i8 0, i8 0>, %0
  %3 = tail call <8 x i8> @llvm.abs.v8i8(<8 x i8> %2, i1 true)
  ret <8 x i8> %3
}

define <8 x i8> @abdbo_ri_at(<8 x i8> %0) {
; CV1-LABEL: abdbo_ri_at:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r1 = 0x100f100f100f100f
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f7f7f7f7f
; CV1-NEXT:    ;;
; CV1-NEXT:    nxord $r0 = $r1, $r0
; CV1-NEXT:    ord $r2 = $r1, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r1 = $r3, $r2
; CV1-NEXT:    andd $r0 = $r0, 0x8080808080808080
; CV1-NEXT:    ;;
; CV1-NEXT:    xord $r0 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sxmbhq $r1 = $r0
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    abshq $r1 = $r1
; CV1-NEXT:    abshq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 32, 63
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: abdbo_ri_at:
; CV2:       # %bb.0:
; CV2-NEXT:    abdbo.@ $r0 = $r0, 0x100f100f
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = sub nsw <8 x i8> <i8 15, i8 16, i8 15, i8 16, i8 15, i8 16, i8 15, i8 16>, %0
  %3 = tail call <8 x i8> @llvm.abs.v8i8(<8 x i8> %2, i1 true)
  ret <8 x i8> %3
}

define  <8 x i8> @v4_maxbo_rr_i8(<8 x i8> %a, <8 x i8> %b) {
; CV1-LABEL: v4_maxbo_rr_i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxmbhq $r2 = $r1
; CV1-NEXT:    sxmbhq $r3 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r4 = $r2, 47, 32
; CV1-NEXT:    extfs $r5 = $r3, 47, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r6 = $r2, 31, 16
; CV1-NEXT:    sxhd $r8 = $r2
; CV1-NEXT:    srad $r2 = $r2, 48
; CV1-NEXT:    srad $r17 = $r1, 48
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r7 = $r3, 31, 16
; CV1-NEXT:    sxhd $r9 = $r3
; CV1-NEXT:    srad $r3 = $r3, 48
; CV1-NEXT:    srad $r32 = $r0, 48
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r10 = $r1, 47, 32
; CV1-NEXT:    extfs $r15 = $r1, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r11 = $r0, 47, 32
; CV1-NEXT:    extfs $r16 = $r0, 31, 16
; CV1-NEXT:    maxw $r2 = $r3, $r2
; CV1-NEXT:    maxw $r3 = $r5, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    sxhd $r1 = $r1
; CV1-NEXT:    sxhd $r0 = $r0
; CV1-NEXT:    maxw $r4 = $r7, $r6
; CV1-NEXT:    maxw $r5 = $r9, $r8
; CV1-NEXT:    ;;
; CV1-NEXT:    maxw $r6 = $r32, $r17
; CV1-NEXT:    maxw $r7 = $r11, $r10
; CV1-NEXT:    maxw $r8 = $r16, $r15
; CV1-NEXT:    insf $r3 = $r2, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    maxw $r0 = $r0, $r1
; CV1-NEXT:    insf $r5 = $r4, 15, 8
; CV1-NEXT:    insf $r7 = $r6, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r8, 15, 8
; CV1-NEXT:    insf $r5 = $r3, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r7, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r5, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: v4_maxbo_rr_i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    maxbo $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = call <8 x i8> @llvm.smax.v8i8(<8 x i8> %a, <8 x i8> %b)
  ret <8 x i8> %0
}

define  <8 x i8> @v4_minbo_rr_i8(<8 x i8> %a, <8 x i8> %b) {
; CV1-LABEL: v4_minbo_rr_i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxmbhq $r2 = $r1
; CV1-NEXT:    sxmbhq $r3 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r4 = $r2, 47, 32
; CV1-NEXT:    extfs $r5 = $r3, 47, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r6 = $r2, 31, 16
; CV1-NEXT:    sxhd $r8 = $r2
; CV1-NEXT:    srad $r2 = $r2, 48
; CV1-NEXT:    srad $r17 = $r1, 48
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r7 = $r3, 31, 16
; CV1-NEXT:    sxhd $r9 = $r3
; CV1-NEXT:    srad $r3 = $r3, 48
; CV1-NEXT:    srad $r32 = $r0, 48
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r10 = $r1, 47, 32
; CV1-NEXT:    extfs $r15 = $r1, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r11 = $r0, 47, 32
; CV1-NEXT:    extfs $r16 = $r0, 31, 16
; CV1-NEXT:    minw $r2 = $r3, $r2
; CV1-NEXT:    minw $r3 = $r5, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    sxhd $r1 = $r1
; CV1-NEXT:    sxhd $r0 = $r0
; CV1-NEXT:    minw $r4 = $r7, $r6
; CV1-NEXT:    minw $r5 = $r9, $r8
; CV1-NEXT:    ;;
; CV1-NEXT:    minw $r6 = $r32, $r17
; CV1-NEXT:    minw $r7 = $r11, $r10
; CV1-NEXT:    minw $r8 = $r16, $r15
; CV1-NEXT:    insf $r3 = $r2, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    minw $r0 = $r0, $r1
; CV1-NEXT:    insf $r5 = $r4, 15, 8
; CV1-NEXT:    insf $r7 = $r6, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r8, 15, 8
; CV1-NEXT:    insf $r5 = $r3, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r7, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r5, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: v4_minbo_rr_i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    minbo $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = call <8 x i8> @llvm.smin.v8i8(<8 x i8> %a, <8 x i8> %b)
  ret <8 x i8> %0
}

define  <8 x i8> @v4_umaxbo_rr_i8(<8 x i8> %a, <8 x i8> %b) {
; CV1-LABEL: v4_umaxbo_rr_i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r2 = $r1, 0x80004000200010
; CV1-NEXT:    sbmm8 $r3 = $r0, 0x80004000200010
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    srld $r4 = $r2, 48
; CV1-NEXT:    srld $r5 = $r3, 48
; CV1-NEXT:    ;;
; CV1-NEXT:    extfz $r6 = $r2, 47, 32
; CV1-NEXT:    srlw $r8 = $r2, 16
; CV1-NEXT:    extfz $r7 = $r3, 47, 32
; CV1-NEXT:    srlw $r9 = $r3, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r2 = $r2
; CV1-NEXT:    srld $r10 = $r1, 48
; CV1-NEXT:    zxhd $r3 = $r3
; CV1-NEXT:    srld $r11 = $r0, 48
; CV1-NEXT:    ;;
; CV1-NEXT:    extfz $r15 = $r1, 47, 32
; CV1-NEXT:    srlw $r17 = $r1, 16
; CV1-NEXT:    extfz $r16 = $r0, 47, 32
; CV1-NEXT:    srlw $r32 = $r0, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r1 = $r1
; CV1-NEXT:    zxhd $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r4 = $r4
; CV1-NEXT:    zxhd $r5 = $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r6 = $r6
; CV1-NEXT:    zxhd $r7 = $r7
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r8 = $r8
; CV1-NEXT:    zxhd $r9 = $r9
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r2 = $r2
; CV1-NEXT:    maxuw $r4 = $r5, $r4
; CV1-NEXT:    zxhd $r3 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r10 = $r10
; CV1-NEXT:    maxuw $r5 = $r7, $r6
; CV1-NEXT:    zxhd $r11 = $r11
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r15 = $r15
; CV1-NEXT:    maxuw $r6 = $r9, $r8
; CV1-NEXT:    zxhd $r16 = $r16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r17 = $r17
; CV1-NEXT:    maxuw $r2 = $r3, $r2
; CV1-NEXT:    zxhd $r32 = $r32
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r1 = $r1
; CV1-NEXT:    maxuw $r3 = $r11, $r10
; CV1-NEXT:    zxhd $r0 = $r0
; CV1-NEXT:    maxuw $r7 = $r16, $r15
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r5 = $r4, 15, 8
; CV1-NEXT:    maxuw $r8 = $r32, $r17
; CV1-NEXT:    insf $r2 = $r6, 15, 8
; CV1-NEXT:    maxuw $r0 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r7 = $r3, 15, 8
; CV1-NEXT:    insf $r2 = $r5, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r8, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r7, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: v4_umaxbo_rr_i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    maxubo $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = call <8 x i8> @llvm.umax.v8i8(<8 x i8> %a, <8 x i8> %b)
  ret <8 x i8> %0
}

define  <8 x i8> @v4_uminbo_rr_i8(<8 x i8> %a, <8 x i8> %b) {
; CV1-LABEL: v4_uminbo_rr_i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r2 = $r1, 0x80004000200010
; CV1-NEXT:    sbmm8 $r3 = $r0, 0x80004000200010
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    srld $r4 = $r2, 48
; CV1-NEXT:    srld $r5 = $r3, 48
; CV1-NEXT:    ;;
; CV1-NEXT:    extfz $r6 = $r2, 47, 32
; CV1-NEXT:    srlw $r8 = $r2, 16
; CV1-NEXT:    extfz $r7 = $r3, 47, 32
; CV1-NEXT:    srlw $r9 = $r3, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r2 = $r2
; CV1-NEXT:    srld $r10 = $r1, 48
; CV1-NEXT:    zxhd $r3 = $r3
; CV1-NEXT:    srld $r11 = $r0, 48
; CV1-NEXT:    ;;
; CV1-NEXT:    extfz $r15 = $r1, 47, 32
; CV1-NEXT:    srlw $r17 = $r1, 16
; CV1-NEXT:    extfz $r16 = $r0, 47, 32
; CV1-NEXT:    srlw $r32 = $r0, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r1 = $r1
; CV1-NEXT:    zxhd $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r4 = $r4
; CV1-NEXT:    zxhd $r5 = $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r6 = $r6
; CV1-NEXT:    zxhd $r7 = $r7
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r8 = $r8
; CV1-NEXT:    zxhd $r9 = $r9
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r2 = $r2
; CV1-NEXT:    minuw $r4 = $r5, $r4
; CV1-NEXT:    zxhd $r3 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r10 = $r10
; CV1-NEXT:    minuw $r5 = $r7, $r6
; CV1-NEXT:    zxhd $r11 = $r11
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r15 = $r15
; CV1-NEXT:    minuw $r6 = $r9, $r8
; CV1-NEXT:    zxhd $r16 = $r16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r17 = $r17
; CV1-NEXT:    minuw $r2 = $r3, $r2
; CV1-NEXT:    zxhd $r32 = $r32
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r1 = $r1
; CV1-NEXT:    minuw $r3 = $r11, $r10
; CV1-NEXT:    zxhd $r0 = $r0
; CV1-NEXT:    minuw $r7 = $r16, $r15
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r5 = $r4, 15, 8
; CV1-NEXT:    minuw $r8 = $r32, $r17
; CV1-NEXT:    insf $r2 = $r6, 15, 8
; CV1-NEXT:    minuw $r0 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r7 = $r3, 15, 8
; CV1-NEXT:    insf $r2 = $r5, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r8, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r7, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: v4_uminbo_rr_i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    minubo $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = call <8 x i8> @llvm.umin.v8i8(<8 x i8> %a, <8 x i8> %b)
  ret <8 x i8> %0
}

declare <8 x i8> @llvm.smax.v8i8(<8 x i8> %a, <8 x i8> %b)
declare <8 x i8> @llvm.smin.v8i8(<8 x i8> %a, <8 x i8> %b)
declare <8 x i8> @llvm.umax.v8i8(<8 x i8> %a, <8 x i8> %b)
declare <8 x i8> @llvm.umin.v8i8(<8 x i8> %a, <8 x i8> %b)

attributes #0 = { nounwind }
