; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
; RUN: clang -O2 -c -o /dev/null %s
; Ticket: T19709

target triple = "kvx-kalray-cos"

@jfdctint_CHECKSUM = constant i32 1668124
@jfdctint_data = global [64 x i32] zeroinitializer

define void @jfdctint_jpeg_fdct_islow() {
; CHECK-LABEL: jfdctint_jpeg_fdct_islow:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = jfdctint_data
; CHECK-NEXT:    make $r1 = 8
; CHECK-NEXT:    addd $r12 = $r12, -128
; CHECK-NEXT:    make $r38 = 0xffffe333ffffe333
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 120[$r12] = $r30
; CHECK-NEXT:    make $r40 = 0xffffadfdffffadfd
; CHECK-NEXT:    make $r42 = 0xffffc13bffffc13b
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 112[$r12] = $r28
; CHECK-NEXT:    make $r2 = 0x25a1000025a1
; CHECK-NEXT:    make $r44 = 0xfffff384fffff384
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 80[$r12] = $r24r25r26r27
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 48[$r12] = $r20r21r22r23
; CHECK-NEXT:    make $r20 = 0x98e0000098e
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 32[$r12] = $r18r19
; CHECK-NEXT:    make $r18 = 0x625400006254
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 16[$r12] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    addd $r5 = $r0, 60
; CHECK-NEXT:    lwz $r11 = 64[$r0]
; CHECK-NEXT:    addd $r46 = $r0, 4
; CHECK-NEXT:    addd $r48 = $r0, 28
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r4 = 96[$r0]
; CHECK-NEXT:    addd $r7 = $r0, 56
; CHECK-NEXT:    addd $r50 = $r0, 24
; CHECK-NEXT:    addd $r55 = $r0, 36
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r17 = $r0, 52
; CHECK-NEXT:    addd $r33 = $r0, 40
; CHECK-NEXT:    addd $r35 = $r0, 48
; CHECK-NEXT:    lwz $r49 = 92[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r6 = 124[$r0]
; CHECK-NEXT:    addd $r36 = $r0, 16
; CHECK-NEXT:    addd $r58 = $r0, 20
; CHECK-NEXT:    addd $r62 = $r0, 12
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r1 = $r1, -4
; CHECK-NEXT:    lwz $r3 = 88[$r0]
; CHECK-NEXT:    insf $r11 = $r4, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r9 = 120[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r6 = $r0, 8
; CHECK-NEXT:    insf $r49 = $r6, 63, 32
; CHECK-NEXT:    lwz $r53 = 68[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r8 = 100[$r0]
; CHECK-NEXT:    addwp $r39 = $r49, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r9, 63, 32
; CHECK-NEXT:    addd $r9 = $r0, 44
; CHECK-NEXT:    lwz $r61 = 72[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r16 = 104[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r19 = 84[$r0]
; CHECK-NEXT:    insf $r53 = $r8, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r32 = 116[$r0]
; CHECK-NEXT:    addwp $r37 = $r3, $r53
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r21 = 76[$r0]
; CHECK-NEXT:    insf $r61 = $r16, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r34 = 108[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r19 = $r32, 63, 32
; CHECK-NEXT:    lwz $r23 = 80[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r4 = 112[$r0]
; CHECK-NEXT:    addwp $r41 = $r19, $r61
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r21 = $r34, 63, 32
; CHECK-NEXT:    addwp $r37 = $r41, $r37
; CHECK-NEXT:    lwz $r52 = 0[$r0]
; CHECK-NEXT:    sbfwp $r63 = $r41, $r37
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r15 = 32[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r23 = $r4, 63, 32
; CHECK-NEXT:    lwz $r54 = 0[$r48]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r43 = $r23, $r21
; CHECK-NEXT:    lwz $r47 = 0[$r5]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r39 = $r43, $r39
; CHECK-NEXT:    insf $r52 = $r15, 63, 32
; CHECK-NEXT:    lwz $r56 = 0[$r46]
; CHECK-NEXT:    sbfwp $r59 = $r43, $r39
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r25 = $r59, $r63
; CHECK-NEXT:    sbfwp $r37 = $r37, $r39
; CHECK-NEXT:    addwp $r41 = $r39, $r37
; CHECK-NEXT:    lwz $r51 = 0[$r55]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfwp $r47 = $r49, $r11
; CHECK-NEXT:    sbfwp $r49 = $r3, $r53
; CHECK-NEXT:    insf $r54 = $r47, 63, 32
; CHECK-NEXT:    lwz $r60 = 0[$r50]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r2 = 0[$r7]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfwp $r19 = $r23, $r21
; CHECK-NEXT:    lwz $r22 = 0[$r33]
; CHECK-NEXT:    sbfwp $r51 = $r19, $r61
; CHECK-NEXT:    insf $r56 = $r51, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r21 = $r51, $r47
; CHECK-NEXT:    lwz $r32 = 0[$r17]
; CHECK-NEXT:    addwp $r53 = $r19, $r49
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r2 = 0x187e0000187e
; CHECK-NEXT:    addwp $r3 = $r53, $r21
; CHECK-NEXT:    lwz $r4 = 0[$r9]
; CHECK-NEXT:    insf $r60 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfwp $r24 = $r60, $r56
; CHECK-NEXT:    lwz $r34 = 0[$r35]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r30 = 0[$r6]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r6r7
; CHECK-NEXT:    make $r6 = 0x115100001151
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r6 = 0x40000000400
; CHECK-NEXT:    lwz $r16 = 0[$r58]
; CHECK-NEXT:    copyd $r27 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfwp $r22 = $r54, $r52
; CHECK-NEXT:    insf $r30 = $r22, 63, 32
; CHECK-NEXT:    addwp $r52 = $r54, $r52
; CHECK-NEXT:    copyd $r57 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r8 = 0[$r62]
; CHECK-NEXT:    copyd $r45 = $r57
; CHECK-NEXT:    addwp $r54 = $r60, $r56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r6 = 0[$r36]
; CHECK-NEXT:    insf $r16 = $r32, 63, 32
; CHECK-NEXT:    maddwp $r45 = $r25, $r27
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r16 = $r16, $r30
; CHECK-NEXT:    sbfwp $r26 = $r16, $r30
; CHECK-NEXT:    make $r30 = 0x41b3000041b3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r8 = $r4, 63, 32
; CHECK-NEXT:    copyd $r11 = $r2
; CHECK-NEXT:    addwp $r56 = $r16, $r54
; CHECK-NEXT:    copyd $r61 = $r45
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r10r11 = 16[$r12]
; CHECK-NEXT:    insf $r6 = $r34, 63, 32
; CHECK-NEXT:    addwp $r34 = $r26, $r22
; CHECK-NEXT:    maddwp $r61 = $r59, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r6 = $r6, $r8
; CHECK-NEXT:    sbfwp $r16 = $r16, $r54
; CHECK-NEXT:    sbfwp $r28 = $r6, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfwp $r6 = $r6, $r52
; CHECK-NEXT:    addwp $r8 = $r6, $r52
; CHECK-NEXT:    addwp $r32 = $r28, $r24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r2 = $r32, $r34
; CHECK-NEXT:    copyd $r4 = $r10
; CHECK-NEXT:    copyd $r11 = $r10
; CHECK-NEXT:    addwp $r52 = $r8, $r56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 16[$r12] = $r4r5
; CHECK-NEXT:    make $r4 = 0xffffc4dfffffc4df
; CHECK-NEXT:    srld $r15 = $r52, 32
; CHECK-NEXT:    sllw $r52 = $r52, 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwq $r2r3 = $r2r3, $r10r11
; CHECK-NEXT:    make $r4 = 0x40000000400
; CHECK-NEXT:    copyd $r11 = $r4
; CHECK-NEXT:    sllw $r15 = $r15, 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfwp $r8 = $r56, $r8
; CHECK-NEXT:    srld $r15 = $r41, 32
; CHECK-NEXT:    maddwp $r45 = $r63, $r11
; CHECK-NEXT:    insf $r52 = $r15, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r11 = $r3
; CHECK-NEXT:    sllw $r15 = $r15, 2
; CHECK-NEXT:    sllw $r41 = $r41, 2
; CHECK-NEXT:    copyd $r59 = $r42
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwp $r11 = $r53, $r59
; CHECK-NEXT:    copyd $r53 = $r57
; CHECK-NEXT:    addwp $r59 = $r19, $r47
; CHECK-NEXT:    copyd $r63 = $r38
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r10 = $r2
; CHECK-NEXT:    maddwp $r53 = $r59, $r63
; CHECK-NEXT:    addwp $r54 = $r6, $r16
; CHECK-NEXT:    copyd $r59 = $r44
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwp $r3 = $r21, $r59
; CHECK-NEXT:    srld $r15 = $r8, 32
; CHECK-NEXT:    insf $r41 = $r15, 63, 32
; CHECK-NEXT:    make $r56 = 0x115100001151
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllw $r8 = $r8, 2
; CHECK-NEXT:    sllw $r15 = $r15, 2
; CHECK-NEXT:    copyd $r59 = $r53
; CHECK-NEXT:    copyd $r63 = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r19 = $r40
; CHECK-NEXT:    srld $r43 = $r52, 32
; CHECK-NEXT:    maddwp $r59 = $r19, $r63
; CHECK-NEXT:    addwp $r63 = $r51, $r49
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r8 = $r15, 63, 32
; CHECK-NEXT:    copyd $r19 = $r30
; CHECK-NEXT:    maddwp $r57 = $r63, $r19
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwp $r10 = $r32, $r42
; CHECK-NEXT:    make $r32 = 0x40000000400
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwp $r2 = $r34, $r44
; CHECK-NEXT:    copyd $r63 = $r57
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r51 = $r18
; CHECK-NEXT:    copyd $r60 = $r4
; CHECK-NEXT:    maddwp $r63 = $r51, $r19
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwp $r60 = $r54, $r56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 64[$r0] = $r41
; CHECK-NEXT:    srld $r41 = $r41, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r0] = $r52
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 32[$r0] = $r43
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 96[$r0] = $r41
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r36] = $r8
; CHECK-NEXT:    make $r36 = 0x187e0000187e
; CHECK-NEXT:    copyd $r52 = $r60
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r6 = $r8, 32
; CHECK-NEXT:    srld $r8 = $r37, 32
; CHECK-NEXT:    maddwp $r52 = $r6, $r36
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r35] = $r6
; CHECK-NEXT:    sllw $r6 = $r8, 2
; CHECK-NEXT:    make $r8 = 0xffffc4dfffffc4df
; CHECK-NEXT:    sllw $r35 = $r37, 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r6 = $r52, 32
; CHECK-NEXT:    sraw $r16 = $r52, 11
; CHECK-NEXT:    insf $r35 = $r6, 63, 32
; CHECK-NEXT:    maddwp $r60 = $r16, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 80[$r0] = $r35
; CHECK-NEXT:    sraw $r6 = $r6, 11
; CHECK-NEXT:    srld $r8 = $r35, 32
; CHECK-NEXT:    sraw $r35 = $r61, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 112[$r0] = $r8
; CHECK-NEXT:    srld $r6 = $r61, 32
; CHECK-NEXT:    insf $r16 = $r6, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r36r37 = 0[$r12]
; CHECK-NEXT:    sraw $r6 = $r6, 11
; CHECK-NEXT:    srld $r8 = $r16, 32
; CHECK-NEXT:    maddwp $r57 = $r49, $r51
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r6 = $r60, 32
; CHECK-NEXT:    insf $r35 = $r6, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r6 = $r6, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r36] = $r16
; CHECK-NEXT:    sraw $r16 = $r60, 11
; CHECK-NEXT:    make $r36 = 0x300b0000300b
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r33] = $r8
; CHECK-NEXT:    srld $r8 = $r35, 32
; CHECK-NEXT:    insf $r16 = $r6, 63, 32
; CHECK-NEXT:    sraw $r33 = $r45, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 72[$r0] = $r35
; CHECK-NEXT:    srld $r6 = $r16, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 104[$r0] = $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r50] = $r16
; CHECK-NEXT:    addwp $r16 = $r26, $r24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r7] = $r6
; CHECK-NEXT:    addwp $r6 = $r28, $r22
; CHECK-NEXT:    copyd $r7 = $r36
; CHECK-NEXT:    copyd $r8 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwp $r8 = $r6, $r38
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r7 = $r45, 32
; CHECK-NEXT:    maddwp $r53 = $r47, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r6 = $r8
; CHECK-NEXT:    sraw $r7 = $r7, 11
; CHECK-NEXT:    maddwp $r32 = $r16, $r40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwp $r6 = $r28, $r20
; CHECK-NEXT:    insf $r33 = $r7, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 88[$r0] = $r33
; CHECK-NEXT:    srld $r15 = $r33, 32
; CHECK-NEXT:    copyd $r16 = $r32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwp $r6 = $r6, $r10
; CHECK-NEXT:    maddwp $r16 = $r26, $r30
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 120[$r0] = $r15
; CHECK-NEXT:    sraw $r6 = $r6, 11
; CHECK-NEXT:    srld $r7 = $r6, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r7 = $r7, 11
; CHECK-NEXT:    addwp $r16 = $r16, $r2
; CHECK-NEXT:    maddwp $r32 = $r24, $r18
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r6 = $r7, 63, 32
; CHECK-NEXT:    addwp $r7 = $r59, $r11
; CHECK-NEXT:    maddwp $r8 = $r22, $r36
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r48] = $r6
; CHECK-NEXT:    addwp $r4 = $r32, $r10
; CHECK-NEXT:    srld $r6 = $r6, 32
; CHECK-NEXT:    srld $r15 = $r7, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r5] = $r6
; CHECK-NEXT:    addwp $r2 = $r8, $r2
; CHECK-NEXT:    sraw $r5 = $r7, 11
; CHECK-NEXT:    sraw $r6 = $r15, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r6, 63, 32
; CHECK-NEXT:    srld $r6 = $r16, 32
; CHECK-NEXT:    sraw $r16 = $r16, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 92[$r0] = $r5
; CHECK-NEXT:    srld $r5 = $r5, 32
; CHECK-NEXT:    sraw $r6 = $r6, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 124[$r0] = $r5
; CHECK-NEXT:    addwp $r3 = $r53, $r3
; CHECK-NEXT:    addwp $r5 = $r63, $r3
; CHECK-NEXT:    insf $r16 = $r6, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r58] = $r16
; CHECK-NEXT:    sraw $r5 = $r5, 11
; CHECK-NEXT:    srld $r6 = $r16, 32
; CHECK-NEXT:    srld $r7 = $r5, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r17] = $r6
; CHECK-NEXT:    sraw $r6 = $r7, 11
; CHECK-NEXT:    addwp $r7 = $r57, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r4 = $r4, 11
; CHECK-NEXT:    insf $r5 = $r6, 63, 32
; CHECK-NEXT:    srld $r6 = $r4, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 84[$r0] = $r5
; CHECK-NEXT:    srld $r5 = $r5, 32
; CHECK-NEXT:    sraw $r6 = $r6, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 116[$r0] = $r5
; CHECK-NEXT:    insf $r4 = $r6, 63, 32
; CHECK-NEXT:    srld $r5 = $r7, 32
; CHECK-NEXT:    sraw $r7 = $r7, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r62] = $r4
; CHECK-NEXT:    srld $r4 = $r4, 32
; CHECK-NEXT:    sraw $r5 = $r5, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r9] = $r4
; CHECK-NEXT:    sraw $r2 = $r2, 11
; CHECK-NEXT:    srld $r4 = $r2, 32
; CHECK-NEXT:    insf $r7 = $r5, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 76[$r0] = $r7
; CHECK-NEXT:    sraw $r4 = $r4, 11
; CHECK-NEXT:    srld $r5 = $r7, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 108[$r0] = $r5
; CHECK-NEXT:    insf $r2 = $r4, 63, 32
; CHECK-NEXT:    sraw $r3 = $r3, 11
; CHECK-NEXT:    srld $r4 = $r3, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r46] = $r2
; CHECK-NEXT:    srld $r2 = $r2, 32
; CHECK-NEXT:    sraw $r4 = $r4, 11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r55] = $r2
; CHECK-NEXT:    insf $r3 = $r4, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 68[$r0] = $r3
; CHECK-NEXT:    srld $r2 = $r3, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 100[$r0] = $r2
; CHECK-NEXT:    addd $r0 = $r0, 128
; CHECK-NEXT:    cb.dnez $r1 ? .LBB0_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    lq $r18r19 = 32[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 48[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r24r25r26r27 = 80[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r28 = 112[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r12 = $r12, 128
; CHECK-NEXT:    ld $r30 = 120[$r12]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  br label %1

1:
  %2 = phi i64 [ 0, %0 ], [ %209, %1 ]
  %3 = shl i64 %2, 3
  %4 = getelementptr [64 x i32], [64 x i32]* @jfdctint_data, i64 0, i64 %3
  %5 = shl i64 %2, 3
  %6 = or i64 %5, 8
  %7 = getelementptr [64 x i32], [64 x i32]* @jfdctint_data, i64 0, i64 %6
  %8 = shl i64 %2, 3
  %9 = or i64 %8, 16
  %10 = getelementptr [64 x i32], [64 x i32]* @jfdctint_data, i64 0, i64 %9
  %11 = shl i64 %2, 3
  %12 = or i64 %11, 24
  %13 = getelementptr [64 x i32], [64 x i32]* @jfdctint_data, i64 0, i64 %12
  %14 = load i32, i32* %4
  %15 = load i32, i32* %7
  %16 = load i32, i32* %10
  %17 = load i32, i32* %13
  %18 = insertelement <4 x i32> poison, i32 %14, i32 0
  %19 = insertelement <4 x i32> %18, i32 %15, i32 1
  %20 = insertelement <4 x i32> %19, i32 %16, i32 2
  %21 = insertelement <4 x i32> %20, i32 %17, i32 3
  %22 = insertelement <2 x i32*> poison, i32* %4, i32 0
  %23 = insertelement <2 x i32*> %22, i32* %7, i32 1
  %24 = getelementptr i32, <2 x i32*> %23, <2 x i64> <i64 7, i64 7>
  %25 = getelementptr inbounds i32, i32* %10, i64 7
  %26 = getelementptr inbounds i32, i32* %13, i64 7
  %27 = call <2 x i32> @llvm.masked.gather.v2i32.v2p0i32(<2 x i32*> %24, i32 4, <2 x i1> <i1 true, i1 true>, <2 x i32> undef)
  %28 = extractelement <2 x i32*> %24, i32 0
  %29 = load i32, i32* %25
  %30 = load i32, i32* %26
  %31 = extractelement <2 x i32> %27, i32 0
  %32 = insertelement <4 x i32> poison, i32 %31, i32 0
  %33 = extractelement <2 x i32> %27, i32 1
  %34 = insertelement <4 x i32> %32, i32 %33, i32 1
  %35 = insertelement <4 x i32> %34, i32 %29, i32 2
  %36 = insertelement <4 x i32> %35, i32 %30, i32 3
  %37 = add nsw <4 x i32> %36, %21
  %38 = sub nsw <4 x i32> %21, %36
  %39 = getelementptr i32, <2 x i32*> %23, <2 x i64> <i64 1, i64 1>
  %40 = getelementptr inbounds i32, i32* %10, i64 1
  %41 = getelementptr inbounds i32, i32* %13, i64 1
  %42 = call <2 x i32> @llvm.masked.gather.v2i32.v2p0i32(<2 x i32*> %39, i32 4, <2 x i1> <i1 true, i1 true>, <2 x i32> undef)
  %43 = extractelement <2 x i32*> %39, i32 0
  %44 = load i32, i32* %40
  %45 = load i32, i32* %41
  %46 = extractelement <2 x i32> %42, i32 0
  %47 = insertelement <4 x i32> poison, i32 %46, i32 0
  %48 = extractelement <2 x i32> %42, i32 1
  %49 = insertelement <4 x i32> %47, i32 %48, i32 1
  %50 = insertelement <4 x i32> %49, i32 %44, i32 2
  %51 = insertelement <4 x i32> %50, i32 %45, i32 3
  %52 = getelementptr i32, <2 x i32*> %23, <2 x i64> <i64 6, i64 6>
  %53 = getelementptr inbounds i32, i32* %10, i64 6
  %54 = getelementptr inbounds i32, i32* %13, i64 6
  %55 = call <2 x i32> @llvm.masked.gather.v2i32.v2p0i32(<2 x i32*> %52, i32 4, <2 x i1> <i1 true, i1 true>, <2 x i32> undef)
  %56 = extractelement <2 x i32*> %52, i32 0
  %57 = load i32, i32* %53
  %58 = load i32, i32* %54
  %59 = extractelement <2 x i32> %55, i32 0
  %60 = insertelement <4 x i32> poison, i32 %59, i32 0
  %61 = extractelement <2 x i32> %55, i32 1
  %62 = insertelement <4 x i32> %60, i32 %61, i32 1
  %63 = insertelement <4 x i32> %62, i32 %57, i32 2
  %64 = insertelement <4 x i32> %63, i32 %58, i32 3
  %65 = add nsw <4 x i32> %64, %51
  %66 = sub nsw <4 x i32> %51, %64
  %67 = getelementptr i32, <2 x i32*> %23, <2 x i64> <i64 2, i64 2>
  %68 = getelementptr inbounds i32, i32* %10, i64 2
  %69 = getelementptr inbounds i32, i32* %13, i64 2
  %70 = call <2 x i32> @llvm.masked.gather.v2i32.v2p0i32(<2 x i32*> %67, i32 4, <2 x i1> <i1 true, i1 true>, <2 x i32> undef)
  %71 = extractelement <2 x i32*> %67, i32 0
  %72 = load i32, i32* %68
  %73 = load i32, i32* %69
  %74 = extractelement <2 x i32> %70, i32 0
  %75 = insertelement <4 x i32> poison, i32 %74, i32 0
  %76 = extractelement <2 x i32> %70, i32 1
  %77 = insertelement <4 x i32> %75, i32 %76, i32 1
  %78 = insertelement <4 x i32> %77, i32 %72, i32 2
  %79 = insertelement <4 x i32> %78, i32 %73, i32 3
  %80 = getelementptr i32, <2 x i32*> %23, <2 x i64> <i64 5, i64 5>
  %81 = getelementptr inbounds i32, i32* %10, i64 5
  %82 = getelementptr inbounds i32, i32* %13, i64 5
  %83 = call <2 x i32> @llvm.masked.gather.v2i32.v2p0i32(<2 x i32*> %80, i32 4, <2 x i1> <i1 true, i1 true>, <2 x i32> undef)
  %84 = extractelement <2 x i32*> %80, i32 0
  %85 = load i32, i32* %81
  %86 = load i32, i32* %82
  %87 = extractelement <2 x i32> %83, i32 0
  %88 = insertelement <4 x i32> poison, i32 %87, i32 0
  %89 = extractelement <2 x i32> %83, i32 1
  %90 = insertelement <4 x i32> %88, i32 %89, i32 1
  %91 = insertelement <4 x i32> %90, i32 %85, i32 2
  %92 = insertelement <4 x i32> %91, i32 %86, i32 3
  %93 = add nsw <4 x i32> %92, %79
  %94 = sub nsw <4 x i32> %79, %92
  %95 = getelementptr i32, <2 x i32*> %23, <2 x i64> <i64 3, i64 3>
  %96 = getelementptr inbounds i32, i32* %10, i64 3
  %97 = getelementptr inbounds i32, i32* %13, i64 3
  %98 = call <2 x i32> @llvm.masked.gather.v2i32.v2p0i32(<2 x i32*> %95, i32 4, <2 x i1> <i1 true, i1 true>, <2 x i32> undef)
  %99 = extractelement <2 x i32*> %95, i32 0
  %100 = load i32, i32* %96
  %101 = load i32, i32* %97
  %102 = extractelement <2 x i32> %98, i32 0
  %103 = insertelement <4 x i32> poison, i32 %102, i32 0
  %104 = extractelement <2 x i32> %98, i32 1
  %105 = insertelement <4 x i32> %103, i32 %104, i32 1
  %106 = insertelement <4 x i32> %105, i32 %100, i32 2
  %107 = insertelement <4 x i32> %106, i32 %101, i32 3
  %108 = getelementptr i32, <2 x i32*> %23, <2 x i64> <i64 4, i64 4>
  %109 = getelementptr inbounds i32, i32* %10, i64 4
  %110 = getelementptr inbounds i32, i32* %13, i64 4
  %111 = call <2 x i32> @llvm.masked.gather.v2i32.v2p0i32(<2 x i32*> %108, i32 4, <2 x i1> <i1 true, i1 true>, <2 x i32> undef)
  %112 = extractelement <2 x i32*> %108, i32 0
  %113 = load i32, i32* %109
  %114 = load i32, i32* %110
  %115 = extractelement <2 x i32> %111, i32 0
  %116 = insertelement <4 x i32> poison, i32 %115, i32 0
  %117 = extractelement <2 x i32> %111, i32 1
  %118 = insertelement <4 x i32> %116, i32 %117, i32 1
  %119 = insertelement <4 x i32> %118, i32 %113, i32 2
  %120 = insertelement <4 x i32> %119, i32 %114, i32 3
  %121 = add nsw <4 x i32> %120, %107
  %122 = sub nsw <4 x i32> %107, %120
  %123 = add nsw <4 x i32> %121, %37
  %124 = sub nsw <4 x i32> %37, %121
  %125 = add nsw <4 x i32> %93, %65
  %126 = sub nsw <4 x i32> %65, %93
  %127 = add nsw <4 x i32> %123, %125
  %128 = shl <4 x i32> %127, <i32 2, i32 2, i32 2, i32 2>
  %129 = extractelement <4 x i32> %128, i32 0
  store i32 %129, i32* %4
  %130 = extractelement <4 x i32> %128, i32 1
  store i32 %130, i32* %7
  %131 = extractelement <4 x i32> %128, i32 2
  store i32 %131, i32* %10
  %132 = extractelement <4 x i32> %128, i32 3
  store i32 %132, i32* %13
  %133 = sub nsw <4 x i32> %123, %125
  %134 = shl <4 x i32> %133, <i32 2, i32 2, i32 2, i32 2>
  %135 = extractelement <4 x i32> %134, i32 0
  store i32 %135, i32* %112
  %136 = extractelement <4 x i32> %134, i32 1
  %137 = extractelement <2 x i32*> %108, i32 1
  store i32 %136, i32* %137
  %138 = extractelement <4 x i32> %134, i32 2
  store i32 %138, i32* %109
  %139 = extractelement <4 x i32> %134, i32 3
  store i32 %139, i32* %110
  %140 = add nsw <4 x i32> %124, %126
  %141 = mul nsw <4 x i32> %140, <i32 4433, i32 4433, i32 4433, i32 4433>
  %142 = mul nsw <4 x i32> %124, <i32 6270, i32 6270, i32 6270, i32 6270>
  %143 = add <4 x i32> %141, <i32 1024, i32 1024, i32 1024, i32 1024>
  %144 = add <4 x i32> %143, %142
  %145 = ashr <4 x i32> %144, <i32 11, i32 11, i32 11, i32 11>
  %146 = extractelement <4 x i32> %145, i32 0
  store i32 %146, i32* %71
  %147 = extractelement <4 x i32> %145, i32 1
  %148 = extractelement <2 x i32*> %67, i32 1
  store i32 %147, i32* %148
  %149 = extractelement <4 x i32> %145, i32 2
  store i32 %149, i32* %68
  %150 = extractelement <4 x i32> %145, i32 3
  store i32 %150, i32* %69
  %151 = mul nsw <4 x i32> %126, <i32 -15137, i32 -15137, i32 -15137, i32 -15137>
  %152 = add <4 x i32> %143, %151
  %153 = ashr <4 x i32> %152, <i32 11, i32 11, i32 11, i32 11>
  %154 = extractelement <4 x i32> %153, i32 0
  store i32 %154, i32* %56
  %155 = extractelement <4 x i32> %153, i32 1
  %156 = extractelement <2 x i32*> %52, i32 1
  store i32 %155, i32* %156
  %157 = extractelement <4 x i32> %153, i32 2
  store i32 %157, i32* %53
  %158 = extractelement <4 x i32> %153, i32 3
  store i32 %158, i32* %54
  %159 = add nsw <4 x i32> %122, %38
  %160 = add nsw <4 x i32> %94, %66
  %161 = add nsw <4 x i32> %122, %66
  %162 = add nsw <4 x i32> %94, %38
  %163 = add nsw <4 x i32> %161, %162
  %164 = mul nsw <4 x i32> %163, <i32 9633, i32 9633, i32 9633, i32 9633>
  %165 = mul nsw <4 x i32> %122, <i32 2446, i32 2446, i32 2446, i32 2446>
  %166 = mul nsw <4 x i32> %94, <i32 16819, i32 16819, i32 16819, i32 16819>
  %167 = mul nsw <4 x i32> %66, <i32 25172, i32 25172, i32 25172, i32 25172>
  %168 = mul nsw <4 x i32> %38, <i32 12299, i32 12299, i32 12299, i32 12299>
  %169 = mul nsw <4 x i32> %159, <i32 -7373, i32 -7373, i32 -7373, i32 -7373>
  %170 = mul nsw <4 x i32> %160, <i32 -20995, i32 -20995, i32 -20995, i32 -20995>
  %171 = mul nsw <4 x i32> %161, <i32 -16069, i32 -16069, i32 -16069, i32 -16069>
  %172 = mul nsw <4 x i32> %162, <i32 -3196, i32 -3196, i32 -3196, i32 -3196>
  %173 = add nsw <4 x i32> %164, %171
  %174 = add nsw <4 x i32> %164, %172
  %175 = add <4 x i32> %169, <i32 1024, i32 1024, i32 1024, i32 1024>
  %176 = add <4 x i32> %175, %165
  %177 = add <4 x i32> %176, %173
  %178 = ashr <4 x i32> %177, <i32 11, i32 11, i32 11, i32 11>
  %179 = extractelement <4 x i32> %178, i32 0
  store i32 %179, i32* %28
  %180 = extractelement <4 x i32> %178, i32 1
  %181 = extractelement <2 x i32*> %24, i32 1
  store i32 %180, i32* %181
  %182 = extractelement <4 x i32> %178, i32 2
  store i32 %182, i32* %25
  %183 = extractelement <4 x i32> %178, i32 3
  store i32 %183, i32* %26
  %184 = add <4 x i32> %170, <i32 1024, i32 1024, i32 1024, i32 1024>
  %185 = add <4 x i32> %184, %166
  %186 = add <4 x i32> %185, %174
  %187 = ashr <4 x i32> %186, <i32 11, i32 11, i32 11, i32 11>
  %188 = extractelement <4 x i32> %187, i32 0
  store i32 %188, i32* %84
  %189 = extractelement <4 x i32> %187, i32 1
  %190 = extractelement <2 x i32*> %80, i32 1
  store i32 %189, i32* %190
  %191 = extractelement <4 x i32> %187, i32 2
  store i32 %191, i32* %81
  %192 = extractelement <4 x i32> %187, i32 3
  store i32 %192, i32* %82
  %193 = add <4 x i32> %184, %167
  %194 = add <4 x i32> %193, %173
  %195 = ashr <4 x i32> %194, <i32 11, i32 11, i32 11, i32 11>
  %196 = extractelement <4 x i32> %195, i32 0
  store i32 %196, i32* %99
  %197 = extractelement <4 x i32> %195, i32 1
  %198 = extractelement <2 x i32*> %95, i32 1
  store i32 %197, i32* %198
  %199 = extractelement <4 x i32> %195, i32 2
  store i32 %199, i32* %96
  %200 = extractelement <4 x i32> %195, i32 3
  store i32 %200, i32* %97
  %201 = add <4 x i32> %175, %168
  %202 = add <4 x i32> %201, %174
  %203 = ashr <4 x i32> %202, <i32 11, i32 11, i32 11, i32 11>
  %204 = extractelement <4 x i32> %203, i32 0
  store i32 %204, i32* %43
  %205 = extractelement <4 x i32> %203, i32 1
  %206 = extractelement <2 x i32*> %39, i32 1
  store i32 %205, i32* %206
  %207 = extractelement <4 x i32> %203, i32 2
  store i32 %207, i32* %40
  %208 = extractelement <4 x i32> %203, i32 3
  store i32 %208, i32* %41
  %209 = add i64 %2, 4
  %210 = icmp eq i64 %209, 8
  br i1 %210, label %211, label %1

211:
  ret void
}

declare <2 x i32> @llvm.masked.gather.v2i32.v2p0i32(<2 x i32*>, i32 immarg, <2 x i1>, <2 x i32>)

