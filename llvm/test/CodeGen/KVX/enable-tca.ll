; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s

target triple = "kvx-kalray-cos"

define void @foo(i8* nocapture %0, float* nocapture %1) {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lv $a3 = 96[$r0]
; CHECK-NEXT:    make $r3 = 0x10000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a2 = 64[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a1 = 32[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r2 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddw $r2 = $r2, 0x42280000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r1] = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #APP
; CHECK-NEXT:    wfxm $pcr, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    mt44d $a0a1a2a3 = $a0a1a2a3
; CHECK-NEXT:    make $r1 = 0x100000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #APP
; CHECK-NEXT:    wfxm $pcr, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    sv 96[$r0] = $a3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 64[$r0] = $a2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 32[$r0] = $a1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 0[$r0] = $a0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
%3 = bitcast i8* %0 to <1024 x i1>*
%4 = load <1024 x i1>, <1024 x i1>* %3, align 32
%5 = load float, float* %1, align 4
%6 = fadd float %5, 4.200000e+01
store float %6, float* %1, align 4
tail call void asm sideeffect "wfxm $$pcr, $0", "r,~{$pcr}"(i64 4503599627370496)
%7 = tail call <1024 x i1> @llvm.kvx.mt44d(<1024 x i1> %4)
tail call void asm sideeffect "wfxm $$pcr, $0", "r,~{$pcr}"(i64 1048576)
store <1024 x i1> %7, <1024 x i1>* %3, align 32
ret void
}

declare <1024 x i1> @llvm.kvx.mt44d(<1024 x i1>)
