; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s | FileCheck %s
target triple = "kvx-kalray-cos"

define i64 @ADDWDrr(i32 %0, i64 %1) {
; CHECK-LABEL: ADDWDrr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addwd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = sext i32 %0 to i64
  %4 = add nsw i64 %3, %1
  ret i64 %4
}

; TODO: Add ri variant
define i64 @ADDWDri(i64 %0) {
; CHECK-LABEL: ADDWDri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r0 = $r0, -1024
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = add nsw i64 %0, -1024
  ret i64 %2
}

define i64 @ADDWDrr_ld(i32* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: ADDWDrr_ld:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addwd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = load i32, i32* %0, align 4
  %4 = sext i32 %3 to i64
  %5 = add nsw i64 %4, %1
  ret i64 %5
}

define i64 @ADDUWDrr(i32 %0, i64 %1) {
; CHECK-LABEL: ADDUWDrr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adduwd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = zext i32 %0 to i64
  %4 = add nsw i64 %3, %1
  ret i64 %4
}

; TODO: Add ri variant
define i64 @ADDUWDri(i64 %0) {
; CHECK-LABEL: ADDUWDri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r0 = $r0, 1024
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = add nsw i64 %0, 1024
  ret i64 %2
}

define i64 @ADDUWDrr_ld(i32* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: ADDUWDrr_ld:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    adduwd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = load i32, i32* %0, align 4
  %4 = zext i32 %3 to i64
  %5 = add nsw i64 %4, %1
  ret i64 %5
}
