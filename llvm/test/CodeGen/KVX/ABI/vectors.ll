; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s -O2 | FileCheck %s --check-prefix=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefix=CHECK
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @double_3_arg(<3 x double> %0) {
; CHECK-LABEL: double_3_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret void
}

; FIXME: This should be a single bundle!
define <3 x double> @double_3_ret() {
; CHECK-LABEL: double_3_ret:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0x0
; CHECK-NEXT:    make $r1 = 0x0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r2 = 0x0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <3 x double> zeroinitializer
}

define void @long_3_arg(<3 x i64> %0) {
; CHECK-LABEL: long_3_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret void
}

define <3 x i64> @long_3_ret() {
; CHECK-LABEL: long_3_ret:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    make $r2 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <3 x i64> zeroinitializer
}

define void @float_3_arg(<3 x float> %0) {
; CHECK-LABEL: float_3_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret void
}

; FIXME: This should be a single bundle!
define <3 x float> @float_3_ret() {
; CHECK-LABEL: float_3_ret:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <3 x float> zeroinitializer
}

define void @int_3_arg(<3 x i32> %0) {
; CHECK-LABEL: int_3_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret void
}

define <3 x i32> @int_3_ret() {
; CHECK-LABEL: int_3_ret:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <3 x i32> zeroinitializer
}

define void @bool_3_arg(<3 x i1> %0) {
; CHECK-LABEL: bool_3_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret void
}

; TODO: Zero initialize v3i1
define <3 x i1> @bool_3_ret() {
; CHECK-LABEL: bool_3_ret:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sb 28[$r12] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = 28[$r12]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <3 x i1> zeroinitializer
}

define void @half_3_arg(<3 x half> %0) {
; CHECK-LABEL: half_3_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret void
}

define <3 x half> @half_3_ret() {
; CHECK-LABEL: half_3_ret:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <3 x half> zeroinitializer
}

define void @half_1_arg(<1 x half> %0) {
; CHECK-LABEL: half_1_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret void
}

define <1 x half> @half_1_ret() {
; CHECK-LABEL: half_1_ret:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0x0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <1 x half> zeroinitializer
}

; TODO: zxhd not required.
define <5 x half> @half_5_ret() {
; CHECK-LABEL: half_5_ret:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    make $r1 = 0x0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <5 x half> zeroinitializer
}
