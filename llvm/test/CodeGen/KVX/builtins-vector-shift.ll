; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=kvx-kalray-cos | FileCheck %s
target triple = "kvx-kalray-cos"

define <8 x i8> @shiftbo_one(<8 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbo_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 56
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <8 x i8> %0, <8 x i8> %v, <8 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0>
  ret <8 x i8> %1
}

define <8 x i8> @shiftbo_two(<8 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbo_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x101804020100804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <8 x i8> %0, <8 x i8> %v, <8 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 0>
  ret <8 x i8> %1
}

define <8 x i8> @shiftbo_three(<8 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbo_three:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x101018040201008
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <8 x i8> %0, <8 x i8> %v, <8 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 0, i32 0>
  ret <8 x i8> %1
}

define <8 x i8> @shiftbo_four(<8 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbo_four:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x101010180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <8 x i8> %0, <8 x i8> %v, <8 x i32> <i32 12, i32 13, i32 14, i32 15, i32 0, i32 0, i32 0, i32 0>
  ret <8 x i8> %1
}

define <8 x i8> @shiftbo_five(<8 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbo_five:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x101010101804020
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <8 x i8> %0, <8 x i8> %v, <8 x i32> <i32 13, i32 14, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0>
  ret <8 x i8> %1
}

define <16 x i8> @shiftbx_one(<16 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbx_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 8
; CHECK-NEXT:    srld $r1 = $r1, 8
; CHECK-NEXT:    zxbd $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 63, 56
; CHECK-NEXT:    insf $r1 = $r2, 63, 56
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <16 x i8> %0, <16 x i8> %v, <16 x i32> <i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0>
  ret <16 x i8> %1
}

define <16 x i8> @shiftbx_two(<16 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbx_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    insf $r1 = $r2, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x101804020100804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <16 x i8> %0, <16 x i8> %v, <16 x i32> <i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 0>
  ret <16 x i8> %1
}

define <16 x i8> @shiftbx_three(<16 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbx_three:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 40
; CHECK-NEXT:    insf $r1 = $r2, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x101018040201008
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <16 x i8> %0, <16 x i8> %v, <16 x i32> <i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 0, i32 0>
  ret <16 x i8> %1
}

define <16 x i8> @shiftbx_five(<16 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbx_five:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 24
; CHECK-NEXT:    insf $r1 = $r2, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x101010101804020
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <16 x i8> %0, <16 x i8> %v, <16 x i32> <i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 0, i32 0, i32 0, i32 0>
  ret <16 x i8> %1
}

define <16 x i8> @shiftbx_seven(<16 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbx_seven:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 8
; CHECK-NEXT:    insf $r1 = $r2, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x101010101010180
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <16 x i8> %0, <16 x i8> %v, <16 x i32> <i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  ret <16 x i8> %1
}

define <32 x i8> @shiftbv_one(<32 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbv_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 8
; CHECK-NEXT:    srld $r1 = $r1, 8
; CHECK-NEXT:    zxbd $r5 = $r1
; CHECK-NEXT:    zxbd $r6 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r5, 63, 56
; CHECK-NEXT:    srld $r2 = $r2, 8
; CHECK-NEXT:    srld $r3 = $r3, 8
; CHECK-NEXT:    zxbd $r7 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r6, 63, 56
; CHECK-NEXT:    insf $r2 = $r7, 63, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 63, 56
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <32 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <32 x i8> %0, <32 x i8> %v, <32 x i32> <i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 0>
  ret <32 x i8> %1
}

define <32 x i8> @shiftbv_two(<32 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbv_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    srld $r5 = $r2, 16
; CHECK-NEXT:    srld $r6 = $r1, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 7, 0
; CHECK-NEXT:    insf $r5 = $r3, 63, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    insf $r6 = $r2, 63, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r6
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    sbmm8 $r3 = $r3, 0x101804020100804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <32 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <32 x i8> %0, <32 x i8> %v, <32 x i32> <i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 0, i32 0>
  ret <32 x i8> %1
}

define <32 x i8> @shiftbv_three(<32 x i8> %v, i8 %b) {
; CHECK-LABEL: shiftbv_three:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 24
; CHECK-NEXT:    srld $r5 = $r2, 24
; CHECK-NEXT:    srld $r6 = $r1, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 7, 0
; CHECK-NEXT:    insf $r5 = $r3, 63, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 40
; CHECK-NEXT:    insf $r6 = $r2, 63, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r6
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    sbmm8 $r3 = $r3, 0x101018040201008
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <32 x i8> undef, i8 %b, i64 0
  %1 = shufflevector <32 x i8> %0, <32 x i8> %v, <32 x i32> <i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 0, i32 0, i32 0>
  ret <32 x i8> %1
}

define <4 x i16> @shifthq_one(<4 x i16> %v, i16 %b) {
; CHECK-LABEL: shifthq_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x i16> undef, i16 %b, i64 0
  %1 = shufflevector <4 x i16> %0, <4 x i16> %v, <4 x i32> <i32 5, i32 6, i32 7, i32 0>
  ret <4 x i16> %1
}

define <4 x i16> @shifthq_two(<4 x i16> %v, i16 %b) {
; CHECK-LABEL: shifthq_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x201020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x i16> undef, i16 %b, i64 0
  %1 = shufflevector <4 x i16> %0, <4 x i16> %v, <4 x i32> <i32 6, i32 7, i32 0, i32 0>
  ret <4 x i16> %1
}

define <8 x i16> @shiftho_three(<8 x i16> %v, i16 %b) {
; CHECK-LABEL: shiftho_three:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 16
; CHECK-NEXT:    insf $r1 = $r2, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102018040
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x i16> undef, i16 %b, i64 0
  %1 = shufflevector <8 x i16> %0, <8 x i16> %v, <8 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 0, i32 0>
  ret <8 x i16> %1
}

define <16 x i16> @shifthx_one(<16 x i16> %v, i16 %b) {
; CHECK-LABEL: shifthx_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    srld $r1 = $r1, 16
; CHECK-NEXT:    zxhd $r5 = $r1
; CHECK-NEXT:    zxhd $r6 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r5, 63, 48
; CHECK-NEXT:    srld $r2 = $r2, 16
; CHECK-NEXT:    srld $r3 = $r3, 16
; CHECK-NEXT:    zxhd $r7 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r6, 63, 48
; CHECK-NEXT:    insf $r2 = $r7, 63, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 63, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x i16> undef, i16 %b, i64 0
  %1 = shufflevector <16 x i16> %0, <16 x i16> %v, <16 x i32> <i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0>
  ret <16 x i16> %1
}

define <16 x i16> @shifthx_two(<16 x i16> %v, i16 %b) {
; CHECK-LABEL: shifthx_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r5 = $r2, 32
; CHECK-NEXT:    srld $r6 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 15, 0
; CHECK-NEXT:    insf $r5 = $r3, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    insf $r6 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r6
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    sbmm8 $r3 = $r3, 0x201020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x i16> undef, i16 %b, i64 0
  %1 = shufflevector <16 x i16> %0, <16 x i16> %v, <16 x i32> <i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 0>
  ret <16 x i16> %1
}

define <16 x i16> @shifthx_three(<16 x i16> %v, i16 %b) {
; CHECK-LABEL: shifthx_three:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 48
; CHECK-NEXT:    srld $r5 = $r2, 48
; CHECK-NEXT:    srld $r6 = $r1, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 15, 0
; CHECK-NEXT:    insf $r5 = $r3, 63, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 16
; CHECK-NEXT:    insf $r6 = $r2, 63, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r6
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    sbmm8 $r3 = $r3, 0x201020102018040
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x i16> undef, i16 %b, i64 0
  %1 = shufflevector <16 x i16> %0, <16 x i16> %v, <16 x i32> <i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 0, i32 0>
  ret <16 x i16> %1
}

define <2 x i32> @shiftwp_one(<2 x i32> %v, i32 %b) {
; CHECK-LABEL: shiftwp_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <2 x i32> undef, i32 %b, i64 0
  %1 = shufflevector <2 x i32> %0, <2 x i32> %v, <2 x i32> <i32 3, i32 0>
  ret <2 x i32> %1
}

define <4 x i32> @shiftwq_one(<4 x i32> %v, i32 %b) {
; CHECK-LABEL: shiftwq_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 31, 0
; CHECK-NEXT:    srad $r3 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804020180402010
; CHECK-NEXT:    insf $r3 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x i32> undef, i32 %b, i64 0
  %1 = shufflevector <4 x i32> %0, <4 x i32> %v, <4 x i32> <i32 5, i32 6, i32 7, i32 0>
  ret <4 x i32> %1
}

define <8 x i32> @shiftwo_one(<8 x i32> %v, i32 %b) {
; CHECK-LABEL: shiftwo_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 31, 0
; CHECK-NEXT:    insf $r1 = $r2, 31, 0
; CHECK-NEXT:    srad $r5 = $r3, 32
; CHECK-NEXT:    copyd $r6 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r4, 63, 32
; CHECK-NEXT:    insf $r6 = $r3, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804020180402010
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020180402010
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r6, 0x804020180402010
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x i32> undef, i32 %b, i64 0
  %1 = shufflevector <8 x i32> %0, <8 x i32> %v, <8 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0>
  ret <8 x i32> %1
}

define <2 x i64> @shiftdp_one(<2 x i64> %v, i64 %b) {
; CHECK-LABEL: shiftdp_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <2 x i64> undef, i64 %b, i64 0
  %1 = shufflevector <2 x i64> %0, <2 x i64> %v, <2 x i32> <i32 3, i32 0>
  ret <2 x i64> %1
}

define <4 x i64> @shiftdq_one(<4 x i64> %v, i64 %b) {
; CHECK-LABEL: shiftdq_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    copyd $r2 = $r3
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x i64> undef, i64 %b, i64 0
  %1 = shufflevector <4 x i64> %0, <4 x i64> %v, <4 x i32> <i32 5, i32 6, i32 7, i32 0>
  ret <4 x i64> %1
}

define <4 x half> @shiftfhq_one(<4 x half> %v, half %b) {
; CHECK-LABEL: shiftfhq_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x half> undef, half %b, i64 0
  %1 = shufflevector <4 x half> %0, <4 x half> %v, <4 x i32> <i32 5, i32 6, i32 7, i32 0>
  ret <4 x half> %1
}

define <4 x half> @shiftfhq_two(<4 x half> %v, half %b) {
; CHECK-LABEL: shiftfhq_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x201020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x half> undef, half %b, i64 0
  %1 = shufflevector <4 x half> %0, <4 x half> %v, <4 x i32> <i32 6, i32 7, i32 0, i32 0>
  ret <4 x half> %1
}

define <4 x half> @shiftfhq_last(<4 x half> %v, half %b) {
; CHECK-LABEL: shiftfhq_last:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x201020102018040
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x half> undef, half %b, i64 0
  %1 = shufflevector <4 x half> %0, <4 x half> %v, <4 x i32> <i32 7, i32 0, i32 0, i32 0>
  ret <4 x half> %1
}

define <8 x half> @shiftfho_one(<8 x half> %v, half %b) {
; CHECK-LABEL: shiftfho_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    srld $r3 = $r1, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    insf $r3 = $r2, 63, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x half> undef, half %b, i64 0
  %1 = shufflevector <8 x half> %0, <8 x half> %v, <8 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0>
  ret <8 x half> %1
}

define <8 x half> @shiftfho_two(<8 x half> %v, half %b) {
; CHECK-LABEL: shiftfho_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    insf $r1 = $r2, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x half> undef, half %b, i64 0
  %1 = shufflevector <8 x half> %0, <8 x half> %v, <8 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 0>
  ret <8 x half> %1
}

define <8 x half> @shiftfho_three(<8 x half> %v, half %b) {
; CHECK-LABEL: shiftfho_three:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 16
; CHECK-NEXT:    insf $r1 = $r2, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x201020102018040
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x half> undef, half %b, i64 0
  %1 = shufflevector <8 x half> %0, <8 x half> %v, <8 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 0, i32 0>
  ret <8 x half> %1
}

define <8 x half> @shiftfho_four(<8 x half> %v, half %b) {
; CHECK-LABEL: shiftfho_four:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x half> undef, half %b, i64 0
  %1 = shufflevector <8 x half> %0, <8 x half> %v, <8 x i32> <i32 12, i32 13, i32 14, i32 15, i32 0, i32 0, i32 0, i32 0>
  ret <8 x half> %1
}

define <8 x half> @shiftfho_five(<8 x half> %v, half %b) {
; CHECK-LABEL: shiftfho_five:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r1, 16
; CHECK-NEXT:    sbmm8 $r1 = $r2, 0x201020102010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x half> undef, half %b, i64 0
  %1 = shufflevector <8 x half> %0, <8 x half> %v, <8 x i32> <i32 13, i32 14, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0>
  ret <8 x half> %1
}

define <8 x half> @shiftfho_last(<8 x half> %v, half %b) {
; CHECK-LABEL: shiftfho_last:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r1 = $r2, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r1, 0x201020102018040
; CHECK-NEXT:    sbmm8 $r1 = $r2, 0x201020102010201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x half> undef, half %b, i64 0
  %1 = shufflevector <8 x half> %0, <8 x half> %v, <8 x i32> <i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  ret <8 x half> %1
}

define <16 x half> @shiftfhx_one(<16 x half> %v, half %b) {
; CHECK-LABEL: shiftfhx_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 16
; CHECK-NEXT:    srld $r5 = $r1, 16
; CHECK-NEXT:    srld $r6 = $r2, 16
; CHECK-NEXT:    srld $r7 = $r3, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r2, 63, 48
; CHECK-NEXT:    insf $r6 = $r3, 63, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    insf $r7 = $r4, 63, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x half> undef, half %b, i64 0
  %1 = shufflevector <16 x half> %0, <16 x half> %v, <16 x i32> <i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0>
  ret <16 x half> %1
}

define <16 x half> @shiftfhx_two(<16 x half> %v, half %b) {
; CHECK-LABEL: shiftfhx_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    srld $r5 = $r2, 32
; CHECK-NEXT:    srld $r6 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 15, 0
; CHECK-NEXT:    insf $r5 = $r3, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    insf $r6 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r6
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    sbmm8 $r3 = $r3, 0x201020180402010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x half> undef, half %b, i64 0
  %1 = shufflevector <16 x half> %0, <16 x half> %v, <16 x i32> <i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 0>
  ret <16 x half> %1
}

define <16 x half> @shiftfhx_last(<16 x half> %v, half %b) {
; CHECK-LABEL: shiftfhx_last:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r1 = $r4, 0x201020102010201
; CHECK-NEXT:    insf $r3 = $r4, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r3, 0x201020102018040
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    copyd $r3 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <16 x half> undef, half %b, i64 0
  %1 = shufflevector <16 x half> %0, <16 x half> %v, <16 x i32> <i32 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  ret <16 x half> %1
}

define <2 x float> @shiftfwp_one(<2 x float> %v, float %b) {
; CHECK-LABEL: shiftfwp_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <2 x float> undef, float %b, i64 0
  %1 = shufflevector <2 x float> %0, <2 x float> %v, <2 x i32> <i32 3, i32 0>
  ret <2 x float> %1
}

define <4 x float> @shiftfwq_one(<4 x float> %v, float %b) {
; CHECK-LABEL: shiftfwq_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 31, 0
; CHECK-NEXT:    srad $r3 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804020180402010
; CHECK-NEXT:    insf $r3 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x float> undef, float %b, i64 0
  %1 = shufflevector <4 x float> %0, <4 x float> %v, <4 x i32> <i32 5, i32 6, i32 7, i32 0>
  ret <4 x float> %1
}

define <4 x float> @shiftfwq_two(<4 x float> %v, float %b) {
; CHECK-LABEL: shiftfwq_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r3 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r3, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x float> undef, float %b, i64 0
  %1 = shufflevector <4 x float> %0, <4 x float> %v, <4 x i32> <i32 6, i32 7, i32 0, i32 0>
  ret <4 x float> %1
}

define <4 x float> @shiftfwq_last(<4 x float> %v, float %b) {
; CHECK-LABEL: shiftfwq_last:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r0 = $r1, 32
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    insf $r1 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x float> undef, float %b, i64 0
  %1 = shufflevector <4 x float> %0, <4 x float> %v, <4 x i32> <i32 7, i32 0, i32 0, i32 0>
  ret <4 x float> %1
}

define <8 x float> @shiftfwo_one(<8 x float> %v, float %b) {
; CHECK-LABEL: shiftfwo_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 31, 0
; CHECK-NEXT:    insf $r1 = $r2, 31, 0
; CHECK-NEXT:    srad $r5 = $r3, 32
; CHECK-NEXT:    copyd $r6 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r4, 63, 32
; CHECK-NEXT:    insf $r6 = $r3, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x804020180402010
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020180402010
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r6, 0x804020180402010
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x float> undef, float %b, i64 0
  %1 = shufflevector <8 x float> %0, <8 x float> %v, <8 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0>
  ret <8 x float> %1
}

define <8 x float> @shiftfwo_two(<8 x float> %v, float %b) {
; CHECK-LABEL: shiftfwo_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    copyd $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r4
; CHECK-NEXT:    insf $r5 = $r5, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x float> undef, float %b, i64 0
  %1 = shufflevector <8 x float> %0, <8 x float> %v, <8 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 0>
  ret <8 x float> %1
}

define <8 x float> @shiftfwo_last(<8 x float> %v, float %b) {
; CHECK-LABEL: shiftfwo_last:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srad $r0 = $r3, 32
; CHECK-NEXT:    copyd $r1 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    insf $r1 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    copyd $r3 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <8 x float> undef, float %b, i64 0
  %1 = shufflevector <8 x float> %0, <8 x float> %v, <8 x i32> <i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  ret <8 x float> %1
}

define <2 x double> @shiftfdp_one(<2 x double> %v, double %b) {
; CHECK-LABEL: shiftfdp_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <2 x double> undef, double %b, i64 0
  %1 = shufflevector <2 x double> %0, <2 x double> %v, <2 x i32> <i32 3, i32 0>
  ret <2 x double> %1
}

define <4 x double> @shiftfdq_one(<4 x double> %v, double %b) {
; CHECK-LABEL: shiftfdq_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    copyd $r2 = $r3
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x double> undef, double %b, i64 0
  %1 = shufflevector <4 x double> %0, <4 x double> %v, <4 x i32> <i32 5, i32 6, i32 7, i32 0>
  ret <4 x double> %1
}

define <4 x double> @shiftfdq_two(<4 x double> %v, double %b) {
; CHECK-LABEL: shiftfdq_two:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    copyd $r2 = $r4
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x double> undef, double %b, i64 0
  %1 = shufflevector <4 x double> %0, <4 x double> %v, <4 x i32> <i32 6, i32 7, i32 0, i32 0>
  ret <4 x double> %1
}

define <4 x double> @shiftfdq_last(<4 x double> %v, double %b) {
; CHECK-LABEL: shiftfdq_last:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r3
; CHECK-NEXT:    copyd $r1 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    copyd $r3 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = insertelement <4 x double> undef, double %b, i64 0
  %1 = shufflevector <4 x double> %0, <4 x double> %v, <4 x i32> <i32 7, i32 0, i32 0, i32 0>
  ret <4 x double> %1
}
