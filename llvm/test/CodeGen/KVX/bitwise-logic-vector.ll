; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

;; v8i8

define <8 x i8> @v8i8xor(<8 x i8> %a, <8 x i8> %b){
; CHECK-LABEL: v8i8xor:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <8 x i8> %b, %a
  ret <8 x i8> %xor
}

define <8 x i8> @v8i8xor_imm(<8 x i8> %a){
; CHECK-LABEL: v8i8xor_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xord $r0 = $r0, 0x303030303030303
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <8 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  ret <8 x i8> %xor
}

define <8 x i8> @v8i8or(<8 x i8> %a, <8 x i8> %b){
; CHECK-LABEL: v8i8or:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <8 x i8> %b, %a
  ret <8 x i8> %or
}

define <8 x i8> @v8i8or_imm(<8 x i8> %a){
; CHECK-LABEL: v8i8or_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ord $r0 = $r0, 0xf0f0f0f0f0f0f0f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <8 x i8> %a, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  ret <8 x i8> %or
}

define <8 x i8> @v8i8and(<8 x i8> %a, <8 x i8> %b){
; CHECK-LABEL: v8i8and:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <8 x i8> %b, %a
  ret <8 x i8> %and
}

define <8 x i8> @v8i8and_imm(<8 x i8> %a){
; CHECK-LABEL: v8i8and_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r0 = $r0, 0xf0f0f0f0f0f0f0f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <8 x i8> %a, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  ret <8 x i8> %and
}

define <8 x i8> @v8i8annd(<8 x i8> %a, <8 x i8> %b){
; CHECK-LABEL: v8i8annd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <8 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %and = and <8 x i8> %not_a, %b
  ret <8 x i8> %and
}

define <8 x i8> @v8i8andn_imm(<8 x i8> %a){
; CHECK-LABEL: v8i8andn_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnd $r0 = $r0, 0x2b2b2b2b2b2b2b2b
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <8 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %andn = and <8 x i8> %not_a, <i8 43, i8 43, i8 43, i8 43, i8 43, i8 43, i8 43, i8 43>
  ret <8 x i8> %andn
}

;; v4i16
define <4 x i16> @v4i16xor(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: v4i16xor:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <4 x i16> %b, %a
  ret <4 x i16> %xor
}

define <4 x i16> @v4i16xor_imm(<4 x i16> %a){
; CHECK-LABEL: v4i16xor_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xord $r0 = $r0, 0x3000300030003
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <4 x i16> %a, <i16 3, i16 3, i16 3, i16 3>
  ret <4 x i16> %xor
}

define <4 x i16> @v4i16or(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: v4i16or:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <4 x i16> %b, %a
  ret <4 x i16> %or
}

define <4 x i16> @v4i16or_imm(<4 x i16> %a){
; CHECK-LABEL: v4i16or_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ord $r0 = $r0, 0xf000f000f000f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <4 x i16> %a, <i16 15, i16 15, i16 15, i16 15>
  ret <4 x i16> %or
}

define <4 x i16> @v4i16and(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: v4i16and:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <4 x i16> %b, %a
  ret <4 x i16> %and
}

define <4 x i16> @v4i16and_imm(<4 x i16> %a){
; CHECK-LABEL: v4i16and_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r0 = $r0, 0xf000f000f000f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <4 x i16> %a, <i16 15, i16 15, i16 15, i16 15>
  ret <4 x i16> %and
}

define <4 x i16> @v4i16annd(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: v4i16annd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <4 x i16> %a, <i16 -1, i16 -1, i16 -1, i16 -1>
  %and = and <4 x i16> %not_a, %b
  ret <4 x i16> %and
}

define <4 x i16> @v4i16andn_imm(<4 x i16> %a){
; CHECK-LABEL: v4i16andn_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnd $r0 = $r0, 0x2b002b002b002b
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <4 x i16> %a, <i16 -1, i16 -1, i16 -1, i16 -1>
  %andn = and <4 x i16> %not_a, <i16 43, i16 43, i16 43, i16 43>
  ret <4 x i16> %andn
}

;; v2i32

define <2 x i32> @v2i32xor(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: v2i32xor:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <2 x i32> %b, %a
  ret <2 x i32> %xor
}

define <2 x i32> @v2i32xor_imm(<2 x i32> %a){
; CHECK-LABEL: v2i32xor_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xord $r0 = $r0, 0x300000003
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <2 x i32> %a, <i32 3, i32 3>
  ret <2 x i32> %xor
}

define <2 x i32> @v2i32or(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: v2i32or:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <2 x i32> %b, %a
  ret <2 x i32> %or
}

define <2 x i32> @v2i32or_imm(<2 x i32> %a){
; CHECK-LABEL: v2i32or_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ord $r0 = $r0, 0xf0000000f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <2 x i32> %a, <i32 15, i32 15>
  ret <2 x i32> %or
}

define <2 x i32> @v2i32and(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: v2i32and:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <2 x i32> %b, %a
  ret <2 x i32> %and
}

define <2 x i32> @v2i32and_imm(<2 x i32> %a){
; CHECK-LABEL: v2i32and_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r0 = $r0, 0xf0000000f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <2 x i32> %a, <i32 15, i32 15>
  ret <2 x i32> %and
}

define <2 x i32> @v2i32annd(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: v2i32annd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <2 x i32> %a, <i32 -1, i32 -1>
  %and = and <2 x i32> %not_a, %b
  ret <2 x i32> %and
}

define <2 x i32> @v2i32andn_imm(<2 x i32> %a){
; CHECK-LABEL: v2i32andn_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnd $r0 = $r0, 0x2b0000002b
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <2 x i32> %a, <i32 -1, i32 -1>
  %andn = and <2 x i32> %not_a, <i32 43, i32 43>
  ret <2 x i32> %andn
}

;; v4i8
define <4 x i8> @v4i8xor(<4 x i8> %a, <4 x i8> %b){
; CHECK-LABEL: v4i8xor:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <4 x i8> %b, %a
  ret <4 x i8> %xor
}

define <4 x i8> @v4i8xor_imm(<4 x i8> %a){
; CHECK-LABEL: v4i8xor_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r0, 0x10303fd
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <4 x i8> %a, <i8 -3, i8 3, i8 3, i8 1>
  ret <4 x i8> %xor
}

define <4 x i8> @v4i8or(<4 x i8> %a, <4 x i8> %b){
; CHECK-LABEL: v4i8or:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <4 x i8> %b, %a
  ret <4 x i8> %or
}

define <4 x i8> @v4i8or_imm(<4 x i8> %a){
; CHECK-LABEL: v4i8or_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orw $r0 = $r0, 0x103070f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <4 x i8> %a, <i8 15, i8 7, i8 3, i8 1>
  ret <4 x i8> %or
}

define <4 x i8> @v4i8and(<4 x i8> %a, <4 x i8> %b){
; CHECK-LABEL: v4i8and:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <4 x i8> %b, %a
  ret <4 x i8> %and
}

define <4 x i8> @v4i8and_imm(<4 x i8> %a){
; CHECK-LABEL: v4i8and_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 0x4030201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <4 x i8> %a, <i8 1, i8 2, i8 3, i8 4>
  ret <4 x i8> %and
}

define <4 x i8> @v4i8annd(<4 x i8> %a, <4 x i8> %b){
; CHECK-LABEL: v4i8annd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <4 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1>
  %and = and <4 x i8> %not_a, %b
  ret <4 x i8> %and
}

define <4 x i8> @v4i8andn_imm(<4 x i8> %a){
; CHECK-LABEL: v4i8andn_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnw $r0 = $r0, 0x2b2b2b2b
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <4 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1>
  %andn = and <4 x i8> %not_a, <i8 43, i8 43, i8 43, i8 43>
  ret <4 x i8> %andn
}

;; v2i8
define <2 x i8> @v2i8xor(<2 x i8> %a, <2 x i8> %b){
; CHECK-LABEL: v2i8xor:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <2 x i8> %b, %a
  ret <2 x i8> %xor
}

define <2 x i8> @v2i8xor_imm(<2 x i8> %a){
; CHECK-LABEL: v2i8xor_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r0, 1021
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor <2 x i8> %a, <i8 -3, i8 3>
  ret <2 x i8> %xor
}

define <2 x i8> @v2i8or(<2 x i8> %a, <2 x i8> %b){
; CHECK-LABEL: v2i8or:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <2 x i8> %b, %a
  ret <2 x i8> %or
}

define <2 x i8> @v2i8or_imm(<2 x i8> %a){
; CHECK-LABEL: v2i8or_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orw $r0 = $r0, 0x70f
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or <2 x i8> %a, <i8 15, i8 7>
  ret <2 x i8> %or
}

define <2 x i8> @v2i8and(<2 x i8> %a, <2 x i8> %b){
; CHECK-LABEL: v2i8and:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <2 x i8> %b, %a
  ret <2 x i8> %and
}

define <2 x i8> @v2i8and_imm(<2 x i8> %a){
; CHECK-LABEL: v2i8and_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 513
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and <2 x i8> %a, <i8 1, i8 2>
  ret <2 x i8> %and
}

define <2 x i8> @v2i8annd(<2 x i8> %a, <2 x i8> %b){
; CHECK-LABEL: v2i8annd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <2 x i8> %a, <i8 -1, i8 -1>
  %and = and <2 x i8> %not_a, %b
  ret <2 x i8> %and
}

define <2 x i8> @v2i8andn_imm(<2 x i8> %a){
; CHECK-LABEL: v2i8andn_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andnw $r0 = $r0, 0x2b2b
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %not_a = xor <2 x i8> %a, <i8 -1, i8 -1>
  %andn = and <2 x i8> %not_a, <i8 43, i8 43>
  ret <2 x i8> %andn
}
