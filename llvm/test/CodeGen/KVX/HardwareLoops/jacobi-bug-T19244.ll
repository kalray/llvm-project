; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc  -disable-kvx-hwloops=false -O3 -o - %s | FileCheck %s
; RUN: clang -mllvm -disable-kvx-hwloops=false -O3 -c -o /dev/null %s
; Taken from llvm-test-suite/SingleSource/Benchmarks/Polybench/stencils/jacobi-1d-imper/jacobi-1d-imper.c
; This file test that disabling early tail duplication when hardware loops are enabled keeps the loops'
; preheaders and thus doesn't produce the bug documented in T19244

target triple = "kvx-kalray-cos"

define i32 @main(i32 %0, ptr readnone %1) {
; CHECK-LABEL: main:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x2710
; CHECK-NEXT:    make $r1 = 8
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    sq 8[$r12] = $r18r19
; CHECK-NEXT:    call polybench_alloc_data
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    make $r0 = 0x2710
; CHECK-NEXT:    make $r1 = 8
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    call polybench_alloc_data
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    make $r0 = 0x2710
; CHECK-NEXT:    make $r1 = 8
; CHECK-NEXT:    call polybench_alloc_data
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    make $r0 = 0x2710
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    call init_array
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    make $r1 = 0x1387
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_1: # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB0_2 Depth 2
; CHECK-NEXT:    # Child Loop BB0_4 Depth 2
; CHECK-NEXT:    # Child Loop BB0_6 Depth 2
; CHECK-NEXT:    # Child Loop BB0_8 Depth 2
; CHECK-NEXT:    # Child Loop BB0_10 Depth 2
; CHECK-NEXT:    # Child Loop BB0_12 Depth 2
; CHECK-NEXT:    # Child Loop BB0_14 Depth 2
; CHECK-NEXT:    # Child Loop BB0_16 Depth 2
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    copyd $r3 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r1, .__LOOPDO_0_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r4 = 0[$r3]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lq $r6r7 = 8[$r3]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    faddd $r4 = $r4, $r6
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    faddd $r4 = $r4, $r7
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    fmuld $r4 = $r4, 0x3fd555475a31a4be
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sd 8[$r2] = $r4
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    lq $r4r5 = 8[$r3]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    addd $r3 = $r3, 16
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    ld $r5 = 24[$r3]
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    addd $r5 = $r2, 16
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    fmuld $r4 = $r4, 0x3fd555475a31a4be
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    sd 16[$r2] = $r4
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    ;; # (end cycle 30)
; CHECK-NEXT:  .__LOOPDO_0_END_:
; CHECK-NEXT:  # %bb.3: # %.preheader6.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    copyd $r3 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r1, .__LOOPDO_1_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_4: # %.preheader6
; CHECK-NEXT:    # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r4 = 8[$r2]
; CHECK-NEXT:    addd $r5 = $r3, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 8[$r3] = $r4
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r2 = $r2, 16
; CHECK-NEXT:    ld $r4 = 16[$r2]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    sd 16[$r3] = $r4
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .__LOOPDO_1_END_:
; CHECK-NEXT:  # %bb.5: # %.preheader5.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    copyd $r3 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r1, .__LOOPDO_2_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_6: # %.preheader5
; CHECK-NEXT:    # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r4 = 0[$r3]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lq $r6r7 = 8[$r3]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    faddd $r4 = $r4, $r6
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    faddd $r4 = $r4, $r7
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    fmuld $r4 = $r4, 0x3fd555475a31a4be
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sd 8[$r2] = $r4
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    lq $r4r5 = 8[$r3]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    addd $r3 = $r3, 16
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    ld $r5 = 24[$r3]
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    addd $r5 = $r2, 16
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    fmuld $r4 = $r4, 0x3fd555475a31a4be
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    sd 16[$r2] = $r4
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    ;; # (end cycle 30)
; CHECK-NEXT:  .__LOOPDO_2_END_:
; CHECK-NEXT:  # %bb.7: # %.preheader4.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    copyd $r3 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r1, .__LOOPDO_3_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_8: # %.preheader4
; CHECK-NEXT:    # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r4 = 8[$r2]
; CHECK-NEXT:    addd $r5 = $r3, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 8[$r3] = $r4
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r2 = $r2, 16
; CHECK-NEXT:    ld $r4 = 16[$r2]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    sd 16[$r3] = $r4
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .__LOOPDO_3_END_:
; CHECK-NEXT:  # %bb.9: # %.preheader3.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    copyd $r3 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r1, .__LOOPDO_4_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_10: # %.preheader3
; CHECK-NEXT:    # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r4 = 0[$r3]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lq $r6r7 = 8[$r3]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    faddd $r4 = $r4, $r6
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    faddd $r4 = $r4, $r7
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    fmuld $r4 = $r4, 0x3fd555475a31a4be
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sd 8[$r2] = $r4
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    lq $r4r5 = 8[$r3]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    addd $r3 = $r3, 16
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    ld $r5 = 24[$r3]
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    addd $r5 = $r2, 16
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    fmuld $r4 = $r4, 0x3fd555475a31a4be
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    sd 16[$r2] = $r4
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    ;; # (end cycle 30)
; CHECK-NEXT:  .__LOOPDO_4_END_:
; CHECK-NEXT:  # %bb.11: # %.preheader2.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    copyd $r3 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r1, .__LOOPDO_5_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_12: # %.preheader2
; CHECK-NEXT:    # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r4 = 8[$r2]
; CHECK-NEXT:    addd $r5 = $r3, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 8[$r3] = $r4
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r2 = $r2, 16
; CHECK-NEXT:    ld $r4 = 16[$r2]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    sd 16[$r3] = $r4
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .__LOOPDO_5_END_:
; CHECK-NEXT:  # %bb.13: # %.preheader1.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    copyd $r3 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r1, .__LOOPDO_6_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_14: # %.preheader1
; CHECK-NEXT:    # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r4 = 0[$r3]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lq $r6r7 = 8[$r3]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    faddd $r4 = $r4, $r6
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    faddd $r4 = $r4, $r7
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    fmuld $r4 = $r4, 0x3fd555475a31a4be
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sd 8[$r2] = $r4
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    lq $r4r5 = 8[$r3]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    addd $r3 = $r3, 16
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    ld $r5 = 24[$r3]
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    faddd $r4 = $r4, $r5
; CHECK-NEXT:    addd $r5 = $r2, 16
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    fmuld $r4 = $r4, 0x3fd555475a31a4be
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    sd 16[$r2] = $r4
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    ;; # (end cycle 30)
; CHECK-NEXT:  .__LOOPDO_6_END_:
; CHECK-NEXT:  # %bb.15: # %.preheader.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    copyd $r2 = $r19
; CHECK-NEXT:    copyd $r3 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r1, .__LOOPDO_7_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_16: # %.preheader
; CHECK-NEXT:    # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r4 = 8[$r2]
; CHECK-NEXT:    addd $r5 = $r3, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 8[$r3] = $r4
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r2 = $r2, 16
; CHECK-NEXT:    ld $r4 = 16[$r2]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    sd 16[$r3] = $r4
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .__LOOPDO_7_END_:
; CHECK-NEXT:  # %bb.17: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    addw $r0 = $r0, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    compw.eq $r2 = $r0, 100
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.even $r2 ? .LBB0_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.18:
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = tail call ptr @polybench_alloc_data(i64 10000, i32 8)
  %4 = tail call ptr @polybench_alloc_data(i64 10000, i32 8)
  %5 = tail call ptr @polybench_alloc_data(i64 10000, i32 8)
  %6 = tail call i32 @init_array(i32 10000, ptr %3, ptr %5)
  br label %7

7:
  %8 = phi i32 [ 0, %2 ], [ %140, %139 ]
  br label %9

9:
  %10 = phi i64 [ 1, %7 ], [ %25, %9 ]
  %11 = getelementptr double, ptr %3, i64 %10
  %12 = getelementptr i8, ptr %11, i64 -8
  %13 = load double, ptr %12, align 8
  %14 = load double, ptr %11, align 8
  %15 = fadd double %13, %14
  %16 = add nuw nsw i64 %10, 1
  %17 = getelementptr inbounds double, ptr %3, i64 %16
  %18 = load double, ptr %17, align 8
  %19 = fadd double %15, %18
  %20 = fmul double %19, 3.333300e-01
  %21 = getelementptr inbounds double, ptr %5, i64 %10
  store double %20, ptr %21, align 8
  %22 = load double, ptr %11, align 8
  %23 = load double, ptr %17, align 8
  %24 = fadd double %22, %23
  %25 = add nuw nsw i64 %10, 2
  %26 = getelementptr inbounds double, ptr %3, i64 %25
  %27 = load double, ptr %26, align 8
  %28 = fadd double %24, %27
  %29 = fmul double %28, 3.333300e-01
  %30 = getelementptr inbounds double, ptr %5, i64 %16
  store double %29, ptr %30, align 8
  %31 = icmp eq i64 %25, 9999
  br i1 %31, label %.preheader6, label %9

.preheader6:
  %32 = phi i64 [ %40, %.preheader6 ], [ 1, %9 ]
  %33 = getelementptr inbounds double, ptr %5, i64 %32
  %34 = load double, ptr %33, align 8
  %35 = getelementptr inbounds double, ptr %3, i64 %32
  store double %34, ptr %35, align 8
  %36 = add nuw nsw i64 %32, 1
  %37 = getelementptr inbounds double, ptr %5, i64 %36
  %38 = load double, ptr %37, align 8
  %39 = getelementptr inbounds double, ptr %3, i64 %36
  store double %38, ptr %39, align 8
  %40 = add nuw nsw i64 %32, 2
  %41 = icmp eq i64 %40, 9999
  br i1 %41, label %.preheader5, label %.preheader6

42:
  ret i32 0

.preheader5:
  %43 = phi i64 [ %58, %.preheader5 ], [ 1, %.preheader6 ]
  %44 = getelementptr double, ptr %3, i64 %43
  %45 = getelementptr i8, ptr %44, i64 -8
  %46 = load double, ptr %45, align 8
  %47 = load double, ptr %44, align 8
  %48 = fadd double %46, %47
  %49 = add nuw nsw i64 %43, 1
  %50 = getelementptr inbounds double, ptr %3, i64 %49
  %51 = load double, ptr %50, align 8
  %52 = fadd double %48, %51
  %53 = fmul double %52, 3.333300e-01
  %54 = getelementptr inbounds double, ptr %5, i64 %43
  store double %53, ptr %54, align 8
  %55 = load double, ptr %44, align 8
  %56 = load double, ptr %50, align 8
  %57 = fadd double %55, %56
  %58 = add nuw nsw i64 %43, 2
  %59 = getelementptr inbounds double, ptr %3, i64 %58
  %60 = load double, ptr %59, align 8
  %61 = fadd double %57, %60
  %62 = fmul double %61, 3.333300e-01
  %63 = getelementptr inbounds double, ptr %5, i64 %49
  store double %62, ptr %63, align 8
  %64 = icmp eq i64 %58, 9999
  br i1 %64, label %.preheader4, label %.preheader5

.preheader4:
  %65 = phi i64 [ %73, %.preheader4 ], [ 1, %.preheader5 ]
  %66 = getelementptr inbounds double, ptr %5, i64 %65
  %67 = load double, ptr %66, align 8
  %68 = getelementptr inbounds double, ptr %3, i64 %65
  store double %67, ptr %68, align 8
  %69 = add nuw nsw i64 %65, 1
  %70 = getelementptr inbounds double, ptr %5, i64 %69
  %71 = load double, ptr %70, align 8
  %72 = getelementptr inbounds double, ptr %3, i64 %69
  store double %71, ptr %72, align 8
  %73 = add nuw nsw i64 %65, 2
  %74 = icmp eq i64 %73, 9999
  br i1 %74, label %.preheader3, label %.preheader4

.preheader3:
  %75 = phi i64 [ %90, %.preheader3 ], [ 1, %.preheader4 ]
  %76 = getelementptr double, ptr %3, i64 %75
  %77 = getelementptr i8, ptr %76, i64 -8
  %78 = load double, ptr %77, align 8
  %79 = load double, ptr %76, align 8
  %80 = fadd double %78, %79
  %81 = add nuw nsw i64 %75, 1
  %82 = getelementptr inbounds double, ptr %3, i64 %81
  %83 = load double, ptr %82, align 8
  %84 = fadd double %80, %83
  %85 = fmul double %84, 3.333300e-01
  %86 = getelementptr inbounds double, ptr %5, i64 %75
  store double %85, ptr %86, align 8
  %87 = load double, ptr %76, align 8
  %88 = load double, ptr %82, align 8
  %89 = fadd double %87, %88
  %90 = add nuw nsw i64 %75, 2
  %91 = getelementptr inbounds double, ptr %3, i64 %90
  %92 = load double, ptr %91, align 8
  %93 = fadd double %89, %92
  %94 = fmul double %93, 3.333300e-01
  %95 = getelementptr inbounds double, ptr %5, i64 %81
  store double %94, ptr %95, align 8
  %96 = icmp eq i64 %90, 9999
  br i1 %96, label %.preheader2, label %.preheader3

.preheader2:
  %97 = phi i64 [ %105, %.preheader2 ], [ 1, %.preheader3 ]
  %98 = getelementptr inbounds double, ptr %5, i64 %97
  %99 = load double, ptr %98, align 8
  %100 = getelementptr inbounds double, ptr %3, i64 %97
  store double %99, ptr %100, align 8
  %101 = add nuw nsw i64 %97, 1
  %102 = getelementptr inbounds double, ptr %5, i64 %101
  %103 = load double, ptr %102, align 8
  %104 = getelementptr inbounds double, ptr %3, i64 %101
  store double %103, ptr %104, align 8
  %105 = add nuw nsw i64 %97, 2
  %106 = icmp eq i64 %105, 9999
  br i1 %106, label %.preheader1, label %.preheader2

.preheader1:
  %107 = phi i64 [ %122, %.preheader1 ], [ 1, %.preheader2 ]
  %108 = getelementptr double, ptr %3, i64 %107
  %109 = getelementptr i8, ptr %108, i64 -8
  %110 = load double, ptr %109, align 8
  %111 = load double, ptr %108, align 8
  %112 = fadd double %110, %111
  %113 = add nuw nsw i64 %107, 1
  %114 = getelementptr inbounds double, ptr %3, i64 %113
  %115 = load double, ptr %114, align 8
  %116 = fadd double %112, %115
  %117 = fmul double %116, 3.333300e-01
  %118 = getelementptr inbounds double, ptr %5, i64 %107
  store double %117, ptr %118, align 8
  %119 = load double, ptr %108, align 8
  %120 = load double, ptr %114, align 8
  %121 = fadd double %119, %120
  %122 = add nuw nsw i64 %107, 2
  %123 = getelementptr inbounds double, ptr %3, i64 %122
  %124 = load double, ptr %123, align 8
  %125 = fadd double %121, %124
  %126 = fmul double %125, 3.333300e-01
  %127 = getelementptr inbounds double, ptr %5, i64 %113
  store double %126, ptr %127, align 8
  %128 = icmp eq i64 %122, 9999
  br i1 %128, label %.preheader, label %.preheader1

.preheader:
  %129 = phi i64 [ %137, %.preheader ], [ 1, %.preheader1 ]
  %130 = getelementptr inbounds double, ptr %5, i64 %129
  %131 = load double, ptr %130, align 8
  %132 = getelementptr inbounds double, ptr %3, i64 %129
  store double %131, ptr %132, align 8
  %133 = add nuw nsw i64 %129, 1
  %134 = getelementptr inbounds double, ptr %5, i64 %133
  %135 = load double, ptr %134, align 8
  %136 = getelementptr inbounds double, ptr %3, i64 %133
  store double %135, ptr %136, align 8
  %137 = add nuw nsw i64 %129, 2
  %138 = icmp eq i64 %137, 9999
  br i1 %138, label %139, label %.preheader

139:
  %140 = add nuw nsw i32 %8, 4
  %141 = icmp eq i32 %140, 100
  br i1 %141, label %42, label %7
}

declare ptr @polybench_alloc_data(i64, i32) local_unnamed_addr

declare i32 @init_array(...) local_unnamed_addr
