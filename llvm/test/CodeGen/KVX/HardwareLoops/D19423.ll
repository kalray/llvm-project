; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc  -disable-kvx-hwloops=false -O2 -o - %s | FileCheck %s
; RUN: clang -mllvm -disable-kvx-hwloops=false -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"


define dso_local void @no_hwloop(i32* nocapture %0, i32* nocapture readonly %1) local_unnamed_addr #0 {
; CHECK-LABEL: no_hwloop:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r2 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz.xs $r3 = $r2[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lwz.xs $r4 = $r2[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r4, $r3
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sw.xs $r2[$r0] = $r3
; CHECK-NEXT:    addd $r2 = $r2, 1
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    compd.eq $r3 = $r2, 4
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    cb.even $r3 ? .LBB0_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  br label %4

3:                                                ; preds = %4
  ret void

4:                                                ; preds = %2, %4
  %5 = phi i64 [ 0, %2 ], [ %11, %4 ]
  %6 = getelementptr inbounds i32, i32* %1, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 %5
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %7
  store i32 %10, i32* %8, align 4
  %11 = add nuw nsw i64 %5, 1
  %12 = icmp eq i64 %11, 4
  br i1 %12, label %3, label %4
}

define dso_local void @hwloop(i32* nocapture %0, i32* nocapture readonly %1) local_unnamed_addr #0 {
; CHECK-LABEL: hwloop:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r2 = 0
; CHECK-NEXT:    make $r3 = 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_0_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz.xs $r3 = $r2[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lwz.xs $r4 = $r2[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r4, $r3
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sw.xs $r2[$r0] = $r3
; CHECK-NEXT:    addd $r2 = $r2, 1
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:  .__LOOPDO_0_END_:
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  br label %4

3:                                                ; preds = %4
  ret void

4:                                                ; preds = %2, %4
  %5 = phi i64 [ 0, %2 ], [ %11, %4 ]
  %6 = getelementptr inbounds i32, i32* %1, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %0, i64 %5
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %7
  store i32 %10, i32* %8, align 4
  %11 = add nuw nsw i64 %5, 1
  %12 = icmp eq i64 %11, 5
  br i1 %12, label %3, label %4
}

attributes #0 = { nofree norecurse nounwind uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
