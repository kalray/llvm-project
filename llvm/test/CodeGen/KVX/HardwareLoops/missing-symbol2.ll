; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -disable-kvx-hwloops=false -O2 -o - %s | FileCheck %s
; RUN: clang -mllvm -disable-kvx-hwloops=false -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

@a = common global i32 0, align 4
@b = common global ptr null, align 8

define i32 @c()  {
; CHECK-LABEL: c:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = a
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %for.cond.preheader.preheader
; CHECK-NEXT:    # implicit-def: $r3
; CHECK-NEXT:    make $r1 = b
; CHECK-NEXT:    make $r2 = 4
; CHECK-NEXT:    goto .LBB0_4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_2: # %while.cond.loopexit.loopexit.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_3: # %while.cond.loopexit.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_4: # %for.cond.preheader
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB0_16 Depth 2
; CHECK-NEXT:    # Child Loop BB0_30 Depth 2
; CHECK-NEXT:    # Child Loop BB0_44 Depth 2
; CHECK-NEXT:    # Child Loop BB0_58 Depth 2
; CHECK-NEXT:    # Child Loop BB0_72 Depth 2
; CHECK-NEXT:    # Child Loop BB0_86 Depth 2
; CHECK-NEXT:    # Child Loop BB0_100 Depth 2
; CHECK-NEXT:    # Child Loop BB0_113 Depth 2
; CHECK-NEXT:    cb.wltz $r3 ? .LBB0_6
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.5: # %while.cond.loopexit
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wnez $r4 ? .LBB0_18
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_6: # %for.body.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    negw $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r4 = $r4, 7
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_14
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.7: # %for.body.prol
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.ne $r6 = $r4, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 1
; CHECK-NEXT:    cb.even $r6 ? .LBB0_14
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.8: # %for.body.prol.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 2
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_14
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.9: # %for.body.prol.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 3
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_14
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.10: # %for.body.prol.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 4
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_14
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.11: # %for.body.prol.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 5
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_14
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.12: # %for.body.prol.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.eq $r4 = $r4, 6
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    cb.odd $r4 ? .LBB0_14
; CHECK-NEXT:    addw $r5 = $r3, 6
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.13: # %for.body.prol.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r4 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r4] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .LBB0_14: # %for.body.prol.loopexit
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.gtu $r3 = $r3, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r3 ? .LBB0_17
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.15: # %for.body.preheader1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    maxw $r3 = $r5, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfw $r3 = $r5, $r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    addd $r3 = $r3, 1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_0_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_16: # %for.body
; CHECK-NEXT:    # Parent Loop BB0_4 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r5, 8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 28)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  .__LOOPDO_0_END_:
; CHECK-NEXT:  .LBB0_17: # %while.cond.loopexit.loopexit
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_18: # %for.cond.preheader.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wltz $r3 ? .LBB0_20
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.19: # %while.cond.loopexit.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wnez $r4 ? .LBB0_32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_20: # %for.body.preheader.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    negw $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r4 = $r4, 7
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_28
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.21: # %for.body.prol.110
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 1
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_28
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.22: # %for.body.prol.1.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 2
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_28
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.23: # %for.body.prol.2.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 3
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_28
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.24: # %for.body.prol.3.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 4
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_28
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.25: # %for.body.prol.4.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 5
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_28
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.26: # %for.body.prol.5.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.eq $r4 = $r4, 6
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    cb.odd $r4 ? .LBB0_28
; CHECK-NEXT:    addw $r5 = $r3, 6
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.27: # %for.body.prol.6.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r4 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r4] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .LBB0_28: # %for.body.prol.loopexit.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.gtu $r3 = $r3, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r3 ? .LBB0_31
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.29: # %for.body.1.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    maxw $r3 = $r5, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfw $r3 = $r5, $r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    addd $r3 = $r3, 1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_1_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_30: # %for.body.1
; CHECK-NEXT:    # Parent Loop BB0_4 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r5, 8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 28)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  .__LOOPDO_1_END_:
; CHECK-NEXT:  .LBB0_31: # %while.cond.loopexit.loopexit.1
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_32: # %for.cond.preheader.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wltz $r3 ? .LBB0_34
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.33: # %while.cond.loopexit.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wnez $r4 ? .LBB0_46
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_34: # %for.body.preheader.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    negw $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r4 = $r4, 7
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_42
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.35: # %for.body.prol.215
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 1
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_42
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.36: # %for.body.prol.1.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 2
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_42
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.37: # %for.body.prol.2.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 3
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_42
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.38: # %for.body.prol.3.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 4
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_42
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.39: # %for.body.prol.4.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 5
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_42
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.40: # %for.body.prol.5.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.eq $r4 = $r4, 6
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    cb.odd $r4 ? .LBB0_42
; CHECK-NEXT:    addw $r5 = $r3, 6
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.41: # %for.body.prol.6.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r4 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r4] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .LBB0_42: # %for.body.prol.loopexit.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.gtu $r3 = $r3, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r3 ? .LBB0_45
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.43: # %for.body.2.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    maxw $r3 = $r5, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfw $r3 = $r5, $r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    addd $r3 = $r3, 1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_2_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_44: # %for.body.2
; CHECK-NEXT:    # Parent Loop BB0_4 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r5, 8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 28)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  .__LOOPDO_2_END_:
; CHECK-NEXT:  .LBB0_45: # %while.cond.loopexit.loopexit.2
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_46: # %for.cond.preheader.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wltz $r3 ? .LBB0_48
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.47: # %while.cond.loopexit.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wnez $r4 ? .LBB0_60
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_48: # %for.body.preheader.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    negw $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r4 = $r4, 7
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_56
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.49: # %for.body.prol.320
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 1
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_56
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.50: # %for.body.prol.1.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 2
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_56
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.51: # %for.body.prol.2.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 3
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_56
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.52: # %for.body.prol.3.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 4
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_56
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.53: # %for.body.prol.4.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 5
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_56
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.54: # %for.body.prol.5.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.eq $r4 = $r4, 6
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    cb.odd $r4 ? .LBB0_56
; CHECK-NEXT:    addw $r5 = $r3, 6
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.55: # %for.body.prol.6.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r4 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r4] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .LBB0_56: # %for.body.prol.loopexit.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.gtu $r3 = $r3, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r3 ? .LBB0_59
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.57: # %for.body.3.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    maxw $r3 = $r5, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfw $r3 = $r5, $r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    addd $r3 = $r3, 1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_3_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_58: # %for.body.3
; CHECK-NEXT:    # Parent Loop BB0_4 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r5, 8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 28)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  .__LOOPDO_3_END_:
; CHECK-NEXT:  .LBB0_59: # %while.cond.loopexit.loopexit.3
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_60: # %for.cond.preheader.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wltz $r3 ? .LBB0_62
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.61: # %while.cond.loopexit.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wnez $r4 ? .LBB0_74
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_62: # %for.body.preheader.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    negw $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r4 = $r4, 7
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_70
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.63: # %for.body.prol.425
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 1
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_70
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.64: # %for.body.prol.1.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 2
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_70
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.65: # %for.body.prol.2.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 3
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_70
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.66: # %for.body.prol.3.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 4
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_70
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.67: # %for.body.prol.4.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 5
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_70
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.68: # %for.body.prol.5.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.eq $r4 = $r4, 6
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    cb.odd $r4 ? .LBB0_70
; CHECK-NEXT:    addw $r5 = $r3, 6
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.69: # %for.body.prol.6.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r4 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r4] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .LBB0_70: # %for.body.prol.loopexit.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.gtu $r3 = $r3, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r3 ? .LBB0_73
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.71: # %for.body.4.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    maxw $r3 = $r5, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfw $r3 = $r5, $r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    addd $r3 = $r3, 1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_4_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_72: # %for.body.4
; CHECK-NEXT:    # Parent Loop BB0_4 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r5, 8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 28)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  .__LOOPDO_4_END_:
; CHECK-NEXT:  .LBB0_73: # %while.cond.loopexit.loopexit.4
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_74: # %for.cond.preheader.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wltz $r3 ? .LBB0_76
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.75: # %while.cond.loopexit.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wnez $r4 ? .LBB0_88
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_76: # %for.body.preheader.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    negw $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r4 = $r4, 7
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_84
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.77: # %for.body.prol.530
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 1
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_84
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.78: # %for.body.prol.1.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 2
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_84
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.79: # %for.body.prol.2.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 3
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_84
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.80: # %for.body.prol.3.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 4
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_84
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.81: # %for.body.prol.4.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 5
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_84
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.82: # %for.body.prol.5.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.eq $r4 = $r4, 6
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    cb.odd $r4 ? .LBB0_84
; CHECK-NEXT:    addw $r5 = $r3, 6
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.83: # %for.body.prol.6.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r4 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r4] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .LBB0_84: # %for.body.prol.loopexit.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.gtu $r3 = $r3, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r3 ? .LBB0_87
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.85: # %for.body.5.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    maxw $r3 = $r5, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfw $r3 = $r5, $r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    addd $r3 = $r3, 1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_5_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_86: # %for.body.5
; CHECK-NEXT:    # Parent Loop BB0_4 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r5, 8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 28)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  .__LOOPDO_5_END_:
; CHECK-NEXT:  .LBB0_87: # %while.cond.loopexit.loopexit.5
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_88: # %for.cond.preheader.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wltz $r3 ? .LBB0_90
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.89: # %while.cond.loopexit.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wnez $r4 ? .LBB0_102
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_90: # %for.body.preheader.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    negw $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r4 = $r4, 7
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_98
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.91: # %for.body.prol.634
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 1
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_98
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.92: # %for.body.prol.1.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 2
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_98
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.93: # %for.body.prol.2.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 3
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_98
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.94: # %for.body.prol.3.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 4
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_98
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.95: # %for.body.prol.4.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 5
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_98
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.96: # %for.body.prol.5.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.eq $r4 = $r4, 6
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    cb.odd $r4 ? .LBB0_98
; CHECK-NEXT:    addw $r5 = $r3, 6
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.97: # %for.body.prol.6.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r4 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r4] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .LBB0_98: # %for.body.prol.loopexit.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.gtu $r3 = $r3, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r3 ? .LBB0_101
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.99: # %for.body.6.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    maxw $r3 = $r5, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfw $r3 = $r5, $r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    addd $r3 = $r3, 1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_6_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_100: # %for.body.6
; CHECK-NEXT:    # Parent Loop BB0_4 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r5, 8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 28)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  .__LOOPDO_6_END_:
; CHECK-NEXT:  .LBB0_101: # %while.cond.loopexit.loopexit.6
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    lwz $r4 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_114
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_102: # %for.cond.preheader.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    cb.wgez $r3 ? .LBB0_3
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.103: # %for.body.preheader.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    negw $r4 = $r3
; CHECK-NEXT:    copyd $r5 = $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r4 = $r4, 7
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.weqz $r4 ? .LBB0_111
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.104: # %for.body.prol.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 1
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_111
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.105: # %for.body.prol.1.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 2
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_111
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.106: # %for.body.prol.2.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 3
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_111
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.107: # %for.body.prol.3.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 4
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_111
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.108: # %for.body.prol.4.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    compw.eq $r6 = $r4, 5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    addw $r5 = $r3, 5
; CHECK-NEXT:    cb.odd $r6 ? .LBB0_111
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.109: # %for.body.prol.5.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.eq $r4 = $r4, 6
; CHECK-NEXT:    ld $r5 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r5] = $r2
; CHECK-NEXT:    cb.odd $r4 ? .LBB0_111
; CHECK-NEXT:    addw $r5 = $r3, 6
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  # %bb.110: # %for.body.prol.6.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    ld $r4 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r4] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:  .LBB0_111: # %for.body.prol.loopexit.7
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    compw.gtu $r3 = $r3, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r3 ? .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.112: # %for.body.7.preheader
; CHECK-NEXT:    # in Loop: Header=BB0_4 Depth=1
; CHECK-NEXT:    maxw $r3 = $r5, -8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfw $r3 = $r5, $r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    addw $r3 = $r3, 7
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    srld $r3 = $r3, 3
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    addd $r3 = $r3, 1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    loopdo $r3, .__LOOPDO_7_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_113: # %for.body.7
; CHECK-NEXT:    # Parent Loop BB0_4 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    addw $r5 = $r5, 8
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 11)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 15)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 16)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 19)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 20)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 23)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    ld $r3 = 0[$r1]
; CHECK-NEXT:    ;; # (end cycle 28)
; CHECK-NEXT:    sb 0[$r3] = $r2
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  .__LOOPDO_7_END_:
; CHECK-NEXT:    goto .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_114: # %while.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, ptr @a, align 4
  %tobool5 = icmp eq i32 %0, 0
  br i1 %tobool5, label %while.end, label %for.cond.preheader

while.cond.loopexit.loopexit:
  %inc.lcssa = phi i32 [ %inc.lcssa.unr, %for.body.prol.loopexit ], [ %inc.7, %for.body ]
  %.pre = load i32, ptr @a, align 4
  br label %while.cond.loopexit

while.cond.loopexit:
  %1 = phi i32 [ %2, %for.cond.preheader ], [ %.pre, %while.cond.loopexit.loopexit ]
  %d.1.lcssa = phi i32 [ %d.06, %for.cond.preheader ], [ %inc.lcssa, %while.cond.loopexit.loopexit ]
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %while.end, label %for.cond.preheader.1

for.cond.preheader:
  %2 = phi i32 [ %145, %while.cond.loopexit.7 ], [ %0, %entry ]
  %d.06 = phi i32 [ %d.1.lcssa.7, %while.cond.loopexit.7 ], [ undef, %entry ]
  %cmp3 = icmp slt i32 %d.06, 0
  br i1 %cmp3, label %for.body.preheader, label %while.cond.loopexit

for.body.preheader:
  %3 = sub i32 0, %d.06
  %xtraiter = and i32 %3, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body.prol.loopexit, label %for.body.prol

for.body.prol:
  %4 = load ptr, ptr @b, align 8
  store i8 4, ptr %4, align 1
  %inc.prol = add nsw i32 %d.06, 1
  %prol.iter.cmp = icmp eq i32 %xtraiter, 1
  br i1 %prol.iter.cmp, label %for.body.prol.loopexit, label %for.body.prol.1

for.body.prol.loopexit:
  %d.14.unr = phi i32 [ %d.06, %for.body.preheader ], [ %inc.prol, %for.body.prol ], [ %inc.prol.1, %for.body.prol.1 ], [ %inc.prol.2, %for.body.prol.2 ], [ %inc.prol.3, %for.body.prol.3 ], [ %inc.prol.4, %for.body.prol.4 ], [ %inc.prol.5, %for.body.prol.5 ], [ %inc.prol.6, %for.body.prol.6 ]
  %inc.lcssa.unr = phi i32 [ undef, %for.body.preheader ], [ %inc.prol, %for.body.prol ], [ %inc.prol.1, %for.body.prol.1 ], [ %inc.prol.2, %for.body.prol.2 ], [ %inc.prol.3, %for.body.prol.3 ], [ %inc.prol.4, %for.body.prol.4 ], [ %inc.prol.5, %for.body.prol.5 ], [ %inc.prol.6, %for.body.prol.6 ]
  %5 = icmp ugt i32 %d.06, -8
  br i1 %5, label %while.cond.loopexit.loopexit, label %for.body

for.body:
  %d.14 = phi i32 [ %inc.7, %for.body ], [ %d.14.unr, %for.body.prol.loopexit ]
  %6 = load ptr, ptr @b, align 8
  store i8 4, ptr %6, align 1
  %7 = load ptr, ptr @b, align 8
  store i8 4, ptr %7, align 1
  %8 = load ptr, ptr @b, align 8
  store i8 4, ptr %8, align 1
  %9 = load ptr, ptr @b, align 8
  store i8 4, ptr %9, align 1
  %10 = load ptr, ptr @b, align 8
  store i8 4, ptr %10, align 1
  %11 = load ptr, ptr @b, align 8
  store i8 4, ptr %11, align 1
  %12 = load ptr, ptr @b, align 8
  store i8 4, ptr %12, align 1
  %13 = load ptr, ptr @b, align 8
  store i8 4, ptr %13, align 1
  %inc.7 = add nsw i32 %d.14, 8
  %cmp.7 = icmp slt i32 %d.14, -8
  br i1 %cmp.7, label %for.body, label %while.cond.loopexit.loopexit

while.end:
  ret i32 undef

for.body.prol.1:
  %14 = load ptr, ptr @b, align 8
  store i8 4, ptr %14, align 1
  %inc.prol.1 = add nsw i32 %d.06, 2
  %prol.iter.cmp.1 = icmp eq i32 %xtraiter, 2
  br i1 %prol.iter.cmp.1, label %for.body.prol.loopexit, label %for.body.prol.2

for.body.prol.2:
  %15 = load ptr, ptr @b, align 8
  store i8 4, ptr %15, align 1
  %inc.prol.2 = add nsw i32 %d.06, 3
  %prol.iter.cmp.2 = icmp eq i32 %xtraiter, 3
  br i1 %prol.iter.cmp.2, label %for.body.prol.loopexit, label %for.body.prol.3

for.body.prol.3:
  %16 = load ptr, ptr @b, align 8
  store i8 4, ptr %16, align 1
  %inc.prol.3 = add nsw i32 %d.06, 4
  %prol.iter.cmp.3 = icmp eq i32 %xtraiter, 4
  br i1 %prol.iter.cmp.3, label %for.body.prol.loopexit, label %for.body.prol.4

for.body.prol.4:
  %17 = load ptr, ptr @b, align 8
  store i8 4, ptr %17, align 1
  %inc.prol.4 = add nsw i32 %d.06, 5
  %prol.iter.cmp.4 = icmp eq i32 %xtraiter, 5
  br i1 %prol.iter.cmp.4, label %for.body.prol.loopexit, label %for.body.prol.5

for.body.prol.5:
  %18 = load ptr, ptr @b, align 8
  store i8 4, ptr %18, align 1
  %inc.prol.5 = add nsw i32 %d.06, 6
  %prol.iter.cmp.5 = icmp eq i32 %xtraiter, 6
  br i1 %prol.iter.cmp.5, label %for.body.prol.loopexit, label %for.body.prol.6

for.body.prol.6:
  %19 = load ptr, ptr @b, align 8
  store i8 4, ptr %19, align 1
  %inc.prol.6 = add nsw i32 %d.06, 7
  br label %for.body.prol.loopexit

for.cond.preheader.1:
  %cmp3.1 = icmp slt i32 %d.1.lcssa, 0
  br i1 %cmp3.1, label %for.body.preheader.1, label %while.cond.loopexit.1

for.body.preheader.1:
  %20 = sub i32 0, %d.1.lcssa
  %xtraiter.1 = and i32 %20, 7
  %lcmp.mod.1 = icmp eq i32 %xtraiter.1, 0
  br i1 %lcmp.mod.1, label %for.body.prol.loopexit.1, label %for.body.prol.110

for.body.prol.110:
  %21 = load ptr, ptr @b, align 8
  store i8 4, ptr %21, align 1
  %inc.prol.17 = add nsw i32 %d.1.lcssa, 1
  %prol.iter.cmp.19 = icmp eq i32 %xtraiter.1, 1
  br i1 %prol.iter.cmp.19, label %for.body.prol.loopexit.1, label %for.body.prol.1.1

for.body.prol.1.1:
  %22 = load ptr, ptr @b, align 8
  store i8 4, ptr %22, align 1
  %inc.prol.1.1 = add nsw i32 %d.1.lcssa, 2
  %prol.iter.cmp.1.1 = icmp eq i32 %xtraiter.1, 2
  br i1 %prol.iter.cmp.1.1, label %for.body.prol.loopexit.1, label %for.body.prol.2.1

for.body.prol.2.1:
  %23 = load ptr, ptr @b, align 8
  store i8 4, ptr %23, align 1
  %inc.prol.2.1 = add nsw i32 %d.1.lcssa, 3
  %prol.iter.cmp.2.1 = icmp eq i32 %xtraiter.1, 3
  br i1 %prol.iter.cmp.2.1, label %for.body.prol.loopexit.1, label %for.body.prol.3.1

for.body.prol.3.1:
  %24 = load ptr, ptr @b, align 8
  store i8 4, ptr %24, align 1
  %inc.prol.3.1 = add nsw i32 %d.1.lcssa, 4
  %prol.iter.cmp.3.1 = icmp eq i32 %xtraiter.1, 4
  br i1 %prol.iter.cmp.3.1, label %for.body.prol.loopexit.1, label %for.body.prol.4.1

for.body.prol.4.1:
  %25 = load ptr, ptr @b, align 8
  store i8 4, ptr %25, align 1
  %inc.prol.4.1 = add nsw i32 %d.1.lcssa, 5
  %prol.iter.cmp.4.1 = icmp eq i32 %xtraiter.1, 5
  br i1 %prol.iter.cmp.4.1, label %for.body.prol.loopexit.1, label %for.body.prol.5.1

for.body.prol.5.1:
  %26 = load ptr, ptr @b, align 8
  store i8 4, ptr %26, align 1
  %inc.prol.5.1 = add nsw i32 %d.1.lcssa, 6
  %prol.iter.cmp.5.1 = icmp eq i32 %xtraiter.1, 6
  br i1 %prol.iter.cmp.5.1, label %for.body.prol.loopexit.1, label %for.body.prol.6.1

for.body.prol.6.1:
  %27 = load ptr, ptr @b, align 8
  store i8 4, ptr %27, align 1
  %inc.prol.6.1 = add nsw i32 %d.1.lcssa, 7
  br label %for.body.prol.loopexit.1

for.body.prol.loopexit.1:
  %d.14.unr.1 = phi i32 [ %d.1.lcssa, %for.body.preheader.1 ], [ %inc.prol.17, %for.body.prol.110 ], [ %inc.prol.1.1, %for.body.prol.1.1 ], [ %inc.prol.2.1, %for.body.prol.2.1 ], [ %inc.prol.3.1, %for.body.prol.3.1 ], [ %inc.prol.4.1, %for.body.prol.4.1 ], [ %inc.prol.5.1, %for.body.prol.5.1 ], [ %inc.prol.6.1, %for.body.prol.6.1 ]
  %inc.lcssa.unr.1 = phi i32 [ undef, %for.body.preheader.1 ], [ %inc.prol.17, %for.body.prol.110 ], [ %inc.prol.1.1, %for.body.prol.1.1 ], [ %inc.prol.2.1, %for.body.prol.2.1 ], [ %inc.prol.3.1, %for.body.prol.3.1 ], [ %inc.prol.4.1, %for.body.prol.4.1 ], [ %inc.prol.5.1, %for.body.prol.5.1 ], [ %inc.prol.6.1, %for.body.prol.6.1 ]
  %28 = icmp ugt i32 %d.1.lcssa, -8
  br i1 %28, label %while.cond.loopexit.loopexit.1, label %for.body.1

for.body.1:
  %d.14.1 = phi i32 [ %inc.7.1, %for.body.1 ], [ %d.14.unr.1, %for.body.prol.loopexit.1 ]
  %29 = load ptr, ptr @b, align 8
  store i8 4, ptr %29, align 1
  %30 = load ptr, ptr @b, align 8
  store i8 4, ptr %30, align 1
  %31 = load ptr, ptr @b, align 8
  store i8 4, ptr %31, align 1
  %32 = load ptr, ptr @b, align 8
  store i8 4, ptr %32, align 1
  %33 = load ptr, ptr @b, align 8
  store i8 4, ptr %33, align 1
  %34 = load ptr, ptr @b, align 8
  store i8 4, ptr %34, align 1
  %35 = load ptr, ptr @b, align 8
  store i8 4, ptr %35, align 1
  %36 = load ptr, ptr @b, align 8
  store i8 4, ptr %36, align 1
  %inc.7.1 = add nsw i32 %d.14.1, 8
  %cmp.7.1 = icmp slt i32 %d.14.1, -8
  br i1 %cmp.7.1, label %for.body.1, label %while.cond.loopexit.loopexit.1

while.cond.loopexit.loopexit.1:
  %inc.lcssa.1 = phi i32 [ %inc.lcssa.unr.1, %for.body.prol.loopexit.1 ], [ %inc.7.1, %for.body.1 ]
  %.pre.1 = load i32, ptr @a, align 4
  br label %while.cond.loopexit.1

while.cond.loopexit.1:
  %37 = phi i32 [ %1, %for.cond.preheader.1 ], [ %.pre.1, %while.cond.loopexit.loopexit.1 ]
  %d.1.lcssa.1 = phi i32 [ %d.1.lcssa, %for.cond.preheader.1 ], [ %inc.lcssa.1, %while.cond.loopexit.loopexit.1 ]
  %tobool.1 = icmp eq i32 %37, 0
  br i1 %tobool.1, label %while.end, label %for.cond.preheader.2

for.cond.preheader.2:
  %cmp3.2 = icmp slt i32 %d.1.lcssa.1, 0
  br i1 %cmp3.2, label %for.body.preheader.2, label %while.cond.loopexit.2

for.body.preheader.2:
  %38 = sub i32 0, %d.1.lcssa.1
  %xtraiter.2 = and i32 %38, 7
  %lcmp.mod.2 = icmp eq i32 %xtraiter.2, 0
  br i1 %lcmp.mod.2, label %for.body.prol.loopexit.2, label %for.body.prol.215

for.body.prol.215:
  %39 = load ptr, ptr @b, align 8
  store i8 4, ptr %39, align 1
  %inc.prol.212 = add nsw i32 %d.1.lcssa.1, 1
  %prol.iter.cmp.214 = icmp eq i32 %xtraiter.2, 1
  br i1 %prol.iter.cmp.214, label %for.body.prol.loopexit.2, label %for.body.prol.1.2

for.body.prol.1.2:
  %40 = load ptr, ptr @b, align 8
  store i8 4, ptr %40, align 1
  %inc.prol.1.2 = add nsw i32 %d.1.lcssa.1, 2
  %prol.iter.cmp.1.2 = icmp eq i32 %xtraiter.2, 2
  br i1 %prol.iter.cmp.1.2, label %for.body.prol.loopexit.2, label %for.body.prol.2.2

for.body.prol.2.2:
  %41 = load ptr, ptr @b, align 8
  store i8 4, ptr %41, align 1
  %inc.prol.2.2 = add nsw i32 %d.1.lcssa.1, 3
  %prol.iter.cmp.2.2 = icmp eq i32 %xtraiter.2, 3
  br i1 %prol.iter.cmp.2.2, label %for.body.prol.loopexit.2, label %for.body.prol.3.2

for.body.prol.3.2:
  %42 = load ptr, ptr @b, align 8
  store i8 4, ptr %42, align 1
  %inc.prol.3.2 = add nsw i32 %d.1.lcssa.1, 4
  %prol.iter.cmp.3.2 = icmp eq i32 %xtraiter.2, 4
  br i1 %prol.iter.cmp.3.2, label %for.body.prol.loopexit.2, label %for.body.prol.4.2

for.body.prol.4.2:
  %43 = load ptr, ptr @b, align 8
  store i8 4, ptr %43, align 1
  %inc.prol.4.2 = add nsw i32 %d.1.lcssa.1, 5
  %prol.iter.cmp.4.2 = icmp eq i32 %xtraiter.2, 5
  br i1 %prol.iter.cmp.4.2, label %for.body.prol.loopexit.2, label %for.body.prol.5.2

for.body.prol.5.2:
  %44 = load ptr, ptr @b, align 8
  store i8 4, ptr %44, align 1
  %inc.prol.5.2 = add nsw i32 %d.1.lcssa.1, 6
  %prol.iter.cmp.5.2 = icmp eq i32 %xtraiter.2, 6
  br i1 %prol.iter.cmp.5.2, label %for.body.prol.loopexit.2, label %for.body.prol.6.2

for.body.prol.6.2:
  %45 = load ptr, ptr @b, align 8
  store i8 4, ptr %45, align 1
  %inc.prol.6.2 = add nsw i32 %d.1.lcssa.1, 7
  br label %for.body.prol.loopexit.2

for.body.prol.loopexit.2:
  %d.14.unr.2 = phi i32 [ %d.1.lcssa.1, %for.body.preheader.2 ], [ %inc.prol.212, %for.body.prol.215 ], [ %inc.prol.1.2, %for.body.prol.1.2 ], [ %inc.prol.2.2, %for.body.prol.2.2 ], [ %inc.prol.3.2, %for.body.prol.3.2 ], [ %inc.prol.4.2, %for.body.prol.4.2 ], [ %inc.prol.5.2, %for.body.prol.5.2 ], [ %inc.prol.6.2, %for.body.prol.6.2 ]
  %inc.lcssa.unr.2 = phi i32 [ undef, %for.body.preheader.2 ], [ %inc.prol.212, %for.body.prol.215 ], [ %inc.prol.1.2, %for.body.prol.1.2 ], [ %inc.prol.2.2, %for.body.prol.2.2 ], [ %inc.prol.3.2, %for.body.prol.3.2 ], [ %inc.prol.4.2, %for.body.prol.4.2 ], [ %inc.prol.5.2, %for.body.prol.5.2 ], [ %inc.prol.6.2, %for.body.prol.6.2 ]
  %46 = icmp ugt i32 %d.1.lcssa.1, -8
  br i1 %46, label %while.cond.loopexit.loopexit.2, label %for.body.2

for.body.2:
  %d.14.2 = phi i32 [ %inc.7.2, %for.body.2 ], [ %d.14.unr.2, %for.body.prol.loopexit.2 ]
  %47 = load ptr, ptr @b, align 8
  store i8 4, ptr %47, align 1
  %48 = load ptr, ptr @b, align 8
  store i8 4, ptr %48, align 1
  %49 = load ptr, ptr @b, align 8
  store i8 4, ptr %49, align 1
  %50 = load ptr, ptr @b, align 8
  store i8 4, ptr %50, align 1
  %51 = load ptr, ptr @b, align 8
  store i8 4, ptr %51, align 1
  %52 = load ptr, ptr @b, align 8
  store i8 4, ptr %52, align 1
  %53 = load ptr, ptr @b, align 8
  store i8 4, ptr %53, align 1
  %54 = load ptr, ptr @b, align 8
  store i8 4, ptr %54, align 1
  %inc.7.2 = add nsw i32 %d.14.2, 8
  %cmp.7.2 = icmp slt i32 %d.14.2, -8
  br i1 %cmp.7.2, label %for.body.2, label %while.cond.loopexit.loopexit.2

while.cond.loopexit.loopexit.2:
  %inc.lcssa.2 = phi i32 [ %inc.lcssa.unr.2, %for.body.prol.loopexit.2 ], [ %inc.7.2, %for.body.2 ]
  %.pre.2 = load i32, ptr @a, align 4
  br label %while.cond.loopexit.2

while.cond.loopexit.2:
  %55 = phi i32 [ %37, %for.cond.preheader.2 ], [ %.pre.2, %while.cond.loopexit.loopexit.2 ]
  %d.1.lcssa.2 = phi i32 [ %d.1.lcssa.1, %for.cond.preheader.2 ], [ %inc.lcssa.2, %while.cond.loopexit.loopexit.2 ]
  %tobool.2 = icmp eq i32 %55, 0
  br i1 %tobool.2, label %while.end, label %for.cond.preheader.3

for.cond.preheader.3:
  %cmp3.3 = icmp slt i32 %d.1.lcssa.2, 0
  br i1 %cmp3.3, label %for.body.preheader.3, label %while.cond.loopexit.3

for.body.preheader.3:
  %56 = sub i32 0, %d.1.lcssa.2
  %xtraiter.3 = and i32 %56, 7
  %lcmp.mod.3 = icmp eq i32 %xtraiter.3, 0
  br i1 %lcmp.mod.3, label %for.body.prol.loopexit.3, label %for.body.prol.320

for.body.prol.320:
  %57 = load ptr, ptr @b, align 8
  store i8 4, ptr %57, align 1
  %inc.prol.317 = add nsw i32 %d.1.lcssa.2, 1
  %prol.iter.cmp.319 = icmp eq i32 %xtraiter.3, 1
  br i1 %prol.iter.cmp.319, label %for.body.prol.loopexit.3, label %for.body.prol.1.3

for.body.prol.1.3:
  %58 = load ptr, ptr @b, align 8
  store i8 4, ptr %58, align 1
  %inc.prol.1.3 = add nsw i32 %d.1.lcssa.2, 2
  %prol.iter.cmp.1.3 = icmp eq i32 %xtraiter.3, 2
  br i1 %prol.iter.cmp.1.3, label %for.body.prol.loopexit.3, label %for.body.prol.2.3

for.body.prol.2.3:
  %59 = load ptr, ptr @b, align 8
  store i8 4, ptr %59, align 1
  %inc.prol.2.3 = add nsw i32 %d.1.lcssa.2, 3
  %prol.iter.cmp.2.3 = icmp eq i32 %xtraiter.3, 3
  br i1 %prol.iter.cmp.2.3, label %for.body.prol.loopexit.3, label %for.body.prol.3.3

for.body.prol.3.3:
  %60 = load ptr, ptr @b, align 8
  store i8 4, ptr %60, align 1
  %inc.prol.3.3 = add nsw i32 %d.1.lcssa.2, 4
  %prol.iter.cmp.3.3 = icmp eq i32 %xtraiter.3, 4
  br i1 %prol.iter.cmp.3.3, label %for.body.prol.loopexit.3, label %for.body.prol.4.3

for.body.prol.4.3:
  %61 = load ptr, ptr @b, align 8
  store i8 4, ptr %61, align 1
  %inc.prol.4.3 = add nsw i32 %d.1.lcssa.2, 5
  %prol.iter.cmp.4.3 = icmp eq i32 %xtraiter.3, 5
  br i1 %prol.iter.cmp.4.3, label %for.body.prol.loopexit.3, label %for.body.prol.5.3

for.body.prol.5.3:
  %62 = load ptr, ptr @b, align 8
  store i8 4, ptr %62, align 1
  %inc.prol.5.3 = add nsw i32 %d.1.lcssa.2, 6
  %prol.iter.cmp.5.3 = icmp eq i32 %xtraiter.3, 6
  br i1 %prol.iter.cmp.5.3, label %for.body.prol.loopexit.3, label %for.body.prol.6.3

for.body.prol.6.3:
  %63 = load ptr, ptr @b, align 8
  store i8 4, ptr %63, align 1
  %inc.prol.6.3 = add nsw i32 %d.1.lcssa.2, 7
  br label %for.body.prol.loopexit.3

for.body.prol.loopexit.3:
  %d.14.unr.3 = phi i32 [ %d.1.lcssa.2, %for.body.preheader.3 ], [ %inc.prol.317, %for.body.prol.320 ], [ %inc.prol.1.3, %for.body.prol.1.3 ], [ %inc.prol.2.3, %for.body.prol.2.3 ], [ %inc.prol.3.3, %for.body.prol.3.3 ], [ %inc.prol.4.3, %for.body.prol.4.3 ], [ %inc.prol.5.3, %for.body.prol.5.3 ], [ %inc.prol.6.3, %for.body.prol.6.3 ]
  %inc.lcssa.unr.3 = phi i32 [ undef, %for.body.preheader.3 ], [ %inc.prol.317, %for.body.prol.320 ], [ %inc.prol.1.3, %for.body.prol.1.3 ], [ %inc.prol.2.3, %for.body.prol.2.3 ], [ %inc.prol.3.3, %for.body.prol.3.3 ], [ %inc.prol.4.3, %for.body.prol.4.3 ], [ %inc.prol.5.3, %for.body.prol.5.3 ], [ %inc.prol.6.3, %for.body.prol.6.3 ]
  %64 = icmp ugt i32 %d.1.lcssa.2, -8
  br i1 %64, label %while.cond.loopexit.loopexit.3, label %for.body.3

for.body.3:
  %d.14.3 = phi i32 [ %inc.7.3, %for.body.3 ], [ %d.14.unr.3, %for.body.prol.loopexit.3 ]
  %65 = load ptr, ptr @b, align 8
  store i8 4, ptr %65, align 1
  %66 = load ptr, ptr @b, align 8
  store i8 4, ptr %66, align 1
  %67 = load ptr, ptr @b, align 8
  store i8 4, ptr %67, align 1
  %68 = load ptr, ptr @b, align 8
  store i8 4, ptr %68, align 1
  %69 = load ptr, ptr @b, align 8
  store i8 4, ptr %69, align 1
  %70 = load ptr, ptr @b, align 8
  store i8 4, ptr %70, align 1
  %71 = load ptr, ptr @b, align 8
  store i8 4, ptr %71, align 1
  %72 = load ptr, ptr @b, align 8
  store i8 4, ptr %72, align 1
  %inc.7.3 = add nsw i32 %d.14.3, 8
  %cmp.7.3 = icmp slt i32 %d.14.3, -8
  br i1 %cmp.7.3, label %for.body.3, label %while.cond.loopexit.loopexit.3

while.cond.loopexit.loopexit.3:
  %inc.lcssa.3 = phi i32 [ %inc.lcssa.unr.3, %for.body.prol.loopexit.3 ], [ %inc.7.3, %for.body.3 ]
  %.pre.3 = load i32, ptr @a, align 4
  br label %while.cond.loopexit.3

while.cond.loopexit.3:
  %73 = phi i32 [ %55, %for.cond.preheader.3 ], [ %.pre.3, %while.cond.loopexit.loopexit.3 ]
  %d.1.lcssa.3 = phi i32 [ %d.1.lcssa.2, %for.cond.preheader.3 ], [ %inc.lcssa.3, %while.cond.loopexit.loopexit.3 ]
  %tobool.3 = icmp eq i32 %73, 0
  br i1 %tobool.3, label %while.end, label %for.cond.preheader.4

for.cond.preheader.4:
  %cmp3.4 = icmp slt i32 %d.1.lcssa.3, 0
  br i1 %cmp3.4, label %for.body.preheader.4, label %while.cond.loopexit.4

for.body.preheader.4:
  %74 = sub i32 0, %d.1.lcssa.3
  %xtraiter.4 = and i32 %74, 7
  %lcmp.mod.4 = icmp eq i32 %xtraiter.4, 0
  br i1 %lcmp.mod.4, label %for.body.prol.loopexit.4, label %for.body.prol.425

for.body.prol.425:
  %75 = load ptr, ptr @b, align 8
  store i8 4, ptr %75, align 1
  %inc.prol.422 = add nsw i32 %d.1.lcssa.3, 1
  %prol.iter.cmp.424 = icmp eq i32 %xtraiter.4, 1
  br i1 %prol.iter.cmp.424, label %for.body.prol.loopexit.4, label %for.body.prol.1.4

for.body.prol.1.4:
  %76 = load ptr, ptr @b, align 8
  store i8 4, ptr %76, align 1
  %inc.prol.1.4 = add nsw i32 %d.1.lcssa.3, 2
  %prol.iter.cmp.1.4 = icmp eq i32 %xtraiter.4, 2
  br i1 %prol.iter.cmp.1.4, label %for.body.prol.loopexit.4, label %for.body.prol.2.4

for.body.prol.2.4:
  %77 = load ptr, ptr @b, align 8
  store i8 4, ptr %77, align 1
  %inc.prol.2.4 = add nsw i32 %d.1.lcssa.3, 3
  %prol.iter.cmp.2.4 = icmp eq i32 %xtraiter.4, 3
  br i1 %prol.iter.cmp.2.4, label %for.body.prol.loopexit.4, label %for.body.prol.3.4

for.body.prol.3.4:
  %78 = load ptr, ptr @b, align 8
  store i8 4, ptr %78, align 1
  %inc.prol.3.4 = add nsw i32 %d.1.lcssa.3, 4
  %prol.iter.cmp.3.4 = icmp eq i32 %xtraiter.4, 4
  br i1 %prol.iter.cmp.3.4, label %for.body.prol.loopexit.4, label %for.body.prol.4.4

for.body.prol.4.4:
  %79 = load ptr, ptr @b, align 8
  store i8 4, ptr %79, align 1
  %inc.prol.4.4 = add nsw i32 %d.1.lcssa.3, 5
  %prol.iter.cmp.4.4 = icmp eq i32 %xtraiter.4, 5
  br i1 %prol.iter.cmp.4.4, label %for.body.prol.loopexit.4, label %for.body.prol.5.4

for.body.prol.5.4:
  %80 = load ptr, ptr @b, align 8
  store i8 4, ptr %80, align 1
  %inc.prol.5.4 = add nsw i32 %d.1.lcssa.3, 6
  %prol.iter.cmp.5.4 = icmp eq i32 %xtraiter.4, 6
  br i1 %prol.iter.cmp.5.4, label %for.body.prol.loopexit.4, label %for.body.prol.6.4

for.body.prol.6.4:
  %81 = load ptr, ptr @b, align 8
  store i8 4, ptr %81, align 1
  %inc.prol.6.4 = add nsw i32 %d.1.lcssa.3, 7
  br label %for.body.prol.loopexit.4

for.body.prol.loopexit.4:
  %d.14.unr.4 = phi i32 [ %d.1.lcssa.3, %for.body.preheader.4 ], [ %inc.prol.422, %for.body.prol.425 ], [ %inc.prol.1.4, %for.body.prol.1.4 ], [ %inc.prol.2.4, %for.body.prol.2.4 ], [ %inc.prol.3.4, %for.body.prol.3.4 ], [ %inc.prol.4.4, %for.body.prol.4.4 ], [ %inc.prol.5.4, %for.body.prol.5.4 ], [ %inc.prol.6.4, %for.body.prol.6.4 ]
  %inc.lcssa.unr.4 = phi i32 [ undef, %for.body.preheader.4 ], [ %inc.prol.422, %for.body.prol.425 ], [ %inc.prol.1.4, %for.body.prol.1.4 ], [ %inc.prol.2.4, %for.body.prol.2.4 ], [ %inc.prol.3.4, %for.body.prol.3.4 ], [ %inc.prol.4.4, %for.body.prol.4.4 ], [ %inc.prol.5.4, %for.body.prol.5.4 ], [ %inc.prol.6.4, %for.body.prol.6.4 ]
  %82 = icmp ugt i32 %d.1.lcssa.3, -8
  br i1 %82, label %while.cond.loopexit.loopexit.4, label %for.body.4

for.body.4:
  %d.14.4 = phi i32 [ %inc.7.4, %for.body.4 ], [ %d.14.unr.4, %for.body.prol.loopexit.4 ]
  %83 = load ptr, ptr @b, align 8
  store i8 4, ptr %83, align 1
  %84 = load ptr, ptr @b, align 8
  store i8 4, ptr %84, align 1
  %85 = load ptr, ptr @b, align 8
  store i8 4, ptr %85, align 1
  %86 = load ptr, ptr @b, align 8
  store i8 4, ptr %86, align 1
  %87 = load ptr, ptr @b, align 8
  store i8 4, ptr %87, align 1
  %88 = load ptr, ptr @b, align 8
  store i8 4, ptr %88, align 1
  %89 = load ptr, ptr @b, align 8
  store i8 4, ptr %89, align 1
  %90 = load ptr, ptr @b, align 8
  store i8 4, ptr %90, align 1
  %inc.7.4 = add nsw i32 %d.14.4, 8
  %cmp.7.4 = icmp slt i32 %d.14.4, -8
  br i1 %cmp.7.4, label %for.body.4, label %while.cond.loopexit.loopexit.4

while.cond.loopexit.loopexit.4:
  %inc.lcssa.4 = phi i32 [ %inc.lcssa.unr.4, %for.body.prol.loopexit.4 ], [ %inc.7.4, %for.body.4 ]
  %.pre.4 = load i32, ptr @a, align 4
  br label %while.cond.loopexit.4

while.cond.loopexit.4:
  %91 = phi i32 [ %73, %for.cond.preheader.4 ], [ %.pre.4, %while.cond.loopexit.loopexit.4 ]
  %d.1.lcssa.4 = phi i32 [ %d.1.lcssa.3, %for.cond.preheader.4 ], [ %inc.lcssa.4, %while.cond.loopexit.loopexit.4 ]
  %tobool.4 = icmp eq i32 %91, 0
  br i1 %tobool.4, label %while.end, label %for.cond.preheader.5

for.cond.preheader.5:
  %cmp3.5 = icmp slt i32 %d.1.lcssa.4, 0
  br i1 %cmp3.5, label %for.body.preheader.5, label %while.cond.loopexit.5

for.body.preheader.5:
  %92 = sub i32 0, %d.1.lcssa.4
  %xtraiter.5 = and i32 %92, 7
  %lcmp.mod.5 = icmp eq i32 %xtraiter.5, 0
  br i1 %lcmp.mod.5, label %for.body.prol.loopexit.5, label %for.body.prol.530

for.body.prol.530:
  %93 = load ptr, ptr @b, align 8
  store i8 4, ptr %93, align 1
  %inc.prol.527 = add nsw i32 %d.1.lcssa.4, 1
  %prol.iter.cmp.529 = icmp eq i32 %xtraiter.5, 1
  br i1 %prol.iter.cmp.529, label %for.body.prol.loopexit.5, label %for.body.prol.1.5

for.body.prol.1.5:
  %94 = load ptr, ptr @b, align 8
  store i8 4, ptr %94, align 1
  %inc.prol.1.5 = add nsw i32 %d.1.lcssa.4, 2
  %prol.iter.cmp.1.5 = icmp eq i32 %xtraiter.5, 2
  br i1 %prol.iter.cmp.1.5, label %for.body.prol.loopexit.5, label %for.body.prol.2.5

for.body.prol.2.5:
  %95 = load ptr, ptr @b, align 8
  store i8 4, ptr %95, align 1
  %inc.prol.2.5 = add nsw i32 %d.1.lcssa.4, 3
  %prol.iter.cmp.2.5 = icmp eq i32 %xtraiter.5, 3
  br i1 %prol.iter.cmp.2.5, label %for.body.prol.loopexit.5, label %for.body.prol.3.5

for.body.prol.3.5:
  %96 = load ptr, ptr @b, align 8
  store i8 4, ptr %96, align 1
  %inc.prol.3.5 = add nsw i32 %d.1.lcssa.4, 4
  %prol.iter.cmp.3.5 = icmp eq i32 %xtraiter.5, 4
  br i1 %prol.iter.cmp.3.5, label %for.body.prol.loopexit.5, label %for.body.prol.4.5

for.body.prol.4.5:
  %97 = load ptr, ptr @b, align 8
  store i8 4, ptr %97, align 1
  %inc.prol.4.5 = add nsw i32 %d.1.lcssa.4, 5
  %prol.iter.cmp.4.5 = icmp eq i32 %xtraiter.5, 5
  br i1 %prol.iter.cmp.4.5, label %for.body.prol.loopexit.5, label %for.body.prol.5.5

for.body.prol.5.5:
  %98 = load ptr, ptr @b, align 8
  store i8 4, ptr %98, align 1
  %inc.prol.5.5 = add nsw i32 %d.1.lcssa.4, 6
  %prol.iter.cmp.5.5 = icmp eq i32 %xtraiter.5, 6
  br i1 %prol.iter.cmp.5.5, label %for.body.prol.loopexit.5, label %for.body.prol.6.5

for.body.prol.6.5:
  %99 = load ptr, ptr @b, align 8
  store i8 4, ptr %99, align 1
  %inc.prol.6.5 = add nsw i32 %d.1.lcssa.4, 7
  br label %for.body.prol.loopexit.5

for.body.prol.loopexit.5:
  %d.14.unr.5 = phi i32 [ %d.1.lcssa.4, %for.body.preheader.5 ], [ %inc.prol.527, %for.body.prol.530 ], [ %inc.prol.1.5, %for.body.prol.1.5 ], [ %inc.prol.2.5, %for.body.prol.2.5 ], [ %inc.prol.3.5, %for.body.prol.3.5 ], [ %inc.prol.4.5, %for.body.prol.4.5 ], [ %inc.prol.5.5, %for.body.prol.5.5 ], [ %inc.prol.6.5, %for.body.prol.6.5 ]
  %inc.lcssa.unr.5 = phi i32 [ undef, %for.body.preheader.5 ], [ %inc.prol.527, %for.body.prol.530 ], [ %inc.prol.1.5, %for.body.prol.1.5 ], [ %inc.prol.2.5, %for.body.prol.2.5 ], [ %inc.prol.3.5, %for.body.prol.3.5 ], [ %inc.prol.4.5, %for.body.prol.4.5 ], [ %inc.prol.5.5, %for.body.prol.5.5 ], [ %inc.prol.6.5, %for.body.prol.6.5 ]
  %100 = icmp ugt i32 %d.1.lcssa.4, -8
  br i1 %100, label %while.cond.loopexit.loopexit.5, label %for.body.5

for.body.5:
  %d.14.5 = phi i32 [ %inc.7.5, %for.body.5 ], [ %d.14.unr.5, %for.body.prol.loopexit.5 ]
  %101 = load ptr, ptr @b, align 8
  store i8 4, ptr %101, align 1
  %102 = load ptr, ptr @b, align 8
  store i8 4, ptr %102, align 1
  %103 = load ptr, ptr @b, align 8
  store i8 4, ptr %103, align 1
  %104 = load ptr, ptr @b, align 8
  store i8 4, ptr %104, align 1
  %105 = load ptr, ptr @b, align 8
  store i8 4, ptr %105, align 1
  %106 = load ptr, ptr @b, align 8
  store i8 4, ptr %106, align 1
  %107 = load ptr, ptr @b, align 8
  store i8 4, ptr %107, align 1
  %108 = load ptr, ptr @b, align 8
  store i8 4, ptr %108, align 1
  %inc.7.5 = add nsw i32 %d.14.5, 8
  %cmp.7.5 = icmp slt i32 %d.14.5, -8
  br i1 %cmp.7.5, label %for.body.5, label %while.cond.loopexit.loopexit.5

while.cond.loopexit.loopexit.5:
  %inc.lcssa.5 = phi i32 [ %inc.lcssa.unr.5, %for.body.prol.loopexit.5 ], [ %inc.7.5, %for.body.5 ]
  %.pre.5 = load i32, ptr @a, align 4
  br label %while.cond.loopexit.5

while.cond.loopexit.5:
  %109 = phi i32 [ %91, %for.cond.preheader.5 ], [ %.pre.5, %while.cond.loopexit.loopexit.5 ]
  %d.1.lcssa.5 = phi i32 [ %d.1.lcssa.4, %for.cond.preheader.5 ], [ %inc.lcssa.5, %while.cond.loopexit.loopexit.5 ]
  %tobool.5 = icmp eq i32 %109, 0
  br i1 %tobool.5, label %while.end, label %for.cond.preheader.6

for.cond.preheader.6:
  %cmp3.6 = icmp slt i32 %d.1.lcssa.5, 0
  br i1 %cmp3.6, label %for.body.preheader.6, label %while.cond.loopexit.6

for.body.preheader.6:
  %110 = sub i32 0, %d.1.lcssa.5
  %xtraiter.6 = and i32 %110, 7
  %lcmp.mod.6 = icmp eq i32 %xtraiter.6, 0
  br i1 %lcmp.mod.6, label %for.body.prol.loopexit.6, label %for.body.prol.634

for.body.prol.634:
  %111 = load ptr, ptr @b, align 8
  store i8 4, ptr %111, align 1
  %inc.prol.632 = add nsw i32 %d.1.lcssa.5, 1
  %prol.iter.cmp.6 = icmp eq i32 %xtraiter.6, 1
  br i1 %prol.iter.cmp.6, label %for.body.prol.loopexit.6, label %for.body.prol.1.6

for.body.prol.1.6:
  %112 = load ptr, ptr @b, align 8
  store i8 4, ptr %112, align 1
  %inc.prol.1.6 = add nsw i32 %d.1.lcssa.5, 2
  %prol.iter.cmp.1.6 = icmp eq i32 %xtraiter.6, 2
  br i1 %prol.iter.cmp.1.6, label %for.body.prol.loopexit.6, label %for.body.prol.2.6

for.body.prol.2.6:
  %113 = load ptr, ptr @b, align 8
  store i8 4, ptr %113, align 1
  %inc.prol.2.6 = add nsw i32 %d.1.lcssa.5, 3
  %prol.iter.cmp.2.6 = icmp eq i32 %xtraiter.6, 3
  br i1 %prol.iter.cmp.2.6, label %for.body.prol.loopexit.6, label %for.body.prol.3.6

for.body.prol.3.6:
  %114 = load ptr, ptr @b, align 8
  store i8 4, ptr %114, align 1
  %inc.prol.3.6 = add nsw i32 %d.1.lcssa.5, 4
  %prol.iter.cmp.3.6 = icmp eq i32 %xtraiter.6, 4
  br i1 %prol.iter.cmp.3.6, label %for.body.prol.loopexit.6, label %for.body.prol.4.6

for.body.prol.4.6:
  %115 = load ptr, ptr @b, align 8
  store i8 4, ptr %115, align 1
  %inc.prol.4.6 = add nsw i32 %d.1.lcssa.5, 5
  %prol.iter.cmp.4.6 = icmp eq i32 %xtraiter.6, 5
  br i1 %prol.iter.cmp.4.6, label %for.body.prol.loopexit.6, label %for.body.prol.5.6

for.body.prol.5.6:
  %116 = load ptr, ptr @b, align 8
  store i8 4, ptr %116, align 1
  %inc.prol.5.6 = add nsw i32 %d.1.lcssa.5, 6
  %prol.iter.cmp.5.6 = icmp eq i32 %xtraiter.6, 6
  br i1 %prol.iter.cmp.5.6, label %for.body.prol.loopexit.6, label %for.body.prol.6.6

for.body.prol.6.6:
  %117 = load ptr, ptr @b, align 8
  store i8 4, ptr %117, align 1
  %inc.prol.6.6 = add nsw i32 %d.1.lcssa.5, 7
  br label %for.body.prol.loopexit.6

for.body.prol.loopexit.6:
  %d.14.unr.6 = phi i32 [ %d.1.lcssa.5, %for.body.preheader.6 ], [ %inc.prol.632, %for.body.prol.634 ], [ %inc.prol.1.6, %for.body.prol.1.6 ], [ %inc.prol.2.6, %for.body.prol.2.6 ], [ %inc.prol.3.6, %for.body.prol.3.6 ], [ %inc.prol.4.6, %for.body.prol.4.6 ], [ %inc.prol.5.6, %for.body.prol.5.6 ], [ %inc.prol.6.6, %for.body.prol.6.6 ]
  %inc.lcssa.unr.6 = phi i32 [ undef, %for.body.preheader.6 ], [ %inc.prol.632, %for.body.prol.634 ], [ %inc.prol.1.6, %for.body.prol.1.6 ], [ %inc.prol.2.6, %for.body.prol.2.6 ], [ %inc.prol.3.6, %for.body.prol.3.6 ], [ %inc.prol.4.6, %for.body.prol.4.6 ], [ %inc.prol.5.6, %for.body.prol.5.6 ], [ %inc.prol.6.6, %for.body.prol.6.6 ]
  %118 = icmp ugt i32 %d.1.lcssa.5, -8
  br i1 %118, label %while.cond.loopexit.loopexit.6, label %for.body.6

for.body.6:
  %d.14.6 = phi i32 [ %inc.7.6, %for.body.6 ], [ %d.14.unr.6, %for.body.prol.loopexit.6 ]
  %119 = load ptr, ptr @b, align 8
  store i8 4, ptr %119, align 1
  %120 = load ptr, ptr @b, align 8
  store i8 4, ptr %120, align 1
  %121 = load ptr, ptr @b, align 8
  store i8 4, ptr %121, align 1
  %122 = load ptr, ptr @b, align 8
  store i8 4, ptr %122, align 1
  %123 = load ptr, ptr @b, align 8
  store i8 4, ptr %123, align 1
  %124 = load ptr, ptr @b, align 8
  store i8 4, ptr %124, align 1
  %125 = load ptr, ptr @b, align 8
  store i8 4, ptr %125, align 1
  %126 = load ptr, ptr @b, align 8
  store i8 4, ptr %126, align 1
  %inc.7.6 = add nsw i32 %d.14.6, 8
  %cmp.7.6 = icmp slt i32 %d.14.6, -8
  br i1 %cmp.7.6, label %for.body.6, label %while.cond.loopexit.loopexit.6

while.cond.loopexit.loopexit.6:
  %inc.lcssa.6 = phi i32 [ %inc.lcssa.unr.6, %for.body.prol.loopexit.6 ], [ %inc.7.6, %for.body.6 ]
  %.pre.6 = load i32, ptr @a, align 4
  br label %while.cond.loopexit.6

while.cond.loopexit.6:
  %127 = phi i32 [ %109, %for.cond.preheader.6 ], [ %.pre.6, %while.cond.loopexit.loopexit.6 ]
  %d.1.lcssa.6 = phi i32 [ %d.1.lcssa.5, %for.cond.preheader.6 ], [ %inc.lcssa.6, %while.cond.loopexit.loopexit.6 ]
  %tobool.6 = icmp eq i32 %127, 0
  br i1 %tobool.6, label %while.end, label %for.cond.preheader.7

for.cond.preheader.7:
  %cmp3.7 = icmp slt i32 %d.1.lcssa.6, 0
  br i1 %cmp3.7, label %for.body.preheader.7, label %while.cond.loopexit.7

for.body.preheader.7:
  %128 = sub i32 0, %d.1.lcssa.6
  %xtraiter.7 = and i32 %128, 7
  %lcmp.mod.7 = icmp eq i32 %xtraiter.7, 0
  br i1 %lcmp.mod.7, label %for.body.prol.loopexit.7, label %for.body.prol.7

for.body.prol.7:
  %129 = load ptr, ptr @b, align 8
  store i8 4, ptr %129, align 1
  %inc.prol.7 = add nsw i32 %d.1.lcssa.6, 1
  %prol.iter.cmp.7 = icmp eq i32 %xtraiter.7, 1
  br i1 %prol.iter.cmp.7, label %for.body.prol.loopexit.7, label %for.body.prol.1.7

for.body.prol.1.7:
  %130 = load ptr, ptr @b, align 8
  store i8 4, ptr %130, align 1
  %inc.prol.1.7 = add nsw i32 %d.1.lcssa.6, 2
  %prol.iter.cmp.1.7 = icmp eq i32 %xtraiter.7, 2
  br i1 %prol.iter.cmp.1.7, label %for.body.prol.loopexit.7, label %for.body.prol.2.7

for.body.prol.2.7:
  %131 = load ptr, ptr @b, align 8
  store i8 4, ptr %131, align 1
  %inc.prol.2.7 = add nsw i32 %d.1.lcssa.6, 3
  %prol.iter.cmp.2.7 = icmp eq i32 %xtraiter.7, 3
  br i1 %prol.iter.cmp.2.7, label %for.body.prol.loopexit.7, label %for.body.prol.3.7

for.body.prol.3.7:
  %132 = load ptr, ptr @b, align 8
  store i8 4, ptr %132, align 1
  %inc.prol.3.7 = add nsw i32 %d.1.lcssa.6, 4
  %prol.iter.cmp.3.7 = icmp eq i32 %xtraiter.7, 4
  br i1 %prol.iter.cmp.3.7, label %for.body.prol.loopexit.7, label %for.body.prol.4.7

for.body.prol.4.7:
  %133 = load ptr, ptr @b, align 8
  store i8 4, ptr %133, align 1
  %inc.prol.4.7 = add nsw i32 %d.1.lcssa.6, 5
  %prol.iter.cmp.4.7 = icmp eq i32 %xtraiter.7, 5
  br i1 %prol.iter.cmp.4.7, label %for.body.prol.loopexit.7, label %for.body.prol.5.7

for.body.prol.5.7:
  %134 = load ptr, ptr @b, align 8
  store i8 4, ptr %134, align 1
  %inc.prol.5.7 = add nsw i32 %d.1.lcssa.6, 6
  %prol.iter.cmp.5.7 = icmp eq i32 %xtraiter.7, 6
  br i1 %prol.iter.cmp.5.7, label %for.body.prol.loopexit.7, label %for.body.prol.6.7

for.body.prol.6.7:
  %135 = load ptr, ptr @b, align 8
  store i8 4, ptr %135, align 1
  %inc.prol.6.7 = add nsw i32 %d.1.lcssa.6, 7
  br label %for.body.prol.loopexit.7

for.body.prol.loopexit.7:
  %d.14.unr.7 = phi i32 [ %d.1.lcssa.6, %for.body.preheader.7 ], [ %inc.prol.7, %for.body.prol.7 ], [ %inc.prol.1.7, %for.body.prol.1.7 ], [ %inc.prol.2.7, %for.body.prol.2.7 ], [ %inc.prol.3.7, %for.body.prol.3.7 ], [ %inc.prol.4.7, %for.body.prol.4.7 ], [ %inc.prol.5.7, %for.body.prol.5.7 ], [ %inc.prol.6.7, %for.body.prol.6.7 ]
  %inc.lcssa.unr.7 = phi i32 [ undef, %for.body.preheader.7 ], [ %inc.prol.7, %for.body.prol.7 ], [ %inc.prol.1.7, %for.body.prol.1.7 ], [ %inc.prol.2.7, %for.body.prol.2.7 ], [ %inc.prol.3.7, %for.body.prol.3.7 ], [ %inc.prol.4.7, %for.body.prol.4.7 ], [ %inc.prol.5.7, %for.body.prol.5.7 ], [ %inc.prol.6.7, %for.body.prol.6.7 ]
  %136 = icmp ugt i32 %d.1.lcssa.6, -8
  br i1 %136, label %while.cond.loopexit.loopexit.7, label %for.body.7

for.body.7:
  %d.14.7 = phi i32 [ %inc.7.7, %for.body.7 ], [ %d.14.unr.7, %for.body.prol.loopexit.7 ]
  %137 = load ptr, ptr @b, align 8
  store i8 4, ptr %137, align 1
  %138 = load ptr, ptr @b, align 8
  store i8 4, ptr %138, align 1
  %139 = load ptr, ptr @b, align 8
  store i8 4, ptr %139, align 1
  %140 = load ptr, ptr @b, align 8
  store i8 4, ptr %140, align 1
  %141 = load ptr, ptr @b, align 8
  store i8 4, ptr %141, align 1
  %142 = load ptr, ptr @b, align 8
  store i8 4, ptr %142, align 1
  %143 = load ptr, ptr @b, align 8
  store i8 4, ptr %143, align 1
  %144 = load ptr, ptr @b, align 8
  store i8 4, ptr %144, align 1
  %inc.7.7 = add nsw i32 %d.14.7, 8
  %cmp.7.7 = icmp slt i32 %d.14.7, -8
  br i1 %cmp.7.7, label %for.body.7, label %while.cond.loopexit.loopexit.7

while.cond.loopexit.loopexit.7:
  %inc.lcssa.7 = phi i32 [ %inc.lcssa.unr.7, %for.body.prol.loopexit.7 ], [ %inc.7.7, %for.body.7 ]
  %.pre.7 = load i32, ptr @a, align 4
  br label %while.cond.loopexit.7

while.cond.loopexit.7:
  %145 = phi i32 [ %127, %for.cond.preheader.7 ], [ %.pre.7, %while.cond.loopexit.loopexit.7 ]
  %d.1.lcssa.7 = phi i32 [ %d.1.lcssa.6, %for.cond.preheader.7 ], [ %inc.lcssa.7, %while.cond.loopexit.loopexit.7 ]
  %tobool.7 = icmp eq i32 %145, 0
  br i1 %tobool.7, label %while.end, label %for.cond.preheader
}
