; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -disable-kvx-hwloops=false -O2 -o - %s | FileCheck %s --check-prefixes=CV1
; RUN: llc -mcpu=kv3-2 -disable-kvx-hwloops=false -O2 -o - %s | FileCheck %s --check-prefixes=CV2
; RUN: clang -mllvm -disable-kvx-hwloops=false -O2 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -mllvm -disable-kvx-hwloops=false -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @set(ptr %x, i32 %num) {
; CV1-LABEL: set:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    cb.weqz $r1 ? .LBB0_5
; CV1-NEXT:    addd $r12 = $r12, -32
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:  # %bb.1: # %for.body.lr.ph
; CV1-NEXT:    make $r1 = 0
; CV1-NEXT:    addd $r2 = $r12, 28
; CV1-NEXT:    make $r3 = 16
; CV1-NEXT:    zxwd $r4 = $r1
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    loopdo $r4, .__LOOPDO_0_END_
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB0_2: # %for.body
; CV1-NEXT:    # =>This Loop Header: Depth=1
; CV1-NEXT:    # Child Loop BB0_3 Depth 2
; CV1-NEXT:    sw 28[$r12] = $r1
; CV1-NEXT:    copyd $r5 = $r1
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:  .LBB0_3: # %atomicrmw.start
; CV1-NEXT:    # Parent Loop BB0_2 Depth=1
; CV1-NEXT:    # => This Inner Loop Header: Depth=2
; CV1-NEXT:    addw $r4 = $r5, -4
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    copyq $r6r7 = $r4, $r5
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    acswapw 0[$r2] = $r6r7
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    lwz.u $r4 = 0[$r2]
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    cmoved.even $r6 ? $r5 = $r4
; CV1-NEXT:    cb.even $r6 ? .LBB0_3
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:  # %bb.4: # %atomicrmw.end
; CV1-NEXT:    # in Loop: Header=BB0_2 Depth=1
; CV1-NEXT:    sw.xs $r1[$r0] = $r3
; CV1-NEXT:    addd $r1 = $r1, 1
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:  .__LOOPDO_0_END_:
; CV1-NEXT:  .LBB0_5: # %for.cond.cleanup
; CV1-NEXT:    addd $r12 = $r12, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 0)
;
; CV2-LABEL: set:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    cb.weqz $r1 ? .LBB0_5
; CV2-NEXT:    addd $r12 = $r12, -32
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:  # %bb.1: # %for.body.lr.ph
; CV2-NEXT:    make $r1 = 0
; CV2-NEXT:    addd $r2 = $r12, 28
; CV2-NEXT:    make $r3 = 16
; CV2-NEXT:    zxwd $r4 = $r1
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    loopdo $r4, .__LOOPDO_0_END_
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB0_2: # %for.body
; CV2-NEXT:    # =>This Loop Header: Depth=1
; CV2-NEXT:    # Child Loop BB0_3 Depth 2
; CV2-NEXT:    sw 28[$r12] = $r1
; CV2-NEXT:    copyd $r5 = $r1
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:  .LBB0_3: # %atomicrmw.start
; CV2-NEXT:    # Parent Loop BB0_2 Depth=1
; CV2-NEXT:    # => This Inner Loop Header: Depth=2
; CV2-NEXT:    addw $r4 = $r5, -4
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    acswapw.v $r4, [$r2] = $r4r5
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    copyd $r5 = $r4
; CV2-NEXT:    compw.eq $r6 = $r4, $r5
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    cb.even $r6 ? .LBB0_3
; CV2-NEXT:    ;;
; CV2-NEXT:  # %bb.4: # %atomicrmw.end
; CV2-NEXT:    # in Loop: Header=BB0_2 Depth=1
; CV2-NEXT:    sw.xs $r1[$r0] = $r3
; CV2-NEXT:    addd $r1 = $r1, 1
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:  .__LOOPDO_0_END_:
; CV2-NEXT:  .LBB0_5: # %for.cond.cleanup
; CV2-NEXT:    addd $r12 = $r12, 32
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %a = alloca i32, align 4
  %cmp8 = icmp eq i32 %num, 0
  br i1 %cmp8, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:
  %0 = zext i32 %num to i64
  br label %for.body

for.cond.cleanup:
  ret void

for.body:
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %1 = trunc i64 %indvars.iv to i32
  store i32 %1, ptr %a, align 4
  %2 = atomicrmw sub ptr %a, i32 4 monotonic, align 4
  %arrayidx = getelementptr inbounds i32, ptr %x, i64 %indvars.iv
  store i32 16, ptr %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp eq i64 %indvars.iv.next, %0
  br i1 %cmp, label %for.cond.cleanup, label %for.body
}

