; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=kvx-kalray-cos | FileCheck %s

define i16 @bswapi16(i16 %a) {
; CHECK-LABEL: bswapi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllw $r1 = $r0, 24
; CHECK-NEXT:    sllw $r0 = $r0, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 16711680
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r0, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i16 @llvm.bswap.i16(i16 %a)
  ret i16 %res
}

define i32 @bswapi32(i32 %a) {
; CHECK-LABEL: bswapi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r1 = $r0, 24
; CHECK-NEXT:    srlw $r2 = $r0, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r2 = $r2, 65280
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r1 = $r2, $r1
; CHECK-NEXT:    sllw $r2 = $r0, 24
; CHECK-NEXT:    sllw $r0 = $r0, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 16711680
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i32 @llvm.bswap.i32(i32 %a)
  ret i32 %res
}

define i64 @bswapi64(i64 %a) {
; CHECK-LABEL: bswapi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 56
; CHECK-NEXT:    srld $r3 = $r0, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r3 = $r3, 65280
; CHECK-NEXT:    srld $r4 = $r0, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r4 = $r4, 4278190080
; CHECK-NEXT:    srld $r2 = $r0, $r1
; CHECK-NEXT:    slld $r1 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r2 = $r3, $r2
; CHECK-NEXT:    srld $r3 = $r0, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r3 = $r3, 16711680
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r3 = $r4, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r2 = $r3, $r2
; CHECK-NEXT:    make $r3 = 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r3 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r3 = $r3, 71776119061217280
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r1 = $r1, $r3
; CHECK-NEXT:    slld $r3 = $r0, 8
; CHECK-NEXT:    slld $r0 = $r0, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r3 = $r3, 1095216660480
; CHECK-NEXT:    andd $r0 = $r0, 280375465082880
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i64 @llvm.bswap.i64(i64 %a)
  ret i64 %res
}

define <2 x i16> @bswapv2i16(<2 x i16> %a) {
; CHECK-LABEL: bswapv2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r2 = $r0, 7, 0
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 15, 8
; CHECK-NEXT:    extfz $r2 = $r0, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 23, 16
; CHECK-NEXT:    extfz $r0 = $r0, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r0, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i16> @llvm.bswap.v2i16(<2 x i16> %a)
  ret <2 x i16> %res
}

define <2 x i32> @bswapv2i32(<2 x i32> %a) {
; CHECK-LABEL: bswapv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r2 = $r0, 23, 16
; CHECK-NEXT:    extfz $r1 = $r0, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 15, 8
; CHECK-NEXT:    extfz $r2 = $r0, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 23, 16
; CHECK-NEXT:    extfz $r2 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 31, 24
; CHECK-NEXT:    srld $r2 = $r0, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 39, 32
; CHECK-NEXT:    extfz $r2 = $r0, 55, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 47, 40
; CHECK-NEXT:    extfz $r2 = $r0, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 55, 48
; CHECK-NEXT:    extfz $r0 = $r0, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r0, 63, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i32> @llvm.bswap.v2i32(<2 x i32> %a)
  ret <2 x i32> %res
}

define <2 x i64> @bswapv2i64(<2 x i64> %a) {
; CHECK-LABEL: bswapv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r4 = $r1, 55, 48
; CHECK-NEXT:    srld $r3 = $r1, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 15, 8
; CHECK-NEXT:    extfz $r4 = $r1, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 23, 16
; CHECK-NEXT:    extfz $r4 = $r1, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 31, 24
; CHECK-NEXT:    extfz $r4 = $r1, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 39, 32
; CHECK-NEXT:    extfz $r4 = $r1, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 47, 40
; CHECK-NEXT:    extfz $r4 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 55, 48
; CHECK-NEXT:    extfz $r1 = $r1, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r1, 63, 56
; CHECK-NEXT:    extfz $r1 = $r0, 55, 48
; CHECK-NEXT:    srld $r2 = $r0, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    extfz $r1 = $r0, 47, 40
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 23, 16
; CHECK-NEXT:    extfz $r1 = $r0, 39, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 31, 24
; CHECK-NEXT:    extfz $r1 = $r0, 31, 24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 39, 32
; CHECK-NEXT:    extfz $r1 = $r0, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 47, 40
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 55, 48
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r0, 63, 56
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i64> @llvm.bswap.v2i64(<2 x i64> %a)
  ret <2 x i64> %res
}

declare i16 @llvm.bswap.i16(i16)
declare i32 @llvm.bswap.i32(i32)
declare i64 @llvm.bswap.i64(i64)
declare <2 x i16> @llvm.bswap.v2i16(<2 x i16>)
declare <2 x i32> @llvm.bswap.v2i32(<2 x i32>)
declare <2 x i64> @llvm.bswap.v2i64(<2 x i64>)
