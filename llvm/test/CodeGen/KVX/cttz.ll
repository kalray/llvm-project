; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=kvx-kalray-cos | FileCheck %s

define i16 @cttzi16(i16 %a) {
; CHECK-LABEL: cttzi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.weqz $r2 ? .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %cond.false
; CHECK-NEXT:    ctzw $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # %cond.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i16 @llvm.cttz.i16(i16 %a)
  ret i16 %res
}

define i32 @ctzw(i32 %a) {
; CHECK-LABEL: ctzw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.weqz $r1 ? .LBB1_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %cond.false
; CHECK-NEXT:    ctzw $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB1_2: # %cond.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i32 @llvm.cttz.i32(i32 %a)
  ret i32 %res
}

define i64 @ctzd(i64 %a) {
; CHECK-LABEL: ctzd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.deqz $r1 ? .LBB2_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %cond.false
; CHECK-NEXT:    ctzd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB2_2: # %cond.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i64 @llvm.cttz.i64(i64 %a)
  ret i64 %res
}

define <2 x i16> @cttzv2i16(<2 x i16> %a) {
; CHECK-LABEL: cttzv2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r1 = $r1, 65536
; CHECK-NEXT:    orw $r0 = $r0, 65536
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ctzw $r1 = $r1
; CHECK-NEXT:    ctzw $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i16> @llvm.cttz.v2i16(<2 x i16> %a)
  ret <2 x i16> %res
}

define <2 x i32> @ctzwp(<2 x i32> %a) {
; CHECK-LABEL: ctzwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i32> @llvm.cttz.v2i32(<2 x i32> %a)
  ret <2 x i32> %res
}

define <2 x i64> @cttzv2i64(<2 x i64> %a) {
; CHECK-LABEL: cttzv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzd $r2 = $r0
; CHECK-NEXT:    ctzd $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i64> @llvm.cttz.v2i64(<2 x i64> %a)
  ret <2 x i64> %res
}

declare i16 @llvm.cttz.i16(i16)
declare i32 @llvm.cttz.i32(i32)
declare i64 @llvm.cttz.i64(i64)
declare <2 x i16> @llvm.cttz.v2i16(<2 x i16>)
declare <2 x i32> @llvm.cttz.v2i32(<2 x i32>)
declare <2 x i64> @llvm.cttz.v2i64(<2 x i64>)
