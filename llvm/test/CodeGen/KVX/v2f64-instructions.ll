; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define <2 x double> @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x3ff0000000000000
; CHECK-NEXT:    make $r1 = 0x4000000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  ret <2 x double> <double 1.0, double 2.0>
}

define double @test_extract_0(<2 x double> %a) #0 {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x double> %a, i32 0
  ret double %e
}

define double @test_extract_1(<2 x double> %a) #0 {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x double> %a, i32 1
  ret double %e
}

define double @test_extract_i(<2 x double> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.odd $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x double> %a, i64 %idx
  ret double %e
}

define <2 x double> @test_fadd(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fadddp $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <2 x double> %a, %b
  ret <2 x double> %r
}

define <2 x double> @test_fadd_imm_0(<2 x double> %a) #0 {
; CHECK-LABEL: test_fadd_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r2 = 0x3ff0000000000000
; CHECK-NEXT:    make $r3 = 0x4000000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <2 x double> <double 1.0, double 2.0>, %a
  ret <2 x double> %r
}

define <2 x double> @test_fadd_imm_1(<2 x double> %a) #0 {
; CHECK-LABEL: test_fadd_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r2 = 0x3ff0000000000000
; CHECK-NEXT:    make $r3 = 0x4000000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <2 x double> %a, <double 1.0, double 2.0>
  ret <2 x double> %r
}

define <2 x double> @test_fsub(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfdp $r0r1 = $r2r3, $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <2 x double> %a, %b
  ret <2 x double> %r
}

define <2 x double> @test_fsub_imm(<2 x double> %a) #0 {
; CHECK-LABEL: test_fsub_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r2 = 0xbff0000000000000
; CHECK-NEXT:    make $r3 = 0xc000000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <2 x double> %a, <double 1.0, double 2.0>
  ret <2 x double> %r
}

; TODO: Could use ri variant
define <2 x double> @test_fsub_fromimm(<2 x double> %a) #0 {
; CHECK-LABEL: test_fsub_fromimm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r2 = 0x3ff0000000000000
; CHECK-NEXT:    make $r3 = 0x4000000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <2 x double> <double 1.0, double 2.0>, %a
  ret <2 x double> %r
}

define <2 x double> @test_fneg(<2 x double> %a) #0 {
; CHECK-LABEL: test_fneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnegd $r1 = $r1
; CHECK-NEXT:    fnegd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <2 x double> <double 0.0, double 0.0>, %a
  ret <2 x double> %r
}

define <2 x double> @test_fmul(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fmul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmuld $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmuld $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fmul <2 x double> %a, %b
  ret <2 x double> %r
}

define <2 x double> @test_fdiv(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fdiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    call __divdf3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call __divdf3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r21 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fdiv <2 x double> %a, %b
  ret <2 x double> %r
}

define <2 x double> @test_frem(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_frem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    call fmod
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call fmod
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r21 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = frem <2 x double> %a, %b
  ret <2 x double> %r
}

define void @test_ldst_v2f64(<2 x double>* %a, <2 x double>* %b) {
; CHECK-LABEL: test_ldst_v2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lq $r2r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r1] = $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %t1 = load <2 x double>, <2 x double>* %a
  store <2 x double> %t1, <2 x double>* %b, align 16
  ret void
}

declare <2 x double> @test_callee(<2 x double> %a, <2 x double> %b) #0

define <2 x double> @test_call(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @test_callee(<2 x double> %a, <2 x double> %b)
  ret <2 x double> %r
}

define <2 x double> @test_call_flipped(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r0
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @test_callee(<2 x double> %b, <2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_tailcall_flipped(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r0
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
  %r = tail call <2 x double> @test_callee(<2 x double> %b, <2 x double> %a)
  ret <2 x double> %r
}

; This could be selected to (cmovehq(sra(sll %c, 31), 31), %a, %b)
define <2 x double> @test_select(<2 x double> %a, <2 x double> %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyw $r5 = $r4
; CHECK-NEXT:    make $r4 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r5 ? $r4 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andnd $r3 = $r4, $r3
; CHECK-NEXT:    andd $r1 = $r1, $r4
; CHECK-NEXT:    andnd $r2 = $r4, $r2
; CHECK-NEXT:    andd $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r1 = $r1, $r3
; CHECK-NEXT:    ord $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = select i1 %c, <2 x double> %a, <2 x double> %b
  ret <2 x double> %r
}

define <2 x double> @test_select_cc(<2 x double> %a, <2 x double> %b, <2 x double> %c, <2 x double> %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.une $r4 = $r4, $r6
; CHECK-NEXT:    fcompd.une $r5 = $r5, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r6 = $r4
; CHECK-NEXT:    make $r4 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r6 ? $r4 = 0
; CHECK-NEXT:    copyw $r6 = $r5
; CHECK-NEXT:    make $r5 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r6 ? $r5 = 0
; CHECK-NEXT:    cmoved.dnez $r4 ? $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r5 ? $r3 = $r1
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = fcmp une <2 x double> %c, %d
  %r = select <2 x i1> %cc, <2 x double> %a, <2 x double> %b
  ret <2 x double> %r
}

define <2 x float> @test_select_cc_f32_f32(<2 x float> %a, <2 x float> %b, <2 x double> %c, <2 x double> %d) #0 {
; CHECK-LABEL: test_select_cc_f32_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.une $r3 = $r3, $r5
; CHECK-NEXT:    fcompd.une $r2 = $r2, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r4 = $r3
; CHECK-NEXT:    make $r3 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r3 = 0
; CHECK-NEXT:    copyw $r4 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovewp.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = fcmp une <2 x double> %c, %d
  %r = select <2 x i1> %cc, <2 x float> %a, <2 x float> %b
  ret <2 x float> %r
}

define <2 x i1> @test_fcmp_une(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_une:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.une $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.une $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp une <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ueq(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_ueq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.ueq $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.ueq $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ueq <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ugt(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.ult $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.ult $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ugt <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_uge(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.uge $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.uge $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp uge <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ult(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.ult $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.ult $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ult <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ule(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.uge $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.uge $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ule <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_uno(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_uno:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.ult $r4 = $r1, $r3
; CHECK-NEXT:    fcompd.uge $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompd.ult $r3 = $r0, $r2
; CHECK-NEXT:    fcompd.uge $r0 = $r0, $r2
; CHECK-NEXT:    andw $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    andw $r0 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp uno <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_one(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_one:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.one $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.one $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp one <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_oeq(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_oeq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp oeq <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ogt(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_ogt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.olt $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.olt $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ogt <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_oge(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_oge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.oge $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp oge <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_olt(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_olt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.olt $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.olt $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp olt <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ole(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_ole:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.oge $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.oge $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ole <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ord(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_fcmp_ord:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.olt $r4 = $r1, $r3
; CHECK-NEXT:    fcompd.oge $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompd.olt $r3 = $r0, $r2
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r2
; CHECK-NEXT:    orw $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    orw $r0 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ord <2 x double> %a, %b
  ret <2 x i1> %r
}

define <2 x i32> @test_fptosi_i32(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptosi_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <2 x double> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i64> @test_fptosi_i64(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptosi_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <2 x double> %a to <2 x i64>
  ret <2 x i64> %r
}

define <2 x i32> @test_fptoui_2xi32(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptoui_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedud.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <2 x double> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i64> @test_fptoui_2xi64(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptoui_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedud.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <2 x double> %a to <2 x i64>
  ret <2 x i64> %r
}

;TODO: Don't need sbmm8, just  insf $r0 = $r1, 31, 16
define <2 x i16> @test_fptosi_i16(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptosi_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x20100201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <2 x double> %a to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @test_fptoui_i16(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptoui_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedud.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x20100201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <2 x double> %a to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i8> @test_fptosi_i8(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptosi_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x1001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <2 x double> %a to <2 x i8>
  ret <2 x i8> %r
}

; TODO: Could have just insf $r0 = $r1, 15, 8
; instead of sbmm8(insf)
define <2 x i8> @test_fptoui_i8(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptoui_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedud.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x1001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <2 x double> %a to <2 x i8>
  ret <2 x i8> %r
}
define <2 x double> @test_uitofp_2xi32(<2 x i32> %a) #0 {
; CHECK-LABEL: test_uitofp_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r2 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r1 = $r0, 0
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = uitofp <2 x i32> %a to <2 x double>
  ret <2 x double> %r
}

define <2 x double> @test_uitofp_2xi64(<2 x i64> %a) #0 {
; CHECK-LABEL: test_uitofp_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatud.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r1 = $r1, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = uitofp <2 x i64> %a to <2 x double>
  ret <2 x double> %r
}

define <2 x double> @test_sitofp_2xi32(<2 x i32> %a) #0 {
; CHECK-LABEL: test_sitofp_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r1 = $r0
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r2 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r1 = $r0, 0
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sitofp <2 x i32> %a to <2 x double>
  ret <2 x double> %r
}

define <2 x double> @test_sitofp_2xi64(<2 x i64> %a) #0 {
; CHECK-LABEL: test_sitofp_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatd.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r1 = $r1, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sitofp <2 x i64> %a to <2 x double>
  ret <2 x double> %r
}

define <2 x double> @test_uitofp_2xi32_fadd(<2 x i32> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_uitofp_2xi32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r3 = $r0
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r4 = $r3, 0
; CHECK-NEXT:    copyd $r3 = $r2
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r5 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp $r0r1 = $r2r3, $r4r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %c = uitofp <2 x i32> %a to <2 x double>
  %r = fadd <2 x double> %b, %c
  ret <2 x double> %r
}

define <2 x double> @test_sitofp_2xi32_fadd(<2 x i32> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_sitofp_2xi32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r3 = $r0
; CHECK-NEXT:    srad $r0 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r4 = $r3, 0
; CHECK-NEXT:    copyd $r3 = $r2
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r5 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp $r0r1 = $r2r3, $r4r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %c = sitofp <2 x i32> %a to <2 x double>
  %r = fadd <2 x double> %b, %c
  ret <2 x double> %r
}

define <2 x i64> @test_bitcast_2xdouble_to_2xi64(<2 x double> %a) #0 {
; CHECK-LABEL: test_bitcast_2xdouble_to_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = bitcast <2 x double> %a to <2 x i64>
  ret <2 x i64> %r
}

define <2 x double> @test_bitcast_2xi64_to_2xdouble(<2 x i64> %a) #0 {
; CHECK-LABEL: test_bitcast_2xi64_to_2xdouble:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = bitcast <2 x i64> %a to <2 x double>
  ret <2 x double> %r
}

declare <2 x double> @llvm.sqrt.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.powi.v2f64(<2 x double> %a, i32 %b) #0
declare <2 x double> @llvm.sin.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.cos.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> %b) #0
declare <2 x double> @llvm.exp.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.exp2.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.log.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.log10.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.log2.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.fma.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c) #0
declare <2 x double> @llvm.fabs.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> %b) #0
declare <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b) #0
declare <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %b) #0
declare <2 x double> @llvm.floor.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.ceil.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.trunc.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.rint.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.nearbyint.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.round.v2f64(<2 x double> %a) #0
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c) #0

define <2 x double> @test_sqrt(<2 x double> %a) #0 {
; CHECK-LABEL: test_sqrt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call sqrt
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call sqrt
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.sqrt.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_powi(<2 x double> %a, i32 %b) #0 {
; CHECK-LABEL: test_powi:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call __powidf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call __powidf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r21 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x double> @llvm.powi.v2f64(<2 x double> %a, i32 %b)
 ret <2 x double> %r
}

define <2 x double> @test_sin(<2 x double> %a) #0 {
; CHECK-LABEL: test_sin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call sin
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call sin
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.sin.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_cos(<2 x double> %a) #0 {
; CHECK-LABEL: test_cos:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call cos
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call cos
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.cos.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_pow(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_pow:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    call pow
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call pow
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r21 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x double> @llvm.pow.v2f64(<2 x double> %a, <2 x double> %b)
 ret <2 x double> %r
}

define <2 x double> @test_exp(<2 x double> %a) #0 {
; CHECK-LABEL: test_exp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call exp
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call exp
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x double> @llvm.exp.v2f64(<2 x double> %a)
 ret <2 x double> %r
}

define <2 x double> @test_exp2(<2 x double> %a) #0 {
; CHECK-LABEL: test_exp2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call exp2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call exp2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x double> @llvm.exp2.v2f64(<2 x double> %a)
 ret <2 x double> %r
}

define <2 x double> @test_log(<2 x double> %a) #0 {
; CHECK-LABEL: test_log:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call log
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call log
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x double> @llvm.log.v2f64(<2 x double> %a)
 ret <2 x double> %r
}

define <2 x double> @test_log10(<2 x double> %a) #0 {
; CHECK-LABEL: test_log10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call log10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call log10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x double> @llvm.log10.v2f64(<2 x double> %a)
 ret <2 x double> %r
}

define <2 x double> @test_log2(<2 x double> %a) #0 {
; CHECK-LABEL: test_log2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call log2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call log2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x double> @llvm.log2.v2f64(<2 x double> %a)
 ret <2 x double> %r
}

define <2 x double> @test_fma(<2 x double> %a, <2 x double> %b, <2 x double> %c) #0 {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmad $r4 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r5 = $r1, $r3
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.fma.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)
  ret <2 x double> %r
}

define <2 x double> @test_fabs(<2 x double> %a) #0 {
; CHECK-LABEL: test_fabs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabsd $r0 = $r0
; CHECK-NEXT:    fabsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.fabs.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_minnum(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_minnum:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    call fmin
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call fmin
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r21 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> %b)
  ret <2 x double> %r
}

define <2 x double> @test_minnum_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_minnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.olt $r4 = $r1, $r3
; CHECK-NEXT:    fcompd.olt $r5 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r5 ? $r2 = $r0
; CHECK-NEXT:    cmoved.wnez $r4 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call fast <2 x double> @llvm.minnum.v2f64(<2 x double> %a, <2 x double> %b)
  ret <2 x double> %r
}

define <2 x double> @test_maxnum(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_maxnum:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r2
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    call fmax
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call fmax
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r21 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b)
  ret <2 x double> %r
}

define <2 x double> @test_maxnum_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_maxnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompd.olt $r4 = $r3, $r1
; CHECK-NEXT:    fcompd.olt $r5 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r5 ? $r2 = $r0
; CHECK-NEXT:    cmoved.wnez $r4 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call fast <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b)
  ret <2 x double> %r
}

define <2 x double> @test_copysign(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: test_copysign:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r3 = $r3, 63
; CHECK-NEXT:    srad $r2 = $r2, 63
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r3, 63, 63
; CHECK-NEXT:    insf $r0 = $r2, 63, 63
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %b)
  ret <2 x double> %r
}

define <2 x double> @test_copysign_v2f16(<2 x double> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_copysign_v2f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r3 = $r2, 16
; CHECK-NEXT:    sraw $r2 = $r2, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r3 = $r3, 15
; CHECK-NEXT:    insf $r0 = $r2, 63, 63
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r3, 63, 63
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %tb = fpext <2 x half> %b to <2 x double>
  %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %tb)
  ret <2 x double> %r
}

define <2 x double> @test_copysign_v2f32(<2 x double> %a, <2 x float> %b) #0 {
; CHECK-LABEL: test_copysign_v2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r3 = $r2, 32
; CHECK-NEXT:    sraw $r2 = $r2, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r3 = $r3, 31
; CHECK-NEXT:    insf $r0 = $r2, 63, 63
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r3, 63, 63
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %tb = fpext <2 x float> %b to <2 x double>
  %r = call <2 x double> @llvm.copysign.v2f64(<2 x double> %a, <2 x double> %tb)
  ret <2 x double> %r
}

define <2 x double> @test_floor(<2 x double> %a) #0 {
; CHECK-LABEL: test_floor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call floor
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call floor
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.floor.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_ceil(<2 x double> %a) #0 {
; CHECK-LABEL: test_ceil:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call ceil
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call ceil
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.ceil.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_trunc(<2 x double> %a) #0 {
; CHECK-LABEL: test_trunc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call trunc
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call trunc
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.trunc.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_rint(<2 x double> %a) #0 {
; CHECK-LABEL: test_rint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call rint
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call rint
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.rint.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_nearbyint(<2 x double> %a) #0 {
; CHECK-LABEL: test_nearbyint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call nearbyint
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call nearbyint
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.nearbyint.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_round(<2 x double> %a) #0 {
; CHECK-LABEL: test_round:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 8[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    call round
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call round
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    ld $r18 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.round.v2f64(<2 x double> %a)
  ret <2 x double> %r
}

define <2 x double> @test_fmuladd(<2 x double> %a, <2 x double> %b, <2 x double> %c) #0 {
; CHECK-LABEL: test_fmuladd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmad $r4 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ffmad $r5 = $r1, $r3
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %a, <2 x double> %b, <2 x double> %c)
  ret <2 x double> %r
}

define <2 x double> @test_shufflevector(<2 x double> %a) #0 {
; CHECK-LABEL: test_shufflevector:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %s = shufflevector <2 x double> %a, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  ret <2 x double> %s
}

define <2 x double> @test_insertelement0(<2 x double> %a, double %x) #0 {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x double> %a, double %x, i64 0
  ret <2 x double> %i
}

define <2 x double> @test_insertelement1(<2 x double> %a, double %x) #0 {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x double> %a, double %x, i64 1
  ret <2 x double> %i
}

define <2 x double> @test_insertelement(<2 x double> %a, double %x, i64 %p) #0 {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.odd $r3 ? $r1 = $r2
; CHECK-NEXT:    cmoved.even $r3 ? $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <2 x double> %a, double %x, i64 %p
  ret <2 x double> %i
}

define <2 x i1> @fcmp_setoeq(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setoeq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp oeq <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setoeq_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setoeq_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp oeq <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setogt(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setogt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.olt $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ogt <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setogt_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setogt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ogt <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setoge(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setoge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp oge <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setoge_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setoge_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp oge <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setolt(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setolt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.olt $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp olt <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setolt_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setolt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp olt <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setole(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setole:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.oge $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ole <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setole_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setole_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ole <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setone(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setone:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.one $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.one $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp one <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setone_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setone_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp one <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setord(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setord:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r4 = $r1, $r3
; CHECK-NEXT:    fcompd.oge $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompd.olt $r3 = $r0, $r2
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r2
; CHECK-NEXT:    orw $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    orw $r0 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ord <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setord_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setord_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ord <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setuno(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setuno:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.ult $r4 = $r1, $r3
; CHECK-NEXT:    fcompd.uge $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompd.ult $r3 = $r0, $r2
; CHECK-NEXT:    fcompd.uge $r0 = $r0, $r2
; CHECK-NEXT:    andw $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    andw $r0 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp uno <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setuno_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setuno_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.une $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.une $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp uno <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setueq(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setueq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.ueq $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.ueq $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ueq <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setueq_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setueq_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ueq <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setugt(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setugt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.ult $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.ult $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ugt <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setugt_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setugt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.une $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.une $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ugt <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setuge(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setuge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.uge $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.uge $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp uge <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setuge_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setuge_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp uge <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setult(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setult:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.ult $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.ult $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ult <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setult_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setult_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.une $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.une $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ult <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setule(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setule:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.uge $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.uge $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ule <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setule_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setule_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp ule <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setune(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setune:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.une $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.une $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp une <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setune_single(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setune_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.une $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.une $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp une <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setoeq_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setoeq_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast oeq <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setoeq_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setoeq_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast oeq <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setogt_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setogt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.olt $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ogt <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setogt_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setogt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ogt <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setoge_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setoge_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast oge <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setoge_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setoge_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast oge <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setolt_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setolt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.olt $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast olt <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setolt_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setolt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast olt <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setole_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setole_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.oge $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ole <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setole_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setole_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ole <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setone_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setone_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.one $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.one $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast one <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setone_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setone_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast one <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setord_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setord_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r4 = $r1, $r3
; CHECK-NEXT:    fcompd.oge $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompd.olt $r3 = $r0, $r2
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r2
; CHECK-NEXT:    orw $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    orw $r0 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ord <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setord_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setord_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ord <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setuno_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setuno_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.ult $r4 = $r1, $r3
; CHECK-NEXT:    fcompd.uge $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompd.ult $r3 = $r0, $r2
; CHECK-NEXT:    fcompd.uge $r0 = $r0, $r2
; CHECK-NEXT:    andw $r1 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    andw $r0 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast uno <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setuno_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setuno_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.une $r1 = $r1, $r1
; CHECK-NEXT:    fcompd.une $r0 = $r0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast uno <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setueq_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setueq_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ueq <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setueq_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setueq_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ueq <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setugt_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setugt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.olt $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ugt <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setugt_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setugt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ugt <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setuge_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setuge_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast uge <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setuge_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setuge_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast uge <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setult_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setult_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.olt $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ult <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setult_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setult_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ult <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setule_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setule_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r1 = $r3, $r1
; CHECK-NEXT:    fcompd.oge $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ule <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setule_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setule_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast ule <2 x double> %a, %a
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setune_fast(<2 x double> %a, <2 x double> %b) #0 {
; CHECK-LABEL: fcmp_setune_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.one $r1 = $r1, $r3
; CHECK-NEXT:    fcompd.one $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 0
; CHECK-NEXT:    copyw $r2 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast une <2 x double> %a, %b
  ret <2 x i1> %0
}

define <2 x i1> @fcmp_setune_single_fast(<2 x double> %a) #0 {
; CHECK-LABEL: fcmp_setune_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = fcmp fast une <2 x double> %a, %a
  ret <2 x i1> %0
}

attributes #0 = { nounwind }
