; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --implicit-check-not=zx
target triple = "kvx-kalray-cos"

@a = common global i64 0, align 8

define void @test7(i64 %b, i8 %c){
; CHECK-LABEL: test7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i8 %c to i64
  %sh_prom = and i64 %conv, 4294967295
  %shl = shl i64 %b, %sh_prom
  store i64 %shl, i64* @a, align 8
  ret void
}

define void @test7b(i64 %b, i8 %c){
; CHECK-LABEL: test7b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sh_prom = zext i8 %c to i64
  %shl = shl i64 %b, %sh_prom
  store i64 %shl, i64* @a, align 8
  ret void
}

define void @test7c(i64 %b, i16 %c){
; CHECK-LABEL: test7c:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %c to i64
  %sh_prom = and i64 %conv, 4294967295
  %shl = shl i64 %b, %sh_prom
  store i64 %shl, i64* @a, align 8
  ret void
}

define void @test7d(i64 %b, i16 %c){
; CHECK-LABEL: test7d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sh_prom = zext i16 %c to i64
  %shl = shl i64 %b, %sh_prom
  store i64 %shl, i64* @a, align 8
  ret void
}

define void @test7e(i64 %b, i32 %c){
; CHECK-LABEL: test7e:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sh_prom = zext i32 %c to i64
  %shl = shl i64 %b, %sh_prom
  store i64 %shl, i64* @a, align 8
  ret void
}

define void @test7f(i64 %b, i32 %c){
; CHECK-LABEL: test7f:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sh_prom = zext i32 %c to i64
  %shl = shl i64 %b, %sh_prom
  store i64 %shl, i64* @a, align 8
  ret void
}

