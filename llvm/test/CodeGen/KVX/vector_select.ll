; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s | FileCheck %s
target triple = "kvx-kalray-cos"

define void @test_v1_select(<1 x i8> * %m, <1 x i8> * %n){
; CHECK-LABEL: test_v1_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lbz $r2 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbs $r1 = 0[$r1]
; CHECK-NEXT:    compw.eq $r3 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compw.gt $r4 = $r1, -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r3 = $r3, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sb 0[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v1 = load <1 x i8>, <1 x i8>* %m, align 8
  %v2 = load <1 x i8>, <1 x i8>* %n, align 8
  %c1 = icmp eq <1 x i8> %v1, zeroinitializer
  %c2 = icmp sgt <1 x i8> %v2, <i8 -1>
  %c3 = and <1 x i1> %c1, %c2
  %v3 = select <1 x i1> %c3, <1 x i8> %v1, <1 x i8> %v2
  store <1 x i8> %v3, <1 x i8> * %m, align 8
  ret void
}

define void @test_v2_select(<2 x i8> * %m, <2 x i8> * %n){
; CHECK-LABEL: test_v2_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lhz $r2 = 0[$r0]
; CHECK-NEXT:    make $r3 = 0
; CHECK-NEXT:    make $r5 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz $r1 = 0[$r1]
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x20001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x20001
; CHECK-NEXT:    compnhq.eq $r3 = $r2, $r3
; CHECK-NEXT:    sxlbhq $r4 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gt $r4 = $r4, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r3 = $r3, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r3 = $r3, 0xff00ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r3 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r2, 0x401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sh 0[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v1 = load <2 x i8>, <2 x i8>* %m, align 8
  %v2 = load <2 x i8>, <2 x i8>* %n, align 8
  %c1 = icmp eq <2 x i8> %v1, zeroinitializer
  %c2 = icmp sgt <2 x i8> %v2, <i8 -1, i8 -1>
  %c3 = and <2 x i1> %c1, %c2
  %v3 = select <2 x i1> %c3, <2 x i8> %v1, <2 x i8> %v2
  store <2 x i8> %v3, <2 x i8> * %m, align 8
  ret void
}

define void @test_v3_select(<3 x i8> * %m, <3 x i8> * %n){
; CHECK-LABEL: test_v3_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lwz $r2 = 0[$r0]
; CHECK-NEXT:    make $r3 = 0
; CHECK-NEXT:    make $r4 = 0xffffffffffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r1 = 0[$r1]
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CHECK-NEXT:    compnhq.eq $r3 = $r2, $r3
; CHECK-NEXT:    sxlbhq $r5 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gt $r4 = $r5, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r3 = $r3, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r3 = $r3, 0xff00ff00ff00ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r3 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r2, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    extfz $r2 = $r1, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sb 2[$r0] = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sh 0[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v1 = load <3 x i8>, <3 x i8>* %m, align 8
  %v2 = load <3 x i8>, <3 x i8>* %n, align 8
  %c1 = icmp eq <3 x i8> %v1, zeroinitializer
  %c2 = icmp sgt <3 x i8> %v2, <i8 -1, i8 -1, i8 -1>
  %c3 = and <3 x i1> %c1, %c2
  %v3 = select <3 x i1> %c3, <3 x i8> %v1, <3 x i8> %v2
  store <3 x i8> %v3, <3 x i8> * %m, align 8
  ret void
}

define void @test_v4_select(<4 x i8> * %m, <4 x i8> * %n){
; CHECK-LABEL: test_v4_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lwz $r2 = 0[$r0]
; CHECK-NEXT:    make $r3 = 0
; CHECK-NEXT:    make $r5 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r1 = 0[$r1]
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CHECK-NEXT:    compnhq.eq $r3 = $r2, $r3
; CHECK-NEXT:    sxlbhq $r4 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gt $r4 = $r4, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r3 = $r3, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r3 = $r3, 0xff00ff00ff00ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r3 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r2, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r0] = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v1 = load <4 x i8>, <4 x i8>* %m, align 8
  %v2 = load <4 x i8>, <4 x i8>* %n, align 8
  %c1 = icmp eq <4 x i8> %v1, zeroinitializer
  %c2 = icmp sgt <4 x i8> %v2, <i8 -1, i8 -1, i8 -1, i8 -1>
  %c3 = and <4 x i1> %c1, %c2
  %v3 = select <4 x i1> %c3, <4 x i8> %v1, <4 x i8> %v2
  store <4 x i8> %v3, <4 x i8> * %m, align 8
  ret void
}

define void @test_v8_select(<8 x i8> * %m, <8 x i8> * %n){
; CHECK-LABEL: test_v8_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld $r1 = 0[$r1]
; CHECK-NEXT:    make $r4 = 0
; CHECK-NEXT:    make $r6 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r2 = 0[$r0]
; CHECK-NEXT:    sxmbhq $r5 = $r1
; CHECK-NEXT:    sxlbhq $r7 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x8000400020001
; CHECK-NEXT:    sbmm8 $r3 = $r2, 0x80004000200010
; CHECK-NEXT:    compnhq.gt $r5 = $r5, $r6
; CHECK-NEXT:    compnhq.gt $r6 = $r7, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.eq $r4 = $r2, $r4
; CHECK-NEXT:    compnhq.eq $r8 = $r3, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CHECK-NEXT:    andd $r4 = $r4, $r6
; CHECK-NEXT:    andd $r5 = $r8, $r5
; CHECK-NEXT:    sbmm8 $r6 = $r1, 0x80004000200010
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r4 = $r4, 0xff00ff00ff00ff
; CHECK-NEXT:    andd $r5 = $r5, 0xff00ff00ff00ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r4 ? $r2 = $r1
; CHECK-NEXT:    cmovehq.even $r5 ? $r3 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r3, 0x40100401
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r0] = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v1 = load <8 x i8>, <8 x i8>* %m, align 8
  %v2 = load <8 x i8>, <8 x i8>* %n, align 8
  %c1 = icmp eq <8 x i8> %v1, zeroinitializer
  %c2 = icmp sgt <8 x i8> %v2, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %c3 = and <8 x i1> %c1, %c2
  %v3 = select <8 x i1> %c3, <8 x i8> %v1, <8 x i8> %v2
  store <8 x i8> %v3, <8 x i8> * %m, align 8
  ret void
}

define void @test_v16_select(<16 x i8> * %m, <16 x i8> * %n){
; CHECK-LABEL: test_v16_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lq $r4r5 = 0[$r1]
; CHECK-NEXT:    make $r6 = 0
; CHECK-NEXT:    make $r7 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r2r3 = 0[$r0]
; CHECK-NEXT:    sxlbhq $r8 = $r5
; CHECK-NEXT:    sxmbhq $r9 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r3, 0x8000400020001
; CHECK-NEXT:    sbmm8 $r3 = $r3, 0x80004000200010
; CHECK-NEXT:    compnhq.gt $r8 = $r8, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x80004000200010
; CHECK-NEXT:    compnhq.gt $r9 = $r9, $r7
; CHECK-NEXT:    compnhq.eq $r10 = $r1, $r6
; CHECK-NEXT:    sbmm8 $r15 = $r2, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r8 = $r10, $r8
; CHECK-NEXT:    compnhq.eq $r11 = $r3, $r6
; CHECK-NEXT:    sxlbhq $r16 = $r4
; CHECK-NEXT:    sxmbhq $r17 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.eq $r6 = $r2, $r6
; CHECK-NEXT:    andd $r9 = $r11, $r9
; CHECK-NEXT:    compnhq.eq $r10 = $r15, $r6
; CHECK-NEXT:    compnhq.gt $r11 = $r16, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r5 = $r5, 0x8000400020001
; CHECK-NEXT:    compnhq.gt $r7 = $r17, $r7
; CHECK-NEXT:    sbmm8 $r16 = $r5, 0x80004000200010
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r6 = $r6, $r7
; CHECK-NEXT:    andd $r7 = $r10, $r11
; CHECK-NEXT:    andd $r8 = $r8, 0xff00ff00ff00ff
; CHECK-NEXT:    andd $r9 = $r9, 0xff00ff00ff00ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r8 ? $r1 = $r5
; CHECK-NEXT:    cmovehq.even $r9 ? $r3 = $r16
; CHECK-NEXT:    andd $r5 = $r6, 0xff00ff00ff00ff
; CHECK-NEXT:    andd $r6 = $r7, 0xff00ff00ff00ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r4, 0x80004000200010
; CHECK-NEXT:    sbmm8 $r7 = $r1, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r5 ? $r2 = $r1
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r3 = $r3, 0x40100401
; CHECK-NEXT:    cmovehq.even $r6 ? $r15 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r2, 0x40100401
; CHECK-NEXT:    sbmm8 $r6 = $r15, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r6 = $r1, 63, 32
; CHECK-NEXT:    insf $r7 = $r3, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r0] = $r6r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v1 = load <16 x i8>, <16 x i8>* %m, align 16
  %v2 = load <16 x i8>, <16 x i8>* %n, align 16
  %c1 = icmp eq <16 x i8> %v1, zeroinitializer
  %c2 = icmp sgt <16 x i8> %v2, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %c3 = and <16 x i1> %c1, %c2
  %v3 = select <16 x i1> %c3, <16 x i8> %v1, <16 x i8> %v2
  store <16 x i8> %v3, <16 x i8> * %m, align 16
  ret void
}

define void @test_v32_select(<32 x i8> * %m, <32 x i8> * %n){
; CHECK-LABEL: test_v32_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lo $r4r5r6r7 = 0[$r1]
; CHECK-NEXT:    make $r33 = 0
; CHECK-NEXT:    make $r34 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r8r9r10r11 = 0[$r0]
; CHECK-NEXT:    sxlbhq $r35 = $r5
; CHECK-NEXT:    sxmbhq $r36 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r9 = $r9, 0x80004000200010
; CHECK-NEXT:    sbmm8 $r15 = $r9, 0x8000400020001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r11, 0x8000400020001
; CHECK-NEXT:    compnhq.gt $r35 = $r35, $r34
; CHECK-NEXT:    compnhq.gt $r36 = $r36, $r34
; CHECK-NEXT:    sxlbhq $r38 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r11, 0x80004000200010
; CHECK-NEXT:    sbmm8 $r11 = $r8, 0x8000400020001
; CHECK-NEXT:    compnhq.eq $r39 = $r15, $r33
; CHECK-NEXT:    compnhq.eq $r40 = $r9, $r33
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r8 = $r8, 0x80004000200010
; CHECK-NEXT:    andd $r36 = $r40, $r36
; CHECK-NEXT:    compnhq.gt $r38 = $r38, $r34
; CHECK-NEXT:    sxmbhq $r41 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r3 = $r10, 0x8000400020001
; CHECK-NEXT:    sxlbhq $r32 = $r6
; CHECK-NEXT:    andd $r35 = $r39, $r35
; CHECK-NEXT:    compnhq.eq $r39 = $r11, $r33
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r36 = $r36, 0xff00ff00ff00ff
; CHECK-NEXT:    compnhq.eq $r40 = $r8, $r33
; CHECK-NEXT:    compnhq.gt $r41 = $r41, $r34
; CHECK-NEXT:    sbmm8 $r42 = $r5, 0x80004000200010
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r5 = $r5, 0x8000400020001
; CHECK-NEXT:    andd $r35 = $r35, 0xff00ff00ff00ff
; CHECK-NEXT:    andd $r38 = $r39, $r38
; CHECK-NEXT:    andd $r40 = $r40, $r41
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r36 ? $r9 = $r42
; CHECK-NEXT:    sxlbhq $r16 = $r7
; CHECK-NEXT:    compnhq.gt $r32 = $r32, $r34
; CHECK-NEXT:    compnhq.eq $r41 = $r3, $r33
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r35 ? $r15 = $r5
; CHECK-NEXT:    andd $r36 = $r38, 0xff00ff00ff00ff
; CHECK-NEXT:    sxmbhq $r37 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r10 = $r10, 0x80004000200010
; CHECK-NEXT:    compnhq.gt $r16 = $r16, $r34
; CHECK-NEXT:    sxmbhq $r17 = $r7
; CHECK-NEXT:    andd $r32 = $r41, $r32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r35 = $r40, 0xff00ff00ff00ff
; CHECK-NEXT:    compnhq.gt $r37 = $r37, $r34
; CHECK-NEXT:    sbmm8 $r43 = $r4, 0x80004000200010
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r4 = $r4, 0x8000400020001
; CHECK-NEXT:    compnhq.eq $r15 = $r2, $r33
; CHECK-NEXT:    compnhq.eq $r39 = $r10, $r33
; CHECK-NEXT:    sbmm8 $r41 = $r15, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gt $r4 = $r17, $r34
; CHECK-NEXT:    cmovehq.even $r36 ? $r11 = $r4
; CHECK-NEXT:    andd $r32 = $r32, 0xff00ff00ff00ff
; CHECK-NEXT:    sbmm8 $r44 = $r6, 0x80004000200010
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r5 = $r6, 0x8000400020001
; CHECK-NEXT:    compnhq.eq $r6 = $r1, $r33
; CHECK-NEXT:    cmovehq.even $r35 ? $r8 = $r43
; CHECK-NEXT:    andd $r37 = $r39, $r37
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r32 ? $r3 = $r5
; CHECK-NEXT:    andd $r4 = $r15, $r4
; CHECK-NEXT:    andd $r6 = $r6, $r16
; CHECK-NEXT:    sbmm8 $r9 = $r9, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r8 = $r8, 0x40100401
; CHECK-NEXT:    andd $r17 = $r37, 0xff00ff00ff00ff
; CHECK-NEXT:    sbmm8 $r40 = $r11, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r3 = $r7, 0x80004000200010
; CHECK-NEXT:    andd $r4 = $r4, 0xff00ff00ff00ff
; CHECK-NEXT:    sbmm8 $r42 = $r3, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r5 = $r6, 0xff00ff00ff00ff
; CHECK-NEXT:    sbmm8 $r7 = $r7, 0x8000400020001
; CHECK-NEXT:    cmovehq.even $r17 ? $r10 = $r44
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r4 ? $r2 = $r3
; CHECK-NEXT:    insf $r41 = $r9, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r5 ? $r1 = $r7
; CHECK-NEXT:    sbmm8 $r6 = $r10, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; CHECK-NEXT:    insf $r40 = $r8, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r42 = $r6, 63, 32
; CHECK-NEXT:    sbmm8 $r43 = $r1, 0x40100401
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r43 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 0[$r0] = $r40r41r42r43
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v1 = load <32 x i8>, <32 x i8>* %m, align 32
  %v2 = load <32 x i8>, <32 x i8>* %n, align 32
  %c1 = icmp eq <32 x i8> %v1, zeroinitializer
  %c2 = icmp sgt <32 x i8> %v2, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %c3 = and <32 x i1> %c1, %c2
  %v3 = select <32 x i1> %c3, <32 x i8> %v1, <32 x i8> %v2
  store <32 x i8> %v3, <32 x i8> * %m, align 32
  ret void
}
