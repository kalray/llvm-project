; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=CV1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=CV2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <2 x i8> @sri_v2i8(<2 x i8> %a){
; CV1-LABEL: sri_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, 3
; CV1-NEXT:    sraw $r1 = $r1, 3
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sri_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srabos $r0 = $r0, 3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shr = ashr <2 x i8> %a, <i8 3, i8 3>
  ret <2 x i8> %shr
}

define <2 x i8> @not_sri_v2i8(<2 x i8> %a){
; CV1-LABEL: not_sri_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, 2
; CV1-NEXT:    sraw $r1 = $r1, 3
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: not_sri_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srabos $r0 = $r0, 3
; CV2-NEXT:    srabos $r1 = $r0, 2
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r0 = $r1, 7, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shr = ashr <2 x i8> %a, <i8 2, i8 3>
  ret <2 x i8> %shr
}

define <2 x i8> @uri_v2i8(<2 x i8> %a){
; CV1-LABEL: uri_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    andw $r0 = $r0, 248
; CV1-NEXT:    andw $r1 = $r1, 248
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 3
; CV1-NEXT:    srlw $r1 = $r1, 3
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: uri_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r0 = $r0, 3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shr = lshr <2 x i8> %a, <i8 3, i8 3>
  ret <2 x i8> %shr
}

define <2 x i8> @not_uri_v2i8(<2 x i8> %a){
; CV1-LABEL: not_uri_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    andw $r0 = $r0, 252
; CV1-NEXT:    andw $r1 = $r1, 248
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 2
; CV1-NEXT:    srlw $r1 = $r1, 3
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: not_uri_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r0 = $r0, 3
; CV2-NEXT:    srlbos $r1 = $r0, 2
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r0 = $r1, 7, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shr = lshr <2 x i8> %a, <i8 2, i8 3>
  ret <2 x i8> %shr
}

define <2 x i8> @sli_v2i8(<2 x i8> %a){
; CV1-LABEL: sli_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 3
; CV1-NEXT:    sllw $r1 = $r1, 3
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sli_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, 3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shl = shl <2 x i8> %a, <i8 3, i8 3>
  ret <2 x i8> %shl
}

define <2 x i8> @not_sli_v2i8(<2 x i8> %a){
; CV1-LABEL: not_sli_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 1
; CV1-NEXT:    sllw $r1 = $r1, 3
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: not_sli_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, 3
; CV2-NEXT:    sllbos $r1 = $r0, 1
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r0 = $r1, 7, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shl = shl <2 x i8> %a, <i8 1, i8 3>
  ret <2 x i8> %shl
}


define <2 x i8> @srr_v2i8(<2 x i8> %a, i8 %c){
; CV1-LABEL: srr_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r2 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r2 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, $r1
; CV1-NEXT:    sraw $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: srr_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srabos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = insertelement <2 x i8> undef, i8 %c, i32 0
  %sh_prom = shufflevector <2 x i8> %0, <2 x i8> undef, <2 x i32> zeroinitializer
  %shr = ashr <2 x i8> %a, %sh_prom
  ret <2 x i8> %shr
}

define <2 x i8> @not_srr_v2i8(<2 x i8> %a, <2 x i8> %b){
; CV1-LABEL: not_srr_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r2 = $r1, 15, 8
; CV1-NEXT:    extfz $r3 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r3 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, $r1
; CV1-NEXT:    sraw $r2 = $r3, $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: not_srr_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srabos $r1 = $r0, $r1
; CV2-NEXT:    extfz $r2 = $r1, 10, 8
; CV2-NEXT:    ;;
; CV2-NEXT:    srabos $r0 = $r0, $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r0 = $r1, 7, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shr = ashr <2 x i8> %a, %b
  ret <2 x i8> %shr
}

define <2 x i8> @urr_v2i8(<2 x i8> %a, i8 %c){
; CV1-LABEL: urr_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r2 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    zxbd $r2 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, $r1
; CV1-NEXT:    srlw $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: urr_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = insertelement <2 x i8> undef, i8 %c, i32 0
  %sh_prom = shufflevector <2 x i8> %0, <2 x i8> undef, <2 x i32> zeroinitializer
  %shr = lshr <2 x i8> %a, %sh_prom
  ret <2 x i8> %shr
}

define <2 x i8> @not_urr_v2i8(<2 x i8> %a, <2 x i8> %b){
; CV1-LABEL: not_urr_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r2 = $r0, 15, 8
; CV1-NEXT:    extfz $r3 = $r1, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    zxbd $r2 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, $r1
; CV1-NEXT:    srlw $r2 = $r2, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: not_urr_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r1 = $r0, $r1
; CV2-NEXT:    extfz $r2 = $r1, 10, 8
; CV2-NEXT:    ;;
; CV2-NEXT:    srlbos $r0 = $r0, $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r0 = $r1, 7, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shr = lshr <2 x i8> %a, %b
  ret <2 x i8> %shr
}

define <2 x i8> @slr_v2i8(<2 x i8> %a, i8 %c){
; CV1-LABEL: slr_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r2 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, $r1
; CV1-NEXT:    sllw $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: slr_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = insertelement <2 x i8> undef, i8 %c, i32 0
  %sh_prom = shufflevector <2 x i8> %0, <2 x i8> undef, <2 x i32> zeroinitializer
  %shl = shl <2 x i8> %a, %sh_prom
  ret <2 x i8> %shl
}

define <2 x i8> @not_slr_v2i8(<2 x i8> %a, <2 x i8> %b){
; CV1-LABEL: not_slr_v2i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r2 = $r0, 15, 8
; CV1-NEXT:    extfz $r3 = $r1, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, $r1
; CV1-NEXT:    sllw $r2 = $r2, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: not_slr_v2i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r1 = $r0, $r1
; CV2-NEXT:    extfz $r2 = $r1, 10, 8
; CV2-NEXT:    ;;
; CV2-NEXT:    sllbos $r0 = $r0, $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r0 = $r1, 7, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %shl = shl <2 x i8> %a, %b
  ret <2 x i8> %shl
}

