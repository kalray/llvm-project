; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=kvx-kalray-cos | FileCheck %s

define i16 @ctpopi16(i16 %a) {
; CHECK-LABEL: ctpopi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cbsw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i16 @llvm.ctpop.i16(i16 %a)
  ret i16 %res
}

define i32 @cbsw(i32 %a) {
; CHECK-LABEL: cbsw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i32 @llvm.ctpop.i32(i32 %a)
  ret i32 %res
}

define i64 @cbsd(i64 %a) {
; CHECK-LABEL: cbsd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i64 @llvm.ctpop.i64(i64 %a)
  ret i64 %res
}

define <2 x i16> @ctpopv2i16(<2 x i16> %a) {
; CHECK-LABEL: ctpopv2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 65537
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r1 = $r0, $r1
; CHECK-NEXT:    make $r2 = 1431655765
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfhq $r0 = $r1, $r0
; CHECK-NEXT:    make $r1 = 858993459
; CHECK-NEXT:    make $r3 = 131074
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r2 = $r0, $r1
; CHECK-NEXT:    srlhqs $r0 = $r0, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = 262148
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addhq $r0 = $r2, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r1 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addhq $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = 252645135
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = 16843009
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulhq $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = 524296
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i16> @llvm.ctpop.v2i16(<2 x i16> %a)
  ret <2 x i16> %res
  ; FIXME: Can it be expanded using two cbsw insns?
}

define <2 x i32> @cbswp(<2 x i32> %a) {
; CHECK-LABEL: cbswp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i32> @llvm.ctpop.v2i32(<2 x i32> %a)
  ret <2 x i32> %res
}

define <2 x i64> @ctpopv2i64(<2 x i64> %a) {
; CHECK-LABEL: ctpopv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsd $r2 = $r0
; CHECK-NEXT:    cbsd $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i64> @llvm.ctpop.v2i64(<2 x i64> %a)
  ret <2 x i64> %res
}

declare i16 @llvm.ctpop.i16(i16)
declare i32 @llvm.ctpop.i32(i32)
declare i64 @llvm.ctpop.i64(i64)
declare <2 x i16> @llvm.ctpop.v2i16(<2 x i16>)
declare <2 x i32> @llvm.ctpop.v2i32(<2 x i32>)
declare <2 x i64> @llvm.ctpop.v2i64(<2 x i64>)
