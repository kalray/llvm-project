; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -stop-before=early-tailduplication -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

; CHECK: MAKEi43 0
; CHECK: MAKEi16 0

define <4 x float> @test_buildsplat_float16(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0x0, float 0x0, float 0x0, float 0x0>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

; This is float 0x1, the corresponding <2 x float> immediate vector will be
; 0x0000 0001 0000 0001 which fits in 43 bits
define <4 x float> @test_buildsplat_float43(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

; Only one check here, because SelectionDAG reuses the same node
; CHECK: MAKEi64 -9223372030412324863

; This is float 0x80000001, the corresponding <2 x float> immediate vector
; will be 0x8000 0001 8000 0001 which only fits in 64 bits
define <4 x float> @test_buildsplat_float64(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0xB6A0000000000000, float 0xB6A0000000000000, float 0xB6A0000000000000, float 0xB6A0000000000000>, %a
  ret <4 x float> %r
}

; The immediate vectors below are 0x0000 0001 0000 0001

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

define <4 x float> @test_buildsplat_float43undef1_1(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float undef, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

define <4 x float> @test_buildsplat_float43undef1_2(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0x36A0000000000000, float undef, float 0x36A0000000000000, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

define <4 x float> @test_buildsplat_float43undef1_3(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float undef, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

define <4 x float> @test_buildsplat_float43undef1_4(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float undef>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

define <4 x float> @test_buildsplat_float43undef2_1(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float undef, float undef>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

define <4 x float> @test_buildsplat_float43undef2_2(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float undef, float undef, float 0x36A0000000000000, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

define <4 x float> @test_buildsplat_float43undef2_3(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0x36A0000000000000, float undef, float undef, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

define <4 x float> @test_buildsplat_float43undef2_4(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float undef, float 0x36A0000000000000, float 0x36A0000000000000, float undef>, %a
  ret <4 x float> %r
}

; This vector is 0x0000 0001 0000 0000 ; we chose undef to be 0 here (it
; could have been any value)

; CHECK: MAKEi64 4294967296
; CHECK: MAKEi43 4294967296

define <4 x float> @test_buildsplat_float43undef2_5(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float undef, float 0x36A0000000000000, float undef, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi43 1
; CHECK: MAKEi16 1

define <4 x float> @test_buildsplat_float43undef2_6(<4 x float> %a) #0 {
  %r = fmul <4 x float> <float 0x36A0000000000000, float undef, float 0x36A0000000000000, float undef>, %a
  ret <4 x float> %r
}

; Just checking that it also works with integers, for good measure

; CHECK: MAKEi43 2
; CHECK: MAKEi16 2

define <4 x i32> @test_buildsplat_int43undef2_6(<4 x i32> %a) #0 {
  %r = mul <4 x i32> <i32 2, i32 undef, i32 2, i32 undef>, %a
  ret <4 x i32> %r
}
