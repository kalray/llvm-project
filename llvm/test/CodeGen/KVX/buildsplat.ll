; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -stop-before=early-tailduplication -O2 -o - %s | FileCheck %s
; RUN: llc -O2 -o - %s | FileCheck %s --check-prefix=ALL
target triple = "kvx-kalray-cos"

; CHECK: MAKEi43 0
; CHECK: MAKEi16 0

define <4 x float> @test_buildsplat_float16(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float16:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r3 = 0
; ALL-NEXT:    make $r2 = 0
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0x0, float 0x0, float 0x0, float 0x0>, %a
  ret <4 x float> %r
}

; CHECK: MAKEi64 4294967297
; CHECK: MAKEi43 4294967297

; This is float 0x1, the corresponding <2 x float> immediate vector will be
; 0x0000 0001 0000 0001 which fits in 43 bits
define <4 x float> @test_buildsplat_float43(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r3 = 0x100000001
; ALL-NEXT:    make $r2 = 0x100000001
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

; Only one check here, because SelectionDAG reuses the same node
; CHECK: MAKEi64 -9223372030412324863

; This is float 0x80000001, the corresponding <2 x float> immediate vector
; will be 0x8000 0001 8000 0001 which only fits in 64 bits
define <4 x float> @test_buildsplat_float64(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float64:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 0x8000000180000001
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0xB6A0000000000000, float 0xB6A0000000000000, float 0xB6A0000000000000, float 0xB6A0000000000000>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 0> ; this is <b, b, b, b>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

; The immediate vectors below are 0x0000 0001 0000 0001

define <4 x float> @test_buildsplat_float43undef1_1(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef1_1:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 0x100000000
; ALL-NEXT:    make $r3 = 0x100000001
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float undef, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant1_1(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant1_1:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 4, i32 0, i32 0, i32 0> ; this is <u, b, b, b>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef1_2(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef1_2:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 1
; ALL-NEXT:    make $r3 = 0x100000001
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0x36A0000000000000, float undef, float 0x36A0000000000000, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant1_2(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant1_2:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 0, i32 4, i32 0, i32 0> ; this is <b, u, b, b>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef1_3(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef1_3:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 0x100000001
; ALL-NEXT:    make $r3 = 0x100000000
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float undef, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant1_3(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant1_3:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 4, i32 0> ; this is <b, b, u, b>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef1_4(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef1_4:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 0x100000001
; ALL-NEXT:    make $r3 = 1
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float undef>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant1_4(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant1_4:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 4> ; this is <b, b, b, u>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef2_1(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef2_1:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 0x100000001
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float undef, float undef>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant2_1(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant2_1:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 4, i32 4> ; this is <b, b, u, u>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef2_2(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef2_2:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r3 = 0x100000001
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float undef, float undef, float 0x36A0000000000000, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant2_2(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant2_2:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 4, i32 4, i32 0, i32 0> ; this is <u, u, b, b>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef2_3(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef2_3:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 1
; ALL-NEXT:    make $r3 = 0x100000000
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0x36A0000000000000, float undef, float undef, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant2_3(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant2_3:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 0, i32 4, i32 4, i32 0> ; this is <b, u, u, b>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef2_4(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef2_4:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 0x100000000
; ALL-NEXT:    make $r3 = 1
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float undef, float 0x36A0000000000000, float 0x36A0000000000000, float undef>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant2_4(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant2_4:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 4, i32 0, i32 0, i32 4> ; this is <u, b, b, u>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef2_5(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef2_5:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r3 = 0x100000000
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r2 = $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float undef, float 0x36A0000000000000, float undef, float 0x36A0000000000000>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant2_5(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant2_5:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 4, i32 0, i32 4, i32 0> ; this is <u, b, u, b>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x float> @test_buildsplat_float43undef2_6(<4 x float> %a) #0 {
; ALL-LABEL: test_buildsplat_float43undef2_6:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r3 = 1
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r2 = $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = fmul <4 x float> <float 0x36A0000000000000, float undef, float 0x36A0000000000000, float undef>, %a
  ret <4 x float> %r
}

define <4 x i32> @test_buildsplat_nonconstant2_6(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant2_6:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r2, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 0, i32 4, i32 0, i32 4> ; this is <b, u, b, u>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

define <4 x i32> @test_buildsplat_nonconstant3(<4 x i32> %a, i32 %b) #0 {
; ALL-LABEL: test_buildsplat_nonconstant3:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r2 = $r0, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r2r3, $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v1 = insertelement <4 x i32> undef, i32 %b, i32 0
  %v2 = shufflevector <4 x i32> %v1, <4 x i32> undef, <4 x i32> <i32 0, i32 4, i32 4, i32 4> ; this is <b, u, u, u>
  %r = mul <4 x i32> %v2, %a
  ret <4 x i32> %r
}

; Just checking that it also works with integers, for good measure

define <4 x i32> @test_buildsplat_int43undef2_6(<4 x i32> %a) #0 {
; ALL-LABEL: test_buildsplat_int43undef2_6:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r3 = 2
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r2 = $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    mulwq $r0r1 = $r0r1, $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = mul <4 x i32> <i32 2, i32 undef, i32 2, i32 undef>, %a
  ret <4 x i32> %r
}
