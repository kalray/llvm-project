; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define <4 x half> @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x4400420040003c00
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  ret <4 x half> <half 1.0, half 2.0, half 3.0, half 4.0>
}

define half @test_extract_0(<4 x half> %a) #0 {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x half> %a, i32 0
  ret half %e
}

define half @test_extract_1(<4 x half> %a) #0 {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r0 = $r0, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x half> %a, i32 1
  ret half %e
}

define half @test_extract_2(<4 x half> %a) #0 {
; CHECK-LABEL: test_extract_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x half> %a, i32 2
  ret half %e
}

define half @test_extract_3(<4 x half> %a) #0 {
; CHECK-LABEL: test_extract_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r0 = $r0, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x half> %a, i32 3
  ret half %e
}

define half @test_extract_i(<4 x half> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllw $r1 = $r1, 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x half> %a, i64 %idx
  ret half %e
}

define <4 x half> @test_fadd(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <4 x half> %a, %b
  ret <4 x half> %r
}

; TODO: This could use the RI variant
define <4 x half> @test_fadd_imm_0(<4 x half> %a) #0 {
; CHECK-LABEL: test_fadd_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x4400420040003c00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <4 x half> <half 1.0, half 2.0, half 3.0, half 4.0>, %a
  ret <4 x half> %r
}

define <4 x half> @test_fadd_imm_1(<4 x half> %a) #0 {
; CHECK-LABEL: test_fadd_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x4400420040003c00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <4 x half> %a, <half 1.0, half 2.0, half 3.0, half 4.0>
  ret <4 x half> %r
}

define <4 x half> @test_fadd_imm_2(<4 x half> %a) #0 {
; CHECK-LABEL: test_fadd_imm_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x40003c0040003c00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <4 x half> %a, <half 1.0, half 2.0, half 1.0, half 2.0>
  ret <4 x half> %r
}

define <4 x half> @test_fadd_imm_3(<4 x half> %a) #0 {
; CHECK-LABEL: test_fadd_imm_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x40003c00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fadd <4 x half> %a, <half 1.0, half 2.0, half 0.0, half 0.0>
  ret <4 x half> %r
}

define <4 x half> @test_fsub(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <4 x half> %a, %b
  ret <4 x half> %r
}

define <4 x half> @test_fsub_imm_1(<4 x half> %a) #0 {
; CHECK-LABEL: test_fsub_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0xc400c200c000bc00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <4 x half> %a, <half 1.0, half 2.0, half 3.0, half 4.0>
  ret <4 x half> %r
}

define <4 x half> @test_fsub_imm_2(<4 x half> %a) #0 {
; CHECK-LABEL: test_fsub_imm_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x80008000c000bc00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <4 x half> %a, <half 1.0, half 2.0, half 0.0, half 0.0>
  ret <4 x half> %r
}

define <4 x half> @test_fsub_imm_3(<4 x half> %a) #0 {
; CHECK-LABEL: test_fsub_imm_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0xc000bc00c000bc00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <4 x half> %a, <half 1.0, half 2.0, half 1.0, half 2.0>
  ret <4 x half> %r
}

; TODO: Could use ri variant
define <4 x half> @test_fsub_fromimm1(<4 x half> %a) #0 {
; CHECK-LABEL: test_fsub_fromimm1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x4400420040003c00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <4 x half> <half 1.0, half 2.0, half 3.0, half 4.0>, %a
  ret <4 x half> %r
}

define <4 x half> @test_fsub_fromimm2(<4 x half> %a) #0 {
; CHECK-LABEL: test_fsub_fromimm2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x40003c00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <4 x half> <half 1.0, half 2.0, half 0.0, half 0.0>, %a
  ret <4 x half> %r
}

define <4 x half> @test_fsub_fromimm3(<4 x half> %a) #0 {
; CHECK-LABEL: test_fsub_fromimm3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x40003c0040003c00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <4 x half> <half 1.0, half 2.0, half 1.0, half 2.0>, %a
  ret <4 x half> %r
}

define <4 x half> @test_fneg(<4 x half> %a) #0 {
; CHECK-LABEL: test_fneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fneghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fsub <4 x half> <half 0.0, half 0.0, half 0.0, half 0.0>, %a
  ret <4 x half> %r
}

define <4 x half> @test_fmul(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fmul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmulhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fmul <4 x half> %a, %b
  ret <4 x half> %r
}

define <4 x half> @test_fdiv(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fdiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 48[$r12] = $r24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 16[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    srld $r3 = $r1, 48
; CHECK-NEXT:    srld $r2 = $r1, 32
; CHECK-NEXT:    srlw $r4 = $r1, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r5 = $r0, 48
; CHECK-NEXT:    fwidenlhw $r18 = $r3
; CHECK-NEXT:    srld $r3 = $r0, 32
; CHECK-NEXT:    fwidenlhw $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r6 = $r0, 16
; CHECK-NEXT:    fwidenlhw $r3 = $r3
; CHECK-NEXT:    fwidenlhw $r22 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r23 = $r1
; CHECK-NEXT:    copyd $r0 = $r3
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    fwidenlhw $r19 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r20 = $r5
; CHECK-NEXT:    fwidenlhw $r21 = $r6
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r24 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r22
; CHECK-NEXT:    copyd $r1 = $r23
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r21
; CHECK-NEXT:    copyd $r1 = $r19
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r24
; CHECK-NEXT:    fnarrowwh $r3 = $r18
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r1 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 31, 16
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r24 = 48[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fdiv <4 x half> %a, %b
  ret <4 x half> %r
}

define <4 x half> @test_frem(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_frem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 48[$r12] = $r24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 16[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    srld $r3 = $r1, 48
; CHECK-NEXT:    srld $r2 = $r1, 32
; CHECK-NEXT:    srlw $r4 = $r1, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r5 = $r0, 48
; CHECK-NEXT:    fwidenlhw $r18 = $r3
; CHECK-NEXT:    srld $r3 = $r0, 32
; CHECK-NEXT:    fwidenlhw $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r6 = $r0, 16
; CHECK-NEXT:    fwidenlhw $r3 = $r3
; CHECK-NEXT:    fwidenlhw $r22 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r23 = $r1
; CHECK-NEXT:    copyd $r0 = $r3
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    fwidenlhw $r19 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r20 = $r5
; CHECK-NEXT:    fwidenlhw $r21 = $r6
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r24 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r22
; CHECK-NEXT:    copyd $r1 = $r23
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r21
; CHECK-NEXT:    copyd $r1 = $r19
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r24
; CHECK-NEXT:    fnarrowwh $r3 = $r18
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r1 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 31, 16
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r24 = 48[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = frem <4 x half> %a, %b
  ret <4 x half> %r
}

define void @test_ldst_v4f16(<4 x half>* %a, <4 x half>* %b) {
; CHECK-LABEL: test_ldst_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %t1 = load <4 x half>, <4 x half>* %a
  store <4 x half> %t1, <4 x half>* %b, align 16
  ret void
}

declare <4 x half> @test_callee(<4 x half> %a, <4 x half> %b) #0

define <4 x half> @test_call(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @test_callee(<4 x half> %a, <4 x half> %b)
  ret <4 x half> %r
}

define <4 x half> @test_call_flipped(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @test_callee(<4 x half> %b, <4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_tailcall_flipped(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
  %r = tail call <4 x half> @test_callee(<4 x half> %b, <4 x half> %a)
  ret <4 x half> %r
}

; This could be selected to (cmovehq(sra(sll %c, 31), 31), %a, %b)
define <4 x half> @test_select(<4 x half> %a, <4 x half> %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyw $r3 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r3 ? $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andnd $r1 = $r2, $r1
; CHECK-NEXT:    andd $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = select i1 %c, <4 x half> %a, <4 x half> %b
  ret <4 x half> %r
}

define <4 x half> @test_select_cc(<4 x half> %a, <4 x half> %b, <4 x half> %c, <4 x half> %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r2 = $r2, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = fcmp une <4 x half> %c, %d
  %r = select <4 x i1> %cc, <4 x half> %a, <4 x half> %b
  ret <4 x half> %r
}

define <4 x float> @test_select_cc_f32_f16(<4 x float> %a, <4 x float> %b, <4 x half> %c, <4 x half> %d) #0 {
; CHECK-LABEL: test_select_cc_f32_f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r4 = $r4, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r6 = $r4
; CHECK-NEXT:    sxmhwp $r5 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovewp.even $r5 ? $r1 = $r3
; CHECK-NEXT:    cmovewp.even $r6 ? $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = fcmp une <4 x half> %c, %d
  %r = select <4 x i1> %cc, <4 x float> %a, <4 x float> %b
  ret <4 x float> %r
}

define <4 x half> @test_select_cc_f16_f32(<4 x half> %a, <4 x half> %b, <4 x float> %c, <4 x float> %d) #0 {
; CHECK-LABEL: test_select_cc_f16_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnwp.une $r2 = $r2, $r4
; CHECK-NEXT:    fcompnwp.une $r3 = $r3, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r4 = $r3, 32
; CHECK-NEXT:    srld $r5 = $r2, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 31, 16
; CHECK-NEXT:    insf $r2 = $r5, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = fcmp une <4 x float> %c, %d
  %r = select <4 x i1> %cc, <4 x half> %a, <4 x half> %b
  ret <4 x half> %r
}

define <4 x i1> @test_fcmp_une(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_une:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp une <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ueq(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ueq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ueq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ueq <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ugt(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ugt <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_uge(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp uge <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ult(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ult <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ule(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ule <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_uno(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_uno:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r2 = $r0, $r1
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp uno <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_one(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_one:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp one <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_oeq(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_oeq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp oeq <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ogt(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ogt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ogt <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_oge(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_oge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp oge <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_olt(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_olt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp olt <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ole(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ole:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ole <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_fcmp_ord(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ord:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r2 = $r0, $r1
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fcmp ord <4 x half> %a, %b
  ret <4 x i1> %r
}

define <4 x i16> @test_fptosi_i16(<4 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r1 = $r0
; CHECK-NEXT:    fwidenmhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedwp.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r2 = $r1, 47, 32
; CHECK-NEXT:    fixedwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r0, 47, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 63, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <4 x half> %a to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i32> @test_fptosi_i32(<4 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenmhwp $r1 = $r0
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedwp.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <4 x half> %a to <4 x i32>
  ret <4 x i32> %r
}

define <4 x i64> @test_fptosi_i64(<4 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenmhwp $r1 = $r0
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenmwd $r2 = $r1
; CHECK-NEXT:    fwidenlwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r3 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r2 = $r1, 0
; CHECK-NEXT:    fwidenmwd $r1 = $r0
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptosi <4 x half> %a to <4 x i64>
  ret <4 x i64> %r
}

define <4 x i16> @test_fptoui_4xi16(<4 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_4xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r1 = $r0
; CHECK-NEXT:    fwidenmhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixeduwp.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r2 = $r1, 47, 32
; CHECK-NEXT:    fixeduwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r0, 47, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 63, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <4 x half> %a to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i32> @test_fptoui_4xi32(<4 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_4xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenmhwp $r1 = $r0
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixeduwp.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixeduwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <4 x half> %a to <4 x i32>
  ret <4 x i32> %r
}

define <4 x i64> @test_fptoui_4xi64(<4 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_4xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenmhwp $r1 = $r0
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenmwd $r2 = $r1
; CHECK-NEXT:    fwidenlwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r3 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r2 = $r1, 0
; CHECK-NEXT:    fwidenmwd $r1 = $r0
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptoui <4 x half> %a to <4 x i64>
  ret <4 x i64> %r
}

define <4 x half> @test_uitofp_4xi16(<4 x i16> %a) #0 {
; CHECK-LABEL: test_uitofp_4xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    extfz $r2 = $r0, 47, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    zxhd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r3 = $r3
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    floatuw.rn $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatuw.rn $r2 = $r2, 0
; CHECK-NEXT:    fnarrowwh.rn $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatuw.rn $r3 = $r3, 0
; CHECK-NEXT:    fnarrowwh.rn $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 31, 16
; CHECK-NEXT:    floatuw.rn $r0 = $r0, 0
; CHECK-NEXT:    fnarrowwh.rn $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = uitofp <4 x i16> %a to <4 x half>
  ret <4 x half> %r
}

define <4 x half> @test_uitofp_4xi32(<4 x i32> %a) #0 {
; CHECK-LABEL: test_uitofp_4xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatuwp.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatuwp.rn $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = uitofp <4 x i32> %a to <4 x half>
  ret <4 x half> %r
}

; Could use vector fnarrow variants
define <4 x half> @test_uitofp_4xi64(<4 x i64> %a) #0 {
; CHECK-LABEL: test_uitofp_4xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatud.rn $r3 = $r3, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r0 = $r0, 0
; CHECK-NEXT:    fnarrowdw.rn $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r1 = $r1, 0
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    fnarrowwh.rn $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r2 = $r2, 0
; CHECK-NEXT:    fnarrowdw.rn $r1 = $r1
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw.rn $r2 = $r2
; CHECK-NEXT:    fnarrowwh.rn $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    fnarrowwh.rn $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = uitofp <4 x i64> %a to <4 x half>
  ret <4 x half> %r
}

define <4 x half> @test_sitofp_4xi32(<4 x i32> %a) #0 {
; CHECK-LABEL: test_sitofp_4xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatwp.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatwp.rn $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sitofp <4 x i32> %a to <4 x half>
  ret <4 x half> %r
}

define <4 x half> @test_sitofp_4xi64(<4 x i64> %a) #0 {
; CHECK-LABEL: test_sitofp_4xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatd.rn $r3 = $r3, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r0 = $r0, 0
; CHECK-NEXT:    fnarrowdw.rn $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r1 = $r1, 0
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    fnarrowwh.rn $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r2 = $r2, 0
; CHECK-NEXT:    fnarrowdw.rn $r1 = $r1
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw.rn $r2 = $r2
; CHECK-NEXT:    fnarrowwh.rn $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    fnarrowwh.rn $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sitofp <4 x i64> %a to <4 x half>
  ret <4 x half> %r
}

define <4 x half> @test_uitofp_4xi32_fadd(<4 x i32> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_uitofp_4xi32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatuwp.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatuwp.rn $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r2, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %c = uitofp <4 x i32> %a to <4 x half>
  %r = fadd <4 x half> %b, %c
  ret <4 x half> %r
}

define <4 x half> @test_sitofp_4xi32_fadd(<4 x i32> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_sitofp_4xi32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatwp.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatwp.rn $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r2, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %c = sitofp <4 x i32> %a to <4 x half>
  %r = fadd <4 x half> %b, %c
  ret <4 x half> %r
}

define <4 x half> @test_fptrunc_4xfloat(<4 x float> %a) #0 {
; CHECK-LABEL: test_fptrunc_4xfloat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnarrowwhq $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptrunc <4 x float> %a to <4 x half>
  ret <4 x half> %r
}

; Could use vector fnarrow variants
define <4 x half> @test_fptrunc_4xdouble(<4 x double> %a) #0 {
; CHECK-LABEL: test_fptrunc_4xdouble:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnarrowdw $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw $r1 = $r1
; CHECK-NEXT:    fnarrowwh $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw $r0 = $r0
; CHECK-NEXT:    fnarrowwh $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw $r2 = $r2
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    fnarrowwh $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fptrunc <4 x double> %a to <4 x half>
  ret <4 x half> %r
}

define <4 x float> @test_fpext_4xfloat(<4 x half> %a) #0 {
; CHECK-LABEL: test_fpext_4xfloat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenmhwp $r1 = $r0
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fpext <4 x half> %a to <4 x float>
  ret <4 x float> %r
}

define <4 x double> @test_fpext_4xdouble(<4 x half> %a) #0 {
; CHECK-LABEL: test_fpext_4xdouble:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r2 = $r2
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r4 = $r3
; CHECK-NEXT:    fwidenlwd $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    fwidenlwd $r1 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fpext <4 x half> %a to <4 x double>
  ret <4 x double> %r
}

define <4 x i16> @test_bitcast_4xhalf_to_4xi16(<4 x half> %a) #0 {
; CHECK-LABEL: test_bitcast_4xhalf_to_4xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = bitcast <4 x half> %a to <4 x i16>
  ret <4 x i16> %r
}

define <4 x half> @test_bitcast_4xi16_to_4xhalf(<4 x i16> %a) #0 {
; CHECK-LABEL: test_bitcast_4xi16_to_4xhalf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = bitcast <4 x i16> %a to <4 x half>
  ret <4 x half> %r
}

declare <4 x half> @llvm.sqrt.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.powi.v4f16(<4 x half> %a, i32 %b) #0
declare <4 x half> @llvm.sin.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.cos.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> %b) #0
declare <4 x half> @llvm.exp.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.exp2.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.log.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.log10.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.log2.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.fma.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c) #0
declare <4 x half> @llvm.fabs.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b) #0
declare <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> %b) #0
declare <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %b) #0
declare <4 x half> @llvm.floor.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.ceil.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.trunc.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.rint.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.nearbyint.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.round.v4f16(<4 x half> %a) #0
declare <4 x half> @llvm.fmuladd.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c) #0

define <4 x half> @test_sqrt(<4 x half> %a) #0 {
; CHECK-LABEL: test_sqrt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.sqrt.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_powi(<4 x half> %a, i32 %b) #0 {
; CHECK-LABEL: test_powi:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 48[$r12] = $r22
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 32[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 16[$r12] = $r18r19
; CHECK-NEXT:    srld $r2 = $r0, 48
; CHECK-NEXT:    srlw $r4 = $r0, 16
; CHECK-NEXT:    srld $r3 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r20 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r2 = $r4
; CHECK-NEXT:    copyd $r21 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    fwidenlhw $r19 = $r3
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r22 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r22
; CHECK-NEXT:    fnarrowwh $r1 = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r19
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r3 = $r0, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r3, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    lq $r18r19 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r20r21 = 32[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r22 = 48[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <4 x half> @llvm.powi.v4f16(<4 x half> %a, i32 %b)
 ret <4 x half> %r
}

define <4 x half> @test_sin(<4 x half> %a) #0 {
; CHECK-LABEL: test_sin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.sin.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_cos(<4 x half> %a) #0 {
; CHECK-LABEL: test_cos:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.cos.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_pow(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_pow:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 48[$r12] = $r24
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 16[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    srld $r3 = $r1, 48
; CHECK-NEXT:    srld $r2 = $r1, 32
; CHECK-NEXT:    srlw $r4 = $r1, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r5 = $r0, 48
; CHECK-NEXT:    fwidenlhw $r18 = $r3
; CHECK-NEXT:    srld $r3 = $r0, 32
; CHECK-NEXT:    fwidenlhw $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r6 = $r0, 16
; CHECK-NEXT:    fwidenlhw $r3 = $r3
; CHECK-NEXT:    fwidenlhw $r22 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r23 = $r1
; CHECK-NEXT:    copyd $r0 = $r3
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    fwidenlhw $r19 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r20 = $r5
; CHECK-NEXT:    fwidenlhw $r21 = $r6
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r24 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r22
; CHECK-NEXT:    copyd $r1 = $r23
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r21
; CHECK-NEXT:    copyd $r1 = $r19
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r24
; CHECK-NEXT:    fnarrowwh $r3 = $r18
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r1 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 31, 16
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r24 = 48[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <4 x half> @llvm.pow.v4f16(<4 x half> %a, <4 x half> %b)
 ret <4 x half> %r
}

define <4 x half> @test_exp(<4 x half> %a) #0 {
; CHECK-LABEL: test_exp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <4 x half> @llvm.exp.v4f16(<4 x half> %a)
 ret <4 x half> %r
}

define <4 x half> @test_exp2(<4 x half> %a) #0 {
; CHECK-LABEL: test_exp2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <4 x half> @llvm.exp2.v4f16(<4 x half> %a)
 ret <4 x half> %r
}

define <4 x half> @test_log(<4 x half> %a) #0 {
; CHECK-LABEL: test_log:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <4 x half> @llvm.log.v4f16(<4 x half> %a)
 ret <4 x half> %r
}

define <4 x half> @test_log10(<4 x half> %a) #0 {
; CHECK-LABEL: test_log10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <4 x half> @llvm.log10.v4f16(<4 x half> %a)
 ret <4 x half> %r
}

define <4 x half> @test_log2(<4 x half> %a) #0 {
; CHECK-LABEL: test_log2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <4 x half> @llvm.log2.v4f16(<4 x half> %a)
 ret <4 x half> %r
}

define <4 x half> @test_fma(<4 x half> %a, <4 x half> %b, <4 x half> %c) #0 {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ffmahq $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.fma.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)
  ret <4 x half> %r
}

define <4 x half> @test_fabs(<4 x half> %a) #0 {
; CHECK-LABEL: test_fabs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.fabs.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_minnum(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_minnum:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -96
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 88[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 72[$r12] = $r24r25
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 40[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    fwidenlhwp $r2 = $r1
; CHECK-NEXT:    fwidenlhwp $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenmhwp $r23 = $r0
; CHECK-NEXT:    fwidenmhwp $r19 = $r1
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r20 = $r2, 32
; CHECK-NEXT:    srad $r21 = $r19, 32
; CHECK-NEXT:    call fminf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r24 = $r0
; CHECK-NEXT:    copyd $r0 = $r23
; CHECK-NEXT:    copyd $r1 = $r19
; CHECK-NEXT:    srad $r18 = $r18, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r22 = $r23, 32
; CHECK-NEXT:    call fminf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r25 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    copyd $r1 = $r20
; CHECK-NEXT:    call fminf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r22
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    call fminf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r24 = $r18, 63, 32
; CHECK-NEXT:    insf $r25 = $r0, 63, 32
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 40[$r12]
; CHECK-NEXT:    fnarrowwhq $r0 = $r24r25
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r24r25 = 72[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 88[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 96
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b)
  ret <4 x half> %r
}

define <4 x half> @test_minnum_fast(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_minnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fminhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call fast <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b)
  ret <4 x half> %r
}

define <4 x half> @test_maxnum(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_maxnum:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -96
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 88[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 72[$r12] = $r24r25
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 40[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    fwidenlhwp $r2 = $r1
; CHECK-NEXT:    fwidenlhwp $r18 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenmhwp $r23 = $r0
; CHECK-NEXT:    fwidenmhwp $r19 = $r1
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r20 = $r2, 32
; CHECK-NEXT:    srad $r21 = $r19, 32
; CHECK-NEXT:    call fmaxf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r24 = $r0
; CHECK-NEXT:    copyd $r0 = $r23
; CHECK-NEXT:    copyd $r1 = $r19
; CHECK-NEXT:    srad $r18 = $r18, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r22 = $r23, 32
; CHECK-NEXT:    call fmaxf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r25 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    copyd $r1 = $r20
; CHECK-NEXT:    call fmaxf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r22
; CHECK-NEXT:    copyd $r1 = $r21
; CHECK-NEXT:    call fmaxf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r24 = $r18, 63, 32
; CHECK-NEXT:    insf $r25 = $r0, 63, 32
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 40[$r12]
; CHECK-NEXT:    fnarrowwhq $r0 = $r24r25
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r24r25 = 72[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 88[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 96
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> %b)
  ret <4 x half> %r
}

define <4 x half> @test_maxnum_fast(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_maxnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmaxhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call fast <4 x half> @llvm.maxnum.v4f16(<4 x half> %a, <4 x half> %b)
  ret <4 x half> %r
}

define <4 x half> @test_copysign(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_copysign:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r1, 32
; CHECK-NEXT:    srld $r3 = $r1, 48
; CHECK-NEXT:    srlw $r4 = $r1, 16
; CHECK-NEXT:    srld $r5 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r2 = $r2, 15
; CHECK-NEXT:    srld $r6 = $r0, 48
; CHECK-NEXT:    sraw $r3 = $r3, 15
; CHECK-NEXT:    sraw $r4 = $r4, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r2, 15, 15
; CHECK-NEXT:    srlw $r2 = $r0, 16
; CHECK-NEXT:    sraw $r1 = $r1, 15
; CHECK-NEXT:    insf $r6 = $r3, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r4, 15, 15
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r6, 31, 16
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r5, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %b)
  ret <4 x half> %r
}

define <4 x half> @test_copysign_f32(<4 x half> %a, <4 x float> %b) #0 {
; CHECK-LABEL: test_copysign_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r3 = $r2, 32
; CHECK-NEXT:    srad $r4 = $r1, 32
; CHECK-NEXT:    srld $r5 = $r0, 32
; CHECK-NEXT:    sraw $r2 = $r2, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r6 = $r0, 16
; CHECK-NEXT:    sraw $r4 = $r4, 31
; CHECK-NEXT:    sraw $r3 = $r3, 31
; CHECK-NEXT:    srld $r7 = $r0, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r1 = $r1, 31
; CHECK-NEXT:    insf $r6 = $r4, 15, 15
; CHECK-NEXT:    insf $r7 = $r3, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r2, 15, 15
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r7, 31, 16
; CHECK-NEXT:    insf $r0 = $r6, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r5, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %tb = fptrunc <4 x float> %b to <4 x half>
  %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %tb)
  ret <4 x half> %r
}

define <4 x half> @test_copysign_f64(<4 x half> %a, <4 x double> %b) #0 {
; CHECK-LABEL: test_copysign_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r5 = $r0, 32
; CHECK-NEXT:    srad $r3 = $r3, 63
; CHECK-NEXT:    srad $r2 = $r2, 63
; CHECK-NEXT:    srlw $r6 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r7 = $r0, 48
; CHECK-NEXT:    srad $r1 = $r1, 63
; CHECK-NEXT:    srad $r4 = $r4, 63
; CHECK-NEXT:    insf $r6 = $r2, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    insf $r5 = $r3, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r7 = $r4, 15, 15
; CHECK-NEXT:    insf $r0 = $r6, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r7, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r5, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %tb = fptrunc <4 x double> %b to <4 x half>
  %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %tb)
  ret <4 x half> %r
}

define <4 x float> @test_copysign_extended(<4 x half> %a, <4 x half> %b) #0 {
; CHECK-LABEL: test_copysign_extended:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r2 = $r1, 32
; CHECK-NEXT:    srld $r3 = $r1, 48
; CHECK-NEXT:    srlw $r4 = $r1, 16
; CHECK-NEXT:    srld $r5 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sraw $r2 = $r2, 15
; CHECK-NEXT:    srld $r6 = $r0, 48
; CHECK-NEXT:    sraw $r3 = $r3, 15
; CHECK-NEXT:    sraw $r4 = $r4, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r2, 15, 15
; CHECK-NEXT:    srlw $r2 = $r0, 16
; CHECK-NEXT:    sraw $r1 = $r1, 15
; CHECK-NEXT:    insf $r6 = $r3, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r4, 15, 15
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r6, 31, 16
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r5, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhwp $r2 = $r0
; CHECK-NEXT:    fwidenmhwp $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.copysign.v4f16(<4 x half> %a, <4 x half> %b)
  %xr = fpext <4 x half> %r to <4 x float>
  ret <4 x float> %xr
}

define <4 x half> @test_floor(<4 x half> %a) #0 {
; CHECK-LABEL: test_floor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.floor.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_ceil(<4 x half> %a) #0 {
; CHECK-LABEL: test_ceil:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.ceil.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_trunc(<4 x half> %a) #0 {
; CHECK-LABEL: test_trunc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.trunc.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_rint(<4 x half> %a) #0 {
; CHECK-LABEL: test_rint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.rint.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_nearbyint(<4 x half> %a) #0 {
; CHECK-LABEL: test_nearbyint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.nearbyint.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_round(<4 x half> %a) #0 {
; CHECK-LABEL: test_round:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 40[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 24[$r12] = $r18r19
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r19 = $r0
; CHECK-NEXT:    fwidenlhw $r18 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fwidenlhw $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    fwidenlhw $r20 = $r3
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r0
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r2 = $r18
; CHECK-NEXT:    fnarrowwh $r1 = $r21
; CHECK-NEXT:    lq $r18r19 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh $r3 = $r20
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    lq $r20r21 = 40[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 63, 32
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.round.v4f16(<4 x half> %a)
  ret <4 x half> %r
}

define <4 x half> @test_fmuladd(<4 x half> %a, <4 x half> %b, <4 x half> %c) #0 {
; CHECK-LABEL: test_fmuladd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmulhq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddhq $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x half> @llvm.fmuladd.v4f16(<4 x half> %a, <4 x half> %b, <4 x half> %c)
  ret <4 x half> %r
}

define <4 x half> @test_shufflevector(<4 x half> %a) #0 {
; CHECK-LABEL: test_shufflevector:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    srld $r1 = $r0, 48
; CHECK-NEXT:    srld $r2 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r3 = $r0, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r1 = $r3, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %s = shufflevector <4 x half> %a, <4 x half> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  ret <4 x half> %s
}

define <4 x half> @test_shufflevector2(<4 x half> %a) #0 {
; CHECK-LABEL: test_shufflevector2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 32
; CHECK-NEXT:    srld $r2 = $r0, 48
; CHECK-NEXT:    srlw $r3 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 31, 16
; CHECK-NEXT:    insf $r0 = $r3, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %s = shufflevector <4 x half> %a, <4 x half> undef, <4 x i32> <i32 0, i32 1, i32 3, i32 2>
  ret <4 x half> %s
}

define <4 x half> @test_insertelement0(<4 x half> %a, half %x) #0 {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x half> %a, half %x, i64 0
  ret <4 x half> %i
}

define <4 x half> @test_insertelement1(<4 x half> %a, half %x) #0 {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x half> %a, half %x, i64 1
  ret <4 x half> %i
}

define <4 x half> @test_insertelement2(<4 x half> %a, half %x) #0 {
; CHECK-LABEL: test_insertelement2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 47, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x half> %a, half %x, i64 2
  ret <4 x half> %i
}

define <4 x half> @test_insertelement3(<4 x half> %a, half %x) #0 {
; CHECK-LABEL: test_insertelement3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x half> %a, half %x, i64 3
  ret <4 x half> %i
}

define <4 x half> @test_insertelement(<4 x half> %a, half %x, i64 %p) #0 {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r2 = $r2, 31, 16
; CHECK-NEXT:    insf $r1 = $r1, 31, 16
; CHECK-NEXT:    make $r3 = 0x3000200010000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r2, 63, 32
; CHECK-NEXT:    insf $r1 = $r1, 63, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.eq $r2 = $r3, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmovehq.nez $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x half> %a, half %x, i64 %p
  ret <4 x half> %i
}

attributes #0 = { nounwind }
