; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define <2 x i16> @sext_2xi8_2xi16(<2 x i8> %a){
; CHECK-LABEL: sext_2xi8_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i8> %a to <2 x i16>
  ret <2 x i16> %ext
}

define <4 x i16> @sext_4xi8_4xi16(<4 x i8> %a){
; CHECK-LABEL: sext_4xi8_4xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i8> %a to <4 x i16>
  ret <4 x i16> %ext
}

define <2 x i16> @zext_2xi8_2xi16(<2 x i8> %a){
; CHECK-LABEL: zext_2xi8_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0xff00ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i8> %a to <2 x i16>
  ret <2 x i16> %ext
}

define <4 x i16> @zext_4xi8_4xi16(<4 x i8> %a){
; CHECK-LABEL: zext_4xi8_4xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0xff00ff00ff00ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i8> %a to <4 x i16>
  ret <4 x i16> %ext
}


define <2 x i32> @sext_2xi8_2xi32(<2 x i8> %a){
; CHECK-LABEL: sext_2xi8_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i8> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @sext_4xi8_4xi32(<4 x i8> %a){
; CHECK-LABEL: sext_4xi8_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i8> %a to <4 x i32>
  ret <4 x i32> %ext
}

define <2 x i32> @zext_2xi8_2xi32(<2 x i8> %a){
; CHECK-LABEL: zext_2xi8_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0xff000000ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i8> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @zext_4xi8_4xi32(<4 x i8> %a){
; CHECK-LABEL: zext_4xi8_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r1 = $r1, 0xff000000ff
; CHECK-NEXT:    andd $r0 = $r0, 0xff000000ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i8> %a to <4 x i32>
  ret <4 x i32> %ext
}


define <2 x i32> @sext_2xi16_2xi32(<2 x i16> %a){
; CHECK-LABEL: sext_2xi16_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i16> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @sext_4xi16_4xi32(<4 x i16> %a){
; CHECK-LABEL: sext_4xi16_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlhwp $r2 = $r0
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i16> %a to <4 x i32>
  ret <4 x i32> %ext
}

define <2 x i32> @zext_2xi16_2xi32(<2 x i16> %a){
; CHECK-LABEL: zext_2xi16_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0xffff0000ffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i16> %a to <2 x i32>
  ret <2 x i32> %ext
}
; TODO: Improve somehow? The reg-alloc could avoid the copy
; if the extension has been done to r2r3 straight away
define <4 x i32> @zext_4xi16_4xi32(<4 x i16> %a){
; CHECK-LABEL: zext_4xi16_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlhwp $r1 = $r0
; CHECK-NEXT:    sxmhwp $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r1, 0xffff0000ffff
; CHECK-NEXT:    andd $r1 = $r2, 0xffff0000ffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i16> %a to <4 x i32>
  ret <4 x i32> %ext
}

define <8 x i16> @sext_8xi8_8xi16(<8 x i8> %a){
; CHECK-LABEL: sext_8xi8_8xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r2 = $r0
; CHECK-NEXT:    sxmbhq $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <8 x i8> %a to <8 x i16>
  ret <8 x i16> %ext
}

define <8 x i16> @zext_8xi8_8xi16(<8 x i8> %a){
; CHECK-LABEL: zext_8xi8_8xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r1 = $r0
; CHECK-NEXT:    sxmbhq $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r1, 0xff00ff00ff00ff
; CHECK-NEXT:    andd $r1 = $r2, 0xff00ff00ff00ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <8 x i8> %a to <8 x i16>
  ret <8 x i16> %ext
}

define <8 x i32> @sext_8xi8_8xi32(<8 x i8> %a){
; CHECK-LABEL: sext_8xi8_8xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxmbhq $r1 = $r0
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r3 = $r1
; CHECK-NEXT:    sxlhwp $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <8 x i8> %a to <8 x i32>
  ret <8 x i32> %ext
}

define <8 x i32> @zext_8xi8_8xi32(<8 x i8> %a){
; CHECK-LABEL: zext_8xi8_8xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxmbhq $r1 = $r0
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r2 = $r1
; CHECK-NEXT:    sxmhwp $r4 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    sxlhwp $r1 = $r1
; CHECK-NEXT:    andd $r3 = $r2, 0xff000000ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r2 = $r1, 0xff000000ff
; CHECK-NEXT:    andd $r1 = $r4, 0xff000000ff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0xff000000ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <8 x i8> %a to <8 x i32>
  ret <8 x i32> %ext
}

define <8 x i32> @sext_8xi16_8xi32(<8 x i16> %a){
; CHECK-LABEL: sext_8xi16_8xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlhwp $r4 = $r0
; CHECK-NEXT:    sxlhwp $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r3 = $r1
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <8 x i16> %a to <8 x i32>
  ret <8 x i32> %ext
}

define <8 x i32> @zext_8xi16_8xi32(<8 x i16> %a){
; CHECK-LABEL: zext_8xi16_8xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlhwp $r2 = $r1
; CHECK-NEXT:    sxmhwp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r4 = $r0
; CHECK-NEXT:    sxmhwp $r5 = $r0
; CHECK-NEXT:    andd $r3 = $r1, 0xffff0000ffff
; CHECK-NEXT:    andd $r2 = $r2, 0xffff0000ffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r4, 0xffff0000ffff
; CHECK-NEXT:    andd $r1 = $r5, 0xffff0000ffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <8 x i16> %a to <8 x i32>
  ret <8 x i32> %ext
}

; vNi1 arguments are not allowed, so they are promoted to
; vNi8. It seems all these below could be done much better.
define <2 x i8> @sext_2xi1_2xi8(<2 x i1> %a){
; CHECK-LABEL: sext_2xi1_2xi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r1 = $r1, 0, 0
; CHECK-NEXT:    extfs $r0 = $r0, 0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i1> %a to <2 x i8>
  ret <2 x i8> %ext
}

define <4 x i8> @sext_4xi1_4xi8(<4 x i1> %a){
; CHECK-LABEL: sext_4xi1_4xi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r1 = $r0, 31, 24
; CHECK-NEXT:    extfz $r2 = $r0, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r3 = $r0, 15, 8
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r1 = $r1, 0, 0
; CHECK-NEXT:    extfs $r2 = $r2, 0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r3 = $r3, 0, 0
; CHECK-NEXT:    extfs $r0 = $r0, 0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i1> %a to <4 x i8>
  ret <4 x i8> %ext
}

; i1 is passed as an i8, these should be an AND
define <2 x i8> @zext_2xi1_2xi8(<2 x i1> %a){
; CHECK-LABEL: zext_2xi1_2xi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i1> %a to <2 x i8>
  ret <2 x i8> %ext
}

define <4 x i8> @zext_4xi1_4xi8(<4 x i1> %a){
; CHECK-LABEL: zext_4xi1_4xi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r1 = $r0, 31, 24
; CHECK-NEXT:    extfz $r2 = $r0, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r3 = $r0, 15, 8
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    andw $r2 = $r2, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r3 = $r3, 1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i1> %a to <4 x i8>
  ret <4 x i8> %ext
}


define <2 x i16> @sext_2xi1_2xi16(<2 x i1> %a){
; CHECK-LABEL: sext_2xi1_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r0 = $r0, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r0 = $r0, 15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i1> %a to <2 x i16>
  ret <2 x i16> %ext
}

define <4 x i16> @sext_4xi1_4xi16(<4 x i1> %a){
; CHECK-LABEL: sext_4xi1_4xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r0 = $r0, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r0 = $r0, 15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i1> %a to <4 x i16>
  ret <4 x i16> %ext
}

; This one should like the above, replacing
; sra by a srl
define <2 x i16> @zext_2xi1_2xi16(<2 x i1> %a){
; CHECK-LABEL: zext_2xi1_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 0xff00ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i1> %a to <2 x i16>
  ret <2 x i16> %ext
}

define <4 x i16> @zext_4xi1_4xi16(<4 x i1> %a){
; CHECK-LABEL: zext_4xi1_4xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r1 = $r0, 31, 24
; CHECK-NEXT:    extfz $r2 = $r0, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r3 = $r0, 15, 8
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    andw $r2 = $r2, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r3 = $r3, 1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0xff00ff00ff00ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i1> %a to <4 x i16>
  ret <4 x i16> %ext
}


define <2 x i32> @sext_2xi1_2xi32(<2 x i1> %a){
; CHECK-LABEL: sext_2xi1_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllwps $r0 = $r0, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srawps $r0 = $r0, 31
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i1> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @sext_4xi1_4xi32(<4 x i1> %a){
; CHECK-LABEL: sext_4xi1_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srad $r2 = $r1, 32
; CHECK-NEXT:    srad $r3 = $r0, 32
; CHECK-NEXT:    extfs $r1 = $r1, 0, 0
; CHECK-NEXT:    extfs $r0 = $r0, 0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r2 = $r2, 0, 0
; CHECK-NEXT:    extfs $r3 = $r3, 0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 63, 32
; CHECK-NEXT:    insf $r1 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i1> %a to <4 x i32>
  ret <4 x i32> %ext
}

define <2 x i32> @zext_2xi1_2xi32(<2 x i1> %a){
; CHECK-LABEL: zext_2xi1_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r0 = $r0, 0xff000000ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i1> %a to <2 x i32>
  ret <2 x i32> %ext
}

; These could be simply 3 extfz followed by 1 "AND" + 3 insf.
define <4 x i32> @zext_4xi1_4xi32(<4 x i1> %a){
; CHECK-LABEL: zext_4xi1_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r1 = $r0, 31, 24
; CHECK-NEXT:    extfz $r2 = $r0, 23, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r3 = $r0, 15, 8
; CHECK-NEXT:    extfz $r0 = $r0, 7, 0
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    andw $r2 = $r2, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r3 = $r3, 1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r1 = $r1, 0xff000000ff
; CHECK-NEXT:    andd $r0 = $r0, 0xff000000ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i1> %a to <4 x i32>
  ret <4 x i32> %ext
}
