; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV1
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <2 x i16> @sext_2xi8_2xi16(<2 x i8> %a){
; CHECK-LABEL: sext_2xi8_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i8> %a to <2 x i16>
  ret <2 x i16> %ext
}

define <4 x i16> @sext_4xi8_4xi16(<4 x i8> %a){
; CHECK-LABEL: sext_4xi8_4xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i8> %a to <4 x i16>
  ret <4 x i16> %ext
}

define <2 x i16> @zext_2xi8_2xi16(<2 x i8> %a){
; CHECK-LABEL: zext_2xi8_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i8> %a to <2 x i16>
  ret <2 x i16> %ext
}

define <4 x i16> @zext_4xi8_4xi16(<4 x i8> %a){
; CV1-LABEL: zext_4xi8_4xi16:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: zext_4xi8_4xi16:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    zxlbhq $r0 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = zext <4 x i8> %a to <4 x i16>
  ret <4 x i16> %ext
}


define <2 x i32> @sext_2xi8_2xi32(<2 x i8> %a){
; CHECK-LABEL: sext_2xi8_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i8> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @sext_4xi8_4xi32(<4 x i8> %a){
; CHECK-LABEL: sext_4xi8_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i8> %a to <4 x i32>
  ret <4 x i32> %ext
}

define <2 x i32> @zext_2xi8_2xi32(<2 x i8> %a){
; CHECK-LABEL: zext_2xi8_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x200000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i8> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @zext_4xi8_4xi32(<4 x i8> %a){
; CHECK-LABEL: zext_4xi8_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x200000001
; CHECK-NEXT:    sbmm8 $r1 = $r0, 0x800000004
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i8> %a to <4 x i32>
  ret <4 x i32> %ext
}


define <2 x i32> @sext_2xi16_2xi32(<2 x i16> %a){
; CHECK-LABEL: sext_2xi16_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i16> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @sext_4xi16_4xi32(<4 x i16> %a){
; CHECK-LABEL: sext_4xi16_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    sxlhwp $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i16> %a to <4 x i32>
  ret <4 x i32> %ext
}

define <2 x i32> @zext_2xi16_2xi32(<2 x i16> %a){
; CV1-LABEL: zext_2xi16_2xi32:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x80400000201
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: zext_2xi16_2xi32:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    zxlhwp $r0 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = zext <2 x i16> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @zext_4xi16_4xi32(<4 x i16> %a){
; CV1-LABEL: zext_4xi16_4xi32:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x80400000201
; CV1-NEXT:    sbmm8 $r1 = $r0, 0x804000002010
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: zext_4xi16_4xi32:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    zxlhwp $r0 = $r0
; CV2-NEXT:    zxmhwp $r1 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = zext <4 x i16> %a to <4 x i32>
  ret <4 x i32> %ext
}

define <8 x i16> @sext_8xi8_8xi16(<8 x i8> %a){
; CHECK-LABEL: sext_8xi8_8xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxmbhq $r1 = $r0
; CHECK-NEXT:    sxlbhq $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <8 x i8> %a to <8 x i16>
  ret <8 x i16> %ext
}

define <8 x i16> @zext_8xi8_8xi16(<8 x i8> %a){
; CV1-LABEL: zext_8xi8_8xi16:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r1 = $r0, 0x80004000200010
; CV1-NEXT:    sbmm8 $r2 = $r0, 0x8000400020001
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: zext_8xi8_8xi16:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    zxlbhq $r0 = $r0
; CV2-NEXT:    zxmbhq $r1 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = zext <8 x i8> %a to <8 x i16>
  ret <8 x i16> %ext
}

define <8 x i32> @sext_8xi8_8xi32(<8 x i8> %a){
; CV1-LABEL: sext_8xi8_8xi32:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    sxmbhq $r1 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlhwp $r2 = $r1
; CV1-NEXT:    sxmhwp $r3 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlhwp $r0 = $r0
; CV1-NEXT:    sxmhwp $r1 = $r0
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sext_8xi8_8xi32:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sxlbhq $r0 = $r0
; CV2-NEXT:    sxmbhq $r1 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    sxlhwp $r0 = $r0
; CV2-NEXT:    sxmhwp $r1 = $r0
; CV2-NEXT:    sxlhwp $r2 = $r1
; CV2-NEXT:    sxmhwp $r3 = $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = sext <8 x i8> %a to <8 x i32>
  ret <8 x i32> %ext
}

define <8 x i32> @zext_8xi8_8xi32(<8 x i8> %a){
; CV1-LABEL: zext_8xi8_8xi32:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r2 = $r0, 0x2000000010
; CV1-NEXT:    sbmm8 $r3 = $r0, 0x8000000040
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x200000001
; CV1-NEXT:    sbmm8 $r1 = $r0, 0x800000004
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: zext_8xi8_8xi32:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbmm8 $r1 = $r0, 0x800000004
; CV2-NEXT:    sbmm8 $r2 = $r0, 0x2000000010
; CV2-NEXT:    sbmm8 $r3 = $r0, 0x8000000040
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r0 = $r0, 0x200000001
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = zext <8 x i8> %a to <8 x i32>
  ret <8 x i32> %ext
}

define <8 x i32> @sext_8xi16_8xi32(<8 x i16> %a){
; CV1-LABEL: sext_8xi16_8xi32:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlhwp $r2 = $r1
; CV1-NEXT:    sxlhwp $r4 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    sxmhwp $r1 = $r0
; CV1-NEXT:    sxmhwp $r3 = $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sext_8xi16_8xi32:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sxmhwp $r1 = $r0
; CV2-NEXT:    sxlhwp $r2 = $r1
; CV2-NEXT:    sxmhwp $r3 = $r1
; CV2-NEXT:    sxlhwp $r4 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = sext <8 x i16> %a to <8 x i32>
  ret <8 x i32> %ext
}

define <8 x i32> @zext_8xi16_8xi32(<8 x i16> %a){
; CV1-LABEL: zext_8xi16_8xi32:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r2 = $r1, 0x80400000201
; CV1-NEXT:    sbmm8 $r3 = $r1, 0x804000002010
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x80400000201
; CV1-NEXT:    sbmm8 $r1 = $r0, 0x804000002010
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: zext_8xi16_8xi32:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    zxlhwp $r0 = $r0
; CV2-NEXT:    zxmhwp $r1 = $r0
; CV2-NEXT:    zxlhwp $r2 = $r1
; CV2-NEXT:    zxmhwp $r3 = $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = zext <8 x i16> %a to <8 x i32>
  ret <8 x i32> %ext
}

; vNi1 arguments are not allowed, so they are promoted to
; vNi8. It seems all these below could be done much better.
; CV2 this is a single compnbo.ne a, 0
define <2 x i8> @sext_2xi1_2xi8(<2 x i1> %a){
; CV1-LABEL: sext_2xi1_2xi8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r0 = $r0, 0, 0
; CV1-NEXT:    extfs $r1 = $r1, 0, 0
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sext_2xi1_2xi8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, 7
; CV2-NEXT:    ;;
; CV2-NEXT:    srabos $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = sext <2 x i1> %a to <2 x i8>
  ret <2 x i8> %ext
}

; CV2 this is a single compnbo.ne a, 0
define <4 x i8> @sext_4xi1_4xi8(<4 x i1> %a){
; CV1-LABEL: sext_4xi1_4xi8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    srlw $r1 = $r0, 24
; CV1-NEXT:    extfz $r2 = $r0, 23, 16
; CV1-NEXT:    extfz $r3 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r1 = $r1, 0, 0
; CV1-NEXT:    extfs $r2 = $r2, 0, 0
; CV1-NEXT:    ;;
; CV1-NEXT:    extfs $r0 = $r0, 0, 0
; CV1-NEXT:    extfs $r3 = $r3, 0, 0
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r3, 15, 8
; CV1-NEXT:    insf $r2 = $r1, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 31, 16
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sext_4xi1_4xi8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, 7
; CV2-NEXT:    ;;
; CV2-NEXT:    srabos $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = sext <4 x i1> %a to <4 x i8>
  ret <4 x i8> %ext
}

define <2 x i8> @zext_2xi1_2xi8(<2 x i1> %a){
; CHECK-LABEL: zext_2xi1_2xi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 257
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i1> %a to <2 x i8>
  ret <2 x i8> %ext
}

define <4 x i8> @zext_4xi1_4xi8(<4 x i1> %a){
; CHECK-LABEL: zext_4xi1_4xi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 0x1010101
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i1> %a to <4 x i8>
  ret <4 x i8> %ext
}

; CV2 this is sxlbhq(compnbo.ne a, 0)
define <2 x i16> @sext_2xi1_2xi16(<2 x i1> %a){
; CHECK-LABEL: sext_2xi1_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r0 = $r0, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r0 = $r0, 15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i1> %a to <2 x i16>
  ret <2 x i16> %ext
}

; CV2 this is sxlbhq(compnbo.ne a, 0)
define <4 x i16> @sext_4xi1_4xi16(<4 x i1> %a){
; CHECK-LABEL: sext_4xi1_4xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r0 = $r0, 15
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srahqs $r0 = $r0, 15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i1> %a to <4 x i16>
  ret <4 x i16> %ext
}

define <2 x i16> @zext_2xi1_2xi16(<2 x i1> %a){
; CHECK-LABEL: zext_2xi1_2xi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 257
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i1> %a to <2 x i16>
  ret <2 x i16> %ext
}

define <4 x i16> @zext_4xi1_4xi16(<4 x i1> %a){
; CV1-LABEL: zext_4xi1_4xi16:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andw $r0 = $r0, 0x1010101
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: zext_4xi1_4xi16:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    andw $r0 = $r0, 0x1010101
; CV2-NEXT:    ;;
; CV2-NEXT:    zxlbhq $r0 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %ext = zext <4 x i1> %a to <4 x i16>
  ret <4 x i16> %ext
}


; This should be an sbmm8(and a, 257)
define <2 x i32> @sext_2xi1_2xi32(<2 x i1> %a){
; CHECK-LABEL: sext_2xi1_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x200000001
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllwps $r0 = $r0, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srawps $r0 = $r0, 31
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <2 x i1> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @sext_4xi1_4xi32(<4 x i1> %a){
; CHECK-LABEL: sext_4xi1_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x200000001
; CHECK-NEXT:    sbmm8 $r1 = $r0, 0x800000004
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r0 = $r0, 0, 0
; CHECK-NEXT:    extfs $r1 = $r1, 0, 0
; CHECK-NEXT:    srld $r2 = $r1, 32
; CHECK-NEXT:    srld $r3 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfs $r2 = $r2, 0, 0
; CHECK-NEXT:    extfs $r3 = $r3, 0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r3, 63, 32
; CHECK-NEXT:    insf $r1 = $r2, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = sext <4 x i1> %a to <4 x i32>
  ret <4 x i32> %ext
}

define <2 x i32> @zext_2xi1_2xi32(<2 x i1> %a){
; CHECK-LABEL: zext_2xi1_2xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 257
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x200000001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <2 x i1> %a to <2 x i32>
  ret <2 x i32> %ext
}

define <4 x i32> @zext_4xi1_4xi32(<4 x i1> %a){
; CHECK-LABEL: zext_4xi1_4xi32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 0x1010101
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x200000001
; CHECK-NEXT:    sbmm8 $r1 = $r0, 0x800000004
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %ext = zext <4 x i1> %a to <4 x i32>
  ret <4 x i32> %ext
}

define { i64, i64, i64, i64 } @T16772(<8 x i8> %0, <2 x i32> %1) {
; CHECK-LABEL: T16772:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatuwp.rn $r2 = $r1, 0
; CHECK-NEXT:    make $r3 = 0x3d70b07f3d70b07f
; CHECK-NEXT:    sbmm8 $r5 = $r0, 0x8000000040
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x2000000010
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shufflevector <8 x i8> %0, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = zext <4 x i8> %3 to <4 x i32>
  %5 = uitofp <2 x i32> %1 to <2 x float>
  %6 = bitcast <4 x i32> %4 to <2 x i64>
  %7 = extractelement <2 x i64> %6, i32 0
  %8 = insertvalue { i64, i64, i64, i64 } undef, i64 %7, 0
  %9 = extractelement <2 x i64> %6, i32 1
  %10 = insertvalue { i64, i64, i64, i64 } %8, i64 %9, 1
  %11 = bitcast <2 x float> %5 to i64
  %12 = insertvalue { i64, i64, i64, i64 } %10, i64 %11, 2
  %13 = insertvalue { i64, i64, i64, i64 } %12, i64 4427232494243328127, 3
  ret { i64, i64, i64, i64 } %13
}

define <2 x i32> @sextupper16to32(<4 x i16> %0) {
; CHECK-LABEL: sextupper16to32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxmhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i16> %0, i32 2
  %3 = sext i16 %2 to i32
  %4 = insertelement <2 x i32> undef, i32 %3, i32 0
  %5 = extractelement <4 x i16> %0, i32 3
  %6 = sext i16 %5 to i32
  %7 = insertelement <2 x i32> %4, i32 %6, i32 1
  ret <2 x i32> %7
}

define <2 x i32> @sextupper16to32_2(<4 x i16> %0) {
; CHECK-LABEL: sextupper16to32_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxmhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <2 x i32> <i32 2, i32 3>
  %3 = sext <2 x i16> %2 to <2 x i32>
  ret <2 x i32> %3
}


define <2 x i16> @zextupper16to32(<4 x i8> %0) {
; CHECK-LABEL: zextupper16to32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r0 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i8> %0, i32 2
  %3 = zext i8 %2 to i16
  %4 = insertelement <2 x i16> undef, i16 %3, i32 0
  %5 = extractelement <4 x i8> %0, i32 3
  %6 = zext i8 %5 to i16
  %7 = insertelement <2 x i16> %4, i16 %6, i32 1
  ret <2 x i16> %7
}

define <2 x i32> @zextupper16to32_2(<4 x i16> %0) {
; CV1-LABEL: zextupper16to32_2:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x804000002010
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: zextupper16to32_2:
; CV2:       # %bb.0:
; CV2-NEXT:    zxmhwp $r0 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <2 x i32> <i32 2, i32 3>
  %3 = zext <2 x i16> %2 to <2 x i32>
  ret <2 x i32> %3
}
