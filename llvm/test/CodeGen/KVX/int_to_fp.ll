; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define half @ui32_to_f16(i32 %x){
; CHECK-LABEL: ui32_to_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatuw.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = uitofp i32 %x to half
  ret half %conv
}

define half @ui64_to_f16(i64 %x){
; CHECK-LABEL: ui64_to_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatud.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = uitofp i64 %x to half
  ret half %conv
}

define float @ui32_to_f32(i32 %x){
; CHECK-LABEL: ui32_to_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatuw.rn $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = uitofp i32 %x to float
  ret float %conv
}

define float @ui64_to_f32(i64 %x){
; CHECK-LABEL: ui64_to_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call __floatundisf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = uitofp i64 %x to float
  ret float %conv
}

define double @ui32_to_f64(i32 %x){
; CHECK-LABEL: ui32_to_f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatud.rn $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = uitofp i32 %x to double
  ret double %conv
}

define double @ui64_to_f64(i64 %x){
; CHECK-LABEL: ui64_to_f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatud.rn $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = uitofp i64 %x to double
  ret double %conv
}

define half @i32_to_f16(i32 %x){
; CHECK-LABEL: i32_to_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatw.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sitofp i32 %x to half
  ret half %conv
}

define half @i64_to_f16(i64 %x){
; CHECK-LABEL: i64_to_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatd.rn $r0 = $r0, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sitofp i64 %x to half
  ret half %conv
}

define float @i32_to_f32(i32 %x){
; CHECK-LABEL: i32_to_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatw.rn $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sitofp i32 %x to float
  ret float %conv
}

define float @i64_to_f32(i64 %x){
; CHECK-LABEL: i64_to_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call __floatdisf
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sitofp i64 %x to float
  ret float %conv
}

define double @i32_to_f64(i32 %x){
; CHECK-LABEL: i32_to_f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    floatd.rn $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sitofp i32 %x to double
  ret double %conv
}

define double @i64_to_f64(i64 %x){
; CHECK-LABEL: i64_to_f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatd.rn $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sitofp i64 %x to double
  ret double %conv
}

