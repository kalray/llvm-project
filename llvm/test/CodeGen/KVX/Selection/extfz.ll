; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @f1(i32 %v){
; CHECK-LABEL: f1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 1, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %shr1 = lshr i32 %v, 1
  %and = and i32 %shr1, 1
  ret i32 %and
}

define i32 @f1_2(i32 %v){
; CHECK-LABEL: f1_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 6, 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 5
  %and = and i32 %0, 3
  ret i32 %and
}

define i32 @f1_3u(i32 %v){
; CHECK-LABEL: f1_3u:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 18, 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %shr = lshr i32 %v, 5
  %and = and i32 %shr, 16383
  ret i32 %and
}

define i64 @f1d(i64 %v){
; CHECK-LABEL: f1d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 1, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %shr1 = lshr i64 %v, 1
  %and = and i64 %shr1, 1
  ret i64 %and
}

define i64 @f1_2d(i64 %v){
; CHECK-LABEL: f1_2d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 6, 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i64 %v, 5
  %and = and i64 %0, 3
  ret i64 %and
}

define i64 @f1_3d(i64 %v){
; CHECK-LABEL: f1_3d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 60, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i64 %v, 1
  %and = and i64 %0, 1152921504606846975
  ret i64 %and
}

define i32 @f3(i32 %v){
; CHECK-LABEL: f3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 2, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 3
  ret i32 %and
}

define i32 @f7(i32 %v){
; CHECK-LABEL: f7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 3, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 7
  ret i32 %and
}

define i32 @f15(i32 %v){
; CHECK-LABEL: f15:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 4, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 15
  ret i32 %and
}

define i32 @f31(i32 %v){
; CHECK-LABEL: f31:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 5, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 31
  ret i32 %and
}

define i32 @f127(i32 %v){
; CHECK-LABEL: f127:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 7, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 127
  ret i32 %and
}

define i32 @f255(i32 %v){
; CHECK-LABEL: f255:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 8, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 255
  ret i32 %and
}

define i32 @f511(i32 %v){
; CHECK-LABEL: f511:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 9, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 511
  ret i32 %and
}

define i32 @f1023(i32 %v){
; CHECK-LABEL: f1023:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 10, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 1023
  ret i32 %and
}

define i32 @f2047(i32 %v){
; CHECK-LABEL: f2047:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 11, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 2047
  ret i32 %and
}

define i32 @f4095(i32 %v){
; CHECK-LABEL: f4095:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 12, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 4095
  ret i32 %and
}

define i32 @f8191(i32 %v){
; CHECK-LABEL: f8191:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 13, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 8191
  ret i32 %and
}

define i32 @f16383(i32 %v){
; CHECK-LABEL: f16383:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 14, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 16383
  ret i32 %and
}

define i32 @f32767(i32 %v){
; CHECK-LABEL: f32767:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 15, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 32767
  ret i32 %and
}

define i32 @f65535(i32 %v){
; CHECK-LABEL: f65535:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 16, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 65535
  ret i32 %and
}

define i32 @f131071(i32 %v){
; CHECK-LABEL: f131071:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 17, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 131071
  ret i32 %and
}

define i32 @f33554431(i32 %v){
; CHECK-LABEL: f33554431:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 25, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 33554431
  ret i32 %and
}

define i32 @f1073741823(i32 %v){
; CHECK-LABEL: f1073741823:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 30, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = lshr i32 %v, 1
  %and = and i32 %0, 1073741823
  ret i32 %and
}

