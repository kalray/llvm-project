; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <2 x i16> @foo_v2i16(<2 x i16> %x){
; CHECK-LABEL: foo_v2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    neghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <2 x i16> zeroinitializer, %x
  ret <2 x i16> %sub
}

define <4 x i16> @foo_v4i16(<4 x i16> %x){
; CHECK-LABEL: foo_v4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    neghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <4 x i16> zeroinitializer, %x
  ret <4 x i16> %sub
}

define <2 x i32> @foo_v2i32(<2 x i32> %x){
; CHECK-LABEL: foo_v2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    negwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <2 x i32> zeroinitializer, %x
  ret <2 x i32> %sub
}

define <2 x half> @foo_v2f16(<2 x half> %x){
; CHECK-LABEL: foo_v2f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fneghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = fsub <2 x half> zeroinitializer, %x
  ret <2 x half> %sub
}

define <4 x half> @foo_v4f16(<4 x half> %x){
; CHECK-LABEL: foo_v4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fneghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = fsub <4 x half> zeroinitializer, %x
  ret <4 x half> %sub
}

define <2 x float> @foo_v2f32(<2 x float> %x){
; CHECK-LABEL: foo_v2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = fsub <2 x float> zeroinitializer, %x
  ret <2 x float> %sub
}

define i32 @foo_int(i32 %x){
; CHECK-LABEL: foo_int:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    negw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub nsw i32 0, %x
  ret i32 %sub
}

define i64 @foo_long(i64 %x){
; CHECK-LABEL: foo_long:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub nsw i64 0, %x
  ret i64 %sub
}

