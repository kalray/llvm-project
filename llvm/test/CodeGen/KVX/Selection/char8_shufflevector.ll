; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -o - %s -O2 | FileCheck %s
; RUN: clang -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

; FIXME: All these could be a single sbmm8

define <8 x i8> @shuffle_zero(<8 x i8> %0) {
; CHECK-LABEL: shuffle_zero:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    srlw $r2 = $r0, 24
; CHECK-NEXT:    srld $r3 = $r0, 56
; CHECK-NEXT:    make $r4 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    zxbd $r0 = $r0
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r3 = $r2, 15, 8
; CHECK-NEXT:    copyd $r5 = $r1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    insf $r1 = $r0, 15, 8
; CHECK-NEXT:    insf $r5 = $r4, 15, 8
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r5 = $r3, 31, 16
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    insf $r1 = $r5, 63, 32
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %2 = shufflevector <8 x i8> %0, <8 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 0, i8 poison, i8 poison, i8 poison>, <8 x i32> <i32 1, i32 0, i32 3, i32 1, i32 1, i32 12, i32 7, i32 3>
  ret <8 x i8> %2
}

define <8 x i8> @shuffle_undef(<8 x i8> %0) {
; CHECK-LABEL: shuffle_undef:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxbd $r0 = $r0
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    srlw $r2 = $r0, 24
; CHECK-NEXT:    srld $r3 = $r0, 56
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r3 = $r2, 15, 8
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    insf $r1 = $r0, 15, 8
; CHECK-NEXT:    insf $r4 = $r0, 15, 8
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r4 = $r3, 31, 16
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    insf $r1 = $r4, 63, 32
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %2 = shufflevector <8 x i8> %0, <8 x i8> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 1, i32 1, i32 undef, i32 7, i32 3>
  ret <8 x i8> %2
}

define <8 x i8> @shuffle_self(<8 x i8> %0) {
; CHECK-LABEL: shuffle_self:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    srlw $r2 = $r0, 24
; CHECK-NEXT:    srld $r3 = $r0, 56
; CHECK-NEXT:    extfz $r4 = $r0, 39, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    zxbd $r0 = $r0
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r3 = $r2, 15, 8
; CHECK-NEXT:    copyd $r5 = $r1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    insf $r1 = $r0, 15, 8
; CHECK-NEXT:    insf $r5 = $r4, 15, 8
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r5 = $r3, 31, 16
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    insf $r1 = $r5, 63, 32
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %2 = shufflevector <8 x i8> %0, <8 x i8> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 1, i32 1, i32 4, i32 7, i32 3>
  ret <8 x i8> %2
}

define <8 x i8> @shuffle_notOther(<8 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: shuffle_notOther:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r1 = $r0, 15, 8
; CHECK-NEXT:    srlw $r2 = $r0, 24
; CHECK-NEXT:    srld $r3 = $r0, 56
; CHECK-NEXT:    extfz $r4 = $r0, 47, 40
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    zxbd $r0 = $r0
; CHECK-NEXT:    insf $r2 = $r1, 15, 8
; CHECK-NEXT:    insf $r3 = $r2, 15, 8
; CHECK-NEXT:    copyd $r5 = $r1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    insf $r1 = $r0, 15, 8
; CHECK-NEXT:    insf $r5 = $r4, 15, 8
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    insf $r1 = $r2, 31, 16
; CHECK-NEXT:    insf $r5 = $r3, 31, 16
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    insf $r1 = $r5, 63, 32
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %3 = shufflevector <8 x i8> %0, <8 x i8> poison, <8 x i32> <i32 1, i32 0, i32 3, i32 1, i32 1, i32 5, i32 7, i32 3>
  ret <8 x i8> %3
}

define <8 x i8> @shuffle_justOther(<8 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: shuffle_justOther:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extfz $r0 = $r1, 15, 8
; CHECK-NEXT:    srlw $r2 = $r1, 24
; CHECK-NEXT:    srld $r3 = $r1, 56
; CHECK-NEXT:    extfz $r4 = $r1, 47, 40
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    zxbd $r1 = $r1
; CHECK-NEXT:    insf $r2 = $r0, 15, 8
; CHECK-NEXT:    insf $r3 = $r2, 15, 8
; CHECK-NEXT:    copyd $r5 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    insf $r5 = $r4, 15, 8
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    insf $r5 = $r3, 31, 16
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    insf $r0 = $r5, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
  %3 = shufflevector <8 x i8> %1, <8 x i8> poison, <8 x i32> <i32 1, i32 0, i32 3, i32 1, i32 1, i32 5, i32 7, i32 3>
  ret <8 x i8> %3
}

define <8 x i8> @shuffle_both(<8 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: shuffle_both:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r2 = $r1, 24
; CHECK-NEXT:    srld $r3 = $r0, 56
; CHECK-NEXT:    extfz $r4 = $r1, 15, 8
; CHECK-NEXT:    srlw $r5 = $r0, 24
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    zxbd $r1 = $r1
; CHECK-NEXT:    extfz $r2 = $r1, 47, 40
; CHECK-NEXT:    insf $r3 = $r2, 15, 8
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    extfz $r0 = $r0, 15, 8
; CHECK-NEXT:    insf $r5 = $r4, 15, 8
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    insf $r4 = $r2, 15, 8
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    insf $r0 = $r5, 31, 16
; CHECK-NEXT:    insf $r4 = $r3, 31, 16
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    insf $r0 = $r4, 63, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %3 = shufflevector <8 x i8> %0, <8 x i8> %1, <8 x i32> <i32 1, i32 8, i32 3, i32 9, i32 9, i32 13, i32 7, i32 11>
  ret <8 x i8> %3
}

