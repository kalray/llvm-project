; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: clang -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define float @fdivf32_normal(float %a, float %b) {
; CHECK-LABEL: fdivf32_normal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    goto __divsf3
; CHECK-NEXT:    ;;
entry:
  %div = fdiv float %a, %b
  ret float %div
}

define float @fdivf32_fast(float %a, float %b) {
; CHECK-LABEL: fdivf32_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    frecw $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fmulw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 11)
entry:
  %div = fdiv fast float %a, %b
  ret float %div
}

define float @fdivf32_arcp(float %a, float %b) {
; CHECK-LABEL: fdivf32_arcp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    frecw $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fmulw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 11)
entry:
  %div = fdiv arcp float %a, %b
  ret float %div
}

define float @fdiv(float %0) {
; CHECK-LABEL: fdiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    frecw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = fdiv float 1.000000e+00, %0
  ret float %2
}

define float @fdiv_neg(float %0) {
; CHECK-LABEL: fdiv_neg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnegw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    frecw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %2 = fdiv float -1.000000e+00, %0
  ret float %2
}
