; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define half @f_float16(half %x){
; CHECK-LABEL: f_float16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fneghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sub = fsub half 0xH0000, %x
  ret half %sub
}

define float @f_float(float %x){
; CHECK-LABEL: f_float:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sub = fsub float 0.000000e+00, %x
  ret float %sub
}

define double @f_double(double %x){
; CHECK-LABEL: f_double:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sub = fsub double 0.000000e+00, %x
  ret double %sub
}

define double @bitcast_fnegd(double %x) {
; CHECK-LABEL: bitcast_fnegd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnegd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %bc1 = bitcast double %x to i64
  %xor = xor i64 %bc1, 9223372036854775808
  %bc2 = bitcast i64 %xor to double
  ret double %bc2
}

define float @bitcast_fnegw(float %x) {
; CHECK-LABEL: bitcast_fnegw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnegw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %bc1 = bitcast float %x to i32
  %xor = xor i32 %bc1, 2147483648
  %bc2 = bitcast i32 %xor to float
  ret float %bc2
}

define half @bitcast_fnegh(half %x) {
; CHECK-LABEL: bitcast_fnegh:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fneghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %bc1 = bitcast half %x to i16
  %xor = xor i16 %bc1, 32768
  %bc2 = bitcast i16 %xor to half
  ret half %bc2
}
