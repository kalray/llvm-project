; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV2
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <16 x i8> @test_ret_const() #0 {
; ALL-LABEL: test_ret_const:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r0 = 0x201020102010201
; ALL-NEXT:    make $r1 = 0x201020102010201
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  ret <16 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
}

define i8 @test_extract_0(<16 x i8> %a) #0 {
; ALL-LABEL: test_extract_0:
; ALL:       # %bb.0:
; ALL-NEXT:    zxbd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %e = extractelement <16 x i8> %a, i8 0
  ret i8 %e
}

define i8 @test_extract_1(<16 x i8> %a) #0 {
; ALL-LABEL: test_extract_1:
; ALL:       # %bb.0:
; ALL-NEXT:    extfz $r0 = $r0, 15, 8
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %e = extractelement <16 x i8> %a, i8 1
  ret i8 %e
}

define i8 @test_extract_2(<16 x i8> %a) #0 {
; ALL-LABEL: test_extract_2:
; ALL:       # %bb.0:
; ALL-NEXT:    extfz $r0 = $r0, 23, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %e = extractelement <16 x i8> %a, i8 2
  ret i8 %e
}

define i8 @test_extract_3(<16 x i8> %a) #0 {
; ALL-LABEL: test_extract_3:
; ALL:       # %bb.0:
; ALL-NEXT:    srlw $r0 = $r0, 24
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %e = extractelement <16 x i8> %a, i8 3
  ret i8 %e
}

define <16 x i8> @test_fma(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c) #0 {
; CV1-LABEL: test_fma:
; CV1:       # %bb.0:
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    srlhqs $r5 = $r5, 8
; CV1-NEXT:    mulhq $r6 = $r3, $r5
; CV1-NEXT:    srlhqs $r7 = $r4, 8
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff00.@
; CV1-NEXT:    mulhq $r4 = $r2, $r4
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    mulhq $r2 = $r2, $r7
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    mulhq $r3 = $r3, $r5
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff.@
; CV1-NEXT:    andd $r5 = $r6, 0xff00ff.@
; CV1-NEXT:    andd $r6 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    iord $r2 = $r4, $r2
; CV1-NEXT:    andd $r4 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    iord $r3 = $r5, $r3
; CV1-NEXT:    andd $r5 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    eord $r1 = $r1, $r3
; CV1-NEXT:    andd $r2 = $r3, 0x7f7f7f7f.@
; CV1-NEXT:    addd $r3 = $r4, $r5
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    eord $r0 = $r3, $r0
; CV1-NEXT:    andd $r1 = $r1, 0x80808080.@
; CV1-NEXT:    addd $r2 = $r6, $r2
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    eord $r1 = $r2, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 8)
;
; CV2-LABEL: test_fma:
; CV2:       # %bb.0:
; CV2-NEXT:    mulhq $r3 = $r3, $r5
; CV2-NEXT:    srlhqs $r5 = $r4, 8
; CV2-NEXT:    srlhqs $r6 = $r5, 8
; CV2-NEXT:    andd $r7 = $r3, 0xff00ff00.@
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    mulhq $r6 = $r7, $r6
; CV2-NEXT:    andd $r7 = $r2, 0xff00ff00.@
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    mulhq $r2 = $r2, $r4
; CV2-NEXT:    andd $r3 = $r3, 0xff00ff.@
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    iord $r3 = $r3, $r6
; CV2-NEXT:    mulhq $r4 = $r7, $r5
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    addbo $r1 = $r1, $r3
; CV2-NEXT:    andd $r2 = $r2, 0xff00ff.@
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    iord $r2 = $r2, $r4
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    addbo $r0 = $r0, $r2
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 6)
  %m = mul <16 x i8> %b, %c
  %ad = add <16 x i8> %a, %m
  ret <16 x i8> %ad
}

define <16 x i8> @test_fma_imm_2(<16 x i8> %a, <16 x i8> %b) #0 {
; CV1-LABEL: test_fma_imm_2:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r4 = 0x201020102010201
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    mulhq $r5 = $r3, $r4
; CV1-NEXT:    srlhqs $r6 = $r4, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff00.@
; CV1-NEXT:    mulhq $r4 = $r2, $r4
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    mulhq $r2 = $r2, $r6
; CV1-NEXT:    andd $r5 = $r5, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    mulhq $r3 = $r3, $r6
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff.@
; CV1-NEXT:    andd $r6 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    iord $r2 = $r4, $r2
; CV1-NEXT:    andd $r4 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    iord $r3 = $r5, $r3
; CV1-NEXT:    andd $r5 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    eord $r1 = $r1, $r3
; CV1-NEXT:    andd $r2 = $r3, 0x7f7f7f7f.@
; CV1-NEXT:    addd $r3 = $r4, $r5
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    eord $r0 = $r3, $r0
; CV1-NEXT:    andd $r1 = $r1, 0x80808080.@
; CV1-NEXT:    addd $r2 = $r6, $r2
; CV1-NEXT:    ;; # (end cycle 8)
; CV1-NEXT:    eord $r1 = $r2, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 9)
;
; CV2-LABEL: test_fma_imm_2:
; CV2:       # %bb.0:
; CV2-NEXT:    make $r4 = 0x201020102010201
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV2-NEXT:    mulhq $r5 = $r3, $r4
; CV2-NEXT:    srlhqs $r6 = $r4, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    andd $r2 = $r2, 0xff00ff00.@
; CV2-NEXT:    mulhq $r4 = $r2, $r4
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    mulhq $r3 = $r3, $r6
; CV2-NEXT:    andd $r5 = $r5, 0xff00ff.@
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    mulhq $r2 = $r2, $r6
; CV2-NEXT:    andd $r4 = $r4, 0xff00ff.@
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    iord $r3 = $r5, $r3
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    addbo $r1 = $r1, $r3
; CV2-NEXT:    iord $r2 = $r4, $r2
; CV2-NEXT:    ;; # (end cycle 6)
; CV2-NEXT:    addbo $r0 = $r0, $r2
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 7)
  %m = mul <16 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %b
  %ad = add <16 x i8> %a, %m
  ret <16 x i8> %ad
}

define i8 @test_extract_i(<16 x i8> %a, i64 %idx) #0 {
; ALL-LABEL: test_extract_i:
; ALL:       # %bb.0:
; ALL-NEXT:    andd $r2 = $r2, 15
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sq 16[$r12] = $r0r1
; ALL-NEXT:    addd $r0 = $r12, 16
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    lbz $r0 = $r2[$r0]
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %e = extractelement <16 x i8> %a, i64 %idx
  ret i8 %e
}

define <16 x i8> @test_add(<16 x i8> %a, <16 x i8> %b) #0 {
; CV1-LABEL: test_add:
; CV1:       # %bb.0:
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    andd $r2 = $r3, 0x7f7f7f7f.@
; CV1-NEXT:    andd $r4 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    andd $r5 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    andd $r1 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    eord $r3 = $r1, $r3
; CV1-NEXT:    addd $r4 = $r5, $r4
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    eord $r0 = $r4, $r0
; CV1-NEXT:    addd $r1 = $r1, $r2
; CV1-NEXT:    andd $r2 = $r3, 0x80808080.@
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    eord $r1 = $r1, $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: test_add:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo $r0 = $r0, $r2
; CV2-NEXT:    addbo $r1 = $r1, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = add <16 x i8> %a, %b
  ret <16 x i8> %r
}

define <16 x i8> @test_add_imm_0(<16 x i8> %a) #0 {
; CV1-LABEL: test_add_imm_0:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r2 = 0x201020102010201
; CV1-NEXT:    andd $r4 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    andd $r1 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    eord $r2 = $r1, $r2
; CV1-NEXT:    andd $r3 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    addd $r1 = $r1, $r3
; CV1-NEXT:    andd $r2 = $r2, 0x80808080.@
; CV1-NEXT:    addd $r4 = $r4, $r3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    eord $r0 = $r4, $r0
; CV1-NEXT:    eord $r1 = $r1, $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: test_add_imm_0:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo $r0 = $r0, 0x2010201.@
; CV2-NEXT:    addbo $r1 = $r1, 0x2010201.@
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = add <16 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %a
  ret <16 x i8> %r
}

define <16 x i8> @test_add_imm_not_at(<16 x i8> %a) #0 {
; CV1-LABEL: test_add_imm_not_at:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r2 = 0x2010201
; CV1-NEXT:    andd $r4 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    andd $r1 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    eord $r2 = $r1, $r2
; CV1-NEXT:    andd $r3 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    addd $r1 = $r1, $r3
; CV1-NEXT:    andd $r2 = $r2, 0x80808080.@
; CV1-NEXT:    addd $r4 = $r4, $r3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    eord $r0 = $r4, $r0
; CV1-NEXT:    eord $r1 = $r1, $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: test_add_imm_not_at:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo $r0 = $r0, 0x2010201
; CV2-NEXT:    addbo $r1 = $r1, 0x2010201
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = add <16 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0, i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %a
  ret <16 x i8> %r
}

define <16 x i8> @test_add_imm_1(<16 x i8> %a) #0 {
; CV1-LABEL: test_add_imm_1:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r2 = 0x201020102010201
; CV1-NEXT:    andd $r4 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    andd $r1 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    eord $r2 = $r1, $r2
; CV1-NEXT:    andd $r3 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    addd $r1 = $r1, $r3
; CV1-NEXT:    andd $r2 = $r2, 0x80808080.@
; CV1-NEXT:    addd $r4 = $r4, $r3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    eord $r0 = $r4, $r0
; CV1-NEXT:    eord $r1 = $r1, $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: test_add_imm_1:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo $r0 = $r0, 0x2010201.@
; CV2-NEXT:    addbo $r1 = $r1, 0x2010201.@
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = add <16 x i8> %a, <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
  ret <16 x i8> %r
}

define <16 x i8> @test_sub(<16 x i8> %a, <16 x i8> %b) #0 {
; CV1-LABEL: test_sub:
; CV1:       # %bb.0:
; CV1-NEXT:    neord $r0 = $r0, $r2
; CV1-NEXT:    iord $r2 = $r1, 0x80808080.@
; CV1-NEXT:    iord $r4 = $r0, 0x80808080.@
; CV1-NEXT:    andd $r5 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    neord $r1 = $r1, $r3
; CV1-NEXT:    andd $r3 = $r3, 0x7f7f7f7f.@
; CV1-NEXT:    sbfd $r4 = $r5, $r4
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    eord $r0 = $r0, $r4
; CV1-NEXT:    andd $r1 = $r1, 0x80808080.@
; CV1-NEXT:    sbfd $r2 = $r3, $r2
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    eord $r1 = $r1, $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: test_sub:
; CV2:       # %bb.0:
; CV2-NEXT:    sbfbo $r0 = $r2, $r0
; CV2-NEXT:    sbfbo $r1 = $r3, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = sub <16 x i8> %a, %b
  ret <16 x i8> %r
}

define <16 x i8> @test_sub_imm(<16 x i8> %a) #0 {
; CV1-LABEL: test_sub_imm:
; CV1:       # %bb.0:
; CV1-NEXT:    iord $r2 = $r0, 0x80808080.@
; CV1-NEXT:    make $r3 = 0x201020102010201
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    neord $r0 = $r0, $r3
; CV1-NEXT:    iord $r1 = $r1, 0x80808080.@
; CV1-NEXT:    neord $r3 = $r1, $r3
; CV1-NEXT:    andd $r4 = $r3, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    sbfd $r1 = $r4, $r1
; CV1-NEXT:    sbfd $r2 = $r4, $r2
; CV1-NEXT:    andd $r3 = $r3, 0x80808080.@
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    eord $r1 = $r3, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: test_sub_imm:
; CV2:       # %bb.0:
; CV2-NEXT:    addbo $r0 = $r0, 0xfefffeff.@
; CV2-NEXT:    addbo $r1 = $r1, 0xfefffeff.@
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = sub <16 x i8> %a, <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>
  ret <16 x i8> %r
}

define <16 x i8> @test_sub_fromimm(<16 x i8> %a) #0 {
; CV1-LABEL: test_sub_fromimm:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r2 = 0x201020102010201
; CV1-NEXT:    andd $r4 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    neord $r0 = $r2, $r0
; CV1-NEXT:    andd $r1 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    neord $r2 = $r2, $r1
; CV1-NEXT:    iord $r3 = $r2, 0x80808080.@
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    sbfd $r1 = $r1, $r3
; CV1-NEXT:    andd $r2 = $r2, 0x80808080.@
; CV1-NEXT:    sbfd $r4 = $r4, $r3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    eord $r0 = $r0, $r4
; CV1-NEXT:    eord $r1 = $r2, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: test_sub_fromimm:
; CV2:       # %bb.0:
; CV2-NEXT:    sbfbo $r0 = $r0, 0x2010201.@
; CV2-NEXT:    sbfbo $r1 = $r1, 0x2010201.@
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = sub <16 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %a
  ret <16 x i8> %r
}

define <16 x i8> @test_neg(<16 x i8> %a) #0 {
; CV1-LABEL: test_neg:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r2 = 0
; CV1-NEXT:    andd $r4 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    neord $r0 = $r2, $r0
; CV1-NEXT:    andd $r1 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    neord $r2 = $r2, $r1
; CV1-NEXT:    iord $r3 = $r2, 0x80808080.@
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    sbfd $r1 = $r1, $r3
; CV1-NEXT:    andd $r2 = $r2, 0x80808080.@
; CV1-NEXT:    sbfd $r4 = $r4, $r3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    eord $r0 = $r0, $r4
; CV1-NEXT:    eord $r1 = $r2, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: test_neg:
; CV2:       # %bb.0:
; CV2-NEXT:    negbo $r0 = $r0
; CV2-NEXT:    negbo $r1 = $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = sub <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, %a
  ret <16 x i8> %r
}

define <16 x i8> @test_mul(<16 x i8> %a, <16 x i8> %b) #0 {
; ALL-LABEL: test_mul:
; ALL:       # %bb.0:
; ALL-NEXT:    mulhq $r0 = $r0, $r2
; ALL-NEXT:    srlhqs $r4 = $r2, 8
; ALL-NEXT:    andd $r5 = $r0, 0xff00ff00.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    mulhq $r2 = $r5, $r4
; ALL-NEXT:    srlhqs $r4 = $r3, 8
; ALL-NEXT:    andd $r5 = $r1, 0xff00ff00.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    andd $r0 = $r0, 0xff00ff.@
; ALL-NEXT:    mulhq $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    iord $r0 = $r0, $r2
; ALL-NEXT:    mulhq $r3 = $r5, $r4
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    andd $r1 = $r1, 0xff00ff.@
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    iord $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 5)
  %r = mul <16 x i8> %a, %b
  ret <16 x i8> %r
}

define <16 x i8> @test_mul_2(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c) #0 {
; ALL-LABEL: test_mul_2:
; ALL:       # %bb.0:
; ALL-NEXT:    mulhq $r0 = $r0, $r2
; ALL-NEXT:    srlhqs $r6 = $r2, 8
; ALL-NEXT:    andd $r7 = $r0, 0xff00ff00.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    mulhq $r2 = $r7, $r6
; ALL-NEXT:    srlhqs $r6 = $r3, 8
; ALL-NEXT:    andd $r7 = $r1, 0xff00ff00.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    andd $r0 = $r0, 0xff00ff.@
; ALL-NEXT:    mulhq $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    iord $r0 = $r0, $r2
; ALL-NEXT:    srlhqs $r2 = $r4, 8
; ALL-NEXT:    mulhq $r3 = $r7, $r6
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    mulhq $r0 = $r0, $r4
; ALL-NEXT:    andd $r1 = $r1, 0xff00ff.@
; ALL-NEXT:    andd $r6 = $r0, 0xff00ff00.@
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    iord $r1 = $r1, $r3
; ALL-NEXT:    mulhq $r2 = $r6, $r2
; ALL-NEXT:    srlhqs $r3 = $r5, 8
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    andd $r0 = $r0, 0xff00ff.@
; ALL-NEXT:    mulhq $r1 = $r1, $r5
; ALL-NEXT:    andd $r4 = $r1, 0xff00ff00.@
; ALL-NEXT:    ;; # (end cycle 6)
; ALL-NEXT:    iord $r0 = $r0, $r2
; ALL-NEXT:    mulhq $r3 = $r4, $r3
; ALL-NEXT:    ;; # (end cycle 7)
; ALL-NEXT:    andd $r1 = $r1, 0xff00ff.@
; ALL-NEXT:    ;; # (end cycle 8)
; ALL-NEXT:    iord $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 9)
  %r = mul <16 x i8> %a, %b
  %r1 = mul <16 x i8> %r, %c
  ret <16 x i8> %r1
}

define <16 x i8> @test_div(<16 x i8> %a, <16 x i8> %b) #0 {
; CV1-LABEL: test_div:
; CV1:       # %bb.0:
; CV1-NEXT:    addd $r12 = $r12, -64
; CV1-NEXT:    get $r16 = $ra
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sd 56[$r12] = $r16
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sd 48[$r12] = $r24
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    so 16[$r12] = $r20r21r22r23
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    sq 0[$r12] = $r18r19
; CV1-NEXT:    copyd $r18 = $r3
; CV1-NEXT:    copyd $r19 = $r1
; CV1-NEXT:    copyd $r20 = $r2
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    srld $r1 = $r20, 56
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    srld $r0 = $r21, 56
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    extfz $r0 = $r21, 55, 48
; CV1-NEXT:    extfz $r1 = $r20, 55, 48
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r0 = $r21, 47, 40
; CV1-NEXT:    extfz $r1 = $r20, 47, 40
; CV1-NEXT:    copyd $r23 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r23 = $r22, 15, 8
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    extfz $r0 = $r21, 39, 32
; CV1-NEXT:    extfz $r1 = $r20, 39, 32
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srlw $r0 = $r21, 24
; CV1-NEXT:    srlw $r1 = $r20, 24
; CV1-NEXT:    copyd $r24 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r24 = $r22, 15, 8
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r24 = $r23, 31, 16
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r0 = $r21, 23, 16
; CV1-NEXT:    extfz $r1 = $r20, 23, 16
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r0 = $r21, 15, 8
; CV1-NEXT:    extfz $r1 = $r20, 15, 8
; CV1-NEXT:    copyd $r23 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r23 = $r22, 15, 8
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    zxbd $r0 = $r21
; CV1-NEXT:    zxbd $r1 = $r20
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srld $r0 = $r19, 56
; CV1-NEXT:    srld $r1 = $r18, 56
; CV1-NEXT:    copyd $r20 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    insf $r20 = $r22, 15, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    insf $r20 = $r23, 31, 16
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r20 = $r24, 63, 32
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r0 = $r19, 55, 48
; CV1-NEXT:    extfz $r1 = $r18, 55, 48
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r0 = $r19, 47, 40
; CV1-NEXT:    extfz $r1 = $r18, 47, 40
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r22 = $r21, 15, 8
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    extfz $r0 = $r19, 39, 32
; CV1-NEXT:    extfz $r1 = $r18, 39, 32
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srlw $r0 = $r19, 24
; CV1-NEXT:    srlw $r1 = $r18, 24
; CV1-NEXT:    copyd $r23 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r23 = $r21, 15, 8
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r23 = $r22, 31, 16
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r0 = $r19, 23, 16
; CV1-NEXT:    extfz $r1 = $r18, 23, 16
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r0 = $r19, 15, 8
; CV1-NEXT:    extfz $r1 = $r18, 15, 8
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r22 = $r21, 15, 8
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    zxbd $r0 = $r19
; CV1-NEXT:    zxbd $r1 = $r18
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __divsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    lq $r18r19 = 0[$r12]
; CV1-NEXT:    copyd $r0 = $r20
; CV1-NEXT:    copyd $r1 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    insf $r1 = $r21, 15, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r1 = $r22, 31, 16
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CV1-NEXT:    insf $r1 = $r23, 63, 32
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    ld $r24 = 48[$r12]
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    ld $r16 = 56[$r12]
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    set $ra = $r16
; CV1-NEXT:    addd $r12 = $r12, 64
; CV1-NEXT:    ;; # (end cycle 10)
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_div:
; CV2:       # %bb.0:
; CV2-NEXT:    addd $r12 = $r12, -64
; CV2-NEXT:    get $r16 = $ra
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sd 56[$r12] = $r16
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    sd 48[$r12] = $r24
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    so 16[$r12] = $r20r21r22r23
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    sq 0[$r12] = $r18r19
; CV2-NEXT:    copyd $r18 = $r3
; CV2-NEXT:    copyd $r19 = $r1
; CV2-NEXT:    copyd $r20 = $r2
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    srld $r1 = $r20, 56
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    srld $r0 = $r21, 56
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    ;; # (end cycle 6)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 7)
; CV2-NEXT:    extfz $r0 = $r21, 55, 48
; CV2-NEXT:    extfz $r1 = $r20, 55, 48
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r21, 47, 40
; CV2-NEXT:    extfz $r1 = $r20, 47, 40
; CV2-NEXT:    copyd $r23 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r23 = $r22, 15, 8
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r21, 39, 32
; CV2-NEXT:    extfz $r1 = $r20, 39, 32
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    srlw $r0 = $r21, 24
; CV2-NEXT:    srlw $r1 = $r20, 24
; CV2-NEXT:    copyd $r24 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r24 = $r22, 15, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r24 = $r23, 31, 16
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    extfz $r0 = $r21, 23, 16
; CV2-NEXT:    extfz $r1 = $r20, 23, 16
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r21, 15, 8
; CV2-NEXT:    extfz $r1 = $r20, 15, 8
; CV2-NEXT:    copyd $r23 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r23 = $r22, 15, 8
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    zxbd $r0 = $r21
; CV2-NEXT:    zxbd $r1 = $r20
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    srld $r0 = $r19, 56
; CV2-NEXT:    srld $r1 = $r18, 56
; CV2-NEXT:    copyd $r20 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r20 = $r22, 15, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r20 = $r23, 31, 16
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    insf $r20 = $r24, 63, 32
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    extfz $r0 = $r19, 55, 48
; CV2-NEXT:    extfz $r1 = $r18, 55, 48
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r19, 47, 40
; CV2-NEXT:    extfz $r1 = $r18, 47, 40
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r22 = $r21, 15, 8
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r19, 39, 32
; CV2-NEXT:    extfz $r1 = $r18, 39, 32
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    srlw $r0 = $r19, 24
; CV2-NEXT:    srlw $r1 = $r18, 24
; CV2-NEXT:    copyd $r23 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r23 = $r21, 15, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r23 = $r22, 31, 16
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    extfz $r0 = $r19, 23, 16
; CV2-NEXT:    extfz $r1 = $r18, 23, 16
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r19, 15, 8
; CV2-NEXT:    extfz $r1 = $r18, 15, 8
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r22 = $r21, 15, 8
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    zxbd $r0 = $r19
; CV2-NEXT:    zxbd $r1 = $r18
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __divsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    lq $r18r19 = 0[$r12]
; CV2-NEXT:    copyd $r0 = $r20
; CV2-NEXT:    copyd $r1 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    insf $r1 = $r21, 15, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r1 = $r22, 31, 16
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CV2-NEXT:    insf $r1 = $r23, 63, 32
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    ld $r24 = 48[$r12]
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    ld $r16 = 56[$r12]
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    set $ra = $r16
; CV2-NEXT:    addd $r12 = $r12, 64
; CV2-NEXT:    ;; # (end cycle 10)
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = sdiv <16 x i8> %a, %b
  ret <16 x i8> %r
}

define <16 x i8> @test_rem(<16 x i8> %a, <16 x i8> %b) #0 {
; CV1-LABEL: test_rem:
; CV1:       # %bb.0:
; CV1-NEXT:    addd $r12 = $r12, -64
; CV1-NEXT:    get $r16 = $ra
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sd 56[$r12] = $r16
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sd 48[$r12] = $r24
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    so 16[$r12] = $r20r21r22r23
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    sq 0[$r12] = $r18r19
; CV1-NEXT:    copyd $r18 = $r3
; CV1-NEXT:    copyd $r19 = $r1
; CV1-NEXT:    copyd $r20 = $r2
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    srld $r1 = $r20, 56
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    srld $r0 = $r21, 56
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    extfz $r0 = $r21, 55, 48
; CV1-NEXT:    extfz $r1 = $r20, 55, 48
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r0 = $r21, 47, 40
; CV1-NEXT:    extfz $r1 = $r20, 47, 40
; CV1-NEXT:    copyd $r23 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r23 = $r22, 15, 8
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    extfz $r0 = $r21, 39, 32
; CV1-NEXT:    extfz $r1 = $r20, 39, 32
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srlw $r0 = $r21, 24
; CV1-NEXT:    srlw $r1 = $r20, 24
; CV1-NEXT:    copyd $r24 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r24 = $r22, 15, 8
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r24 = $r23, 31, 16
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r0 = $r21, 23, 16
; CV1-NEXT:    extfz $r1 = $r20, 23, 16
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r0 = $r21, 15, 8
; CV1-NEXT:    extfz $r1 = $r20, 15, 8
; CV1-NEXT:    copyd $r23 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r23 = $r22, 15, 8
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    zxbd $r0 = $r21
; CV1-NEXT:    zxbd $r1 = $r20
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srld $r0 = $r19, 56
; CV1-NEXT:    srld $r1 = $r18, 56
; CV1-NEXT:    copyd $r20 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    insf $r20 = $r22, 15, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    insf $r20 = $r23, 31, 16
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r20 = $r24, 63, 32
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r0 = $r19, 55, 48
; CV1-NEXT:    extfz $r1 = $r18, 55, 48
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r0 = $r19, 47, 40
; CV1-NEXT:    extfz $r1 = $r18, 47, 40
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r22 = $r21, 15, 8
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    extfz $r0 = $r19, 39, 32
; CV1-NEXT:    extfz $r1 = $r18, 39, 32
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srlw $r0 = $r19, 24
; CV1-NEXT:    srlw $r1 = $r18, 24
; CV1-NEXT:    copyd $r23 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r23 = $r21, 15, 8
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r23 = $r22, 31, 16
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r0 = $r19, 23, 16
; CV1-NEXT:    extfz $r1 = $r18, 23, 16
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r0 = $r19, 15, 8
; CV1-NEXT:    extfz $r1 = $r18, 15, 8
; CV1-NEXT:    copyd $r22 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r22 = $r21, 15, 8
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    zxbd $r0 = $r19
; CV1-NEXT:    zxbd $r1 = $r18
; CV1-NEXT:    copyd $r21 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxbd $r0 = $r0
; CV1-NEXT:    sxbd $r1 = $r1
; CV1-NEXT:    call __modsi3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    lq $r18r19 = 0[$r12]
; CV1-NEXT:    copyd $r0 = $r20
; CV1-NEXT:    copyd $r1 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    insf $r1 = $r21, 15, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    insf $r1 = $r22, 31, 16
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CV1-NEXT:    insf $r1 = $r23, 63, 32
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    ld $r24 = 48[$r12]
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    ld $r16 = 56[$r12]
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    set $ra = $r16
; CV1-NEXT:    addd $r12 = $r12, 64
; CV1-NEXT:    ;; # (end cycle 10)
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: test_rem:
; CV2:       # %bb.0:
; CV2-NEXT:    addd $r12 = $r12, -64
; CV2-NEXT:    get $r16 = $ra
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sd 56[$r12] = $r16
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    sd 48[$r12] = $r24
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    so 16[$r12] = $r20r21r22r23
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    sq 0[$r12] = $r18r19
; CV2-NEXT:    copyd $r18 = $r3
; CV2-NEXT:    copyd $r19 = $r1
; CV2-NEXT:    copyd $r20 = $r2
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    srld $r1 = $r20, 56
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    srld $r0 = $r21, 56
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    ;; # (end cycle 6)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 7)
; CV2-NEXT:    extfz $r0 = $r21, 55, 48
; CV2-NEXT:    extfz $r1 = $r20, 55, 48
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r21, 47, 40
; CV2-NEXT:    extfz $r1 = $r20, 47, 40
; CV2-NEXT:    copyd $r23 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r23 = $r22, 15, 8
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r21, 39, 32
; CV2-NEXT:    extfz $r1 = $r20, 39, 32
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    srlw $r0 = $r21, 24
; CV2-NEXT:    srlw $r1 = $r20, 24
; CV2-NEXT:    copyd $r24 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r24 = $r22, 15, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r24 = $r23, 31, 16
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    extfz $r0 = $r21, 23, 16
; CV2-NEXT:    extfz $r1 = $r20, 23, 16
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r21, 15, 8
; CV2-NEXT:    extfz $r1 = $r20, 15, 8
; CV2-NEXT:    copyd $r23 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r23 = $r22, 15, 8
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    zxbd $r0 = $r21
; CV2-NEXT:    zxbd $r1 = $r20
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    srld $r0 = $r19, 56
; CV2-NEXT:    srld $r1 = $r18, 56
; CV2-NEXT:    copyd $r20 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r20 = $r22, 15, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r20 = $r23, 31, 16
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    insf $r20 = $r24, 63, 32
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    extfz $r0 = $r19, 55, 48
; CV2-NEXT:    extfz $r1 = $r18, 55, 48
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r19, 47, 40
; CV2-NEXT:    extfz $r1 = $r18, 47, 40
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r22 = $r21, 15, 8
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r19, 39, 32
; CV2-NEXT:    extfz $r1 = $r18, 39, 32
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    srlw $r0 = $r19, 24
; CV2-NEXT:    srlw $r1 = $r18, 24
; CV2-NEXT:    copyd $r23 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r23 = $r21, 15, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r23 = $r22, 31, 16
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    extfz $r0 = $r19, 23, 16
; CV2-NEXT:    extfz $r1 = $r18, 23, 16
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    extfz $r0 = $r19, 15, 8
; CV2-NEXT:    extfz $r1 = $r18, 15, 8
; CV2-NEXT:    copyd $r22 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    insf $r22 = $r21, 15, 8
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    zxbd $r0 = $r19
; CV2-NEXT:    zxbd $r1 = $r18
; CV2-NEXT:    copyd $r21 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sxbd $r0 = $r0
; CV2-NEXT:    sxbd $r1 = $r1
; CV2-NEXT:    call __modsi3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    lq $r18r19 = 0[$r12]
; CV2-NEXT:    copyd $r0 = $r20
; CV2-NEXT:    copyd $r1 = $r0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    insf $r1 = $r21, 15, 8
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r1 = $r22, 31, 16
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CV2-NEXT:    insf $r1 = $r23, 63, 32
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    ld $r24 = 48[$r12]
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    ld $r16 = 56[$r12]
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    set $ra = $r16
; CV2-NEXT:    addd $r12 = $r12, 64
; CV2-NEXT:    ;; # (end cycle 10)
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = srem <16 x i8> %a, %b
  ret <16 x i8> %r
}

define void @test_ldst_v8i8(ptr %a, ptr %b) {
; ALL-LABEL: test_ldst_v8i8:
; ALL:       # %bb.0:
; ALL-NEXT:    lq $r2r3 = 0[$r0]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sq 0[$r1] = $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %t1 = load <16 x i8>, ptr %a
  store <16 x i8> %t1, ptr %b, align 16
  ret void
}

declare <16 x i8> @test_callee(<16 x i8> %a, <16 x i8> %b) #0

define <16 x i8> @test_call(<16 x i8> %a, <16 x i8> %b) #0 {
; ALL-LABEL: test_call:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <16 x i8> @test_callee(<16 x i8> %a, <16 x i8> %b)
  ret <16 x i8> %r
}

define <16 x i8> @test_call_flipped(<16 x i8> %a, <16 x i8> %b) #0 {
; ALL-LABEL: test_call_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r2
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r1 = $r3
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <16 x i8> @test_callee(<16 x i8> %b, <16 x i8> %a)
  ret <16 x i8> %r
}

define <16 x i8> @test_tailcall_flipped(<16 x i8> %a, <16 x i8> %b) #0 {
; ALL-LABEL: test_tailcall_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r0 = $r2
; ALL-NEXT:    copyd $r1 = $r3
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    goto test_callee
; ALL-NEXT:    ;; # (end cycle 0)
  %r = tail call <16 x i8> @test_callee(<16 x i8> %b, <16 x i8> %a)
  ret <16 x i8> %r
}

define <16 x i8> @test_select(<16 x i8> %a, <16 x i8> %b, i1 zeroext %c) #0 {
; ALL-LABEL: test_select:
; ALL:       # %bb.0:
; ALL-NEXT:    cmoved.even $r4 ? $r0 = $r2
; ALL-NEXT:    cmoved.even $r4 ? $r1 = $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = select i1 %c, <16 x i8> %a, <16 x i8> %b
  ret <16 x i8> %r
}

define <16 x i8> @test_select_cc(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c, <16 x i8> %d) #0 {
; CV1-LABEL: test_select_cc:
; CV1:       # %bb.0:
; CV1-NEXT:    sxmbhq $r8 = $r6
; CV1-NEXT:    sxmbhq $r9 = $r4
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxlbhq $r4 = $r4
; CV1-NEXT:    sxlbhq $r6 = $r6
; CV1-NEXT:    compnhq.lt $r8 = $r9, $r8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    compnhq.lt $r4 = $r4, $r6
; CV1-NEXT:    andd $r8 = $r8, 0xff00ff.@
; CV1-NEXT:    sxmbhq $r9 = $r2
; CV1-NEXT:    sxmbhq $r10 = $r0
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff.@
; CV1-NEXT:    sxlbhq $r8 = $r7
; CV1-NEXT:    cmovehq.even $r8 ? $r10 = $r9
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    sxlbhq $r6 = $r5
; CV1-NEXT:    sxmbhq $r7 = $r7
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    sxlbhq $r2 = $r2
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    cmovehq.even $r4 ? $r0 = $r2
; CV1-NEXT:    compnhq.lt $r4 = $r6, $r8
; CV1-NEXT:    sxmbhq $r5 = $r5
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff.@
; CV1-NEXT:    compnhq.lt $r5 = $r5, $r7
; CV1-NEXT:    sxmbhq $r6 = $r3
; CV1-NEXT:    sxmbhq $r7 = $r1
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    sxlbhq $r3 = $r3
; CV1-NEXT:    andd $r5 = $r5, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 8)
; CV1-NEXT:    cmovehq.even $r4 ? $r1 = $r3
; CV1-NEXT:    cmovehq.even $r5 ? $r7 = $r6
; CV1-NEXT:    ;; # (end cycle 9)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    sbmm8 $r2 = $r10, 0x40100401
; CV1-NEXT:    ;; # (end cycle 10)
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    sbmm8 $r3 = $r7, 0x40100401
; CV1-NEXT:    ;; # (end cycle 11)
; CV1-NEXT:    insf $r0 = $r2, 63, 32
; CV1-NEXT:    insf $r1 = $r3, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 12)
;
; CV2-LABEL: test_select_cc:
; CV2:       # %bb.0:
; CV2-NEXT:    compnbo.lt $r4 = $r4, $r6
; CV2-NEXT:    compnbo.lt $r5 = $r5, $r7
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    cmovebo.even $r4 ? $r0 = $r2
; CV2-NEXT:    cmovebo.even $r5 ? $r1 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 1)
  %cc = icmp slt <16 x i8> %c, %d
  %r = select <16 x i1> %cc, <16 x i8> %a, <16 x i8> %b
  ret <16 x i8> %r
}

declare <16 x i8> @llvm.abs.v8i8(<16 x i8>, i1) #0

define <16 x i8> @test_abs(<16 x i8> %a) #0 {
; CV1-LABEL: test_abs:
; CV1:       # %bb.0:
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    sxmbhq $r2 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    sxmbhq $r3 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    abshq $r0 = $r0
; CV1-NEXT:    abshq $r2 = $r2
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    abshq $r1 = $r1
; CV1-NEXT:    abshq $r3 = $r3
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    sbmm8 $r3 = $r3, 0x40100401
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    insf $r0 = $r2, 32, 63
; CV1-NEXT:    insf $r1 = $r3, 32, 63
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 6)
;
; CV2-LABEL: test_abs:
; CV2:       # %bb.0:
; CV2-NEXT:    absbo $r0 = $r0
; CV2-NEXT:    absbo $r1 = $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = call <16 x i8> @llvm.abs.v8i8(<16 x i8> %a, i1 false)
  ret <16 x i8> %r
}

define <16 x i8> @test_insertelement0(<16 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement0:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r2, 7, 0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %i = insertelement <16 x i8> %a, i8 %x, i64 0
  ret <16 x i8> %i
}

define <16 x i8> @test_insertelement1(<16 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement1:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r2, 15, 8
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %i = insertelement <16 x i8> %a, i8 %x, i64 1
  ret <16 x i8> %i
}

define <16 x i8> @test_insertelement2(<16 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement2:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r2, 23, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %i = insertelement <16 x i8> %a, i8 %x, i64 2
  ret <16 x i8> %i
}

define <16 x i8> @test_insertelement3(<16 x i8> %a, i8 %x) #0 {
; ALL-LABEL: test_insertelement3:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r2, 31, 24
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %i = insertelement <16 x i8> %a, i8 %x, i64 3
  ret <16 x i8> %i
}

define <16 x i8> @test_insertelement(<16 x i8> %a, i8 %x, i64 %p) #0 {
; ALL-LABEL: test_insertelement:
; ALL:       # %bb.0:
; ALL-NEXT:    andd $r3 = $r3, 15
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sq 16[$r12] = $r0r1
; ALL-NEXT:    addd $r4 = $r12, 16
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sb $r3[$r4] = $r2
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r0 = 16[$r12]
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r1 = 24[$r12]
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 4)
  %i = insertelement <16 x i8> %a, i8 %x, i64 %p
  ret <16 x i8> %i
}

define <16 x i8> @mulsub(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c) #0 {
; CV1-LABEL: mulsub:
; CV1:       # %bb.0:
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    srlhqs $r5 = $r5, 8
; CV1-NEXT:    mulhq $r6 = $r3, $r5
; CV1-NEXT:    srlhqs $r7 = $r4, 8
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff00.@
; CV1-NEXT:    mulhq $r4 = $r2, $r4
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    mulhq $r2 = $r2, $r7
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    mulhq $r3 = $r3, $r5
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff.@
; CV1-NEXT:    andd $r5 = $r6, 0xff00ff.@
; CV1-NEXT:    iord $r6 = $r1, 0x80808080.@
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    iord $r2 = $r4, $r2
; CV1-NEXT:    iord $r4 = $r0, 0x80808080.@
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    neord $r0 = $r0, $r2
; CV1-NEXT:    iord $r3 = $r5, $r3
; CV1-NEXT:    andd $r5 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    neord $r1 = $r1, $r3
; CV1-NEXT:    andd $r2 = $r3, 0x7f7f7f7f.@
; CV1-NEXT:    sbfd $r3 = $r5, $r4
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    eord $r0 = $r0, $r3
; CV1-NEXT:    andd $r1 = $r1, 0x80808080.@
; CV1-NEXT:    sbfd $r2 = $r2, $r6
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    eord $r1 = $r1, $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 8)
;
; CV2-LABEL: mulsub:
; CV2:       # %bb.0:
; CV2-NEXT:    mulhq $r3 = $r3, $r5
; CV2-NEXT:    srlhqs $r5 = $r4, 8
; CV2-NEXT:    srlhqs $r6 = $r5, 8
; CV2-NEXT:    andd $r7 = $r3, 0xff00ff00.@
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    mulhq $r6 = $r7, $r6
; CV2-NEXT:    andd $r7 = $r2, 0xff00ff00.@
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    mulhq $r2 = $r2, $r4
; CV2-NEXT:    andd $r3 = $r3, 0xff00ff.@
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    iord $r3 = $r3, $r6
; CV2-NEXT:    mulhq $r4 = $r7, $r5
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    sbfbo $r1 = $r3, $r1
; CV2-NEXT:    andd $r2 = $r2, 0xff00ff.@
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    iord $r2 = $r2, $r4
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    sbfbo $r0 = $r2, $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 6)
  %mul = mul <16 x i8> %b, %c
  %sub = sub <16 x i8> %a, %mul
  ret <16 x i8> %sub
}

define <16 x i8> @vnot(<16 x i8> %a) #0 {
; ALL-LABEL: vnot:
; ALL:       # %bb.0:
; ALL-NEXT:    notd $r0 = $r0
; ALL-NEXT:    notd $r1 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %vnot = xor <16 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <16 x i8> %vnot
}

define <16 x i8> @nandd_rr(<16 x i8> %0, <16 x i8> %1) {
; ALL-LABEL: nandd_rr:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r2, $r0
; ALL-NEXT:    nandd $r1 = $r3, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %3 = and <16 x i8> %1, %0
  %4 = xor <16 x i8> %3, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <16 x i8> %4
}

define <16 x i8> @concat(<8 x i8> %a) #0 {
; ALL-LABEL: concat:
; ALL:       # %bb.0:
; ALL-NEXT:    zxbd $r0 = $r0
; ALL-NEXT:    srlw $r1 = $r0, 24
; ALL-NEXT:    extfz $r2 = $r0, 23, 16
; ALL-NEXT:    extfz $r3 = $r0, 15, 8
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    insf $r0 = $r3, 15, 8
; ALL-NEXT:    insf $r2 = $r1, 15, 8
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    insf $r0 = $r2, 31, 16
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    insf $r0 = $r0, 63, 32
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 4)
  %r = shufflevector <8 x i8> %a, <8 x i8> undef,
  <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  ret <16 x i8> %r
}

define <16 x i8> @concat2(<8 x i8> %a, <8 x i8> %b){
; ALL-LABEL: concat2:
; ALL:       # %bb.0:
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v = shufflevector <8 x i8> %a, <8 x i8> %b, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x i8> %v
}

define <16 x i8> @splat_v8i8(i32 %s) {
; ALL-LABEL: splat_v8i8:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x1010101.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
entry:
  %conv = trunc i32 %s to i8
  %vecinit = insertelement <16 x i8> undef, i8 %conv, i32 0
  %vecinit14 = shufflevector <16 x i8> %vecinit, <16 x i8> undef, <16 x i32> zeroinitializer
  ret <16 x i8> %vecinit14
}

define <16 x i8> @splat_v8i8_ri() {
; ALL-LABEL: splat_v8i8_ri:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    make $r0 = 0x202020202020202
; ALL-NEXT:    make $r1 = 0x202020202020202
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
entry:
  ret <16 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
}

define <16 x i8> @shl(<16 x i8> %v, i32 %s) {
; CV1-LABEL: shl:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    andd $r3 = $r0, 0xff00ff.@
; CV1-NEXT:    andd $r4 = $r1, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    slld $r0 = $r0, $r2
; CV1-NEXT:    slld $r1 = $r1, $r2
; CV1-NEXT:    slld $r3 = $r3, $r2
; CV1-NEXT:    slld $r4 = $r4, $r2
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    andd $r2 = $r3, 0xff00ff.@
; CV1-NEXT:    andd $r3 = $r4, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: shl:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, $r2
; CV2-NEXT:    sllbos $r1 = $r1, $r2
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = trunc i32 %s to i8
  %1 = insertelement <16 x i8> undef, i8 %0, i32 0
  %sh_prom = shufflevector <16 x i8> %1, <16 x i8> undef, <16 x i32> zeroinitializer
  %shl = shl <16 x i8> %v, %sh_prom
  ret <16 x i8> %shl
}

define <16 x i8> @lsr(<16 x i8> %v, i32 %s) {
; CV1-LABEL: lsr:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    andd $r3 = $r0, 0xff00ff.@
; CV1-NEXT:    andd $r4 = $r1, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    srld $r0 = $r0, $r2
; CV1-NEXT:    srld $r1 = $r1, $r2
; CV1-NEXT:    srld $r3 = $r3, $r2
; CV1-NEXT:    srld $r4 = $r4, $r2
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    andd $r2 = $r3, 0xff00ff.@
; CV1-NEXT:    andd $r3 = $r4, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: lsr:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r0 = $r0, $r2
; CV2-NEXT:    srlbos $r1 = $r1, $r2
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = trunc i32 %s to i8
  %1 = insertelement <16 x i8> undef, i8 %0, i32 0
  %sh_prom = shufflevector <16 x i8> %1, <16 x i8> undef, <16 x i32> zeroinitializer
  %shr = lshr <16 x i8> %v, %sh_prom
  ret <16 x i8> %shr
}

define <16 x i8> @rotl(<16 x i8> %v, i32 %s) {
; CV1-LABEL: rotl:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8080202008080202
; CV1-NEXT:    sbmm8 $r3 = $r0, 0x4040101004040101
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x8080202008080202
; CV1-NEXT:    sbmm8 $r4 = $r1, 0x4040101004040101
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sllhqs $r0 = $r0, $r2
; CV1-NEXT:    sllhqs $r3 = $r3, $r2
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    sllhqs $r1 = $r1, $r2
; CV1-NEXT:    sllhqs $r4 = $r4, $r2
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    srlhqs $r2 = $r3, 8
; CV1-NEXT:    srlhqs $r3 = $r4, 8
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 5)
;
; CV2-LABEL: rotl:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r2 = $r0, $r2
; CV2-NEXT:    sbfw $r3 = $r2, 8
; CV2-NEXT:    sllbos $r4 = $r1, $r2
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    srlbos $r0 = $r0, $r3
; CV2-NEXT:    srlbos $r1 = $r1, $r3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    iord $r0 = $r0, $r2
; CV2-NEXT:    iord $r1 = $r1, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 2)
entry:
  %0 = trunc i32 %s to i8
  %1 = insertelement <16 x i8> undef, i8 %0, i32 0
  %sh_prom = shufflevector <16 x i8> %1, <16 x i8> undef, <16 x i32> zeroinitializer
  %shl = shl <16 x i8> %v, %sh_prom
  %2 = sub i8 8, %0
  %3 = insertelement <16 x i8> undef, i8 %2, i32 0
  %sh_prom3 = shufflevector <16 x i8> %3, <16 x i8> undef, <16 x i32> zeroinitializer
  %shr = lshr <16 x i8> %v, %sh_prom3
  %or = or <16 x i8> %shr, %shl
  ret <16 x i8> %or
}

define <16 x i8> @rotr(<16 x i8> %v, i32 %s) {
; CV1-LABEL: rotr:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x4040101004040101
; CV1-NEXT:    sbmm8 $r3 = $r0, 0x8080202008080202
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x4040101004040101
; CV1-NEXT:    sbmm8 $r4 = $r1, 0x8080202008080202
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srlhqs $r0 = $r0, $r2
; CV1-NEXT:    srlhqs $r3 = $r3, $r2
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff.@
; CV1-NEXT:    srlhqs $r1 = $r1, $r2
; CV1-NEXT:    srlhqs $r4 = $r4, $r2
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; CV1-NEXT:    sllhqs $r2 = $r3, 8
; CV1-NEXT:    sllhqs $r3 = $r4, 8
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 5)
;
; CV2-LABEL: rotr:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r2 = $r0, $r2
; CV2-NEXT:    sbfw $r3 = $r2, 8
; CV2-NEXT:    srlbos $r4 = $r1, $r2
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sllbos $r0 = $r0, $r3
; CV2-NEXT:    sllbos $r1 = $r1, $r3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    iord $r0 = $r0, $r2
; CV2-NEXT:    iord $r1 = $r1, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 2)
entry:
  %0 = trunc i32 %s to i8
  %1 = insertelement <16 x i8> undef, i8 %0, i32 0
  %sh_prom = shufflevector <16 x i8> %1, <16 x i8> undef, <16 x i32> zeroinitializer
  %shr = lshr <16 x i8> %v, %sh_prom
  %2 = sub i8 8, %0
  %3 = insertelement <16 x i8> undef, i8 %2, i32 0
  %sh_prom3 = shufflevector <16 x i8> %3, <16 x i8> undef, <16 x i32> zeroinitializer
  %shl = shl <16 x i8> %v, %sh_prom3
  %or = or <16 x i8> %shl, %shr
  ret <16 x i8> %or
}

define <16 x i8> @abdbo_rr(<16 x i8> %a, <16 x i8> %b) {
; CV1-LABEL: abdbo_rr:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    make $r4 = 0x8000400020001
; CV1-NEXT:    make $r5 = 0x80004000200010
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sbmm8 $r6 = $r2, $r4
; CV1-NEXT:    sbmm8 $r7 = $r0, $r4
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sbmm8 $r0 = $r0, $r5
; CV1-NEXT:    sbmm8 $r2 = $r2, $r5
; CV1-NEXT:    minuhq $r6 = $r7, $r6
; CV1-NEXT:    maxuhq $r8 = $r7, $r6
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    minuhq $r0 = $r0, $r2
; CV1-NEXT:    sbmm8 $r2 = $r3, $r4
; CV1-NEXT:    sbmm8 $r4 = $r1, $r4
; CV1-NEXT:    maxuhq $r7 = $r0, $r2
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    sbmm8 $r1 = $r1, $r5
; CV1-NEXT:    minuhq $r2 = $r4, $r2
; CV1-NEXT:    sbmm8 $r3 = $r3, $r5
; CV1-NEXT:    maxuhq $r5 = $r4, $r2
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    sbfhq $r0 = $r0, $r7
; CV1-NEXT:    minuhq $r1 = $r1, $r3
; CV1-NEXT:    maxuhq $r4 = $r1, $r3
; CV1-NEXT:    sbfhq $r6 = $r6, $r8
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401.@
; CV1-NEXT:    sbfhq $r1 = $r1, $r4
; CV1-NEXT:    sbfhq $r2 = $r2, $r5
; CV1-NEXT:    sbmm8 $r3 = $r6, 0x40100401
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401.@
; CV1-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    insf $r0 = $r3, 31, 0
; CV1-NEXT:    insf $r1 = $r2, 31, 0
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 8)
;
; CV2-LABEL: abdbo_rr:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    abdbo $r0 = $r2, $r0
; CV2-NEXT:    abdbo $r1 = $r3, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub nsw <16 x i8> %a, %b
  %0 = tail call <16 x i8> @llvm.abs.v8i8(<16 x i8> %sub, i1 true)
  ret <16 x i8> %0
}

define  <16 x i8> @v4_maxbo_rr_i8(<16 x i8> %a, <16 x i8> %b) {
; CV1-LABEL: v4_maxbo_rr_i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff00.@
; CV1-NEXT:    sllhqs $r4 = $r2, 8
; CV1-NEXT:    sllhqs $r5 = $r0, 8
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    maxhq $r4 = $r5, $r4
; CV1-NEXT:    sllhqs $r6 = $r3, 8
; CV1-NEXT:    sllhqs $r7 = $r1, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    maxhq $r0 = $r0, $r2
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    srlhqs $r2 = $r4, 8
; CV1-NEXT:    maxhq $r5 = $r7, $r6
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    maxhq $r1 = $r1, $r3
; CV1-NEXT:    srlhqs $r3 = $r5, 8
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 4)
;
; CV2-LABEL: v4_maxbo_rr_i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    maxbo $r0 = $r0, $r2
; CV2-NEXT:    maxbo $r1 = $r1, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = call <16 x i8> @llvm.smax.v8i8(<16 x i8> %a, <16 x i8> %b)
  ret <16 x i8> %0
}

define  <16 x i8> @v4_minbo_rr_i8(<16 x i8> %a, <16 x i8> %b) {
; CV1-LABEL: v4_minbo_rr_i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff00.@
; CV1-NEXT:    sllhqs $r4 = $r2, 8
; CV1-NEXT:    sllhqs $r5 = $r0, 8
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    minhq $r4 = $r5, $r4
; CV1-NEXT:    sllhqs $r6 = $r3, 8
; CV1-NEXT:    sllhqs $r7 = $r1, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    minhq $r0 = $r0, $r2
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    srlhqs $r2 = $r4, 8
; CV1-NEXT:    minhq $r5 = $r7, $r6
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    minhq $r1 = $r1, $r3
; CV1-NEXT:    srlhqs $r3 = $r5, 8
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 4)
;
; CV2-LABEL: v4_minbo_rr_i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    minbo $r0 = $r0, $r2
; CV2-NEXT:    minbo $r1 = $r1, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = call <16 x i8> @llvm.smin.v8i8(<16 x i8> %a, <16 x i8> %b)
  ret <16 x i8> %0
}

define  <16 x i8> @v4_umaxbo_rr_i8(<16 x i8> %a, <16 x i8> %b) {
; CV1-LABEL: v4_umaxbo_rr_i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff00.@
; CV1-NEXT:    sllhqs $r4 = $r2, 8
; CV1-NEXT:    sllhqs $r5 = $r0, 8
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    maxuhq $r4 = $r5, $r4
; CV1-NEXT:    sllhqs $r6 = $r3, 8
; CV1-NEXT:    sllhqs $r7 = $r1, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    maxuhq $r0 = $r0, $r2
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    srlhqs $r2 = $r4, 8
; CV1-NEXT:    maxuhq $r5 = $r7, $r6
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    maxuhq $r1 = $r1, $r3
; CV1-NEXT:    srlhqs $r3 = $r5, 8
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 4)
;
; CV2-LABEL: v4_umaxbo_rr_i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    maxubo $r0 = $r0, $r2
; CV2-NEXT:    maxubo $r1 = $r1, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = call <16 x i8> @llvm.umax.v8i8(<16 x i8> %a, <16 x i8> %b)
  ret <16 x i8> %0
}

define  <16 x i8> @v4_uminbo_rr_i8(<16 x i8> %a, <16 x i8> %b) {
; CV1-LABEL: v4_uminbo_rr_i8:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff00.@
; CV1-NEXT:    sllhqs $r4 = $r2, 8
; CV1-NEXT:    sllhqs $r5 = $r0, 8
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    minuhq $r4 = $r5, $r4
; CV1-NEXT:    sllhqs $r6 = $r3, 8
; CV1-NEXT:    sllhqs $r7 = $r1, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    minuhq $r0 = $r0, $r2
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    srlhqs $r2 = $r4, 8
; CV1-NEXT:    minuhq $r5 = $r7, $r6
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    minuhq $r1 = $r1, $r3
; CV1-NEXT:    srlhqs $r3 = $r5, 8
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 4)
;
; CV2-LABEL: v4_uminbo_rr_i8:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    minubo $r0 = $r0, $r2
; CV2-NEXT:    minubo $r1 = $r1, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = call <16 x i8> @llvm.umin.v8i8(<16 x i8> %a, <16 x i8> %b)
  ret <16 x i8> %0
}

declare <16 x i8> @llvm.smax.v8i8(<16 x i8> %a, <16 x i8> %b)
declare <16 x i8> @llvm.smin.v8i8(<16 x i8> %a, <16 x i8> %b)
declare <16 x i8> @llvm.umax.v8i8(<16 x i8> %a, <16 x i8> %b)
declare <16 x i8> @llvm.umin.v8i8(<16 x i8> %a, <16 x i8> %b)

attributes #0 = { nounwind }

define <16 x i8> @test_div_4(<16 x i8> %a) {
; CV1-LABEL: test_div_4:
; CV1:       # %bb.0:
; CV1-NEXT:    srld $r2 = $r0, 56
; CV1-NEXT:    extfz $r3 = $r0, 55, 48
; CV1-NEXT:    extfz $r4 = $r0, 47, 40
; CV1-NEXT:    zxbd $r7 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    extfz $r5 = $r0, 39, 32
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfs $r3 = $r3, 7, 7
; CV1-NEXT:    extfs $r4 = $r4, 7, 7
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    srlw $r2 = $r0, 24
; CV1-NEXT:    insf $r3 = $r2, 15, 8
; CV1-NEXT:    extfs $r5 = $r5, 7, 7
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r4 = $r0, 23, 16
; CV1-NEXT:    insf $r5 = $r4, 15, 8
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    extfz $r6 = $r0, 15, 8
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    extfs $r4 = $r4, 7, 7
; CV1-NEXT:    extfs $r6 = $r6, 7, 7
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    insf $r4 = $r2, 15, 8
; CV1-NEXT:    extfs $r7 = $r7, 7, 7
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    insf $r5 = $r3, 31, 16
; CV1-NEXT:    insf $r7 = $r6, 15, 8
; CV1-NEXT:    ;; # (end cycle 8)
; CV1-NEXT:    srld $r4 = $r1, 56
; CV1-NEXT:    insf $r7 = $r4, 31, 16
; CV1-NEXT:    ;; # (end cycle 9)
; CV1-NEXT:    extfs $r4 = $r4, 7, 7
; CV1-NEXT:    insf $r7 = $r5, 63, 32
; CV1-NEXT:    ;; # (end cycle 10)
; CV1-NEXT:    andd $r2 = $r7, 0xff00ff.@
; CV1-NEXT:    andd $r3 = $r7, 0xff00ff00.@
; CV1-NEXT:    extfz $r7 = $r1, 39, 32
; CV1-NEXT:    ;; # (end cycle 11)
; CV1-NEXT:    srld $r2 = $r2, 6
; CV1-NEXT:    srld $r3 = $r3, 6
; CV1-NEXT:    extfs $r7 = $r7, 7, 7
; CV1-NEXT:    ;; # (end cycle 12)
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    ;; # (end cycle 13)
; CV1-NEXT:    iord $r2 = $r3, $r2
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 14)
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    extfz $r2 = $r1, 55, 48
; CV1-NEXT:    andd $r5 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 15)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    addd $r3 = $r3, $r5
; CV1-NEXT:    extfz $r5 = $r1, 47, 40
; CV1-NEXT:    ;; # (end cycle 16)
; CV1-NEXT:    eord $r0 = $r3, $r0
; CV1-NEXT:    insf $r2 = $r4, 15, 8
; CV1-NEXT:    extfs $r3 = $r5, 7, 7
; CV1-NEXT:    zxbd $r4 = $r1
; CV1-NEXT:    ;; # (end cycle 17)
; CV1-NEXT:    extfz $r3 = $r1, 23, 16
; CV1-NEXT:    srld $r5 = $r0, 56
; CV1-NEXT:    insf $r7 = $r3, 15, 8
; CV1-NEXT:    ;; # (end cycle 18)
; CV1-NEXT:    srlw $r2 = $r1, 24
; CV1-NEXT:    extfs $r3 = $r3, 7, 7
; CV1-NEXT:    insf $r7 = $r2, 31, 16
; CV1-NEXT:    ;; # (end cycle 19)
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    extfs $r4 = $r4, 7, 7
; CV1-NEXT:    ;; # (end cycle 20)
; CV1-NEXT:    extfz $r2 = $r1, 15, 8
; CV1-NEXT:    insf $r3 = $r2, 15, 8
; CV1-NEXT:    ;; # (end cycle 21)
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    extfz $r6 = $r0, 55, 48
; CV1-NEXT:    ;; # (end cycle 22)
; CV1-NEXT:    extfz $r2 = $r0, 47, 40
; CV1-NEXT:    insf $r4 = $r2, 15, 8
; CV1-NEXT:    ;; # (end cycle 23)
; CV1-NEXT:    extfz $r3 = $r0, 39, 32
; CV1-NEXT:    insf $r4 = $r3, 31, 16
; CV1-NEXT:    ;; # (end cycle 24)
; CV1-NEXT:    extfs $r2 = $r2, 7, 2
; CV1-NEXT:    extfs $r3 = $r3, 7, 2
; CV1-NEXT:    ;; # (end cycle 25)
; CV1-NEXT:    insf $r3 = $r2, 15, 8
; CV1-NEXT:    insf $r4 = $r7, 63, 32
; CV1-NEXT:    ;; # (end cycle 26)
; CV1-NEXT:    andd $r2 = $r4, 0xff00ff.@
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff00.@
; CV1-NEXT:    extfs $r5 = $r5, 7, 2
; CV1-NEXT:    extfs $r6 = $r6, 7, 2
; CV1-NEXT:    ;; # (end cycle 27)
; CV1-NEXT:    srld $r2 = $r2, 6
; CV1-NEXT:    srld $r4 = $r4, 6
; CV1-NEXT:    srlw $r5 = $r0, 24
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;; # (end cycle 28)
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; CV1-NEXT:    insf $r3 = $r6, 31, 16
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff00.@
; CV1-NEXT:    extfz $r6 = $r0, 23, 16
; CV1-NEXT:    ;; # (end cycle 29)
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    iord $r2 = $r4, $r2
; CV1-NEXT:    extfs $r5 = $r5, 7, 2
; CV1-NEXT:    extfz $r7 = $r0, 15, 8
; CV1-NEXT:    ;; # (end cycle 30)
; CV1-NEXT:    andd $r1 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    eord $r2 = $r1, $r2
; CV1-NEXT:    andd $r4 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    extfs $r6 = $r6, 7, 2
; CV1-NEXT:    ;; # (end cycle 31)
; CV1-NEXT:    extfs $r0 = $r0, 7, 2
; CV1-NEXT:    addd $r1 = $r1, $r4
; CV1-NEXT:    andd $r2 = $r2, 0x80808080.@
; CV1-NEXT:    extfs $r7 = $r7, 7, 2
; CV1-NEXT:    ;; # (end cycle 32)
; CV1-NEXT:    insf $r0 = $r7, 15, 8
; CV1-NEXT:    eord $r1 = $r1, $r2
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;; # (end cycle 33)
; CV1-NEXT:    insf $r0 = $r6, 31, 16
; CV1-NEXT:    srld $r2 = $r1, 56
; CV1-NEXT:    extfz $r4 = $r1, 55, 48
; CV1-NEXT:    ;; # (end cycle 34)
; CV1-NEXT:    extfz $r5 = $r1, 47, 40
; CV1-NEXT:    extfz $r6 = $r1, 39, 32
; CV1-NEXT:    ;; # (end cycle 35)
; CV1-NEXT:    extfs $r2 = $r2, 7, 2
; CV1-NEXT:    extfs $r4 = $r4, 7, 2
; CV1-NEXT:    ;; # (end cycle 36)
; CV1-NEXT:    extfs $r5 = $r5, 7, 2
; CV1-NEXT:    extfs $r6 = $r6, 7, 2
; CV1-NEXT:    ;; # (end cycle 37)
; CV1-NEXT:    srlw $r2 = $r1, 24
; CV1-NEXT:    insf $r4 = $r2, 15, 8
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;; # (end cycle 38)
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r5 = $r1, 23, 16
; CV1-NEXT:    extfz $r7 = $r1, 15, 8
; CV1-NEXT:    ;; # (end cycle 39)
; CV1-NEXT:    extfs $r2 = $r2, 7, 2
; CV1-NEXT:    extfs $r5 = $r5, 7, 2
; CV1-NEXT:    ;; # (end cycle 40)
; CV1-NEXT:    extfs $r1 = $r1, 7, 2
; CV1-NEXT:    extfs $r7 = $r7, 7, 2
; CV1-NEXT:    ;; # (end cycle 41)
; CV1-NEXT:    insf $r1 = $r7, 15, 8
; CV1-NEXT:    insf $r5 = $r2, 15, 8
; CV1-NEXT:    ;; # (end cycle 42)
; CV1-NEXT:    insf $r1 = $r5, 31, 16
; CV1-NEXT:    insf $r6 = $r4, 31, 16
; CV1-NEXT:    ;; # (end cycle 43)
; CV1-NEXT:    insf $r0 = $r3, 63, 32
; CV1-NEXT:    insf $r1 = $r6, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 44)
;
; CV2-LABEL: test_div_4:
; CV2:       # %bb.0:
; CV2-NEXT:    srabos $r2 = $r0, 7
; CV2-NEXT:    srabos $r3 = $r1, 7
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    srlbos $r2 = $r2, 6
; CV2-NEXT:    srlbos $r3 = $r3, 6
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    addbo $r0 = $r0, $r2
; CV2-NEXT:    addbo $r1 = $r1, $r3
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    srabos $r0 = $r0, 2
; CV2-NEXT:    srabos $r1 = $r1, 2
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 3)
  %r = sdiv <16 x i8> %a, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  ret <16 x i8> %r
}

define <16 x i8> @test_div_32(<16 x i8> %a) {
; CV1-LABEL: test_div_32:
; CV1:       # %bb.0:
; CV1-NEXT:    srld $r2 = $r0, 56
; CV1-NEXT:    extfz $r3 = $r0, 55, 48
; CV1-NEXT:    extfz $r4 = $r0, 47, 40
; CV1-NEXT:    zxbd $r7 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    extfz $r5 = $r0, 39, 32
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfs $r3 = $r3, 7, 7
; CV1-NEXT:    extfs $r4 = $r4, 7, 7
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    srlw $r2 = $r0, 24
; CV1-NEXT:    insf $r3 = $r2, 15, 8
; CV1-NEXT:    extfs $r5 = $r5, 7, 7
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r4 = $r0, 23, 16
; CV1-NEXT:    insf $r5 = $r4, 15, 8
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    extfz $r6 = $r0, 15, 8
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    extfs $r4 = $r4, 7, 7
; CV1-NEXT:    extfs $r6 = $r6, 7, 7
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    insf $r4 = $r2, 15, 8
; CV1-NEXT:    extfs $r7 = $r7, 7, 7
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    insf $r5 = $r3, 31, 16
; CV1-NEXT:    insf $r7 = $r6, 15, 8
; CV1-NEXT:    ;; # (end cycle 8)
; CV1-NEXT:    srld $r4 = $r1, 56
; CV1-NEXT:    insf $r7 = $r4, 31, 16
; CV1-NEXT:    ;; # (end cycle 9)
; CV1-NEXT:    extfs $r4 = $r4, 7, 7
; CV1-NEXT:    insf $r7 = $r5, 63, 32
; CV1-NEXT:    ;; # (end cycle 10)
; CV1-NEXT:    andd $r2 = $r7, 0xff00ff.@
; CV1-NEXT:    andd $r3 = $r7, 0xff00ff00.@
; CV1-NEXT:    extfz $r7 = $r1, 39, 32
; CV1-NEXT:    ;; # (end cycle 11)
; CV1-NEXT:    srld $r2 = $r2, 3
; CV1-NEXT:    srld $r3 = $r3, 3
; CV1-NEXT:    extfs $r7 = $r7, 7, 7
; CV1-NEXT:    ;; # (end cycle 12)
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff00.@
; CV1-NEXT:    ;; # (end cycle 13)
; CV1-NEXT:    iord $r2 = $r3, $r2
; CV1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 14)
; CV1-NEXT:    eord $r0 = $r0, $r2
; CV1-NEXT:    extfz $r2 = $r1, 55, 48
; CV1-NEXT:    andd $r5 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    ;; # (end cycle 15)
; CV1-NEXT:    andd $r0 = $r0, 0x80808080.@
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    addd $r3 = $r3, $r5
; CV1-NEXT:    extfz $r5 = $r1, 47, 40
; CV1-NEXT:    ;; # (end cycle 16)
; CV1-NEXT:    eord $r0 = $r3, $r0
; CV1-NEXT:    insf $r2 = $r4, 15, 8
; CV1-NEXT:    extfs $r3 = $r5, 7, 7
; CV1-NEXT:    zxbd $r4 = $r1
; CV1-NEXT:    ;; # (end cycle 17)
; CV1-NEXT:    extfz $r3 = $r1, 23, 16
; CV1-NEXT:    srld $r5 = $r0, 56
; CV1-NEXT:    insf $r7 = $r3, 15, 8
; CV1-NEXT:    ;; # (end cycle 18)
; CV1-NEXT:    srlw $r2 = $r1, 24
; CV1-NEXT:    extfs $r3 = $r3, 7, 7
; CV1-NEXT:    insf $r7 = $r2, 31, 16
; CV1-NEXT:    ;; # (end cycle 19)
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    extfs $r4 = $r4, 7, 7
; CV1-NEXT:    ;; # (end cycle 20)
; CV1-NEXT:    extfz $r2 = $r1, 15, 8
; CV1-NEXT:    insf $r3 = $r2, 15, 8
; CV1-NEXT:    ;; # (end cycle 21)
; CV1-NEXT:    extfs $r2 = $r2, 7, 7
; CV1-NEXT:    extfz $r6 = $r0, 55, 48
; CV1-NEXT:    ;; # (end cycle 22)
; CV1-NEXT:    extfz $r2 = $r0, 47, 40
; CV1-NEXT:    insf $r4 = $r2, 15, 8
; CV1-NEXT:    ;; # (end cycle 23)
; CV1-NEXT:    extfz $r3 = $r0, 39, 32
; CV1-NEXT:    insf $r4 = $r3, 31, 16
; CV1-NEXT:    ;; # (end cycle 24)
; CV1-NEXT:    extfs $r2 = $r2, 7, 5
; CV1-NEXT:    extfs $r3 = $r3, 7, 5
; CV1-NEXT:    ;; # (end cycle 25)
; CV1-NEXT:    insf $r3 = $r2, 15, 8
; CV1-NEXT:    insf $r4 = $r7, 63, 32
; CV1-NEXT:    ;; # (end cycle 26)
; CV1-NEXT:    andd $r2 = $r4, 0xff00ff.@
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff00.@
; CV1-NEXT:    extfs $r5 = $r5, 7, 5
; CV1-NEXT:    extfs $r6 = $r6, 7, 5
; CV1-NEXT:    ;; # (end cycle 27)
; CV1-NEXT:    srld $r2 = $r2, 3
; CV1-NEXT:    srld $r4 = $r4, 3
; CV1-NEXT:    srlw $r5 = $r0, 24
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;; # (end cycle 28)
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; CV1-NEXT:    insf $r3 = $r6, 31, 16
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff00.@
; CV1-NEXT:    extfz $r6 = $r0, 23, 16
; CV1-NEXT:    ;; # (end cycle 29)
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    iord $r2 = $r4, $r2
; CV1-NEXT:    extfs $r5 = $r5, 7, 5
; CV1-NEXT:    extfz $r7 = $r0, 15, 8
; CV1-NEXT:    ;; # (end cycle 30)
; CV1-NEXT:    andd $r1 = $r1, 0x7f7f7f7f.@
; CV1-NEXT:    eord $r2 = $r1, $r2
; CV1-NEXT:    andd $r4 = $r2, 0x7f7f7f7f.@
; CV1-NEXT:    extfs $r6 = $r6, 7, 5
; CV1-NEXT:    ;; # (end cycle 31)
; CV1-NEXT:    extfs $r0 = $r0, 7, 5
; CV1-NEXT:    addd $r1 = $r1, $r4
; CV1-NEXT:    andd $r2 = $r2, 0x80808080.@
; CV1-NEXT:    extfs $r7 = $r7, 7, 5
; CV1-NEXT:    ;; # (end cycle 32)
; CV1-NEXT:    insf $r0 = $r7, 15, 8
; CV1-NEXT:    eord $r1 = $r1, $r2
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;; # (end cycle 33)
; CV1-NEXT:    insf $r0 = $r6, 31, 16
; CV1-NEXT:    srld $r2 = $r1, 56
; CV1-NEXT:    extfz $r4 = $r1, 55, 48
; CV1-NEXT:    ;; # (end cycle 34)
; CV1-NEXT:    extfz $r5 = $r1, 47, 40
; CV1-NEXT:    extfz $r6 = $r1, 39, 32
; CV1-NEXT:    ;; # (end cycle 35)
; CV1-NEXT:    extfs $r2 = $r2, 7, 5
; CV1-NEXT:    extfs $r4 = $r4, 7, 5
; CV1-NEXT:    ;; # (end cycle 36)
; CV1-NEXT:    extfs $r5 = $r5, 7, 5
; CV1-NEXT:    extfs $r6 = $r6, 7, 5
; CV1-NEXT:    ;; # (end cycle 37)
; CV1-NEXT:    srlw $r2 = $r1, 24
; CV1-NEXT:    insf $r4 = $r2, 15, 8
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;; # (end cycle 38)
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r5 = $r1, 23, 16
; CV1-NEXT:    extfz $r7 = $r1, 15, 8
; CV1-NEXT:    ;; # (end cycle 39)
; CV1-NEXT:    extfs $r2 = $r2, 7, 5
; CV1-NEXT:    extfs $r5 = $r5, 7, 5
; CV1-NEXT:    ;; # (end cycle 40)
; CV1-NEXT:    extfs $r1 = $r1, 7, 5
; CV1-NEXT:    extfs $r7 = $r7, 7, 5
; CV1-NEXT:    ;; # (end cycle 41)
; CV1-NEXT:    insf $r1 = $r7, 15, 8
; CV1-NEXT:    insf $r5 = $r2, 15, 8
; CV1-NEXT:    ;; # (end cycle 42)
; CV1-NEXT:    insf $r1 = $r5, 31, 16
; CV1-NEXT:    insf $r6 = $r4, 31, 16
; CV1-NEXT:    ;; # (end cycle 43)
; CV1-NEXT:    insf $r0 = $r3, 63, 32
; CV1-NEXT:    insf $r1 = $r6, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 44)
;
; CV2-LABEL: test_div_32:
; CV2:       # %bb.0:
; CV2-NEXT:    srabos $r2 = $r0, 7
; CV2-NEXT:    srabos $r3 = $r1, 7
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    srlbos $r2 = $r2, 3
; CV2-NEXT:    srlbos $r3 = $r3, 3
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    addbo $r0 = $r0, $r2
; CV2-NEXT:    addbo $r1 = $r1, $r3
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    srabos $r0 = $r0, 5
; CV2-NEXT:    srabos $r1 = $r1, 5
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 3)
  %r = sdiv <16 x i8> %a, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  ret <16 x i8> %r
}

define <16 x i8> @lshr_cst_splat_w_undefs(<16 x i8> %lhs ) {
; CV1-LABEL: lshr_cst_splat_w_undefs:
; CV1:       # %bb.0:
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    andd $r2 = $r0, 0xff00ff.@
; CV1-NEXT:    andd $r3 = $r1, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    srld $r0 = $r0, 2
; CV1-NEXT:    srld $r1 = $r1, 2
; CV1-NEXT:    srld $r2 = $r2, 2
; CV1-NEXT:    srld $r3 = $r3, 2
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; CV1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; CV1-NEXT:    andd $r3 = $r3, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    iord $r0 = $r0, $r2
; CV1-NEXT:    iord $r1 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: lshr_cst_splat_w_undefs:
; CV2:       # %bb.0:
; CV2-NEXT:    srlbos $r0 = $r0, 2
; CV2-NEXT:    srlbos $r1 = $r1, 2
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %r = lshr <16 x i8> %lhs, <i8 2, i8 undef, i8 undef, i8 undef, i8 2, i8 undef, i8 undef, i8 undef, i8 2, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  ret <16 x i8> %r
}

define <16 x i8> @lshr_val_splat_w_undefs(<16 x i8> %lhs, i32 %s ) {
; CV1-LABEL: lshr_val_splat_w_undefs:
; CV1:       # %bb.0:
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    srld $r0 = $r0, $r2
; CV1-NEXT:    srld $r1 = $r1, $r2
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; CV1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    iord $r0 = $r0, $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 3)
;
; CV2-LABEL: lshr_val_splat_w_undefs:
; CV2:       # %bb.0:
; CV2-NEXT:    srlbos $r0 = $r0, $r2
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %conv = trunc i32 %s to i8
  %vecinit = insertelement <16 x i8> undef, i8 %conv, i32 0
  %rhs = insertelement <16 x i8> %vecinit, i8 %conv, i32 4

  %r = lshr <16 x i8> %lhs, %rhs
  ret <16 x i8> %r
}

define <16 x i8> @test_select_cmp(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c, <16 x i8> %d) #0 {
; CV1-LABEL: test_select_cmp:
; CV1:       # %bb.0:
; CV1-NEXT:    sxmbhq $r8 = $r7
; CV1-NEXT:    sxmbhq $r9 = $r5
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxlbhq $r5 = $r5
; CV1-NEXT:    sxlbhq $r7 = $r7
; CV1-NEXT:    compnhq.ne $r8 = $r9, $r8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    compnhq.ne $r5 = $r5, $r7
; CV1-NEXT:    sxmbhq $r10 = $r6
; CV1-NEXT:    sxmbhq $r11 = $r4
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    sxlbhq $r4 = $r4
; CV1-NEXT:    sxlbhq $r6 = $r6
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    compnhq.ne $r4 = $r4, $r6
; CV1-NEXT:    sbmm8 $r5 = $r5, 0x40100401
; CV1-NEXT:    sbmm8 $r7 = $r8, 0x40100401
; CV1-NEXT:    compnhq.ne $r8 = $r11, $r10
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    sbmm8 $r4 = $r4, 0x40100401
; CV1-NEXT:    sbmm8 $r6 = $r8, 0x40100401
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    insf $r4 = $r6, 63, 32
; CV1-NEXT:    insf $r5 = $r7, 63, 32
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    andd $r4 = $r4, $r5
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    compd.eq $r4 = $r4, -1
; CV1-NEXT:    ;; # (end cycle 8)
; CV1-NEXT:    cmoved.even $r4 ? $r0 = $r2
; CV1-NEXT:    cmoved.even $r4 ? $r1 = $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 9)
;
; CV2-LABEL: test_select_cmp:
; CV2:       # %bb.0:
; CV2-NEXT:    compnbo.ne $r4 = $r4, $r6
; CV2-NEXT:    compnbo.ne $r5 = $r5, $r7
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    andd $r4 = $r4, $r5
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    compd.eq $r4 = $r4, -1
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    cmoved.even $r4 ? $r0 = $r2
; CV2-NEXT:    cmoved.even $r4 ? $r1 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 3)
  %cc = icmp ne <16 x i8> %c, %d
  %bc = bitcast <16 x i1> %cc to i16
  %cmp = icmp eq i16 %bc, -1
  %r = select i1 %cmp, <16 x i8> %a, <16 x i8> %b
  ret <16 x i8> %r
}

define <16 x i8> @test_select_cmp_vec(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c, <16 x i8> %d) #0 {
; CV1-LABEL: test_select_cmp_vec:
; CV1:       # %bb.0:
; CV1-NEXT:    sxmbhq $r8 = $r6
; CV1-NEXT:    sxmbhq $r9 = $r4
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxlbhq $r4 = $r4
; CV1-NEXT:    sxlbhq $r6 = $r6
; CV1-NEXT:    compnhq.ne $r8 = $r9, $r8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    compnhq.ne $r4 = $r4, $r6
; CV1-NEXT:    andd $r8 = $r8, 0xff00ff.@
; CV1-NEXT:    sxmbhq $r9 = $r2
; CV1-NEXT:    sxmbhq $r10 = $r0
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff.@
; CV1-NEXT:    sxlbhq $r8 = $r7
; CV1-NEXT:    cmovehq.even $r8 ? $r10 = $r9
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    sxlbhq $r6 = $r5
; CV1-NEXT:    sxmbhq $r7 = $r7
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    sxlbhq $r2 = $r2
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    cmovehq.even $r4 ? $r0 = $r2
; CV1-NEXT:    compnhq.ne $r4 = $r6, $r8
; CV1-NEXT:    sxmbhq $r5 = $r5
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    andd $r4 = $r4, 0xff00ff.@
; CV1-NEXT:    compnhq.ne $r5 = $r5, $r7
; CV1-NEXT:    sxmbhq $r6 = $r3
; CV1-NEXT:    sxmbhq $r7 = $r1
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    sxlbhq $r3 = $r3
; CV1-NEXT:    andd $r5 = $r5, 0xff00ff.@
; CV1-NEXT:    ;; # (end cycle 8)
; CV1-NEXT:    cmovehq.even $r4 ? $r1 = $r3
; CV1-NEXT:    cmovehq.even $r5 ? $r7 = $r6
; CV1-NEXT:    ;; # (end cycle 9)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    sbmm8 $r2 = $r10, 0x40100401
; CV1-NEXT:    ;; # (end cycle 10)
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; CV1-NEXT:    sbmm8 $r3 = $r7, 0x40100401
; CV1-NEXT:    ;; # (end cycle 11)
; CV1-NEXT:    insf $r0 = $r2, 63, 32
; CV1-NEXT:    insf $r1 = $r3, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 12)
;
; CV2-LABEL: test_select_cmp_vec:
; CV2:       # %bb.0:
; CV2-NEXT:    compnbo.ne $r4 = $r4, $r6
; CV2-NEXT:    compnbo.ne $r5 = $r5, $r7
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    cmovebo.even $r4 ? $r0 = $r2
; CV2-NEXT:    cmovebo.even $r5 ? $r1 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 1)
  %cc = icmp ne <16 x i8> %c, %d
  %r = select <16 x i1> %cc, <16 x i8> %a, <16 x i8> %b
  ret <16 x i8> %r
}
