; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O1 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O1 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O1 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -O1 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <2 x i8> @bv_v2i8() {
; CHECK-LABEL: bv_v2i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -257
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <2 x i8> <i8 -1, i8 -2>
}

define <2 x i16> @bv_v2i16() {
; CHECK-LABEL: bv_v2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xfffffffffffeffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <2 x i16> <i16 -1, i16 -2>
}

define <2 x i32> @bv_v2i32() {
; CHECK-LABEL: bv_v2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xfffffffeffffffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <2 x i32> <i32 -1, i32 -2>
}

define <2 x i64> @bv_v2i64() {
; CHECK-LABEL: bv_v2i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = -2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <2 x i64> <i64 -1, i64 -2>
}

define <4 x i8> @bv_v4i8() {
; CHECK-LABEL: bv_v4i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xfffffffffefffeff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <4 x i8> <i8 -1, i8 -2, i8 -1, i8 -2>
}

define <4 x i16> @bv_v4i16() {
; CHECK-LABEL: bv_v4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xfffefffffffeffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <4 x i16> <i16 -1, i16 -2, i16 -1, i16 -2>
}

define <4 x i32> @bv_v4i32() {
; CHECK-LABEL: bv_v4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xfffffffeffffffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0xfffffffeffffffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <4 x i32> <i32 -1, i32 -2, i32 -1, i32 -2>
}

define <4 x i64> @bv_v4i64() {
; CHECK-LABEL: bv_v4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = -2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r3 = -2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <4 x i64> <i64 -1, i64 -2, i64 -1, i64 -2>
}

define <8 x i8> @bv_v8i8() {
; CHECK-LABEL: bv_v8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xfefffefffefffeff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <8 x i8> <i8 -1, i8 -2, i8 -1, i8 -2, i8 -1, i8 -2, i8 -1, i8 -2>
}

define <8 x i16> @bv_v8i16() {
; CHECK-LABEL: bv_v8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xfffefffffffeffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0xfffefffffffeffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <8 x i16> <i16 -1, i16 -2, i16 -1, i16 -2, i16 -1, i16 -2, i16 -1, i16 -2>
}

define <8 x i32> @bv_v8i32() {
; CHECK-LABEL: bv_v8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xfffffffeffffffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0xfffffffeffffffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r2 = 0xfffffffeffffffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r3 = 0xfffffffeffffffff
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <8 x i32> <i32 -1, i32 -2, i32 -1, i32 -2, i32 -1, i32 -2, i32 -1, i32 -2>
}

define <2 x half> @bv_v2f16() {
; CHECK-LABEL: bv_v2f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xffffffffc000bc00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <2 x half> <half -1.0, half -2.0>
}

define <2 x half> @bv_v2f16_0() {
; CHECK-LABEL: bv_v2f16_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xbc00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <2 x half> <half -1.0, half 0.0>
}

define <2 x float> @bv_v2f32() {
; CHECK-LABEL: bv_v2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xc0000000bf800000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <2 x float> <float -1.0, float -2.0>
}

define <2 x double> @bv_v2f64() {
; CHECK-LABEL: bv_v2f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xbff0000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0xc000000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <2 x double> <double -1.0, double -2.0>
}

define <4 x half> @bv_v4f16() {
; CHECK-LABEL: bv_v4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xc000bc00c000bc00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <4 x half> <half -1.0, half -2.0, half -1.0, half -2.0>
}

define <4 x float> @bv_v4f32() {
; CHECK-LABEL: bv_v4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xc0000000bf800000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0xc0000000bf800000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <4 x float> <float -1.0, float -2.0, float -1.0, float -2.0>
}

define <4 x double> @bv_v4f64() {
; CHECK-LABEL: bv_v4f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xbff0000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0xc000000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r2 = 0xbff0000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r3 = 0xc000000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <4 x double> <double -1.0, double -2.0, double -1.0, double -2.0>
}

define <8 x half> @bv_v8f16() {
; CHECK-LABEL: bv_v8f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xc000bc00c000bc00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0xc000bc00c000bc00
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <8 x half> <half -1.0, half -2.0, half -1.0, half -2.0, half -1.0, half -2.0, half -1.0, half -2.0>
}

define <8 x float> @bv_v8f32() {
; CHECK-LABEL: bv_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0xc0000000bf800000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r1 = 0xc0000000bf800000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r2 = 0xc0000000bf800000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r3 = 0xc0000000bf800000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  ret <8 x float> <float -1.0, float -2.0, float -1.0, float -2.0, float -1.0, float -2.0, float -1.0, float -2.0>
}
