; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

@a = common global i32 0, align 4

define void @test3(i32 %b, i32 %c){
; CHECK-LABEL: test3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %shl = shl i32 %b, %c
  store i32 %shl, ptr @a, align 4
  ret void
}

define void @test6(i32 %b, i32 %c){
; CHECK-LABEL: test6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %shl = shl i32 %b, %c
  store i32 %shl, ptr @a, align 4
  ret void
}

define void @test6b(i32 %b, i16 %c){
; CHECK-LABEL: test6b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %conv1 = zext i16 %c to i32
  %shl = shl i32 %b, %conv1
  store i32 %shl, ptr @a, align 4
  ret void
}

define void @test6c(i32 %b, i16 %c){
; CHECK-LABEL: test6c:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %conv = zext i16 %c to i32
  %shl = shl i32 %b, %conv
  store i32 %shl, ptr @a, align 4
  ret void
}

define void @test6d(i32 %b, i8 %c){
; CHECK-LABEL: test6d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %conv1 = zext i8 %c to i32
  %shl = shl i32 %b, %conv1
  store i32 %shl, ptr @a, align 4
  ret void
}

define void @test6e(i32 %b, i8 %c){
; CHECK-LABEL: test6e:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %conv = zext i8 %c to i32
  %shl = shl i32 %b, %conv
  store i32 %shl, ptr @a, align 4
  ret void
}

