; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -O2 -mcpu=kv3-2 -stop-before=greedy -o - %s | FileCheck %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @xlori10_0(<256 x i1> addrspace(258)* %0) {
  ; CHECK-LABEL: name: xlori10_0
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri10 0, [[COPY]], 1 :: (volatile load (s256) from %ir.0, addrspace 258)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = load volatile <256 x i1>, <256 x i1> addrspace(258)* %0
  ret void
}

define void @xlori10(<256 x i1> addrspace(256)* %0) {
  ; CHECK-LABEL: name: xlori10
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri10 480, [[COPY]], 2 :: (volatile load (s256) from %ir.2, addrspace 256)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <256 x i1>, <256 x i1> addrspace(256)* %0, i64 15
  %3 = load volatile <256 x i1>, <256 x i1> addrspace(256)* %2
  ret void
}

define void @xlori37(<256 x i1> addrspace(257)* %0) {
  ; CHECK-LABEL: name: xlori37
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri37 512, [[COPY]], 3 :: (volatile load (s256) from %ir.2, addrspace 257)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <256 x i1>, <256 x i1> addrspace(257)* %0, i64 16
  %3 = load volatile <256 x i1>, <256 x i1> addrspace(257)* %2
  ret void
}

define void @xlori64(<256 x i1>* %0) {
  ; CHECK-LABEL: name: xlori64
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri64 68719476736, [[COPY]], 0 :: (volatile load (s256) from %ir.2)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <256 x i1>, <256 x i1>* %0, i64 2147483648
  %3 = load volatile <256 x i1>, <256 x i1>* %2
  ret void
}

define void @xlorr_s(<256 x i1>* %0, i64 %1) {
  ; CHECK-LABEL: name: xlorr_s
  ; CHECK: bb.0 (%ir-block.2):
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r1
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %2:vectorreg = XLOrr [[COPY]], [[COPY1]], 0, 1 :: (volatile load (s256) from %ir.3)
  ; CHECK-NEXT:   RET implicit $ra
  %3 = getelementptr inbounds <256 x i1>, <256 x i1>* %0, i64 %1
  %4 = load volatile <256 x i1>, <256 x i1>* %3
  ret void
}

define void @xlorr(i8* %0, i64 %1) {
  ; CHECK-LABEL: name: xlorr
  ; CHECK: bb.0 (%ir-block.2):
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r1
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %2:vectorreg = XLOrr [[COPY]], [[COPY1]], 0, 0 :: (volatile load (s256) from %ir.4)
  ; CHECK-NEXT:   RET implicit $ra
  %3 = getelementptr inbounds i8, i8* %0, i64 %1
  %4 = bitcast i8* %3 to <256 x i1>*
  %5 = load volatile <256 x i1>, <256 x i1>* %4
  ret void
}

define void @xlori10_0x2(<512 x i1> addrspace(258)* %0) {
  ; CHECK-LABEL: name: xlori10_0x2
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri10 32, [[COPY]], 1 :: (volatile load (s256) from %ir.0 + 32, addrspace 258)
  ; CHECK-NEXT:   dead %2:vectorreg = XLOri10 0, [[COPY]], 1 :: (volatile load (s256) from %ir.0, addrspace 258)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = load volatile <512 x i1>, <512 x i1> addrspace(258)* %0
  ret void
}

define void @xlori10x2(<512 x i1> addrspace(256)* %0) {
  ; CHECK-LABEL: name: xlori10x2
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri10 480, [[COPY]], 2 :: (volatile load (s256) from %ir.2 + 32, addrspace 256)
  ; CHECK-NEXT:   dead %2:vectorreg = XLOri10 448, [[COPY]], 2 :: (volatile load (s256) from %ir.2, addrspace 256)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <512 x i1>, <512 x i1> addrspace(256)* %0, i64 7
  %3 = load volatile <512 x i1>, <512 x i1> addrspace(256)* %2
  ret void
}

define void @xlori37x2(<512 x i1> addrspace(257)* %0) {
  ; CHECK-LABEL: name: xlori37x2
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri37 544, [[COPY]], 3 :: (volatile load (s256) from %ir.2 + 32, addrspace 257)
  ; CHECK-NEXT:   dead %2:vectorreg = XLOri37 512, [[COPY]], 3 :: (volatile load (s256) from %ir.2, addrspace 257)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <512 x i1>, <512 x i1> addrspace(257)* %0, i64 8
  %3 = load volatile <512 x i1>, <512 x i1> addrspace(257)* %2
  ret void
}

define void @xlori64x2(<512 x i1>* %0) {
  ; CHECK-LABEL: name: xlori64x2
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri64 68719476768, [[COPY]], 0 :: (volatile load (s256) from %ir.2 + 32)
  ; CHECK-NEXT:   dead %2:vectorreg = XLOri64 68719476736, [[COPY]], 0 :: (volatile load (s256) from %ir.2)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <512 x i1>, <512 x i1>* %0, i64 1073741824
  %3 = load volatile <512 x i1>, <512 x i1>* %2
  ret void
}

define void @xlori10_0x4(<1024 x i1> addrspace(258)* %0) {
  ; CHECK-LABEL: name: xlori10_0x4
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri10 96, [[COPY]], 1 :: (volatile load (s256) from %ir.0 + 96, addrspace 258)
  ; CHECK-NEXT:   dead %2:vectorreg = XLOri10 64, [[COPY]], 1 :: (volatile load (s256) from %ir.0 + 64, addrspace 258)
  ; CHECK-NEXT:   dead %3:vectorreg = XLOri10 32, [[COPY]], 1 :: (volatile load (s256) from %ir.0 + 32, addrspace 258)
  ; CHECK-NEXT:   dead %4:vectorreg = XLOri10 0, [[COPY]], 1 :: (volatile load (s256) from %ir.0, addrspace 258)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = load volatile <1024 x i1>, <1024 x i1> addrspace(258)* %0
  ret void
}

define void @xlori10x4(<1024 x i1> addrspace(256)* %0) {
  ; CHECK-LABEL: name: xlori10x4
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri10 480, [[COPY]], 2 :: (volatile load (s256) from %ir.2 + 96, addrspace 256)
  ; CHECK-NEXT:   dead %2:vectorreg = XLOri10 448, [[COPY]], 2 :: (volatile load (s256) from %ir.2 + 64, addrspace 256)
  ; CHECK-NEXT:   dead %3:vectorreg = XLOri10 416, [[COPY]], 2 :: (volatile load (s256) from %ir.2 + 32, addrspace 256)
  ; CHECK-NEXT:   dead %4:vectorreg = XLOri10 384, [[COPY]], 2 :: (volatile load (s256) from %ir.2, addrspace 256)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <1024 x i1>, <1024 x i1> addrspace(256)* %0, i64 3
  %3 = load volatile <1024 x i1>, <1024 x i1> addrspace(256)* %2
  ret void
}

define void @xlori37x4(<1024 x i1> addrspace(257)* %0) {
  ; CHECK-LABEL: name: xlori37x4
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri37 608, [[COPY]], 3 :: (volatile load (s256) from %ir.2 + 96, addrspace 257)
  ; CHECK-NEXT:   dead %2:vectorreg = XLOri37 576, [[COPY]], 3 :: (volatile load (s256) from %ir.2 + 64, addrspace 257)
  ; CHECK-NEXT:   dead %3:vectorreg = XLOri37 544, [[COPY]], 3 :: (volatile load (s256) from %ir.2 + 32, addrspace 257)
  ; CHECK-NEXT:   dead %4:vectorreg = XLOri37 512, [[COPY]], 3 :: (volatile load (s256) from %ir.2, addrspace 257)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <1024 x i1>, <1024 x i1> addrspace(257)* %0, i64 4
  %3 = load volatile <1024 x i1>, <1024 x i1> addrspace(257)* %2
  ret void
}

define void @xlori64x4(<1024 x i1>* %0) {
  ; CHECK-LABEL: name: xlori64x4
  ; CHECK: bb.0 (%ir-block.1):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:singlereg = COPY $r0
  ; CHECK-NEXT:   dead %1:vectorreg = XLOri64 68719476832, [[COPY]], 0 :: (volatile load (s256) from %ir.2 + 96)
  ; CHECK-NEXT:   dead %2:vectorreg = XLOri64 68719476800, [[COPY]], 0 :: (volatile load (s256) from %ir.2 + 64)
  ; CHECK-NEXT:   dead %3:vectorreg = XLOri64 68719476768, [[COPY]], 0 :: (volatile load (s256) from %ir.2 + 32)
  ; CHECK-NEXT:   dead %4:vectorreg = XLOri64 68719476736, [[COPY]], 0 :: (volatile load (s256) from %ir.2)
  ; CHECK-NEXT:   RET implicit $ra
  %2 = getelementptr inbounds <1024 x i1>, <1024 x i1>* %0, i64 536870912
  %3 = load volatile <1024 x i1>, <1024 x i1>* %2
  ret void
}
