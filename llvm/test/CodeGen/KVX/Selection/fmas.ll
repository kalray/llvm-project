; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s -mtriple=kvx-kalray-cos | FileCheck %s --check-prefixes=KV1
; RUN: llc -mcpu=kv3-2 -o - %s -mtriple=kvx-kalray-cos | FileCheck %s --check-prefixes=KV2
; RUN: clang -march=kv3-1 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

define float @ffdmdaw(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmdaw:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    faddw $r0 = $r0, $r1
; KV1-NEXT:    srad $r1 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    faddw $r0 = $r0, $r1
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 8)
;
; KV2-LABEL: ffdmdaw:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmdaw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 0
  %6 = fadd fast float %0, %5
  %7 = extractelement <2 x float> %4, i32 1
  %8 = fadd fast float %6, %7
  ret float %8
}

define float @ffdmdaw_2(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmdaw_2:
; KV1:       # %bb.0:
; KV1-NEXT:    fdot2w $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    faddw $r0 = $r0, $r1
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 4)
;
; KV2-LABEL: ffdmdaw_2:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmdaw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 0
  %6 = extractelement <2 x float> %4, i32 1
  %7 = fadd fast float %6, %5
  %8 = fadd fast float %0, %7
  ret float %8
}

define float @ffdmdsw(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmdsw:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fsbfw $r0 = $r1, $r0
; KV1-NEXT:    srad $r1 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    fsbfw $r0 = $r1, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 8)
;
; KV2-LABEL: ffdmdsw:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmdsw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 0
  %6 = fsub fast float %0, %5
  %7 = extractelement <2 x float> %4, i32 1
  %8 = fsub fast float %6, %7
  ret float %8
}

define float @ffdmdsw_2(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmdsw_2:
; KV1:       # %bb.0:
; KV1-NEXT:    fdot2w $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fsbfw $r0 = $r1, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 4)
;
; KV2-LABEL: ffdmdsw_2:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmdsw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 0
  %6 = extractelement <2 x float> %4, i32 1
  %7 = fadd fast float %6, %5
  %8 = fsub fast float %0, %7
  ret float %8
}

define float @ffdmdsw_3(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmdsw_3:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    srad $r2 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    fsbfw $r0 = $r2, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    fsbfw $r0 = $r1, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmdsw_3:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmdsw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 1
  %6 = fsub fast float %0, %5
  %7 = extractelement <2 x float> %4, i32 0
  %8 = fsub fast float %6, %7
  ret float %8
}

define <2 x float> @ffdmdawp(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmdawp:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    faddwp $r0 = $r2, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    faddwp $r0 = $r0, $r3
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmdawp:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmdawp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %6 = fadd fast <2 x float> %5, %0
  %7 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = fadd fast <2 x float> %6, %7
  ret <2 x float> %8
}

define <2 x float> @ffdmdawp2(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmdawp2:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    faddwp $r1 = $r2, $r3
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    faddwp $r0 = $r0, $r1
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmdawp2:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmdawp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %7 = fadd fast <2 x float> %5, %6
  %8 = fadd fast <2 x float> %0, %7
  ret <2 x float> %8
}

define <2 x float> @ffdmdswp(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmdswp:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    fsbfwp $r0 = $r2, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    fsbfwp $r0 = $r3, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmdswp:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmdswp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %6 = fsub fast <2 x float> %0, %5
  %7 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = fsub fast <2 x float> %6, %7
  ret <2 x float> %8
}

define <2 x float> @ffdmdswp2(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmdswp2:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    fsbfwp $r0 = $r3, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    fsbfwp $r0 = $r2, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmdswp2:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmdswp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %6 = fsub fast <2 x float> %0, %5
  %7 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %8 = fsub fast <2 x float> %6, %7
  ret <2 x float> %8
}

define <2 x float> @ffdmdswp3(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmdswp3:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    faddwp $r1 = $r3, $r2
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    fsbfwp $r0 = $r1, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmdswp3:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmdswp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %7 = fadd fast <2 x float> %6, %5
  %8 = fsub fast <2 x float> %0, %7
  ret <2 x float> %8
}

define float @ffdmasw(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmasw:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    faddw $r0 = $r0, $r1
; KV1-NEXT:    srad $r1 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    fsbfw $r0 = $r1, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 8)
;
; KV2-LABEL: ffdmasw:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmasw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 0
  %6 = fadd fast float %0, %5
  %7 = extractelement <2 x float> %4, i32 1
  %8 = fsub fast float %6, %7
  ret float %8
}

define float @ffdmasw2(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmasw2:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    srad $r2 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    fsbfw $r0 = $r2, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    faddw $r0 = $r0, $r1
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmasw2:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmasw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 1
  %6 = fsub fast float %0, %5
  %7 = extractelement <2 x float> %4, i32 0
  %8 = fadd fast float %6, %7
  ret float %8
}

define float @ffdmasw3(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmasw3:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    srad $r2 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    fsbfw $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    faddw $r0 = $r0, $r1
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmasw3:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmasw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 0
  %6 = extractelement <2 x float> %4, i32 1
  %7 = fsub fast float %5, %6
  %8 = fadd fast float %0, %7
  ret float %8
}

define float @ffdmsaw(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmsaw:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fsbfw $r0 = $r1, $r0
; KV1-NEXT:    srad $r1 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    faddw $r0 = $r0, $r1
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 8)
;
; KV2-LABEL: ffdmsaw:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmsaw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 0
  %6 = fsub fast float %0, %5
  %7 = extractelement <2 x float> %4, i32 1
  %8 = fadd fast float %6, %7
  ret float %8
}

define float @ffdmsaw2(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmsaw2:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    srad $r2 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    faddw $r0 = $r0, $r2
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    fsbfw $r0 = $r1, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmsaw2:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmsaw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 1
  %6 = fadd fast float %0, %5
  %7 = extractelement <2 x float> %4, i32 0
  %8 = fsub fast float %6, %7
  ret float %8
}

define float @ffdmsaw3(float %0, <2 x float> %1, <2 x float> %2) {
; KV1-LABEL: ffdmsaw3:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwp $r1 = $r2, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    srad $r2 = $r1, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    fsbfw $r1 = $r1, $r2
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    faddw $r0 = $r0, $r1
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmsaw3:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmsaw $r0 = $r2, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %4 = fmul fast <2 x float> %2, %1
  %5 = extractelement <2 x float> %4, i32 1
  %6 = extractelement <2 x float> %4, i32 0
  %7 = fsub fast float %5, %6
  %8 = fadd fast float %0, %7
  ret float %8
}

define <2 x float> @ffdmaswp(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmaswp:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    faddwp $r0 = $r2, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    fsbfwp $r0 = $r3, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmaswp:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmaswp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %6 = fadd fast <2 x float> %5, %0
  %7 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = fsub fast <2 x float> %6, %7
  ret <2 x float> %8
}

define <2 x float> @ffdmaswp2(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmaswp2:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    fsbfwp $r0 = $r3, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    faddwp $r0 = $r0, $r2
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmaswp2:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmaswp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %6 = fsub fast <2 x float> %0, %5
  %7 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %8 = fadd fast <2 x float> %6, %7
  ret <2 x float> %8
}

define <2 x float> @ffdmsawp(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmsawp:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    fsbfwp $r0 = $r2, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    faddwp $r0 = $r0, $r3
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmsawp:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmsawp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %6 = fsub fast <2 x float> %0, %5
  %7 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = fadd fast <2 x float> %6, %7
  ret <2 x float> %8
}

define <2 x float> @ffdmsawp2(<2 x float> %0, <4 x float> %1, <4 x float> %2) {
; KV1-LABEL: ffdmsawp2:
; KV1:       # %bb.0:
; KV1-NEXT:    copyd $r4 = $r3
; KV1-NEXT:    copyd $r5 = $r4
; KV1-NEXT:    copyd $r6 = $r1
; KV1-NEXT:    copyd $r7 = $r2
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fmulwq $r2r3 = $r4r5, $r6r7
; KV1-NEXT:    ;; # (end cycle 1)
; KV1-NEXT:    faddwp $r0 = $r0, $r3
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    fsbfwp $r0 = $r2, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmsawp2:
; KV2:       # %bb.0:
; KV2-NEXT:    copyd $r4 = $r3
; KV2-NEXT:    copyd $r5 = $r4
; KV2-NEXT:    copyd $r6 = $r1
; KV2-NEXT:    copyd $r7 = $r2
; KV2-NEXT:    ;; # (end cycle 0)
; KV2-NEXT:    ffdmsawp $r0 = $r4r5, $r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 1)
  %4 = fmul fast <4 x float> %2, %1
  %5 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %6 = fadd fast <2 x float> %0, %5
  %7 = shufflevector <4 x float> %4, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %8 = fsub fast <2 x float> %6, %7
  ret <2 x float> %8
}

define <2 x float> @ffdmawp(<4 x float> %0, <4 x float> %1) {
; KV1-LABEL: ffdmawp:
; KV1:       # %bb.0: # %entry
; KV1-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    faddwp $r0 = $r0, $r1
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 4)
;
; KV2-LABEL: ffdmawp:
; KV2:       # %bb.0: # %entry
; KV2-NEXT:    ffdmawp $r0 = $r0r1, $r2r3
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  entry:
  %2 = fmul fast <4 x float> %0, %1
  %3 = shufflevector <4 x float> %2, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x float> %2, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = fadd fast <2 x float> %3, %4
  ret <2 x float> %5
}

define float @ffdmsw(<2 x float> %0, <2 x float> %1) {
; KV1-LABEL: ffdmsw:
; KV1:       # %bb.0: # %entry
; KV1-NEXT:    fmulwp $r0 = $r0, $r1
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    srad $r1 = $r0, 32
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    fsbfw $r0 = $r1, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 5)
;
; KV2-LABEL: ffdmsw:
; KV2:       # %bb.0: # %entry
; KV2-NEXT:    ffdmsw $r0 = $r0, $r1
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  entry:
  %2 = fmul fast <2 x float> %0, %1
  %3 = extractelement <2 x float> %2, i32 0
  %4 = extractelement <2 x float> %2, i32 1
  %5 = fsub fast float %3, %4
  ret float %5
}

define <2 x float> @ffdmswp(<4 x float> %0, <4 x float> %1) {
; KV1-LABEL: ffdmswp:
; KV1:       # %bb.0: # %entry
; KV1-NEXT:    fmulwq $r0r1 = $r0r1, $r2r3
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fsbfwp $r0 = $r1, $r0
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 4)
;
; KV2-LABEL: ffdmswp:
; KV2:       # %bb.0: # %entry
; KV2-NEXT:    ffdmswp $r0 = $r0r1, $r2r3
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  entry:
  %2 = fmul fast <4 x float> %0, %1
  %3 = shufflevector <4 x float> %2, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x float> %2, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = fsub fast <2 x float> %3, %4
  ret <2 x float> %5
}

define <4 x float> @ffdmawq(<8 x float> %0, <8 x float> %1) {
; KV1-LABEL: ffdmawq:
; KV1:       # %bb.0:
; KV1-NEXT:    fmulwq $r2r3 = $r6r7, $r2r3
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    ffmawp $r3 = $r5, $r1
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    ffmawp $r2 = $r4, $r0
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    copyd $r0 = $r2
; KV1-NEXT:    copyd $r1 = $r3
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 9)
;
; KV2-LABEL: ffdmawq:
; KV2:       # %bb.0:
; KV2-NEXT:    ffdmawq $r0r1 = $r0r1r2r3, $r4r5r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
  %3 = fmul fast <8 x float> %1, %0
  %4 = shufflevector <8 x float> %3, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = shufflevector <8 x float> %3, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6 = fadd fast <4 x float> %4, %5
  ret <4 x float> %6
}

define <4 x float> @ffdmswq(<8 x float> %a, <8 x float> %b) {
; KV1-LABEL: ffdmswq:
; KV1:       # %bb.0: # %entry
; KV1-NEXT:    fmulwq $r2r3 = $r6r7, $r2r3
; KV1-NEXT:    ;; # (end cycle 0)
; KV1-NEXT:    fnegwp $r2 = $r2
; KV1-NEXT:    fnegwp $r3 = $r3
; KV1-NEXT:    ;; # (end cycle 4)
; KV1-NEXT:    ffmawp $r3 = $r5, $r1
; KV1-NEXT:    ;; # (end cycle 5)
; KV1-NEXT:    ffmawp $r2 = $r4, $r0
; KV1-NEXT:    ;; # (end cycle 6)
; KV1-NEXT:    copyd $r0 = $r2
; KV1-NEXT:    copyd $r1 = $r3
; KV1-NEXT:    ret
; KV1-NEXT:    ;; # (end cycle 10)
;
; KV2-LABEL: ffdmswq:
; KV2:       # %bb.0: # %entry
; KV2-NEXT:    ffdmswq $r0r1 = $r0r1r2r3, $r4r5r6r7
; KV2-NEXT:    ret
; KV2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = fmul fast <8 x float> %b, %a
  %kvx_low = shufflevector <8 x float> %mul, <8 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %kvx_high = shufflevector <8 x float> %mul, <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %sub = fsub fast <4 x float> %kvx_low, %kvx_high
  ret <4 x float> %sub
}
