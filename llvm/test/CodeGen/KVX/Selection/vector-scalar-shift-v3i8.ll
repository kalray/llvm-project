; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=CV1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=CV2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <3 x i8> @ashiftR_imm(<3 x i8> %a){
; CV1-LABEL: ashiftR_imm:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    srahqs $r0 = $r0, 3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 2)
;
; CV2-LABEL: ashiftR_imm:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srabos $r0 = $r0, 3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %shr = ashr <3 x i8> %a, <i8 3, i8 3, i8 3>
  ret <3 x i8> %shr
}

define <3 x i8> @lshiftR_imm(<3 x i8> %a){
; CV1-LABEL: lshiftR_imm:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    srlhqs $r0 = $r0, 3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 2)
;
; CV2-LABEL: lshiftR_imm:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r0 = $r0, 3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %shr = lshr <3 x i8> %a, <i8 3, i8 3, i8 3>
  ret <3 x i8> %shr
}

define <3 x i8> @shiftL_imm(<3 x i8> %a){
; CV1-LABEL: shiftL_imm:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sllhqs $r0 = $r0, 3
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 2)
;
; CV2-LABEL: shiftL_imm:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, 3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %shl = shl <3 x i8> %a, <i8 3, i8 3, i8 3>
  ret <3 x i8> %shl
}

define <3 x i8> @ashiftR(<3 x i8> %a, i8 %c){
; CV1-LABEL: ashiftR:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x1010101
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    extfz $r2 = $r1, 19, 16
; CV1-NEXT:    srahqs $r3 = $r0, $r1
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    srahqs $r2 = $r0, $r2
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    insf $r2 = $r3, 15, 0
; CV1-NEXT:    extfz $r3 = $r1, 35, 32
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    extfz $r1 = $r1, 51, 48
; CV1-NEXT:    srahqs $r3 = $r0, $r3
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    srahqs $r0 = $r0, $r1
; CV1-NEXT:    insf $r3 = $r2, 31, 0
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    insf $r0 = $r3, 47, 0
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 8)
;
; CV2-LABEL: ashiftR:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srabos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = insertelement <3 x i8> undef, i8 %c, i32 0
  %sh_prom = shufflevector <3 x i8> %0, <3 x i8> undef, <3 x i32> zeroinitializer
  %shr = ashr <3 x i8> %a, %sh_prom
  ret <3 x i8> %shr
}

define <3 x i8> @lshiftR(<3 x i8> %a, i8 %c){
; CV1-LABEL: lshiftR:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    srlhqs $r0 = $r0, $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 2)
;
; CV2-LABEL: lshiftR:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = insertelement <3 x i8> undef, i8 %c, i32 0
  %sh_prom = shufflevector <3 x i8> %0, <3 x i8> undef, <3 x i32> zeroinitializer
  %shr = lshr <3 x i8> %a, %sh_prom
  ret <3 x i8> %shr
}

define <3 x i8> @shiftL(<3 x i8> %a, i8 %c){
; CV1-LABEL: shiftL:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sllhqs $r0 = $r0, $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 2)
;
; CV2-LABEL: shiftL:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = insertelement <3 x i8> undef, i8 %c, i32 0
  %sh_prom = shufflevector <3 x i8> %0, <3 x i8> undef, <3 x i32> zeroinitializer
  %shl = shl <3 x i8> %a, %sh_prom
  ret <3 x i8> %shl
}
define <3 x i8> @ashiftR_vec_imm(<3 x i8> %a){
; CV1-LABEL: ashiftR_vec_imm:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    srahqs $r1 = $r0, 1
; CV1-NEXT:    srahqs $r2 = $r0, 2
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srahqs $r1 = $r0, 3
; CV1-NEXT:    insf $r2 = $r1, 15, 0
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    srahqs $r0 = $r0, 0
; CV1-NEXT:    insf $r1 = $r2, 31, 0
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    insf $r0 = $r1, 47, 0
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 5)
;
; CV2-LABEL: ashiftR_vec_imm:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srabos $r0 = $r0, 3
; CV2-NEXT:    srabos $r1 = $r0, 1
; CV2-NEXT:    srabos $r2 = $r0, 2
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    insf $r2 = $r1, 7, 0
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r0 = $r2, 15, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 2)
entry:
  %shr = ashr <3 x i8> %a, <i8 1, i8 2, i8 3>
  ret <3 x i8> %shr
}

define <3 x i8> @lshiftR_imm_vec(<3 x i8> %a){
; CV1-LABEL: lshiftR_imm_vec:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    srlhqs $r1 = $r0, 3
; CV1-NEXT:    srlhqs $r2 = $r0, 2
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srlhqs $r0 = $r0, 0
; CV1-NEXT:    insf $r2 = $r1, 15, 0
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r1 = $r2, 31, 0
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    insf $r0 = $r1, 47, 0
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 5)
;
; CV2-LABEL: lshiftR_imm_vec:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    srlbos $r0 = $r0, 2
; CV2-NEXT:    srlbos $r1 = $r0, 3
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    insf $r0 = $r1, 7, 0
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r1 = $r0, 15, 0
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    copyd $r0 = $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 3)
entry:
  %shr = lshr <3 x i8> %a, <i8 3, i8 2, i8 3>
  ret <3 x i8> %shr
}

define <3 x i8> @shiftL_imm_vec(<3 x i8> %a){
; CV1-LABEL: shiftL_imm_vec:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    sllhqs $r1 = $r0, 3
; CV1-NEXT:    sllhqs $r2 = $r0, 8
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sllhqs $r0 = $r0, 0
; CV1-NEXT:    copyd $r3 = $r1
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r3 = $r2, 15, 0
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    insf $r1 = $r3, 31, 0
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    insf $r0 = $r1, 47, 0
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 6)
;
; CV2-LABEL: shiftL_imm_vec:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sllbos $r0 = $r0, 0
; CV2-NEXT:    sllbos $r1 = $r0, 3
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    insf $r2 = $r0, 7, 0
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    insf $r1 = $r2, 15, 0
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    copyd $r0 = $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 4)
entry:
  %shl = shl <3 x i8> %a, <i8 8, i8 3, i8 3>
  ret <3 x i8> %shl
}

define <3 x i8> @ashiftR_vec(<3 x i8> %a, <3 x i8> %c){
; CV1-LABEL: ashiftR_vec:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    sxlbhq $r1 = $r1
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    extfz $r2 = $r1, 19, 16
; CV1-NEXT:    srahqs $r3 = $r0, $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srahqs $r2 = $r0, $r2
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r2 = $r3, 15, 0
; CV1-NEXT:    extfz $r3 = $r1, 35, 32
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r1 = $r1, 51, 48
; CV1-NEXT:    srahqs $r3 = $r0, $r3
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    srahqs $r0 = $r0, $r1
; CV1-NEXT:    insf $r3 = $r2, 31, 0
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    insf $r0 = $r3, 47, 0
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 7)
;
; CV2-LABEL: ashiftR_vec:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    extfz $r1 = $r1, 26, 24
; CV2-NEXT:    extfz $r2 = $r1, 10, 8
; CV2-NEXT:    srabos $r3 = $r0, $r1
; CV2-NEXT:    extfz $r4 = $r1, 18, 16
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    srabos $r2 = $r0, $r2
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    srabos $r0 = $r0, $r1
; CV2-NEXT:    insf $r2 = $r3, 7, 0
; CV2-NEXT:    srabos $r3 = $r0, $r4
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    insf $r3 = $r2, 15, 0
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    insf $r0 = $r3, 23, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 4)
entry:
  %shr = ashr <3 x i8> %a, %c
  ret <3 x i8> %shr
}

define <3 x i8> @lshiftR_vec(<3 x i8> %a, <3 x i8> %c){
; CV1-LABEL: lshiftR_vec:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    extfz $r2 = $r1, 19, 16
; CV1-NEXT:    srlhqs $r3 = $r0, $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    srlhqs $r2 = $r0, $r2
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r2 = $r3, 15, 0
; CV1-NEXT:    extfz $r3 = $r1, 35, 32
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r1 = $r1, 51, 48
; CV1-NEXT:    srlhqs $r3 = $r0, $r3
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    srlhqs $r0 = $r0, $r1
; CV1-NEXT:    insf $r3 = $r2, 31, 0
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    insf $r0 = $r3, 47, 0
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 7)
;
; CV2-LABEL: lshiftR_vec:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    extfz $r1 = $r1, 26, 24
; CV2-NEXT:    extfz $r2 = $r1, 10, 8
; CV2-NEXT:    srlbos $r3 = $r0, $r1
; CV2-NEXT:    extfz $r4 = $r1, 18, 16
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    srlbos $r2 = $r0, $r2
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    srlbos $r0 = $r0, $r1
; CV2-NEXT:    insf $r2 = $r3, 7, 0
; CV2-NEXT:    srlbos $r3 = $r0, $r4
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    insf $r3 = $r2, 15, 0
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    insf $r0 = $r3, 23, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 4)
entry:
  %shr = lshr <3 x i8> %a, %c
  ret <3 x i8> %shr
}

define <3 x i8> @shiftL_vec(<3 x i8> %a, <3 x i8> %c){
; CV1-LABEL: shiftL_vec:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sxlbhq $r0 = $r0
; CV1-NEXT:    sbmm8 $r1 = $r1, 0x8000400020001
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    extfz $r2 = $r1, 19, 16
; CV1-NEXT:    sllhqs $r3 = $r0, $r1
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    sllhqs $r2 = $r0, $r2
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    insf $r2 = $r3, 15, 0
; CV1-NEXT:    extfz $r3 = $r1, 35, 32
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    extfz $r1 = $r1, 51, 48
; CV1-NEXT:    sllhqs $r3 = $r0, $r3
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    sllhqs $r0 = $r0, $r1
; CV1-NEXT:    insf $r3 = $r2, 31, 0
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    insf $r0 = $r3, 47, 0
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 7)
;
; CV2-LABEL: shiftL_vec:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    extfz $r1 = $r1, 26, 24
; CV2-NEXT:    extfz $r2 = $r1, 10, 8
; CV2-NEXT:    sllbos $r3 = $r0, $r1
; CV2-NEXT:    extfz $r4 = $r1, 18, 16
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sllbos $r2 = $r0, $r2
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    sllbos $r0 = $r0, $r1
; CV2-NEXT:    insf $r2 = $r3, 7, 0
; CV2-NEXT:    sllbos $r3 = $r0, $r4
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:    insf $r3 = $r2, 15, 0
; CV2-NEXT:    ;; # (end cycle 3)
; CV2-NEXT:    insf $r0 = $r3, 23, 0
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 4)
entry:
  %shl = shl <3 x i8> %a, %c
  ret <3 x i8> %shl
}
