; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: clang -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i64 @DOT2WD_rr_1(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: DOT2WD_rr_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2wd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x i32> %1, i64 0
  %4 = sext i32 %3 to i64
  %5 = extractelement <2 x i32> %0, i64 0
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %4, %6
  %8 = extractelement <2 x i32> %1, i64 1
  %9 = sext i32 %8 to i64
  %10 = extractelement <2 x i32> %0, i64 1
  %11 = sext i32 %10 to i64
  %12 = mul nsw i64 %9, %11
  %13 = add nsw i64 %7, %12
  ret i64 %13
}

define i64 @DOT2WD_rr_2(i64 %0, i64 %1) {
; CHECK-LABEL: DOT2WD_rr_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2wd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %0, 32
  %4 = ashr exact i64 %3, 32
  %5 = shl i64 %1, 32
  %6 = ashr exact i64 %5, 32
  %7 = mul nsw i64 %6, %4
  %8 = ashr i64 %0, 32
  %9 = ashr i64 %1, 32
  %10 = mul nsw i64 %9, %8
  %11 = add nsw i64 %7, %10
  ret i64 %11
}

define i64 @DOT2WD_rr_3(<2 x i32> %0, i64 %1) {
; CHECK-LABEL: DOT2WD_rr_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2wd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <2 x i32> %0, i32 0
  %4 = sext i32 %3 to i64
  %5 = shl i64 %1, 32
  %6 = ashr exact i64 %5, 32
  %7 = mul nsw i64 %6, %4
  %8 = extractelement <2 x i32> %0, i32 1
  %9 = sext i32 %8 to i64
  %10 = ashr i64 %1, 32
  %11 = mul nsw i64 %10, %9
  %12 = add nsw i64 %7, %11
  ret i64 %12
}

define i64 @DOT2WD_rr_4(i64 %0, <2 x i32> %1) {
; CHECK-LABEL: DOT2WD_rr_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2wd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %0, 32
  %4 = ashr exact i64 %3, 32
  %5 = extractelement <2 x i32> %1, i64 0
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %4, %6
  %8 = ashr i64 %0, 32
  %9 = extractelement <2 x i32> %1, i64 1
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %8, %10
  %12 = add nsw i64 %7, %11
  ret i64 %12
}

define i64 @DOT2WD_ri_10_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2WD_ri_10_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulwd $r0 = $r0, -1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, -1023
  ret i64 %4
}

define i64 @DOT2WD_ri_10_2(i64 %0) {
; CHECK-LABEL: DOT2WD_ri_10_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulwd $r0 = $r0, 1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shl i64 %0, 32
  %3 = ashr exact i64 %2, 32
  %4 = mul nsw i64 %3, 1023
  ret i64 %4
}

define i64 @DOT2WD_ri_10_3(i64 %0) {
; CHECK-LABEL: DOT2WD_ri_10_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulwd $r0 = $r0, -1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shl i64 %0, 32
  %3 = ashr exact i64 %2, 32
  %4 = mul nsw i64 %3, -1023
  ret i64 %4
}

define i64 @DOT2WD_ri_10_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2WD_ri_10_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulwd $r0 = $r0, 1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, 1023
  ret i64 %4
}

define i64 @DOT2WD_ri_37_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2WD_ri_37_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, 3
  %5 = extractelement <2 x i32> %0, i64 1
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 31
  %8 = add nsw i64 %4, %7
  ret i64 %8
}

define i64 @DOT2WD_ri_37_2(i64 %0) {
; CHECK-LABEL: DOT2WD_ri_37_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shl i64 %0, 32
  %3 = ashr exact i64 %2, 32
  %4 = mul nsw i64 %3, 3
  %5 = ashr i64 %0, 32
  %6 = mul nsw i64 %5, 31
  %7 = add nsw i64 %4, %6
  ret i64 %7
}

define i64 @DOT2WD_ri_37_3(i64 %0) {
; CHECK-LABEL: DOT2WD_ri_37_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shl i64 %0, 32
  %3 = ashr exact i64 %2, 32
  %4 = mul nsw i64 %3, 3
  %5 = ashr i64 %0, 32
  %6 = mul nsw i64 %5, 31
  %7 = add nsw i64 %4, %6
  ret i64 %7
}

define i64 @DOT2WD_ri_37_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2WD_ri_37_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r1 = $r1, 31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, 3
  %5 = extractelement <2 x i32> %0, i64 1
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 31
  %8 = add nsw i64 %4, %7
  ret i64 %8
}

define i64 @DOT2WD_ri_64_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2WD_ri_64_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r1 = $r1, -5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, 3
  %5 = extractelement <2 x i32> %0, i64 1
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, -5
  %8 = add nsw i64 %4, %7
  ret i64 %8
}

define i64 @DOT2WD_ri_64_2(i64 %0) {
; CHECK-LABEL: DOT2WD_ri_64_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 27
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r1 = $r1, -32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shl i64 %0, 32
  %3 = ashr exact i64 %2, 32
  %4 = mul nsw i64 %3, 3
  %5 = ashr i64 %0, 27
  %6 = and i64 %5, -32
  %7 = add nsw i64 %4, %6
  ret i64 %7
}

define i64 @DOT2WD_ri_64_3(i64 %0) {
; CHECK-LABEL: DOT2WD_ri_64_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 27
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andd $r1 = $r1, -32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shl i64 %0, 32
  %3 = ashr exact i64 %2, 32
  %4 = mul nsw i64 %3, 3
  %5 = ashr i64 %0, 27
  %6 = and i64 %5, -32
  %7 = add nsw i64 %4, %6
  ret i64 %7
}

define i64 @DOT2WD_ri_64_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2WD_ri_64_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r1 = $r1, -5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddwd $r1 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = sext i32 %2 to i64
  %4 = mul nsw i64 %3, 3
  %5 = extractelement <2 x i32> %0, i64 1
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, -5
  %8 = add nsw i64 %4, %7
  ret i64 %8
}
