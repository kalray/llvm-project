; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @ORNWrr(i32 %0, i32 %1) {
; CHECK-LABEL: ORNWrr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    iornw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = xor i32 %0, -1
  %4 = or i32 %3, %1
  ret i32 %4
}

define i32 @ORNWri10(i32 %0) {
; CHECK-LABEL: ORNWri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    iornw $r0 = $r0, -60
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = or i32 %0, -60
  %3 = xor i32 %2, 59
  ret i32 %3
}

define i32 @ORNWri37(i32 %0) {
; CHECK-LABEL: ORNWri37:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0xffffffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = or i32 %0, 137438953471
  %3 = xor i32 %2, -137438953472
  ret i32 %3
}

define i32 @ORNWri32(i32 %0) {
; CHECK-LABEL: ORNWri32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = or i32 %0, 137438953472
  %3 = xor i32 %2, -137438953473
  ret i32 %3
}

define <2 x i16> @ORNWrr_v2i16(<2 x i16> %0, <2 x i16> %1) {
; CHECK-LABEL: ORNWrr_v2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    iornd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = xor <2 x i16> %0, <i16 -1, i16 -1>
  %4 = or <2 x i16> %3, %1
  ret <2 x i16> %4
}

define <2 x i16> @ORNWri_v2i16(<2 x i16> %0) {
; CHECK-LABEL: ORNWri_v2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    iornw $r0 = $r0, 0x4ffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = xor <2 x i16> %0, <i16 -5, i16 -5>
  %3 = or <2 x i16> %2, <i16 -1, i16 4>
  ret <2 x i16> %3
}

define <4 x i8> @ORNWrr_v4i8(<4 x i8> %0, <4 x i8> %1) {
; CHECK-LABEL: ORNWrr_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    iornd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = xor <4 x i8> %0, <i8 -1, i8 -1, i8 -1, i8 -1>
  %4 = or <4 x i8> %3, %1
  ret <4 x i8> %4
}

define <4 x i8> @ORNWri_v4i8(<4 x i8> %0) {
; CHECK-LABEL: ORNWri_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    iornw $r0 = $r0, 0x4030201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = xor <4 x i8> %0, <i8 -1, i8 -1, i8 -1, i8 -1>
  %3 = or <4 x i8> %2, <i8 1, i8 2, i8 3, i8 4>
  ret <4 x i8> %3
}

define <2 x i8> @ORNWrr_v2i8(<2 x i8> %0, <2 x i8> %1) {
; CHECK-LABEL: ORNWrr_v2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    iornd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = xor <2 x i8> %0, <i8 -1, i8 -1>
  %4 = or <2 x i8> %3, %1
  ret <2 x i8> %4
}

define <2 x i8> @ORNWri_v2i8(<2 x i8> %0) {
; CHECK-LABEL: ORNWri_v2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    iornw $r0 = $r0, 0x4ff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = xor <2 x i8> %0, <i8 -5, i8 -5>
  %3 = or <2 x i8> %2, <i8 -1, i8 4>
  ret <2 x i8> %3
}
