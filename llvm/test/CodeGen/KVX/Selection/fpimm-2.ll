; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s | FileCheck %s --check-prefixes=CHECK,CV1
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK,CV2
; RUN: clang -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define float @f32_add_imm(float %f) {
; CV1-LABEL: f32_add_imm:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    faddw $r0 = $r0, 0x3f800000
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: f32_add_imm:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    make $r1 = 0x3f800000
; CV2-NEXT:    ;;
; CV2-NEXT:    faddw $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %add = fadd float %f, 1.000000e+00
  ret float %add
}

define double @f64_add_imm(double %d) {
; CV1-LABEL: f64_add_imm:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    faddd $r0 = $r0, 0x3ff0000000000000
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: f64_add_imm:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    make $r1 = 0x3ff0000000000000
; CV2-NEXT:    ;;
; CV2-NEXT:    faddd $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %add = fadd double %d, 1.000000e+00
  ret double %add
}

define float @f32_comp_imm(float %f) {
; CHECK-LABEL: f32_comp_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegw $r1 = $r0
; CHECK-NEXT:    fcompw.une $r2 = $r0, 0x3f800000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une float %f, 1.000000e+00
  %fneg = fneg float %f
  %retval.0 = select i1 %cmp, float %f, float %fneg
  ret float %retval.0
}
