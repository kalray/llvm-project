; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s | FileCheck %s --check-prefixes=V1
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=V2
; RUN: clang -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define float @DOT2W_rr_1(<2 x float> %0, <2 x float> %1) {
; V1-LABEL: DOT2W_rr_1:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_rr_1:
; V2:       # %bb.0:
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = fmul fast <2 x float> %0, %1
  %4 = extractelement <2 x float> %3, i32 0
  %5 = extractelement <2 x float> %3, i32 1
  %6 = fadd fast float %4, %5
  ret float %6
}

define float @DOT2W_rr_2(i64 %0, i64 %1) {
; V1-LABEL: DOT2W_rr_2:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_rr_2:
; V2:       # %bb.0:
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = trunc i64 %0 to i32
  %4 = bitcast i32 %3 to float
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = bitcast i32 %6 to float
  %8 = trunc i64 %1 to i32
  %9 = bitcast i32 %8 to float
  %10 = lshr i64 %1, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fmul fast float %4, %9
  %14 = fmul fast float %7, %12
  %15 = fadd fast float %13, %14
  ret float %15
}

define float @DOT2W_rr_3(<2 x float> %0, i64 %1) {
; V1-LABEL: DOT2W_rr_3:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r1, $r0
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_rr_3:
; V2:       # %bb.0:
; V2-NEXT:    ffdmaw $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = lshr i64 %1, 32
  %4 = insertelement <2 x i64> poison, i64 %1, i32 0
  %5 = insertelement <2 x i64> %4, i64 %3, i32 1
  %6 = trunc <2 x i64> %5 to <2 x i32>
  %7 = bitcast <2 x i32> %6 to <2 x float>
  %8 = fmul fast <2 x float> %7, %0
  %9 = extractelement <2 x float> %8, i32 0
  %10 = extractelement <2 x float> %8, i32 1
  %11 = fadd fast float %9, %10
  ret float %11
}

define float @DOT2W_rr_4(i64 %0, <2 x float> %1) {
; V1-LABEL: DOT2W_rr_4:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_rr_4:
; V2:       # %bb.0:
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = lshr i64 %0, 32
  %4 = insertelement <2 x i64> poison, i64 %0, i32 0
  %5 = insertelement <2 x i64> %4, i64 %3, i32 1
  %6 = trunc <2 x i64> %5 to <2 x i32>
  %7 = bitcast <2 x i32> %6 to <2 x float>
  %8 = fmul fast <2 x float> %7, %1
  %9 = extractelement <2 x float> %8, i32 0
  %10 = extractelement <2 x float> %8, i32 1
  %11 = fadd fast float %9, %10
  ret float %11
}

define float @DOT2W_ri_1(<2 x float> %0) {
; V1-LABEL: DOT2W_ri_1:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, 0x3f333333c47fc000
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_1:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x3f333333c47fc000
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = fmul fast <2 x float> %0, <float 1.023000e+03, float 0x3FE6666660000000>
  %3 = extractelement <2 x float> %2, i32 0
  %4 = extractelement <2 x float> %2, i32 1
  %5 = fsub fast float %4, %3
  ret float %5
}

define float @DOT2W_ri_2(<2 x float> %0) {
; V1-LABEL: DOT2W_ri_2:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, 0xbf333333447fc000
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_2:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0xbf333333447fc000
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = fmul fast <2 x float> %0, <float 1.023000e+03, float 0x3FE6666660000000>
  %3 = extractelement <2 x float> %2, i32 0
  %4 = extractelement <2 x float> %2, i32 1
  %5 = fsub fast float %3, %4
  ret float %5
}

define float @DOT2W_ri_3(i64 %0) {
; V1-LABEL: DOT2W_ri_3:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, 0x3f333333447fc000
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_3:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x3f333333447fc000
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = trunc i64 %0 to i32
  %3 = bitcast i32 %2 to float
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = bitcast i32 %5 to float
  %7 = fmul fast float %3, 1.023000e+03
  %8 = fmul fast float %6, 0x3FE6666660000000
  %9 = fadd fast float %7, %8
  ret float %9
}

define float @DOT2W_ri_4(i64 %0) {
; V1-LABEL: DOT2W_ri_4:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, 0x3f333333c47fc000
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_4:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x3f333333c47fc000
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = trunc i64 %0 to i32
  %3 = bitcast i32 %2 to float
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = bitcast i32 %5 to float
  %7 = fmul fast float %3, 1.023000e+03
  %8 = fmul fast float %6, 0x3FE6666660000000
  %9 = fsub fast float %8, %7
  ret float %9
}

define float @DOT2W_ri_10_5(<2 x float> %0) {
; V1-LABEL: DOT2W_ri_10_5:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, 0x3f333333447fc000
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_10_5:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x3f333333447fc000
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = fmul fast <2 x float> %0, <float 1.023000e+03, float 0x3FE6666660000000>
  %3 = extractelement <2 x float> %2, i32 0
  %4 = extractelement <2 x float> %2, i32 1
  %5 = fadd fast float %3, %4
  ret float %5
}

define float @ffdmaw(float %a0, float %a1, float %b0, float %b1) {
; V1-LABEL: ffdmaw:
; V1:       # %bb.0: # %entry
; V1-NEXT:    insf $r1 = $r0, 63, 32
; V1-NEXT:    insf $r3 = $r2, 63, 32
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    fdot2w $r0 = $r3, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 1)
;
; V2-LABEL: ffdmaw:
; V2:       # %bb.0: # %entry
; V2-NEXT:    insf $r1 = $r0, 63, 32
; V2-NEXT:    insf $r3 = $r2, 63, 32
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    ffdmaw $r0 = $r3, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = fmul fast float %b0, %a0
  %mul1 = fmul fast float %b1, %a1
  %add = fadd fast float %mul1, %mul
  ret float %add
}
