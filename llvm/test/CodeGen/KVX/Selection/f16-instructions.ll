; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,KV3_1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,KV3_2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

declare half @llvm.sqrt.f16(half %a) #0
declare half @llvm.powi.f16(half %a, i32 %b) #0
declare half @llvm.sin.f16(half %a) #0
declare half @llvm.cos.f16(half %a) #0
declare half @llvm.pow.f16(half %a, half %b) #0
declare half @llvm.exp.f16(half %a) #0
declare half @llvm.exp2.f16(half %a) #0
declare half @llvm.log.f16(half %a) #0
declare half @llvm.log10.f16(half %a) #0
declare half @llvm.log2.f16(half %a) #0
declare half @llvm.fma.f16(half %a, half %b, half %c) #0
declare half @llvm.fabs.f16(half %a) #0
declare half @llvm.minnum.f16(half %a, half %b) #0
declare half @llvm.maxnum.f16(half %a, half %b) #0
declare half @llvm.copysign.f16(half %a, half %b) #0
declare half @llvm.floor.f16(half %a) #0
declare half @llvm.ceil.f16(half %a) #0
declare half @llvm.trunc.f16(half %a) #0
declare half @llvm.rint.f16(half %a) #0
declare half @llvm.nearbyint.f16(half %a) #0
declare half @llvm.round.f16(half %a) #0
declare half @llvm.fmuladd.f16(half %a, half %b, half %c) #0

define half @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x3c00
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  ret half 1.0
}

define half @test_fadd(half %a, half %b) #0 {
; CHECK-LABEL: test_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fadd half %a, %b
  ret half %r
}

define <1 x half> @test_fadd_v1f16(<1 x half> %a, <1 x half> %b) #0 {
; CHECK-LABEL: test_fadd_v1f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fadd <1 x half> %a, %b
  ret <1 x half> %r
}

define half @test_fadd_imm_0(half %b) #0 {
; KV3_1-LABEL: test_fadd_imm_0:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxhd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    faddhq $r0 = $r0, 0x3c00
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 1)
;
; KV3_2-LABEL: test_fadd_imm_0:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxhd $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0x3c00
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    faddhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = fadd half 1.0, %b
  ret half %r
}

define half @test_fadd_imm_1(half %a) #0 {
; KV3_1-LABEL: test_fadd_imm_1:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxhd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    faddhq $r0 = $r0, 0x3c00
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 1)
;
; KV3_2-LABEL: test_fadd_imm_1:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxhd $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0x3c00
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    faddhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = fadd half %a, 1.0
  ret half %r
}

define half @test_fsub(half %a, half %b) #0 {
; CHECK-LABEL: test_fsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fsbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fsub half %a, %b
  ret half %r
}

define half @test_fneg(half %a) #0 {
; CHECK-LABEL: test_fneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fneghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = fsub half 0.0, %a
  ret half %r
}

define half @test_fmul(half %a, half %b) #0 {
; CHECK-LABEL: test_fmul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fmulhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fmul half %a, %b
  ret half %r
}

define half @test_fmul_imm(half %a) #0 {
; KV3_1-LABEL: test_fmul_imm:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxhd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fmulhq $r0 = $r0, 0x3d33
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 1)
;
; KV3_2-LABEL: test_fmul_imm:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxhd $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0x3d33
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fmulhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = fmul half %a, 0xH3D33
  ret half %r
}

define half @test_fdiv(half %a, half %b) #0 {
; CHECK-LABEL: test_fdiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fdiv half %a, %b
  ret half %r
}

define half @test_frec(half %a) {
; CHECK-LABEL: test_frec:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    frecw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 12)
  %r = fdiv half 1.0, %a
  ret half %r
}

define half @test_neg_frec(half %a) {
; CHECK-LABEL: test_neg_frec:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnegw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    frecw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 13)
  %r = fdiv half -1.0, %a
  ret half %r
}

define half @test_fdiv_cst(half %a) {
; CHECK-LABEL: test_fdiv_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    make $r0 = 0x40b00000
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fdiv half 5.5, %a
  ret half %r
}

define half @test_frem(half %a, half %b) #0 {
; CHECK-LABEL: test_frem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = frem half %a, %b
  ret half %r
}

define void @test_store(half %a, half* %b) #0 {
; CHECK-LABEL: test_store:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sh 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  store half %a, half* %b
  ret void
}

define half @test_load(half* %a) #0 {
; CHECK-LABEL: test_load:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lhz $r0 = 0[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = load half, half* %a
  ret half %r
}

define void @test_halfp0a1(half * noalias readonly %from, half * %to) {
; CHECK-LABEL: test_halfp0a1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lhz $r0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sh 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %1 = load half, half * %from , align 1
  store half %1, half * %to , align 1
  ret void
}

declare half @test_callee(half %a, half %b) #0

define half @test_call(half %a, half %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @test_callee(half %a, half %b)
  ret half %r
}

define half @test_call_flipped(half %a, half %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @test_callee(half %b, half %a)
  ret half %r
}

define half @test_tailcall_flipped(half %a, half %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = tail call half @test_callee(half %b, half %a)
  ret half %r
}

define half @test_select(half %a, half %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.wnez $r2 ? $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = select i1 %c, half %a, half %b
  ret half %r
}

define half @test_select_cc(half %a, half %b, half %c, half %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r2 = $r2, $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r2 = $r2, 1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cmoved.wnez $r2 ? $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %cc = fcmp une half %c, %d
  %r = select i1 %cc, half %a, half %b
  ret half %r
}

define float @test_select_cc_f32_f16(float %a, float %b, half %c, half %d) #0 {
; CHECK-LABEL: test_select_cc_f32_f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r2 = $r2, $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r2 = $r2, 1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cmoved.wnez $r2 ? $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %cc = fcmp une half %c, %d
  %r = select i1 %cc, float %a, float %b
  ret float %r
}

define half @test_select_cc_f16_f32(half %a, half %b, float %c, float %d) #0 {
; CHECK-LABEL: test_select_cc_f16_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompw.une $r2 = $r2, $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cmoved.wnez $r2 ? $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %cc = fcmp une float %c, %d
  %r = select i1 %cc, half %a, half %b
  ret half %r
}

define i1 @test_fcmp_une(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_une:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp une half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_ueq(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_ueq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ueq $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ueq half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_ugt(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ugt half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_uge(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp uge half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_ult(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ult half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_ule(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ule half %a, %b
  ret i1 %r
}


define i1 @test_fcmp_uno(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_uno:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.ult $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = fcmp uno half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_one(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_one:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp one half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_oeq(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_oeq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp oeq half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_ogt(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_ogt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ogt half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_oge(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_oge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp oge half %a, %b
  ret i1 %r
}

; XCHECK-LABEL: test_fcmp_olt(
define i1 @test_fcmp_olt(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_olt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp olt half %a, %b
  ret i1 %r
}

; XCHECK-LABEL: test_fcmp_ole(
define i1 @test_fcmp_ole(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_ole:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ole half %a, %b
  ret i1 %r
}

define i1 @test_fcmp_ord(half %a, half %b) #0 {
; CHECK-LABEL: test_fcmp_ord:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.olt $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iorw $r0 = $r0, $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = fcmp ord half %a, %b
  ret i1 %r
}

define void @test_br_cc(half %a, half %b, i32* %p1, i32* %p2) #0 {
; CHECK-LABEL: test_br_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cb.wnez $r0 ? .LBB38_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %then
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r2] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .LBB38_2: # %else
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r3] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %c = fcmp uge half %a, %b
  br i1 %c, label %then, label %else
then:
  store i32 0, i32* %p1
  ret void
else:
  store i32 0, i32* %p2
  ret void
}

define half @test_phi(half* %p1) #0 {
; CHECK-LABEL: test_phi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    lhz $r20 = 0[$r18]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:  .LBB39_1: # %loop
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    copyd $r19 = $r20
; CHECK-NEXT:    lhz $r20 = 0[$r18]
; CHECK-NEXT:    call test_dummy
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.wnez $r0 ? .LBB39_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2: # %return
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    copyd $r0 = $r19
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %a = load half, half* %p1
  br label %loop
loop:
  %r = phi half [%a, %entry], [%b, %loop]
  %b = load half, half* %p1
  %c = call i1 @test_dummy(half* %p1)
  br i1 %c, label %loop, label %return
return:
  ret half %r
}
declare i1 @test_dummy(half* %p1) #0

define i32 @test_fptosi_i32(half %a) #0 {
; CHECK-LABEL: test_fptosi_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fixedw.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fptosi half %a to i32
  ret i32 %r
}

define i64 @test_fptosi_i64(half %a) #0 {
; CHECK-LABEL: test_fptosi_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fixedd.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = fptosi half %a to i64
  ret i64 %r
}

define i32 @test_fptoui_i32(half %a) #0 {
; CHECK-LABEL: test_fptoui_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fixeduw.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fptoui half %a to i32
  ret i32 %r
}

define i64 @test_fptoui_i64(half %a) #0 {
; CHECK-LABEL: test_fptoui_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = fptoui half %a to i64
  ret i64 %r
}

define half @test_uitofp_i32(i32 %a) #0 {
; CHECK-LABEL: test_uitofp_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatuw.rn $r0 = $r0, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
  %r = uitofp i32 %a to half
  ret half %r
}

define half @test_uitofp_i64(i64 %a) #0 {
; CHECK-LABEL: test_uitofp_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatud.rn $r0 = $r0, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %r = uitofp i64 %a to half
  ret half %r
}

define half @test_sitofp_i32(i32 %a) #0 {
; CHECK-LABEL: test_sitofp_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatw.rn $r0 = $r0, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
  %r = sitofp i32 %a to half
  ret half %r
}

define half @test_sitofp_i64(i64 %a) #0 {
; CHECK-LABEL: test_sitofp_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatd.rn $r0 = $r0, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %r = sitofp i64 %a to half
  ret half %r
}

define half @test_uitofp_i32_fadd(i32 %a, half %b) #0 {
; CHECK-LABEL: test_uitofp_i32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatuw.rn $r0 = $r0, 0
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    faddhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 6)
  %c = uitofp i32 %a to half
  %r = fadd half %b, %c
  ret half %r
}

; XCHECK-NOF16-DAG:  cvt.f32.f16    [[B32:%f[0-9]+]], [[B]]
; XCHECK-NOF16-DAG:  cvt.f32.f16    [[C32:%f[0-9]+]], [[C]]
; XCHECK-NOF16-NEXT: add.rn.f32     [[R32:%f[0-9]+]], [[B32]], [[C32]];
; XCHECK-NOF16-NEXT: cvt.rn.f16.f32 [[R:%h[0-9]+]], [[R32]]
define half @test_sitofp_i32_fadd(i32 %a, half %b) #0 {
; CHECK-LABEL: test_sitofp_i32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatw.rn $r0 = $r0, 0
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    faddhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 6)
  %c = sitofp i32 %a to half
  %r = fadd half %b, %c
  ret half %r
}

define half @test_fptrunc_float(float %a) #0 {
; CHECK-LABEL: test_fptrunc_float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = fptrunc float %a to half
  ret half %r
}

define half @test_fptrunc_double(double %a) #0 {
; CHECK-LABEL: test_fptrunc_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnarrowdw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fptrunc double %a to half
  ret half %r
}

define float @test_fpext_float(half %a) #0 {
; CHECK-LABEL: test_fpext_float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = fpext half %a to float
  ret float %r
}

define double @test_fpext_double(half %a) #0 {
; CHECK-LABEL: test_fpext_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fpext half %a to double
  ret double %r
}


define i16 @test_bitcast_halftoi16(half %a) #0 {
; CHECK-LABEL: test_bitcast_halftoi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sh 30[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    lhz $r0 = 30[$r12]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = bitcast half %a to i16
  ret i16 %r
}

define half @test_bitcast_i16tohalf(i16 %a) #0 {
; CHECK-LABEL: test_bitcast_i16tohalf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sh 30[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    lhz $r0 = 30[$r12]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = bitcast i16 %a to half
  ret half %r
}

define half @test_sqrt(half %a) #0 {
; CHECK-LABEL: test_sqrt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.sqrt.f16(half %a)
  ret half %r
}

define half @test_powi(half %a, i32 %b) #0 {
; CHECK-LABEL: test_powi:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call half @llvm.powi.f16(half %a, i32 %b)
 ret half %r
}

define half @test_sin(half %a) #0 #1 {
; CHECK-LABEL: test_sin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.sin.f16(half %a)
  ret half %r
}

define half @test_cos(half %a) #0 #1 {
; CHECK-LABEL: test_cos:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.cos.f16(half %a)
  ret half %r
}

define half @test_pow(half %a, half %b) #0 {
; CHECK-LABEL: test_pow:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    fwidenlhw $r1 = $r1
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call half @llvm.pow.f16(half %a, half %b)
 ret half %r
}

define half @test_exp(half %a) #0 {
; CHECK-LABEL: test_exp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call half @llvm.exp.f16(half %a)
 ret half %r
}

define half @test_exp2(half %a) #0 {
; CHECK-LABEL: test_exp2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call half @llvm.exp2.f16(half %a)
 ret half %r
}

define half @test_log(half %a) #0 {
; CHECK-LABEL: test_log:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call half @llvm.log.f16(half %a)
 ret half %r
}

define half @test_log10(half %a) #0 {
; CHECK-LABEL: test_log10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call half @llvm.log10.f16(half %a)
 ret half %r
}

define half @test_log2(half %a) #0 {
; CHECK-LABEL: test_log2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call half @llvm.log2.f16(half %a)
 ret half %r
}

define half @test_fma(half %a, half %b, half %c) #0 {
; KV3_1-LABEL: test_fma:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxhd $r1 = $r1
; KV3_1-NEXT:    zxhd $r3 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    zxhd $r0 = $r2
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    ffmahq $r0 = $r3, $r1
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 2)
;
; KV3_2-LABEL: test_fma:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxhd $r0 = $r2
; KV3_2-NEXT:    zxhd $r1 = $r1
; KV3_2-NEXT:    zxhd $r3 = $r0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    ffmahq $r0 = $r3, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = call half @llvm.fma.f16(half %a, half %b, half %c)
  ret half %r
}

define half @test_fabs(half %a) #0 {
; CHECK-LABEL: test_fabs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = call half @llvm.fabs.f16(half %a)
  ret half %r
}

define half @test_minnum(half %a, half %b) #0 {
; KV3_1-LABEL: test_minnum:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    sllhqs $r2 = $r0, 1
; KV3_1-NEXT:    fcompnhq.olt $r3 = $r1, $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    compnhq.gtu $r2 = $r2, 0xf800
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    iorw $r2 = $r3, $r2
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    cmovehq.odd $r2 ? $r0 = $r1
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 3)
;
; KV3_2-LABEL: test_minnum:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    fminhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
  %r = call half @llvm.minnum.f16(half %a, half %b)
  ret half %r
}

define half @test_minnum_fast(half %a, half %b) #0 {
; CHECK-LABEL: test_minnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fminhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = call fast half @llvm.minnum.f16(half %a, half %b)
  ret half %r
}

define half @test_maxnum(half %a, half %b) #0 {
; KV3_1-LABEL: test_maxnum:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    sllhqs $r2 = $r0, 1
; KV3_1-NEXT:    fcompnhq.olt $r3 = $r0, $r1
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    compnhq.gtu $r2 = $r2, 0xf800
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    iorw $r2 = $r3, $r2
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    cmovehq.odd $r2 ? $r0 = $r1
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 3)
;
; KV3_2-LABEL: test_maxnum:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    fmaxhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
  %r = call half @llvm.maxnum.f16(half %a, half %b)
  ret half %r
}

define half @test_maxnum_fast(half %a, half %b) #0 {
; CHECK-LABEL: test_maxnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmaxhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = call fast half @llvm.maxnum.f16(half %a, half %b)
  ret half %r
}

define half @test_copysign(half %a, half %b) #0 {
; CHECK-LABEL: test_copysign:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sraw $r1 = $r1, 15
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = call half @llvm.copysign.f16(half %a, half %b)
  ret half %r
}

define half @test_copysign_f32(half %a, float %b) #0 {
; CHECK-LABEL: test_copysign_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sraw $r1 = $r1, 31
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %tb = fptrunc float %b to half
  %r = call half @llvm.copysign.f16(half %a, half %tb)
  ret half %r
}

define half @test_copysign_f64(half %a, double %b) #0 {
; CHECK-LABEL: test_copysign_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r1, 63
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %tb = fptrunc double %b to half
  %r = call half @llvm.copysign.f16(half %a, half %tb)
  ret half %r
}

define float @test_copysign_extended(half %a, half %b) #0 {
; CHECK-LABEL: test_copysign_extended:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sraw $r1 = $r1, 15
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r1, 15, 15
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = call half @llvm.copysign.f16(half %a, half %b)
  %xr = fpext half %r to float
  ret float %xr
}

define half @test_floor(half %a) #0 {
; CHECK-LABEL: test_floor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.floor.f16(half %a)
  ret half %r
}

define half @test_ceil(half %a) #0 {
; CHECK-LABEL: test_ceil:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.ceil.f16(half %a)
  ret half %r
}

define half @test_trunc(half %a) #0 {
; CHECK-LABEL: test_trunc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.trunc.f16(half %a)
  ret half %r
}

define half @test_rint(half %a) #0 {
; CHECK-LABEL: test_rint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.rint.f16(half %a)
  ret half %r
}

define half @test_nearbyint(half %a) #0 {
; CHECK-LABEL: test_nearbyint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.nearbyint.f16(half %a)
  ret half %r
}

define half @test_round(half %a) #0 {
; CHECK-LABEL: test_round:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhw $r0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call half @llvm.round.f16(half %a)
  ret half %r
}

define half @test_fmuladd(half %a, half %b, half %c) #0 {
; KV3_1-LABEL: test_fmuladd:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxhd $r1 = $r1
; KV3_1-NEXT:    zxhd $r3 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    zxhd $r0 = $r2
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    ffmahq $r0 = $r3, $r1
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 2)
;
; KV3_2-LABEL: test_fmuladd:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxhd $r0 = $r2
; KV3_2-NEXT:    zxhd $r1 = $r1
; KV3_2-NEXT:    zxhd $r3 = $r0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    ffmahq $r0 = $r3, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = call half @llvm.fmuladd.f16(half %a, half %b, half %c)
  ret half %r
}

define i32 @fcmp_setoeq(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setoeq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp oeq half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setoeq_single(half %a) #0 {
; CHECK-LABEL: fcmp_setoeq_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp oeq half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setogt(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setogt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ogt half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setogt_single(half %a) #0 {
; CHECK-LABEL: fcmp_setogt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ogt half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setoge(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setoge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp oge half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setoge_single(half %a) #0 {
; CHECK-LABEL: fcmp_setoge_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp oge half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setolt(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setolt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp olt half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setolt_single(half %a) #0 {
; CHECK-LABEL: fcmp_setolt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp olt half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setole(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setole:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ole half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setole_single(half %a) #0 {
; CHECK-LABEL: fcmp_setole_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ole half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setone(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setone:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp one half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setone_single(half %a) #0 {
; CHECK-LABEL: fcmp_setone_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp one half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setord(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setord:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.olt $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iorw $r0 = $r0, $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
entry:
  %0 = fcmp ord half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setord_single(half %a) #0 {
; CHECK-LABEL: fcmp_setord_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ord half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setuno(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setuno:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.ult $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
entry:
  %0 = fcmp uno half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setuno_single(half %a) #0 {
; CHECK-LABEL: fcmp_setuno_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp uno half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setueq(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setueq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.ueq $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ueq half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setueq_single(half %a) #0 {
; CHECK-LABEL: fcmp_setueq_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ueq half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setugt(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setugt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.ult $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ugt half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setugt_single(half %a) #0 {
; CHECK-LABEL: fcmp_setugt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ugt half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setuge(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setuge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp uge half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setuge_single(half %a) #0 {
; CHECK-LABEL: fcmp_setuge_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp uge half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setult(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setult:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.ult $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ult half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setult_single(half %a) #0 {
; CHECK-LABEL: fcmp_setult_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ult half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setule(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setule:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.uge $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ule half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setule_single(half %a) #0 {
; CHECK-LABEL: fcmp_setule_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ule half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setune(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setune:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp une half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setune_single(half %a) #0 {
; CHECK-LABEL: fcmp_setune_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp une half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setoeq_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setoeq_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast oeq half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setoeq_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setoeq_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast oeq half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setogt_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setogt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast ogt half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setogt_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setogt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ogt half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setoge_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setoge_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast oge half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setoge_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setoge_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast oge half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setolt_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setolt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast olt half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setolt_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setolt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast olt half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setole_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setole_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast ole half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setole_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setole_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ole half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setone_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setone_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast one half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setone_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setone_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast one half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setord_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setord_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.olt $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iorw $r0 = $r0, $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
entry:
  %0 = fcmp fast ord half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setord_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setord_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast ord half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setuno_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setuno_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.ult $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
entry:
  %0 = fcmp fast uno half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setuno_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setuno_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast uno half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setueq_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setueq_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast ueq half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setueq_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setueq_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ueq half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setugt_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setugt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast ugt half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setugt_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setugt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ugt half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setuge_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setuge_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast uge half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setuge_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setuge_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast uge half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setult_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setult_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast ult half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setult_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setult_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ult half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setule_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setule_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast ule half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setule_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setule_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ule half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setune_fast(half %a, half %b) #0 {
; CHECK-LABEL: fcmp_setune_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast une half %a, %b
  %1 = zext i1 %0 to i32
  ret i32 %1
}

define i32 @fcmp_setune_single_fast(half %a) #0 {
; CHECK-LABEL: fcmp_setune_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast une half %a, %a
  %1 = zext i1 %0 to i32
  ret i32 %1
}

attributes #0 = { nounwind }
attributes #1 = { "unsafe-fp-math" = "true" }
