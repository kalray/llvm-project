; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s | FileCheck %s
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefix=V2
; RUN: clang -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @DOT2W_rr_1(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: DOT2W_rr_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_rr_1:
; V2:       # %bb.0:
; V2-NEXT:    dot2w $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = mul <2 x i32> %1, %0
  %4 = extractelement <2 x i32> %3, i32 0
  %5 = extractelement <2 x i32> %3, i32 1
  %6 = add i32 %4, %5
  ret i32 %6
}

define i32 @DOT2W_rr_2(i64 %0, i64 %1) {
; CHECK-LABEL: DOT2W_rr_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_rr_2:
; V2:       # %bb.0:
; V2-NEXT:    dot2w $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = trunc i64 %0 to i32
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = trunc i64 %1 to i32
  %7 = lshr i64 %1, 32
  %8 = trunc i64 %7 to i32
  %9 = mul i32 %6, %3
  %10 = mul i32 %8, %5
  %11 = add i32 %10, %9
  ret i32 %11
}

define i32 @DOT2W_rr_3(<2 x i32> %0, i64 %1) {
; CHECK-LABEL: DOT2W_rr_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2w $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_rr_3:
; V2:       # %bb.0:
; V2-NEXT:    dot2w $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = trunc i64 %1 to i32
  %4 = lshr i64 %1, 32
  %5 = trunc i64 %4 to i32
  %6 = extractelement <2 x i32> %0, i64 0
  %7 = mul i32 %6, %3
  %8 = extractelement <2 x i32> %0, i64 1
  %9 = mul i32 %8, %5
  %10 = add i32 %9, %7
  ret i32 %10
}

define i32 @DOT2W_rr_4(i64 %0, <2 x i32> %1) {
; CHECK-LABEL: DOT2W_rr_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_rr_4:
; V2:       # %bb.0:
; V2-NEXT:    dot2w $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = trunc i64 %0 to i32
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = extractelement <2 x i32> %1, i64 0
  %7 = mul i32 %6, %3
  %8 = extractelement <2 x i32> %1, i64 1
  %9 = mul i32 %8, %5
  %10 = add i32 %7, %9
  ret i32 %10
}

define i32 @DOT2W_ri_10_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2W_ri_10_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulw $r0 = $r0, -1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_10_1:
; V2:       # %bb.0:
; V2-NEXT:    mulw $r0 = $r0, -1023
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = mul i32 %2, -1023
  ret i32 %3
}

define i32 @DOT2W_ri_10_2(i64 %0) {
; CHECK-LABEL: DOT2W_ri_10_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulw $r0 = $r0, 1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_10_2:
; V2:       # %bb.0:
; V2-NEXT:    mulw $r0 = $r0, 1023
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %2 = trunc i64 %0 to i32
  %3 = mul i32 %2, 1023
  ret i32 %3
}

define i32 @DOT2W_ri_10_3(i64 %0) {
; CHECK-LABEL: DOT2W_ri_10_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulw $r0 = $r0, -1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_10_3:
; V2:       # %bb.0:
; V2-NEXT:    mulw $r0 = $r0, -1023
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %2 = trunc i64 %0 to i32
  %3 = mul i32 %2, -1023
  ret i32 %3
}

define i32 @DOT2W_ri_10_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2W_ri_10_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulw $r0 = $r0, 1023
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_10_4:
; V2:       # %bb.0:
; V2-NEXT:    mulw $r0 = $r0, 1023
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = mul i32 %2, 1023
  ret i32 %3
}

define i32 @DOT2W_ri_37_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2W_ri_37_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2w $r0 = $r0, 0x1f00000003
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_37_1:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x1f00000003
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    dot2w $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = mul <2 x i32> %0, <i32 3, i32 31>
  %3 = extractelement <2 x i32> %2, i32 0
  %4 = extractelement <2 x i32> %2, i32 1
  %5 = add i32 %3, %4
  ret i32 %5
}

; FIXME: These are dificult, must find a way to generate
; an immediate from two other ones
define i32 @DOT2W_ri_37_2(i64 %0) {
; CHECK-LABEL: DOT2W_ri_37_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    mulw $r1 = $r1, 31
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    maddw $r1 = $r0, 3
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
;
; V2-LABEL: DOT2W_ri_37_2:
; V2:       # %bb.0:
; V2-NEXT:    srld $r1 = $r0, 32
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    mulw $r1 = $r1, 31
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    maddw $r1 = $r0, 3
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 4)
  %2 = trunc i64 %0 to i32
  %3 = lshr i64 %0, 32
  %4 = trunc i64 %3 to i32
  %5 = mul i32 %2, 3
  %6 = mul i32 %4, 31
  %7 = add i32 %6, %5
  ret i32 %7
}

define i32 @DOT2W_ri_37_3(i64 %0) {
; CHECK-LABEL: DOT2W_ri_37_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    mulw $r1 = $r1, 31
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    maddw $r1 = $r0, 3
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
;
; V2-LABEL: DOT2W_ri_37_3:
; V2:       # %bb.0:
; V2-NEXT:    srld $r1 = $r0, 32
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    mulw $r1 = $r1, 31
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    maddw $r1 = $r0, 3
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 4)
  %2 = trunc i64 %0 to i32
  %3 = lshr i64 %0, 32
  %4 = trunc i64 %3 to i32
  %5 = mul i32 %2, 3
  %6 = mul i32 %4, 31
  %7 = add i32 %6, %5
  ret i32 %7
}

define i32 @DOT2W_ri_37_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2W_ri_37_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2w $r0 = $r0, 0x1f00000003
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_37_4:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0x1f00000003
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    dot2w $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = mul <2 x i32> %0, <i32 3, i32 31>
  %3 = extractelement <2 x i32> %2, i32 0
  %4 = extractelement <2 x i32> %2, i32 1
  %5 = add i32 %3, %4
  ret i32 %5
}

define i32 @DOT2W_ri_64_1(<2 x i32> %0) {
; CHECK-LABEL: DOT2W_ri_64_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2w $r0 = $r0, 0xfffffffb00000003
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_64_1:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0xfffffffb00000003
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    dot2w $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = mul <2 x i32> %0, <i32 3, i32 -5>
  %3 = extractelement <2 x i32> %2, i32 0
  %4 = extractelement <2 x i32> %2, i32 1
  %5 = add i32 %3, %4
  ret i32 %5
}

define i32 @DOT2W_ri_64_2(i64 %0) {
; CHECK-LABEL: DOT2W_ri_64_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 27
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r1 = $r1, -32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    maddw $r1 = $r0, 3
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
;
; V2-LABEL: DOT2W_ri_64_2:
; V2:       # %bb.0:
; V2-NEXT:    srld $r1 = $r0, 27
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    andw $r1 = $r1, -32
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    maddw $r1 = $r0, 3
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 4)
  %2 = trunc i64 %0 to i32
  %3 = mul i32 %2, 3
  %4 = lshr i64 %0, 27
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, -32
  %7 = add i32 %6, %3
  ret i32 %7
}

define i32 @DOT2W_ri_64_3(i64 %0) {
; CHECK-LABEL: DOT2W_ri_64_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 27
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r1 = $r1, -32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    maddw $r1 = $r0, 3
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
;
; V2-LABEL: DOT2W_ri_64_3:
; V2:       # %bb.0:
; V2-NEXT:    srld $r1 = $r0, 27
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    andw $r1 = $r1, -32
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    maddw $r1 = $r0, 3
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    copyd $r0 = $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 4)
  %2 = trunc i64 %0 to i32
  %3 = mul i32 %2, 3
  %4 = lshr i64 %0, 27
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, -32
  %7 = add i32 %6, %3
  ret i32 %7
}

define i32 @DOT2W_ri_64_4(<2 x i32> %0) {
; CHECK-LABEL: DOT2W_ri_64_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dot2w $r0 = $r0, 0xfffffffb00000003
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: DOT2W_ri_64_4:
; V2:       # %bb.0:
; V2-NEXT:    make $r1 = 0xfffffffb00000003
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    dot2w $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %2 = mul <2 x i32> %0, <i32 3, i32 -5>
  %3 = extractelement <2 x i32> %2, i32 0
  %4 = extractelement <2 x i32> %2, i32 1
  %5 = add i32 %3, %4
  ret i32 %5
}
