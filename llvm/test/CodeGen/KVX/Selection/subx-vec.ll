; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,V1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,V2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"


define <2 x i16> @sub_i16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: sub_i16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <2 x i16> %a, %b
  ret <2 x i16> %sub
}

define <2 x i16> @sub_i16x2_ri(<2 x i16> %a) {
; CHECK-LABEL: sub_i16x2_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfhq $r0 = $r0, 0xffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <2 x i16> <i16 -1, i16 0>, %a
  ret <2 x i16> %sub
}

define <4 x i16> @sub_i16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: sub_i16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <4 x i16> %a, %b
  ret <4 x i16> %sub
}

define <4 x i16> @sub_i16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: sub_i16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0xffff0005
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %sub = sub <4 x i16> <i16 5, i16 -1, i16 0, i16 0>, %a
  ret <4 x i16> %sub
}

define <4 x i16> @sub_i16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: sub_i16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfhq $r0 = $r0, 0xffff0005.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <4 x i16> <i16 5, i16 -1, i16 5, i16 -1>, %a
  ret <4 x i16> %sub
}

define <4 x i16> @sub_i16x4_ri_rr2(<4 x i16> %a) {
; CHECK-LABEL: sub_i16x4_ri_rr2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x10005ffff0005
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %sub = sub <4 x i16> %a, <i16 5, i16 -1, i16 5, i16 1>
  ret <4 x i16> %sub
}

define <2 x i32> @sub_i32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: sub_i32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfwp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <2 x i32> %a, %b
  ret <2 x i32> %sub
}

define <2 x i32> @sub_i32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: sub_i32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0xffffffff
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %sub = sub <2 x i32> <i32 -1, i32 0>, %a
  ret <2 x i32> %sub
}

define <2 x i32> @sub_i32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: sub_i32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfwp $r0 = $r0, -2.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <2 x i32> <i32 -2, i32 -2>, %a
  ret <2 x i32> %sub
}

define <2 x i32> @sub_i32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: sub_i32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0xffffffff00000001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfwp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %sub = sub <2 x i32> %a, <i32 1, i32 -1>
  ret <2 x i32> %sub
}

define <2 x i16> @subx2_i16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: subx2_i16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %b, <i16 1, i16 1>
  %sub = sub <2 x i16> %a, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @subx2_u16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: subx2_u16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %b, <i16 1, i16 1>
  %sub = sub <2 x i16> %a, %mul
  ret <2 x i16> %sub
}

define <4 x i16> @subx2_i16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: subx2_i16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %b, <i16 1, i16 1, i16 1, i16 1>
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx2_u16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: subx2_u16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %b, <i16 1, i16 1, i16 1, i16 1>
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <2 x i32> @subx2_i32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: subx2_i32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2wp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %b, <i32 1, i32 1>
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx2_u32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: subx2_u32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2wp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %b, <i32 1, i32 1>
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i16> @subx4_i16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: subx4_i16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %b, <i16 2, i16 2>
  %sub = sub <2 x i16> %a, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @subx4_u16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: subx4_u16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %b, <i16 2, i16 2>
  %sub = sub <2 x i16> %a, %mul
  ret <2 x i16> %sub
}

define <4 x i16> @subx4_i16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: subx4_i16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %b, <i16 2, i16 2, i16 2, i16 2>
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx4_u16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: subx4_u16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %b, <i16 2, i16 2, i16 2, i16 2>
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <2 x i32> @subx4_i32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: subx4_i32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4wp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %b, <i32 2, i32 2>
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx4_u32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: subx4_u32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4wp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %b, <i32 2, i32 2>
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i16> @subx8_i16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: subx8_i16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %b, <i16 3, i16 3>
  %sub = sub <2 x i16> %a, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @subx8_u16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: subx8_u16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %b, <i16 3, i16 3>
  %sub = sub <2 x i16> %a, %mul
  ret <2 x i16> %sub
}

define <4 x i16> @subx8_i16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: subx8_i16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %b, <i16 3, i16 3, i16 3, i16 3>
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx8_u16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: subx8_u16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %b, <i16 3, i16 3, i16 3, i16 3>
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <2 x i32> @subx8_i32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: subx8_i32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8wp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %b, <i32 3, i32 3>
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx8_u32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: subx8_u32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8wp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %b, <i32 3, i32 3>
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i16> @subx16_i16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: subx16_i16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %b, <i16 4, i16 4>
  %sub = sub <2 x i16> %a, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @subx16_u16x2_rr(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: subx16_u16x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %b, <i16 4, i16 4>
  %sub = sub <2 x i16> %a, %mul
  ret <2 x i16> %sub
}

define <4 x i16> @subx16_i16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: subx16_i16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %b, <i16 4, i16 4, i16 4, i16 4>
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx16_u16x4_rr(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: subx16_u16x4_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %b, <i16 4, i16 4, i16 4, i16 4>
  %sub = sub <4 x i16> %a, %mul
  ret <4 x i16> %sub
}

define <2 x i32> @subx16_i32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: subx16_i32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16wp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %b, <i32 4, i32 4>
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx16_u32x2_rr(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: subx16_u32x2_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16wp $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %b, <i32 4, i32 4>
  %sub = sub <2 x i32> %a, %mul
  ret <2 x i32> %sub
}

define <2 x i16> @subx2_i16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: subx2_i16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 1, i16 1>
  %sub = sub <2 x i16> <i16 1, i16 2>, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @subx2_u16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: subx2_u16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 1, i16 1>
  %sub = sub <2 x i16> <i16 1, i16 2>, %mul
  ret <2 x i16> %sub
}

define <4 x i16> @subx2_i16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: subx2_i16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 1, i16 1, i16 1, i16 1>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 0, i16 0>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx2_i16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: subx2_i16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r0, 0x20001.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 1, i16 1, i16 1, i16 1>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx2_i16x4_rr_2(<4 x i16> %a) {
; CHECK-LABEL: subx2_i16x4_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x3000100020001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx2hq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <4 x i16> %a, <i16 1, i16 1, i16 1, i16 1>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 3>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx2_u16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: subx2_u16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 1, i16 1, i16 1, i16 1>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 0, i16 0>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx2_u16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: subx2_u16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2hq $r0 = $r0, 0x20001.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 1, i16 1, i16 1, i16 1>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx2_u16x4_rr_2(<4 x i16> %a) {
; CHECK-LABEL: subx2_u16x4_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x3000100020001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx2hq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <4 x i16> %a, <i16 1, i16 1, i16 1, i16 1>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 3>, %mul
  ret <4 x i16> %sub
}

define <2 x i32> @subx2_i32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: subx2_i32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2wp $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 1, i32 1>
  %sub = sub <2 x i32> <i32 1, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx2_i32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: subx2_i32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2wp $r0 = $r0, 0x3.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 1, i32 1>
  %sub = sub <2 x i32> <i32 3, i32 3>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx2_i32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: subx2_i32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x200000003
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx2wp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <2 x i32> %a, <i32 1, i32 1>
  %sub = sub <2 x i32> <i32 3, i32 2>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx2_u32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: subx2_u32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2wp $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 1, i32 1>
  %sub = sub <2 x i32> <i32 1, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx2_u32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: subx2_u32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2wp $r0 = $r0, 0x3.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 1, i32 1>
  %sub = sub <2 x i32> <i32 3, i32 3>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx2_u32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: subx2_u32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x200000003
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx2wp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <2 x i32> %a, <i32 1, i32 1>
  %sub = sub <2 x i32> <i32 3, i32 2>, %mul
  ret <2 x i32> %sub
}

define <2 x i16> @subx4_i16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: subx4_i16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 2, i16 2>
  %sub = sub <2 x i16> <i16 1, i16 2>, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @subx4_u16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: subx4_u16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 2, i16 2>
  %sub = sub <2 x i16> <i16 1, i16 2>, %mul
  ret <2 x i16> %sub
}

define <4 x i16> @subx4_i16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: subx4_i16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 2, i16 2, i16 2, i16 2>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 0, i16 0>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx4_i16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: subx4_i16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r0, 0x20001.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 2, i16 2, i16 2, i16 2>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx4_i16x4_rr_2(<4 x i16> %a) {
; CHECK-LABEL: subx4_i16x4_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x3000100020001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx4hq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <4 x i16> %a, <i16 2, i16 2, i16 2, i16 2>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 3>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx4_u16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: subx4_u16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 2, i16 2, i16 2, i16 2>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 0, i16 0>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx4_u16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: subx4_u16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4hq $r0 = $r0, 0x20001.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 2, i16 2, i16 2, i16 2>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx4_u16x4_rr_2(<4 x i16> %a) {
; CHECK-LABEL: subx4_u16x4_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x3000100020001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx4hq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <4 x i16> %a, <i16 2, i16 2, i16 2, i16 2>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 3>, %mul
  ret <4 x i16> %sub
}

define <2 x i32> @subx4_i32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: subx4_i32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4wp $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 2, i32 2>
  %sub = sub <2 x i32> <i32 1, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx4_i32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: subx4_i32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4wp $r0 = $r0, 0x3.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 2, i32 2>
  %sub = sub <2 x i32> <i32 3, i32 3>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx4_i32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: subx4_i32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x200000003
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx4wp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <2 x i32> %a, <i32 2, i32 2>
  %sub = sub <2 x i32> <i32 3, i32 2>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx4_u32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: subx4_u32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4wp $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 2, i32 2>
  %sub = sub <2 x i32> <i32 1, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx4_u32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: subx4_u32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4wp $r0 = $r0, 0x3.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 2, i32 2>
  %sub = sub <2 x i32> <i32 3, i32 3>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx4_u32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: subx4_u32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x200000003
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx4wp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <2 x i32> %a, <i32 2, i32 2>
  %sub = sub <2 x i32> <i32 3, i32 2>, %mul
  ret <2 x i32> %sub
}

define <2 x i16> @subx8_i16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: subx8_i16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 3, i16 3>
  %sub = sub <2 x i16> <i16 1, i16 2>, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @subx8_u16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: subx8_u16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 3, i16 3>
  %sub = sub <2 x i16> <i16 1, i16 2>, %mul
  ret <2 x i16> %sub
}

define <4 x i16> @subx8_i16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: subx8_i16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 3, i16 3, i16 3, i16 3>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 0, i16 0>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx8_i16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: subx8_i16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r0, 0x20001.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 3, i16 3, i16 3, i16 3>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx8_i16x4_rr_2(<4 x i16> %a) {
; CHECK-LABEL: subx8_i16x4_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x3000100020001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx8hq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <4 x i16> %a, <i16 3, i16 3, i16 3, i16 3>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 3>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx8_u16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: subx8_u16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 3, i16 3, i16 3, i16 3>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 0, i16 0>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx8_u16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: subx8_u16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8hq $r0 = $r0, 0x20001.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 3, i16 3, i16 3, i16 3>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx8_u16x4_rr_2(<4 x i16> %a) {
; CHECK-LABEL: subx8_u16x4_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x3000100020001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx8hq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <4 x i16> %a, <i16 3, i16 3, i16 3, i16 3>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 3>, %mul
  ret <4 x i16> %sub
}

define <2 x i32> @subx8_i32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: subx8_i32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8wp $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 3, i32 3>
  %sub = sub <2 x i32> <i32 1, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx8_i32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: subx8_i32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8wp $r0 = $r0, 0x3.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 3, i32 3>
  %sub = sub <2 x i32> <i32 3, i32 3>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx8_i32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: subx8_i32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x200000003
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx8wp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <2 x i32> %a, <i32 3, i32 3>
  %sub = sub <2 x i32> <i32 3, i32 2>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx8_u32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: subx8_u32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8wp $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 3, i32 3>
  %sub = sub <2 x i32> <i32 1, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx8_u32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: subx8_u32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8wp $r0 = $r0, 0x3.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 3, i32 3>
  %sub = sub <2 x i32> <i32 3, i32 3>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx8_u32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: subx8_u32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x200000003
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx8wp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <2 x i32> %a, <i32 3, i32 3>
  %sub = sub <2 x i32> <i32 3, i32 2>, %mul
  ret <2 x i32> %sub
}

define <2 x i16> @subx16_i16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: subx16_i16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 4, i16 4>
  %sub = sub <2 x i16> <i16 1, i16 2>, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @subx16_u16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: subx16_u16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 4, i16 4>
  %sub = sub <2 x i16> <i16 1, i16 2>, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @not_subx16_u16x2_ri_(<2 x i16> %a) {
; CHECK-LABEL: not_subx16_u16x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r0, 0x10010
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 4, i16 4>
  %sub = sub <2 x i16> <i16 16, i16 1>, %mul
  ret <2 x i16> %sub
}

define <2 x i16> @not_subx16_u16x2_ri_2(<2 x i16> %a) {
; CHECK-LABEL: not_subx16_u16x2_ri_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r0, 0xffff0000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i16> %a, <i16 4, i16 4>
  %sub = sub <2 x i16> <i16 0, i16 -1>, %mul
  ret <2 x i16> %sub
}
define <4 x i16> @subx16_i16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: subx16_i16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 4, i16 4, i16 4, i16 4>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 0, i16 0>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx16_i16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: subx16_i16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r0, 0x20001.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 4, i16 4, i16 4, i16 4>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx16_i16x4_rr_2(<4 x i16> %a) {
; CHECK-LABEL: subx16_i16x4_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x3000100020001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx16hq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <4 x i16> %a, <i16 4, i16 4, i16 4, i16 4>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 3>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx16_u16x4_ri_(<4 x i16> %a) {
; CHECK-LABEL: subx16_u16x4_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 4, i16 4, i16 4, i16 4>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 0, i16 0>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx16_u16x4_ri_at(<4 x i16> %a) {
; CHECK-LABEL: subx16_u16x4_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16hq $r0 = $r0, 0x20001.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i16> %a, <i16 4, i16 4, i16 4, i16 4>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 2>, %mul
  ret <4 x i16> %sub
}

define <4 x i16> @subx16_u16x4_rr_2(<4 x i16> %a) {
; CHECK-LABEL: subx16_u16x4_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x3000100020001
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx16hq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <4 x i16> %a, <i16 4, i16 4, i16 4, i16 4>
  %sub = sub <4 x i16> <i16 1, i16 2, i16 1, i16 3>, %mul
  ret <4 x i16> %sub
}

define <2 x i32> @subx16_i32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: subx16_i32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16wp $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 4, i32 4>
  %sub = sub <2 x i32> <i32 1, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx16_i32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: subx16_i32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16wp $r0 = $r0, 0x3.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 4, i32 4>
  %sub = sub <2 x i32> <i32 3, i32 3>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx16_i32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: subx16_i32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x200000003
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx16wp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <2 x i32> %a, <i32 4, i32 4>
  %sub = sub <2 x i32> <i32 3, i32 2>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx16_u32x2_ri_(<2 x i32> %a) {
; CHECK-LABEL: subx16_u32x2_ri_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16wp $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 4, i32 4>
  %sub = sub <2 x i32> <i32 1, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx16_u32x2_ri_2(<2 x i32> %a) {
; CHECK-LABEL: subx16_u32x2_ri_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16wp $r0 = $r0, 0xbeef
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 4, i32 4>
  %sub = sub <2 x i32> <i32 48879, i32 0>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx16_u32x2_ri_at(<2 x i32> %a) {
; CHECK-LABEL: subx16_u32x2_ri_at:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16wp $r0 = $r0, 0x3.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 4, i32 4>
  %sub = sub <2 x i32> <i32 3, i32 3>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx16_u32x2_ri_at_2(<2 x i32> %a) {
; CHECK-LABEL: subx16_u32x2_ri_at_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16wp $r0 = $r0, 0xbb8.@
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i32> %a, <i32 4, i32 4>
  %sub = sub <2 x i32> <i32 3000, i32 3000>, %mul
  ret <2 x i32> %sub
}

define <2 x i32> @subx16_u32x2_rr_2(<2 x i32> %a) {
; CHECK-LABEL: subx16_u32x2_rr_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x200000003
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfx16wp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <2 x i32> %a, <i32 4, i32 4>
  %sub = sub <2 x i32> <i32 3, i32 2>, %mul
  ret <2 x i32> %sub
}

define <2 x i8> @sub_i8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: sub_i8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: sub_i8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfbo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <2 x i8> %a, %b
  ret <2 x i8> %sub
}

define <2 x i8> @sub_i8x2_ri(<2 x i8> %a) {
; V1-LABEL: sub_i8x2_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfhq $r0 = $r0, 255
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: sub_i8x2_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfbo $r0 = $r0, 255
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <2 x i8> <i8 -1, i8 0>, %a
  ret <2 x i8> %sub
}

define <4 x i8> @sub_i8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: sub_i8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: sub_i8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfbo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <4 x i8> %a, %b
  ret <4 x i8> %sub
}

define <4 x i8> @sub_i8x4_ri_(<4 x i8> %a) {
; V1-LABEL: sub_i8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfhq $r0 = $r0, 0xff0005
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: sub_i8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfbo $r0 = $r0, 0xff05
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <4 x i8> <i8 5, i8 -1, i8 0, i8 0>, %a
  ret <4 x i8> %sub
}

define <4 x i8> @sub_i8x4_ri_rr2(<4 x i8> %a) {
; V1-LABEL: sub_i8x4_ri_rr2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    make $r1 = 0x1000500ff0005
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: sub_i8x4_ri_rr2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    addbo $r0 = $r0, 0xfffb01fb
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <4 x i8> %a, <i8 5, i8 -1, i8 5, i8 1>
  ret <4 x i8> %sub
}


define <8 x i8> @sub_i8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: sub_i8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    iord $r2 = $r0, 0x80808080.@
; V1-NEXT:    andd $r3 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r3, $r2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: sub_i8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfbo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <8 x i8> %a, %b
  ret <8 x i8> %sub
}

define <8 x i8> @sub_i8x8_ri_(<8 x i8> %a) {
; V1-LABEL: sub_i8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    make $r1 = 0xff05ff05
; V1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    iord $r2 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r3, $r2
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 3)
;
; V2-LABEL: sub_i8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xff05ff05
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfbo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %sub = sub <8 x i8> <i8 5, i8 -1, i8 5, i8 -1, i8 0, i8 0, i8 0, i8 0>, %a
  ret <8 x i8> %sub
}

define <8 x i8> @sub_i8x4_ri_at(<8 x i8> %a) {
; V1-LABEL: sub_i8x4_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    make $r1 = 0xff05ff05ff05ff05
; V1-NEXT:    andd $r3 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    iord $r2 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r3, $r2
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 3)
;
; V2-LABEL: sub_i8x4_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfbo $r0 = $r0, 0xff05ff05.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub <8 x i8> <i8 5, i8 -1, i8 5, i8 -1, i8 5, i8 -1, i8 5, i8 -1>, %a
  ret <8 x i8> %sub
}

define <8 x i8> @sub_i8x8_ri_rr2(<8 x i8> %a) {
; V1-LABEL: sub_i8x8_ri_rr2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    make $r1 = 0x5ff050105ff05
; V1-NEXT:    iord $r2 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r3 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r3, $r2
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 3)
;
; V2-LABEL: sub_i8x8_ri_rr2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x5ff050105ff05
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfbo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %sub = sub <8 x i8> %a, <i8 5, i8 -1, i8 5, i8 1, i8 5, i8 -1, i8 5, i8 0>
  ret <8 x i8> %sub
}

define <2 x i8> @subx2_i8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: subx2_i8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    zxbd $r1 = $r1
; V1-NEXT:    extfz $r2 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r1 = $r1, 1
; V1-NEXT:    sllw $r2 = $r2, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r1 = $r2, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx2_i8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %b, <i8 1, i8 1>
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @subx2_u8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: subx2_u8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    zxbd $r1 = $r1
; V1-NEXT:    extfz $r2 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r1 = $r1, 1
; V1-NEXT:    sllw $r2 = $r2, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r1 = $r2, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx2_u8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %b, <i8 1, i8 1>
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <4 x i8> @subx2_i8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: subx2_i8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx2hq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx2_i8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %b, <i8 1, i8 1, i8 1, i8 1>
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx2_u8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: subx2_u8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx2hq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx2_u8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %b, <i8 1, i8 1, i8 1, i8 1>
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <8 x i8> @subx2_i8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: subx2_i8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r1, 0xff00ff.@
; V1-NEXT:    iord $r3 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r1 = $r1, 1
; V1-NEXT:    slld $r2 = $r2, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r2
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx2_i8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %b, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx2_u8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: subx2_u8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r1, 0xff00ff.@
; V1-NEXT:    iord $r3 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r1 = $r1, 1
; V1-NEXT:    slld $r2 = $r2, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r2
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx2_u8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %b, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <2 x i8> @subx4_i8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: subx4_i8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    zxbd $r1 = $r1
; V1-NEXT:    extfz $r2 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r1 = $r1, 2
; V1-NEXT:    sllw $r2 = $r2, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r1 = $r2, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx4_i8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %b, <i8 2, i8 2>
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @subx4_u8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: subx4_u8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    zxbd $r1 = $r1
; V1-NEXT:    extfz $r2 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r1 = $r1, 2
; V1-NEXT:    sllw $r2 = $r2, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r1 = $r2, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx4_u8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %b, <i8 2, i8 2>
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <4 x i8> @subx4_i8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: subx4_i8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx4hq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx4_i8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %b, <i8 2, i8 2, i8 2, i8 2>
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx4_u8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: subx4_u8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx4hq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx4_u8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %b, <i8 2, i8 2, i8 2, i8 2>
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <8 x i8> @subx4_i8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: subx4_i8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r1, 0xff00ff.@
; V1-NEXT:    iord $r3 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r1 = $r1, 2
; V1-NEXT:    slld $r2 = $r2, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r2
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx4_i8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %b, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx4_u8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: subx4_u8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r1, 0xff00ff.@
; V1-NEXT:    iord $r3 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r1 = $r1, 2
; V1-NEXT:    slld $r2 = $r2, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r2
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx4_u8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %b, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <2 x i8> @subx8_i8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: subx8_i8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    zxbd $r1 = $r1
; V1-NEXT:    extfz $r2 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r1 = $r1, 3
; V1-NEXT:    sllw $r2 = $r2, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r1 = $r2, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx8_i8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %b, <i8 3, i8 3>
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @subx8_u8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: subx8_u8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    zxbd $r1 = $r1
; V1-NEXT:    extfz $r2 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r1 = $r1, 3
; V1-NEXT:    sllw $r2 = $r2, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r1 = $r2, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx8_u8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %b, <i8 3, i8 3>
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <4 x i8> @subx8_i8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: subx8_i8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx8hq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx8_i8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %b, <i8 3, i8 3, i8 3, i8 3>
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx8_u8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: subx8_u8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx8hq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx8_u8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %b, <i8 3, i8 3, i8 3, i8 3>
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <8 x i8> @subx8_i8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: subx8_i8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r1, 0xff00ff.@
; V1-NEXT:    iord $r3 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r1 = $r1, 3
; V1-NEXT:    slld $r2 = $r2, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r2
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx8_i8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %b, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx8_u8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: subx8_u8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r1, 0xff00ff.@
; V1-NEXT:    iord $r3 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r1 = $r1, 3
; V1-NEXT:    slld $r2 = $r2, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r2
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx8_u8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %b, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <2 x i8> @subx16_i8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: subx16_i8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    zxbd $r1 = $r1
; V1-NEXT:    extfz $r2 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r1 = $r1, 4
; V1-NEXT:    sllw $r2 = $r2, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r1 = $r2, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx16_i8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %b, <i8 4, i8 4>
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @subx16_u8x2_rr(<2 x i8> %a, <2 x i8> %b) {
; V1-LABEL: subx16_u8x2_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    zxbd $r1 = $r1
; V1-NEXT:    extfz $r2 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r1 = $r1, 4
; V1-NEXT:    sllw $r2 = $r2, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r1 = $r2, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx16_u8x2_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %b, <i8 4, i8 4>
  %sub = sub <2 x i8> %a, %mul
  ret <2 x i8> %sub
}

define <4 x i8> @subx16_i8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: subx16_i8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx16hq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx16_i8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %b, <i8 4, i8 4, i8 4, i8 4>
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx16_u8x4_rr(<4 x i8> %a, <4 x i8> %b) {
; V1-LABEL: subx16_u8x4_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    sxlbhq $r1 = $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx16hq $r0 = $r1, $r0
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx16_u8x4_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %b, <i8 4, i8 4, i8 4, i8 4>
  %sub = sub <4 x i8> %a, %mul
  ret <4 x i8> %sub
}


define <8 x i8> @subx16_i8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: subx16_i8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r1, 0xff00ff.@
; V1-NEXT:    iord $r3 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r1 = $r1, 4
; V1-NEXT:    slld $r2 = $r2, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r2
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx16_i8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %b, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx16_u8x8_rr(<8 x i8> %a, <8 x i8> %b) {
; V1-LABEL: subx16_u8x8_rr:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r1, 0xff00ff.@
; V1-NEXT:    iord $r3 = $r0, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r1 = $r1, 4
; V1-NEXT:    slld $r2 = $r2, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r1 = $r1, 0xff00ff00.@
; V1-NEXT:    andd $r2 = $r2, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r2
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r0, $r1
; V1-NEXT:    andd $r2 = $r1, 0x7f7f7f7f.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx16_u8x8_rr:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %b, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %sub = sub <8 x i8> %a, %mul
  ret <8 x i8> %sub
}

define <2 x i8> @subx2_i8x2_ri_(<2 x i8> %a) {
; V1-LABEL: subx2_i8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 1
; V1-NEXT:    sllw $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx2_i8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 1, i8 1>
  %sub = sub <2 x i8> <i8 1, i8 2>, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @subx2_u8x2_ri_(<2 x i8> %a) {
; V1-LABEL: subx2_u8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 1
; V1-NEXT:    sllw $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx2_u8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 1, i8 1>
  %sub = sub <2 x i8> <i8 1, i8 2>, %mul
  ret <2 x i8> %sub
}

define <4 x i8> @subx2_i8x4_ri_(<4 x i8> %a) {
; V1-LABEL: subx2_i8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx2hq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx2_i8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 1, i8 1, i8 1, i8 1>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 0, i8 0>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx2_i8x4_ri_2(<4 x i8> %a) {
; V1-LABEL: subx2_i8x4_ri_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx2hq $r0 = $r0, 0x20001.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx2_i8x4_ri_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 1, i8 1, i8 1, i8 1>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx2_i8x4_ri_3(<4 x i8> %a) {
; V1-LABEL: subx2_i8x4_ri_3:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    make $r1 = 0x3000100020001
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx2hq $r0 = $r0, $r1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx2_i8x4_ri_3:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 0x3010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 1, i8 1, i8 1, i8 1>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 3>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx2_u8x4_ri_(<4 x i8> %a) {
; V1-LABEL: subx2_u8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx2hq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx2_u8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 1, i8 1, i8 1, i8 1>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 0, i8 0>, %mul
  ret <4 x i8> %sub
}


define <8 x i8> @subx2_i8x8_ri_(<8 x i8> %a) {
; V1-LABEL: subx2_i8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 1
; V1-NEXT:    slld $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x2010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx2_i8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx2_i8x8_ri_at(<8 x i8> %a) {
; V1-LABEL: subx2_i8x8_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 1
; V1-NEXT:    slld $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x403020104030201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx2_i8x8_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 0x4030201.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 3, i8 4, i8 1, i8 2, i8 3, i8 4>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx2_i8x8_rr_2(<8 x i8> %a) {
; V1-LABEL: subx2_i8x8_rr_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 1
; V1-NEXT:    slld $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x301030102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx2_i8x8_rr_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x301030102010201
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfx2bo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <8 x i8> %a, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 3,  i8 1, i8 3>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx2_u8x8_ri_(<8 x i8> %a) {
; V1-LABEL: subx2_u8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 1
; V1-NEXT:    slld $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x2010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx2_u8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx2_u8x8_ri_at(<8 x i8> %a) {
; V1-LABEL: subx2_u8x8_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 1
; V1-NEXT:    slld $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x201020102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx2_u8x8_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx2bo $r0 = $r0, 0x2010201.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx2_u8x8_rr_2(<8 x i8> %a) {
; V1-LABEL: subx2_u8x8_rr_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 1
; V1-NEXT:    slld $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x301030102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx2_u8x8_rr_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x301030102010201
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfx2bo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <8 x i8> %a, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 3, i8 1, i8 3>, %mul
  ret <8 x i8> %sub
}

define <2 x i8> @subx4_i8x2_ri_(<2 x i8> %a) {
; V1-LABEL: subx4_i8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 2
; V1-NEXT:    sllw $r1 = $r1, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx4_i8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 2, i8 2>
  %sub = sub <2 x i8> <i8 1, i8 2>, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @subx4_u8x2_ri_(<2 x i8> %a) {
; V1-LABEL: subx4_u8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 2
; V1-NEXT:    sllw $r1 = $r1, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx4_u8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 2, i8 2>
  %sub = sub <2 x i8> <i8 1, i8 2>, %mul
  ret <2 x i8> %sub
}

define <4 x i8> @subx4_i8x4_ri_(<4 x i8> %a) {
; V1-LABEL: subx4_i8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx4hq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx4_i8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 2, i8 2, i8 2, i8 2>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 0, i8 0>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx4_u8x4_ri_(<4 x i8> %a) {
; V1-LABEL: subx4_u8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx4hq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx4_u8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 2, i8 2, i8 2, i8 2>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 0, i8 0>, %mul
  ret <4 x i8> %sub
}


define <8 x i8> @subx4_i8x8_ri_(<8 x i8> %a) {
; V1-LABEL: subx4_i8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 2
; V1-NEXT:    slld $r1 = $r1, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x2010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx4_i8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx4_i8x8_ri_at(<8 x i8> %a) {
; V1-LABEL: subx4_i8x8_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 2
; V1-NEXT:    slld $r1 = $r1, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x201020102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx4_i8x8_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r0, 0x2010201.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx4_i8x8_rr_2(<8 x i8> %a) {
; V1-LABEL: subx4_i8x8_rr_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 2
; V1-NEXT:    slld $r1 = $r1, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x401020103010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx4_i8x8_rr_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x401020103010201
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfx4bo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <8 x i8> %a, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 3, i8 1, i8 2, i8 1, i8 4>, %mul
  ret <8 x i8> %sub
}


define <8 x i8> @subx4_u8x8_ri_(<8 x i8> %a) {
; V1-LABEL: subx4_u8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 2
; V1-NEXT:    slld $r1 = $r1, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x2010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx4_u8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx4_u8x8_ri_at(<8 x i8> %a) {
; V1-LABEL: subx4_u8x8_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 2
; V1-NEXT:    slld $r1 = $r1, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x201020102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx4_u8x8_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx4bo $r0 = $r0, 0x2010201.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx4_u8x8_rr_2(<8 x i8> %a) {
; V1-LABEL: subx4_u8x8_rr_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 2
; V1-NEXT:    slld $r1 = $r1, 2
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x401020103010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx4_u8x8_rr_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x401020103010201
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfx4bo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <8 x i8> %a, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 3, i8 1, i8 2, i8 1, i8 4>, %mul
  ret <8 x i8> %sub
}

define <2 x i8> @subx8_i8x2_ri_(<2 x i8> %a) {
; V1-LABEL: subx8_i8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 3
; V1-NEXT:    sllw $r1 = $r1, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx8_i8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 3, i8 3>
  %sub = sub <2 x i8> <i8 1, i8 2>, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @subx8_u8x2_ri_(<2 x i8> %a) {
; V1-LABEL: subx8_u8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 3
; V1-NEXT:    sllw $r1 = $r1, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx8_u8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 3, i8 3>
  %sub = sub <2 x i8> <i8 1, i8 2>, %mul
  ret <2 x i8> %sub
}

define <4 x i8> @subx8_i8x4_ri_(<4 x i8> %a) {
; V1-LABEL: subx8_i8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx8hq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx8_i8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 3, i8 3, i8 3, i8 3>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 0, i8 0>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx8_i8x4_ri_2(<4 x i8> %a) {
; V1-LABEL: subx8_i8x4_ri_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx8hq $r0 = $r0, 0x20001.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx8_i8x4_ri_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 3, i8 3, i8 3, i8 3>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx8_i8x4_ri_3(<4 x i8> %a) {
; V1-LABEL: subx8_i8x4_ri_3:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    make $r1 = 0x3000100020001
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx8hq $r0 = $r0, $r1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx8_i8x4_ri_3:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 0x3010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 3, i8 3, i8 3, i8 3>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 3>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx8_u8x4_ri_(<4 x i8> %a) {
; V1-LABEL: subx8_u8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx8hq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx8_u8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 3, i8 3, i8 3, i8 3>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 0, i8 0>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx8_u8x4_ri_2(<4 x i8> %a) {
; V1-LABEL: subx8_u8x4_ri_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    make $r1 = 0x3000100020001
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx8hq $r0 = $r0, $r1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx8_u8x4_ri_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 0x3010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 3, i8 3, i8 3, i8 3>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 3>, %mul
  ret <4 x i8> %sub
}

define <8 x i8> @subx8_i8x8_ri_(<8 x i8> %a) {
; V1-LABEL: subx8_i8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 3
; V1-NEXT:    slld $r1 = $r1, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x2010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx8_i8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx8_i8x8_ri_at(<8 x i8> %a) {
; V1-LABEL: subx8_i8x8_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 3
; V1-NEXT:    slld $r1 = $r1, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x201020102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx8_i8x8_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 0x2010201.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx8_i8x8_rr_2(<8 x i8> %a) {
; V1-LABEL: subx8_i8x8_rr_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 3
; V1-NEXT:    slld $r1 = $r1, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x401020103010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx8_i8x8_rr_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x401020103010201
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfx8bo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <8 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 3, i8 1, i8 2, i8 1, i8 4>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx8_u8x8_ri_(<8 x i8> %a) {
; V1-LABEL: subx8_u8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 3
; V1-NEXT:    slld $r1 = $r1, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x2010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx8_u8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx8_u8x8_ri_at(<8 x i8> %a) {
; V1-LABEL: subx8_u8x8_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 3
; V1-NEXT:    slld $r1 = $r1, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x201020102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx8_u8x8_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx8bo $r0 = $r0, 0x2010201.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx8_u8x8_rr_2(<8 x i8> %a) {
; V1-LABEL: subx8_u8x8_rr_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 3
; V1-NEXT:    slld $r1 = $r1, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x401020103010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx8_u8x8_rr_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x401020103010201
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfx8bo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <8 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 3, i8 1, i8 2, i8 1, i8 4>, %mul
  ret <8 x i8> %sub
}

define <2 x i8> @subx16_i8x2_ri_(<2 x i8> %a) {
; V1-LABEL: subx16_i8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 4
; V1-NEXT:    sllw $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx16_i8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 4, i8 4>
  %sub = sub <2 x i8> <i8 1, i8 2>, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @subx16_u8x2_ri_(<2 x i8> %a) {
; V1-LABEL: subx16_u8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 4
; V1-NEXT:    sllw $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: subx16_u8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 4, i8 4>
  %sub = sub <2 x i8> <i8 1, i8 2>, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @not_subx16_u8x2_ri_(<2 x i8> %a) {
; V1-LABEL: not_subx16_u8x2_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 4
; V1-NEXT:    sllw $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0x10010
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: not_subx16_u8x2_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 272
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 4, i8 4>
  %sub = sub <2 x i8> <i8 16, i8 1>, %mul
  ret <2 x i8> %sub
}

define <2 x i8> @not_subx16_u8x2_ri_2(<2 x i8> %a) {
; V1-LABEL: not_subx16_u8x2_ri_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    zxbd $r0 = $r0
; V1-NEXT:    extfz $r1 = $r0, 15, 8
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllw $r0 = $r0, 4
; V1-NEXT:    sllw $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    insf $r0 = $r1, 15, 8
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    sbfhq $r0 = $r0, 0xff0000
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: not_subx16_u8x2_ri_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, -256
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <2 x i8> %a, <i8 4, i8 4>
  %sub = sub <2 x i8> <i8 0, i8 -1>, %mul
  ret <2 x i8> %sub
}

define <4 x i8> @subx16_i8x4_ri_(<4 x i8> %a) {
; V1-LABEL: subx16_i8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx16hq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx16_i8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 4, i8 4, i8 4, i8 4>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 0, i8 0>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx16_i8x4_ri_2(<4 x i8> %a) {
; V1-LABEL: subx16_i8x4_ri_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx16hq $r0 = $r0, 0x20001.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx16_i8x4_ri_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 4, i8 4, i8 4, i8 4>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx16_i8x4_ri_3(<4 x i8> %a) {
; V1-LABEL: subx16_i8x4_ri_3:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    make $r1 = 0x3000100020001
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx16hq $r0 = $r0, $r1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx16_i8x4_ri_3:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 0x3010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 4, i8 4, i8 4, i8 4>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 3>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx16_u8x4_ri_(<4 x i8> %a) {
; V1-LABEL: subx16_u8x4_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx16hq $r0 = $r0, 0x20001
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx16_u8x4_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 513
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 4, i8 4, i8 4, i8 4>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 0, i8 0>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx16_u8x4_ri_2(<4 x i8> %a) {
; V1-LABEL: subx16_u8x4_ri_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx16hq $r0 = $r0, 0x20001.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx16_u8x4_ri_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 4, i8 4, i8 4, i8 4>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 2>, %mul
  ret <4 x i8> %sub
}

define <4 x i8> @subx16_u8x4_ri_3(<4 x i8> %a) {
; V1-LABEL: subx16_u8x4_ri_3:
; V1:       # %bb.0: # %entry
; V1-NEXT:    sxlbhq $r0 = $r0
; V1-NEXT:    make $r1 = 0x3000100020001
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sbfx16hq $r0 = $r0, $r1
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 2)
;
; V2-LABEL: subx16_u8x4_ri_3:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 0x3010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <4 x i8> %a, <i8 4, i8 4, i8 4, i8 4>
  %sub = sub <4 x i8> <i8 1, i8 2, i8 1, i8 3>, %mul
  ret <4 x i8> %sub
}


define <8 x i8> @subx16_i8x8_ri_(<8 x i8> %a) {
; V1-LABEL: subx16_i8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 4
; V1-NEXT:    slld $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x2010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx16_i8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0,  i8 0, i8 0>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx16_i8x8_ri_at(<8 x i8> %a) {
; V1-LABEL: subx16_i8x8_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 4
; V1-NEXT:    slld $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x201020102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx16_i8x8_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 0x2010201.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx16_i8x8_rr_2(<8 x i8> %a) {
; V1-LABEL: subx16_i8x8_rr_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 4
; V1-NEXT:    slld $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x401020103010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx16_i8x8_rr_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x401020103010201
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfx16bo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <8 x i8> %a, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 3, i8 1, i8 2, i8 1, i8 4>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx16_u8x8_ri_(<8 x i8> %a) {
; V1-LABEL: subx16_u8x8_ri_:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 4
; V1-NEXT:    slld $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x2010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx16_u8x8_ri_:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 0x2010201
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 0, i8 0, i8 0, i8 0>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx16_u8x8_ri_at(<8 x i8> %a) {
; V1-LABEL: subx16_u8x8_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 4
; V1-NEXT:    slld $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x201020102010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx16_u8x8_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    sbfx16bo $r0 = $r0, 0x2010201.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
entry:
  %mul = shl <8 x i8> %a, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 2, i8 1, i8 2, i8 1, i8 2>, %mul
  ret <8 x i8> %sub
}

define <8 x i8> @subx16_u8x8_rr_2(<8 x i8> %a) {
; V1-LABEL: subx16_u8x8_rr_2:
; V1:       # %bb.0: # %entry
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r0, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    slld $r0 = $r0, 4
; V1-NEXT:    slld $r1 = $r1, 4
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    andd $r0 = $r0, 0xff00ff00.@
; V1-NEXT:    andd $r1 = $r1, 0xff00ff.@
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r0 = $r0, $r1
; V1-NEXT:    make $r1 = 0x401020103010201
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    nxord $r0 = $r1, $r0
; V1-NEXT:    andd $r2 = $r0, 0x7f7f7f7f.@
; V1-NEXT:    iord $r3 = $r1, 0x80808080.@
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    andd $r0 = $r0, 0x80808080.@
; V1-NEXT:    sbfd $r1 = $r2, $r3
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    xord $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 6)
;
; V2-LABEL: subx16_u8x8_rr_2:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x401020103010201
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbfx16bo $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
entry:
  %mul = shl <8 x i8> %a, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %sub = sub <8 x i8> <i8 1, i8 2, i8 1, i8 3, i8 1, i8 2, i8 1, i8 4>, %mul
  ret <8 x i8> %sub
}
