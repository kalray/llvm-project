; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <4 x half> @ff1(<4 x half> %v, half %val){
; CHECK-LABEL: ff1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %vecins = insertelement <4 x half> %v, half %val, i32 0
  ret <4 x half> %vecins
}

define <4 x half> @ff2(<4 x half> %v, half %val){
; CHECK-LABEL: ff2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %vecins = insertelement <4 x half> %v, half %val, i32 1
  ret <4 x half> %vecins
}

define <4 x half> @ff3(<4 x half> %v, half %val){
; CHECK-LABEL: ff3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 47, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %vecins = insertelement <4 x half> %v, half %val, i32 2
  ret <4 x half> %vecins
}

define <4 x half> @ff4(<4 x half> %v, half %val){
; CHECK-LABEL: ff4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 63, 48
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %vecins = insertelement <4 x half> %v, half %val, i32 3
  ret <4 x half> %vecins
}

define <4 x half> @f1(<4 x half> %v){
; CHECK-LABEL: f1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrf $r0 = $r0, 15, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iord $r0 = $r0, 0x4940
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %vecins = insertelement <4 x half> %v, half 0xH4940, i32 0
  ret <4 x half> %vecins
}

define <4 x half> @f2(<4 x half> %v){
; CHECK-LABEL: f2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrf $r0 = $r0, 31, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iord $r0 = $r0, 0x494d0000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %vecins = insertelement <4 x half> %v, half 0xH494D, i32 1
  ret <4 x half> %vecins
}

define <4 x half> @f3(<4 x half> %v){
; CHECK-LABEL: f3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrf $r0 = $r0, 47, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iord $r0 = $r0, 0x495a00000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %vecins = insertelement <4 x half> %v, half 0xH495A, i32 2
  ret <4 x half> %vecins
}

define <4 x half> @f4(<4 x half> %v){
; CHECK-LABEL: f4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrf $r0 = $r0, 63, 48
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iord $r0 = $r0, 0x4966000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %vecins = insertelement <4 x half> %v, half 0xH4966, i32 3
  ret <4 x half> %vecins
}

define <4 x half> @f5(<4 x half> %v){
; CHECK-LABEL: f5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrf $r0 = $r0, 15, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iord $r0 = $r0, 0xc940
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %vecins = insertelement <4 x half> %v, half 0xHC940, i32 0
  ret <4 x half> %vecins
}

define <4 x half> @f6(<4 x half> %v){
; CHECK-LABEL: f6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrf $r0 = $r0, 31, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iord $r0 = $r0, 0xc94d0000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %vecins = insertelement <4 x half> %v, half 0xHC94D, i32 1
  ret <4 x half> %vecins
}

define <4 x half> @f7(<4 x half> %v){
; CHECK-LABEL: f7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrf $r0 = $r0, 47, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iord $r0 = $r0, 0xc95a00000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %vecins = insertelement <4 x half> %v, half 0xHC95A, i32 2
  ret <4 x half> %vecins
}

define <4 x half> @f8(<4 x half> %v){
; CHECK-LABEL: f8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clrf $r0 = $r0, 63, 48
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    iord $r0 = $r0, 0xc966000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %vecins = insertelement <4 x half> %v, half 0xHC966, i32 3
  ret <4 x half> %vecins
}

