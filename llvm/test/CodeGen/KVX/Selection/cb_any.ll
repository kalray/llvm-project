; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefix=CV2 --implicit-check-not=compd

target triple = "kvx-kalray-cos"

define <4 x i16> @cbIfAnyEqz(<4 x i16> %0, <4 x i16> %1) {
; CV2-LABEL: cbIfAnyEqz:
; CV2:       # %bb.0:
; CV2-NEXT:    abshq $r0 = $r1
; CV2-NEXT:    addd $r12 = $r12, -32
; CV2-NEXT:    get $r16 = $ra
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sd 24[$r12] = $r16
; CV2-NEXT:    make $r0 = 0
; CV2-NEXT:    compnhq.eq $r1 = $r0, 0
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    cb.dnez $r1 ? .LBB0_2
; CV2-NEXT:    ;;
; CV2-NEXT:  # %bb.1:
; CV2-NEXT:    call foo
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB0_2:
; CV2-NEXT:    ld $r16 = 24[$r12]
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    set $ra = $r16
; CV2-NEXT:    addd $r12 = $r12, 32
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = tail call <4 x i16> @llvm.abs.v4i16(<4 x i16> %1, i1 false)
  %4 = tail call i64 @llvm.kvx.any.v4i16(<4 x i16> %3, i32 1)
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %8

6:
  %7 = tail call <4 x i16> @foo()
  br label %8

8:
  %9 = phi <4 x i16> [ %7, %6 ], [ zeroinitializer, %2 ]
  ret <4 x i16> %9
}


define <8 x i8> @cbIfNotAnyEqz(<8 x i8> %0, <8 x i8> %1) {
; CV2-LABEL: cbIfNotAnyEqz:
; CV2:       # %bb.0:
; CV2-NEXT:    absbo $r0 = $r1
; CV2-NEXT:    addd $r12 = $r12, -32
; CV2-NEXT:    get $r16 = $ra
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sd 24[$r12] = $r16
; CV2-NEXT:    compnbo.eq $r0 = $r0, 0
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    cb.deqz $r0 ? .LBB1_2
; CV2-NEXT:    ;;
; CV2-NEXT:  # %bb.1:
; CV2-NEXT:    call foo
; CV2-NEXT:    ;;
; CV2-NEXT:    goto .LBB1_3
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB1_2:
; CV2-NEXT:    make $r0 = 0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:  .LBB1_3:
; CV2-NEXT:    ld $r16 = 24[$r12]
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    set $ra = $r16
; CV2-NEXT:    addd $r12 = $r12, 32
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = tail call <8 x i8> @llvm.abs.v8i8(<8 x i8> %1, i1 false)
  %4 = tail call i64 @llvm.kvx.any.v8i8(<8 x i8> %3, i32 1)
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %6, label %8

6:
  %7 = tail call <8 x i8> @foo()
  br label %8

8:
  %9 = phi <8 x i8> [ %7, %6 ], [ zeroinitializer, %2 ]
  ret <8 x i8> %9
}

define <4 x i16> @cbIfAnyNez(<4 x i16> %0, <4 x i16> %1) {
; CV2-LABEL: cbIfAnyNez:
; CV2:       # %bb.0:
; CV2-NEXT:    make $r0 = 0
; CV2-NEXT:    abshq $r1 = $r1
; CV2-NEXT:    addd $r12 = $r12, -32
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    get $r16 = $ra
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    sd 24[$r12] = $r16
; CV2-NEXT:    cb.dnez $r1 ? .LBB2_2
; CV2-NEXT:    ;; # (end cycle 2)
; CV2-NEXT:  # %bb.1:
; CV2-NEXT:    call foo
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB2_2:
; CV2-NEXT:    ld $r16 = 24[$r12]
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    set $ra = $r16
; CV2-NEXT:    addd $r12 = $r12, 32
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = tail call <4 x i16> @llvm.abs.v4i16(<4 x i16> %1, i1 false)
  %4 = tail call i64 @llvm.kvx.any.v4i16(<4 x i16> %3, i32 0)
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %8

6:
  %7 = tail call <4 x i16> @foo()
  br label %8

8:
  %9 = phi <4 x i16> [ %7, %6 ], [ zeroinitializer, %2 ]
  ret <4 x i16> %9
}


define <8 x i8> @cbIfNotAnyNez(<8 x i8> %0, <8 x i8> %1) {
; CV2-LABEL: cbIfNotAnyNez:
; CV2:       # %bb.0:
; CV2-NEXT:    absbo $r0 = $r1
; CV2-NEXT:    addd $r12 = $r12, -32
; CV2-NEXT:    get $r16 = $ra
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    sd 24[$r12] = $r16
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    cb.deqz $r0 ? .LBB3_2
; CV2-NEXT:    ;;
; CV2-NEXT:  # %bb.1:
; CV2-NEXT:    call foo
; CV2-NEXT:    ;;
; CV2-NEXT:    goto .LBB3_3
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB3_2:
; CV2-NEXT:    make $r0 = 0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:  .LBB3_3:
; CV2-NEXT:    ld $r16 = 24[$r12]
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    set $ra = $r16
; CV2-NEXT:    addd $r12 = $r12, 32
; CV2-NEXT:    ;; # (end cycle 5)
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = tail call <8 x i8> @llvm.abs.v8i8(<8 x i8> %1, i1 false)
  %4 = tail call i64 @llvm.kvx.any.v8i8(<8 x i8> %3, i32 0)
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %6, label %8

6:
  %7 = tail call <8 x i8> @foo()
  br label %8

8:
  %9 = phi <8 x i8> [ %7, %6 ], [ zeroinitializer, %2 ]
  ret <8 x i8> %9
}

declare <4 x i16> @llvm.abs.v4i16(<4 x i16>, i1 immarg)
declare <8 x i8> @llvm.abs.v8i8(<8 x i8>, i1 immarg)

declare i64 @llvm.kvx.any.v4i16(<4 x i16>, i32)
declare i64 @llvm.kvx.any.v8i8(<8 x i8>, i32)

declare <4 x i16> @foo(...)
