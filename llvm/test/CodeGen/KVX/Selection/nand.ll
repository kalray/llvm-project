; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i64 @nandd_rr(i64 %0, i64 %1) {
; CHECK-LABEL: nandd_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = and i64 %1, %0
  %4 = xor i64 %3, -1
  ret i64 %4
}

define i64 @nandd_ri10(i64 %0) {
; CHECK-LABEL: nandd_ri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 17
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = and i64 %0, 17
  %3 = xor i64 %2, -1
  ret i64 %3
}

define i64 @nandd_ri37(i64 %0) {
; CHECK-LABEL: nandd_ri37:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0xfffffff317c6324c
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = and i64 %0, -55435709876
  %3 = xor i64 %2, -1
  ret i64 %3
}

define i64 @nandd_ri64(i64 %0) {
; CHECK-LABEL: nandd_ri64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandd $r0 = $r0, 0x3f63879cfe5905b4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = and i64 %0, 4567643555435709876
  %3 = xor i64 %2, -1
  ret i64 %3
}

define i32 @nandw_rr(i32 %0, i32 %1) {
; CHECK-LABEL: nandw_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = and i32 %1, %0
  %4 = xor i32 %3, -1
  ret i32 %4
}

define i32 @nandw_ri10(i32 %0) {
; CHECK-LABEL: nandw_ri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandw $r0 = $r0, 17
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = and i32 %0, 17
  %3 = xor i32 %2, -1
  ret i32 %3
}

define i32 @nandw_ri37(i32 %0) {
; CHECK-LABEL: nandw_ri37:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nandw $r0 = $r0, 0xb593d1d5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = and i32 %0, -1248603691
  %3 = xor i32 %2, -1
  ret i32 %3
}
