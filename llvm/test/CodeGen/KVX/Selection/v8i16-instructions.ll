; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck --check-prefixes=ALL,V1 %s
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck --check-prefixes=ALL,V2 %s
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <8 x i16> @test_ret_const() {
; ALL-LABEL: test_ret_const:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r0 = 0x2000100020001
; ALL-NEXT:    make $r1 = 0x2000100020001
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  ret <8 x i16> <i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2>
}

define i16 @test_extract_0(<8 x i16> %a) {
; ALL-LABEL: test_extract_0:
; ALL:       # %bb.0:
; ALL-NEXT:    zxhd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %e = extractelement <8 x i16> %a, i16 0
  ret i16 %e
}

define i16 @test_extract_1(<8 x i16> %a) {
; ALL-LABEL: test_extract_1:
; ALL:       # %bb.0:
; ALL-NEXT:    srlw $r0 = $r0, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %e = extractelement <8 x i16> %a, i16 1
  ret i16 %e
}

define i16 @test_extract_2(<8 x i16> %a) {
; ALL-LABEL: test_extract_2:
; ALL:       # %bb.0:
; ALL-NEXT:    extfz $r0 = $r0, 47, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %e = extractelement <8 x i16> %a, i16 2
  ret i16 %e
}

define i16 @test_extract_3(<8 x i16> %a) {
; ALL-LABEL: test_extract_3:
; ALL:       # %bb.0:
; ALL-NEXT:    srld $r0 = $r0, 48
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %e = extractelement <8 x i16> %a, i16 3
  ret i16 %e
}

define <8 x i16> @test_fma(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c) {
; ALL-LABEL: test_fma:
; ALL:       # %bb.0:
; ALL-NEXT:    maddhq $r0 = $r2, $r4
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    maddhq $r1 = $r3, $r5
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %m = mul <8 x i16> %b, %c
  %ad = add <8 x i16> %a, %m
  ret <8 x i16> %ad
}

define <8 x i16> @test_fma_imm(<8 x i16> %a, <8 x i16> %b) {
; V1-LABEL: test_fma_imm:
; V1:       # %bb.0:
; V1-NEXT:    maddhq $r0 = $r2, 0x3000100020007
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    maddhq $r1 = $r3, 0x3000100020007
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 1)
;
; V2-LABEL: test_fma_imm:
; V2:       # %bb.0:
; V2-NEXT:    make $r4 = 0x3000100020007
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    maddhq $r0 = $r2, $r4
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    maddhq $r1 = $r3, $r4
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 2)
  %m = mul <8 x i16> <i16 7, i16 2, i16 1, i16 3, i16 7, i16 2, i16 1, i16 3>, %b
  %ad = add <8 x i16> %a, %m
  ret <8 x i16> %ad
}


define <8 x i16> @test_fma_imm_2(<8 x i16> %a, <8 x i16> %b) {
; V1-LABEL: test_fma_imm_2:
; V1:       # %bb.0:
; V1-NEXT:    maddhq $r0 = $r2, 0x2000100020001
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    maddhq $r1 = $r3, 0x2000100020001
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 1)
;
; V2-LABEL: test_fma_imm_2:
; V2:       # %bb.0:
; V2-NEXT:    make $r4 = 0x2000100020001
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    maddhq $r0 = $r2, $r4
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    maddhq $r1 = $r3, $r4
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 2)
  %m = mul <8 x i16> <i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2>, %b
  %ad = add <8 x i16> %a, %m
  ret <8 x i16> %ad
}

define i16 @test_extract_i(<8 x i16> %a, i64 %idx) #0 {
; ALL-LABEL: test_extract_i:
; ALL:       # %bb.0:
; ALL-NEXT:    andw $r2 = $r2, 7
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sq 16[$r12] = $r0r1
; ALL-NEXT:    addd $r0 = $r12, 16
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    lhz.xs $r0 = $r2[$r0]
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %e = extractelement <8 x i16> %a, i64 %idx
  ret i16 %e
}

define <8 x i16> @test_add(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_add:
; ALL:       # %bb.0:
; ALL-NEXT:    addhq $r0 = $r0, $r2
; ALL-NEXT:    addhq $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = add <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @test_add_imm_0(<8 x i16> %a) {
; ALL-LABEL: test_add_imm_0:
; ALL:       # %bb.0:
; ALL-NEXT:    addhq $r0 = $r0, 0x20001.@
; ALL-NEXT:    addhq $r1 = $r1, 0x20001.@
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = add <8 x i16> <i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2>, %a
  ret <8 x i16> %r
}

define <8 x i16> @test_add_imm_1(<8 x i16> %a) {
; ALL-LABEL: test_add_imm_1:
; ALL:       # %bb.0:
; ALL-NEXT:    addhq $r0 = $r0, 0x20001.@
; ALL-NEXT:    addhq $r1 = $r1, 0x20001.@
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = add <8 x i16> %a, <i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2>
  ret <8 x i16> %r
}

define <8 x i16> @test_sub(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_sub:
; ALL:       # %bb.0:
; ALL-NEXT:    sbfhq $r0 = $r2, $r0
; ALL-NEXT:    sbfhq $r1 = $r3, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = sub <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @test_sub_imm(<8 x i16> %a) {
; ALL-LABEL: test_sub_imm:
; ALL:       # %bb.0:
; ALL-NEXT:    addhq $r0 = $r0, 0xfffeffff.@
; ALL-NEXT:    addhq $r1 = $r1, 0xfffeffff.@
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = sub <8 x i16> %a, <i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2>
  ret <8 x i16> %r
}

define <8 x i16> @test_sub_fromimm(<8 x i16> %a) {
; ALL-LABEL: test_sub_fromimm:
; ALL:       # %bb.0:
; ALL-NEXT:    sbfhq $r0 = $r0, 0x20001.@
; ALL-NEXT:    sbfhq $r1 = $r1, 0x20001.@
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = sub <8 x i16> <i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2>, %a
  ret <8 x i16> %r
}

define <8 x i16> @test_neg(<8 x i16> %a) {
; ALL-LABEL: test_neg:
; ALL:       # %bb.0:
; ALL-NEXT:    neghq $r0 = $r0
; ALL-NEXT:    neghq $r1 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = sub <8 x i16> zeroinitializer, %a
  ret <8 x i16> %r
}

define <8 x i16> @test_mul(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_mul:
; ALL:       # %bb.0:
; ALL-NEXT:    mulhq $r0 = $r0, $r2
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    mulhq $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %r = mul <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @test_mul_2(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c) {
; ALL-LABEL: test_mul_2:
; ALL:       # %bb.0:
; ALL-NEXT:    mulhq $r0 = $r0, $r2
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    mulhq $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    mulhq $r0 = $r0, $r4
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    mulhq $r1 = $r1, $r5
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
  %r = mul <8 x i16> %a, %b
  %r1 = mul <8 x i16> %r, %c
  ret <8 x i16> %r1
}

define <8 x i16> @test_div(<8 x i16> %a, <8 x i16> %b) #0 {
; ALL-LABEL: test_div:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __divv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sdiv <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @test_rem(<8 x i16> %a, <8 x i16> %b) #0 {
; ALL-LABEL: test_rem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __modv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = srem <8 x i16> %a, %b
  ret <8 x i16> %r
}

define void @test_ldst_v4i16(<8 x i16>* %a, <8 x i16>* %b) {
; ALL-LABEL: test_ldst_v4i16:
; ALL:       # %bb.0:
; ALL-NEXT:    lq $r2r3 = 0[$r0]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sq 0[$r1] = $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %t1 = load <8 x i16>, <8 x i16>* %a
  store <8 x i16> %t1, <8 x i16>* %b, align 16
  ret void
}

declare <8 x i16> @test_callee(<8 x i16> %a, <8 x i16> %b)

define <8 x i16> @test_call(<8 x i16> %a, <8 x i16> %b) #0 {
; ALL-LABEL: test_call:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <8 x i16> @test_callee(<8 x i16> %a, <8 x i16> %b)
  ret <8 x i16> %r
}

define <8 x i16> @test_call_flipped(<8 x i16> %a, <8 x i16> %b) #0 {
; ALL-LABEL: test_call_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r2
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r1 = $r3
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    call test_callee
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <8 x i16> @test_callee(<8 x i16> %b, <8 x i16> %a)
  ret <8 x i16> %r
}

; Can perform swap in a single bundle
define <8 x i16> @test_tailcall_flipped(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_tailcall_flipped:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r0 = $r2
; ALL-NEXT:    copyd $r1 = $r3
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    goto test_callee
; ALL-NEXT:    ;; # (end cycle 0)
  %r = tail call <8 x i16> @test_callee(<8 x i16> %b, <8 x i16> %a)
  ret <8 x i16> %r
}

define <8 x i16> @test_select(<8 x i16> %a, <8 x i16> %b, i1 zeroext %c) {
; ALL-LABEL: test_select:
; ALL:       # %bb.0:
; ALL-NEXT:    cmoved.even $r4 ? $r0 = $r2
; ALL-NEXT:    cmoved.even $r4 ? $r1 = $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = select i1 %c, <8 x i16> %a, <8 x i16> %b
  ret <8 x i16> %r
}

define <8 x i16> @test_select_cc(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c, <8 x i16> %d) {
; ALL-LABEL: test_select_cc:
; ALL:       # %bb.0:
; ALL-NEXT:    compnhq.lt $r4 = $r4, $r6
; ALL-NEXT:    compnhq.lt $r5 = $r5, $r7
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    cmovehq.even $r4 ? $r0 = $r2
; ALL-NEXT:    cmovehq.even $r5 ? $r1 = $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %cc = icmp slt <8 x i16> %c, %d
  %r = select <8 x i1> %cc, <8 x i16> %a, <8 x i16> %b
  ret <8 x i16> %r
}

define <8 x i1> @test_icmp_ule(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_icmp_ule:
; ALL:       # %bb.0:
; ALL-NEXT:    compnhq.leu $r0 = $r0, $r2
; ALL-NEXT:    compnhq.leu $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %r = icmp ule <8 x i16> %a, %b
  ret <8 x i1> %r
}

define <8 x i1> @test_icmp_slt(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_icmp_slt:
; ALL:       # %bb.0:
; ALL-NEXT:    compnhq.lt $r0 = $r0, $r2
; ALL-NEXT:    compnhq.lt $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %r = icmp slt <8 x i16> %a, %b
  ret <8 x i1> %r
}

define <8 x i1> @test_icmp_ugt(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_icmp_ugt:
; ALL:       # %bb.0:
; ALL-NEXT:    compnhq.gtu $r0 = $r0, $r2
; ALL-NEXT:    compnhq.gtu $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %r = icmp ugt <8 x i16> %a, %b
  ret <8 x i1> %r
}

define <8 x i1> @test_icmp_uge(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_icmp_uge:
; ALL:       # %bb.0:
; ALL-NEXT:    compnhq.geu $r0 = $r0, $r2
; ALL-NEXT:    compnhq.geu $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %r = icmp uge <8 x i16> %a, %b
  ret <8 x i1> %r
}

define <8 x i1> @test_icmp_ult(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: test_icmp_ult:
; ALL:       # %bb.0:
; ALL-NEXT:    compnhq.ltu $r0 = $r0, $r2
; ALL-NEXT:    compnhq.ltu $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %r = icmp ult <8 x i16> %a, %b
  ret <8 x i1> %r
}

define <8 x i8> @trunc_to_v4i8(<8 x i16> %a) {
; ALL-LABEL: trunc_to_v4i8:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %r = trunc <8 x i16> %a to <8 x i8>
  ret <8 x i8> %r
}

define <8 x i8> @trunc_to_v4i8_buildvector(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) {
; ALL-LABEL: trunc_to_v4i8_buildvector:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r1, 15, 8
; ALL-NEXT:    insf $r2 = $r3, 15, 8
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    insf $r0 = $r2, 31, 16
; ALL-NEXT:    insf $r1 = $r0, 15, 8
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    insf $r1 = $r1, 31, 16
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    insf $r0 = $r1, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
  %arg1b = trunc i32 %arg1 to i16
  %arg2b = trunc i32 %arg2 to i16
  %arg3b = trunc i32 %arg3 to i16
  %arg4b = trunc i32 %arg4 to i16
  %v0 = insertelement <8 x i16> undef, i16 %arg1b, i32 0
  %v1 = insertelement <8 x i16> %v0, i16 %arg2b, i32 1
  %v2 = insertelement <8 x i16> %v1, i16 %arg3b, i32 2
  %v3 = insertelement <8 x i16> %v2, i16 %arg4b, i32 3
  %conv = trunc <8 x i16> %v3 to <8 x i8>
  ret <8 x i8> %conv
}

define <8 x i16> @concat(<4 x i16> %a, <4 x i16> %b){
; ALL-LABEL: concat:
; ALL:       # %bb.0:
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v = shufflevector <4 x i16> %a, <4 x i16> %b, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %v
}

declare <8 x i16> @llvm.abs.v4i16(<8 x i16>, i1) #0

define <8 x i16> @test_abs(<8 x i16> %a) {
; ALL-LABEL: test_abs:
; ALL:       # %bb.0:
; ALL-NEXT:    abshq $r0 = $r0
; ALL-NEXT:    abshq $r1 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %r = call <8 x i16> @llvm.abs.v4i16(<8 x i16> %a, i1 false)
  ret <8 x i16> %r
}

define <8 x i16> @test_insertelement0(<8 x i16> %a, i16 %x) {
; ALL-LABEL: test_insertelement0:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r2, 15, 0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %i = insertelement <8 x i16> %a, i16 %x, i64 0
  ret <8 x i16> %i
}

define <8 x i16> @test_insertelement1(<8 x i16> %a, i16 %x) {
; ALL-LABEL: test_insertelement1:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r2, 31, 16
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %i = insertelement <8 x i16> %a, i16 %x, i64 1
  ret <8 x i16> %i
}

define <8 x i16> @test_insertelement2(<8 x i16> %a, i16 %x) {
; ALL-LABEL: test_insertelement2:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r2, 47, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %i = insertelement <8 x i16> %a, i16 %x, i64 2
  ret <8 x i16> %i
}

define <8 x i16> @test_insertelement3(<8 x i16> %a, i16 %x) {
; ALL-LABEL: test_insertelement3:
; ALL:       # %bb.0:
; ALL-NEXT:    insf $r0 = $r2, 63, 48
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %i = insertelement <8 x i16> %a, i16 %x, i64 3
  ret <8 x i16> %i
}

define <8 x i16> @test_insertelement(<8 x i16> %a, i16 %x, i64 %p) {
; ALL-LABEL: test_insertelement:
; ALL:       # %bb.0:
; ALL-NEXT:    andw $r3 = $r3, 7
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sq 16[$r12] = $r0r1
; ALL-NEXT:    muluwd $r3 = $r3, 2
; ALL-NEXT:    addd $r4 = $r12, 16
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sh $r3[$r4] = $r2
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r0 = 16[$r12]
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    ld $r1 = 24[$r12]
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 5)
  %i = insertelement <8 x i16> %a, i16 %x, i64 %p
  ret <8 x i16> %i
}

define <8 x i16> @mulsub(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c) {
; ALL-LABEL: mulsub:
; ALL:       # %bb.0:
; ALL-NEXT:    msbfhq $r0 = $r2, $r4
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    msbfhq $r1 = $r3, $r5
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %mul = mul <8 x i16> %b, %c
  %sub = sub <8 x i16> %a, %mul
  ret <8 x i16> %sub
}

define <8 x i16> @vnot(<8 x i16> %a) {
; ALL-LABEL: vnot:
; ALL:       # %bb.0:
; ALL-NEXT:    notd $r0 = $r0
; ALL-NEXT:    notd $r1 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %vnot = xor <8 x i16> %a, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %vnot
}

define <8 x i16> @lnand(<8 x i16> %0, <8 x i16> %1) {
; V1-LABEL: lnand:
; V1:       # %bb.0:
; V1-NEXT:    lnandhq $r0 = $r2, $r0
; V1-NEXT:    lnandhq $r1 = $r3, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: lnand:
; V2:       # %bb.0:
; V2-NEXT:    compnhq.eq $r0 = $r0, 0
; V2-NEXT:    compnhq.eq $r1 = $r1, 0
; V2-NEXT:    compnhq.eq $r2 = $r2, 0
; V2-NEXT:    compnhq.eq $r3 = $r3, 0
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V2-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; V2-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; V2-NEXT:    sbmm8 $r3 = $r3, 0x40100401
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    insf $r0 = $r1, 63, 32
; V2-NEXT:    insf $r2 = $r3, 63, 32
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    iord $r0 = $r2, $r0
; V2-NEXT:    ;; # (end cycle 3)
; V2-NEXT:    srlw $r1 = $r0, 24
; V2-NEXT:    extfz $r2 = $r0, 23, 16
; V2-NEXT:    extfz $r3 = $r0, 15, 8
; V2-NEXT:    zxbd $r4 = $r0
; V2-NEXT:    ;; # (end cycle 4)
; V2-NEXT:    extfz $r0 = $r0, 39, 32
; V2-NEXT:    srld $r5 = $r0, 56
; V2-NEXT:    extfz $r6 = $r0, 55, 48
; V2-NEXT:    extfz $r7 = $r0, 47, 40
; V2-NEXT:    ;; # (end cycle 5)
; V2-NEXT:    insf $r0 = $r7, 15, 8
; V2-NEXT:    insf $r2 = $r1, 15, 8
; V2-NEXT:    insf $r4 = $r3, 15, 8
; V2-NEXT:    insf $r6 = $r5, 15, 8
; V2-NEXT:    ;; # (end cycle 6)
; V2-NEXT:    insf $r0 = $r6, 31, 16
; V2-NEXT:    insf $r4 = $r2, 31, 16
; V2-NEXT:    ;; # (end cycle 7)
; V2-NEXT:    sxlbhq $r1 = $r4
; V2-NEXT:    sxlbhq $r2 = $r0
; V2-NEXT:    ;; # (end cycle 8)
; V2-NEXT:    andd $r0 = $r1, 0x10001.@
; V2-NEXT:    andd $r1 = $r2, 0x10001.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 9)
  %3 = icmp eq <8 x i16> %0, zeroinitializer
  %4 = icmp eq <8 x i16> %1, zeroinitializer
  %5 = or <8 x i1> %4, %3
  %6 = zext <8 x i1> %5 to <8 x i16>
  ret <8 x i16> %6
}

define <8 x i16> @lnandn(<8 x i16> %0, <8 x i16> %1) {
; V1-LABEL: lnandn:
; V1:       # %bb.0:
; V1-NEXT:    lnandhq $r0 = $r2, $r0
; V1-NEXT:    lnandhq $r1 = $r3, $r1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    neghq $r0 = $r0
; V1-NEXT:    neghq $r1 = $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 1)
;
; V2-LABEL: lnandn:
; V2:       # %bb.0:
; V2-NEXT:    compnhq.eq $r0 = $r0, 0
; V2-NEXT:    compnhq.eq $r1 = $r1, 0
; V2-NEXT:    compnhq.eq $r2 = $r2, 0
; V2-NEXT:    compnhq.eq $r3 = $r3, 0
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sbmm8 $r0 = $r0, 0x40100401
; V2-NEXT:    sbmm8 $r1 = $r1, 0x40100401
; V2-NEXT:    sbmm8 $r2 = $r2, 0x40100401
; V2-NEXT:    sbmm8 $r3 = $r3, 0x40100401
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    insf $r0 = $r1, 63, 32
; V2-NEXT:    insf $r2 = $r3, 63, 32
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    iord $r0 = $r2, $r0
; V2-NEXT:    ;; # (end cycle 3)
; V2-NEXT:    srlw $r1 = $r0, 24
; V2-NEXT:    extfz $r2 = $r0, 23, 16
; V2-NEXT:    extfz $r3 = $r0, 15, 8
; V2-NEXT:    zxbd $r4 = $r0
; V2-NEXT:    ;; # (end cycle 4)
; V2-NEXT:    extfz $r0 = $r0, 39, 32
; V2-NEXT:    srld $r5 = $r0, 56
; V2-NEXT:    extfz $r6 = $r0, 55, 48
; V2-NEXT:    extfz $r7 = $r0, 47, 40
; V2-NEXT:    ;; # (end cycle 5)
; V2-NEXT:    insf $r0 = $r7, 15, 8
; V2-NEXT:    insf $r2 = $r1, 15, 8
; V2-NEXT:    insf $r4 = $r3, 15, 8
; V2-NEXT:    insf $r6 = $r5, 15, 8
; V2-NEXT:    ;; # (end cycle 6)
; V2-NEXT:    insf $r0 = $r6, 31, 16
; V2-NEXT:    insf $r4 = $r2, 31, 16
; V2-NEXT:    ;; # (end cycle 7)
; V2-NEXT:    sxlbhq $r0 = $r0
; V2-NEXT:    sxlbhq $r1 = $r4
; V2-NEXT:    ;; # (end cycle 8)
; V2-NEXT:    sllhqs $r1 = $r1, 15
; V2-NEXT:    sllhqs $r2 = $r0, 15
; V2-NEXT:    ;; # (end cycle 9)
; V2-NEXT:    srahqs $r0 = $r1, 15
; V2-NEXT:    srahqs $r1 = $r2, 15
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 10)
  %3 = icmp eq <8 x i16> %0, zeroinitializer
  %4 = icmp eq <8 x i16> %1, zeroinitializer
  %5 = or <8 x i1> %4, %3
  %6 = sext <8 x i1> %5 to <8 x i16>
  ret <8 x i16> %6
}

define <8 x i16> @lor(<8 x i16> %0, <8 x i16> %1) {
; V1-LABEL: lor:
; V1:       # %bb.0:
; V1-NEXT:    liorhq $r0 = $r0, $r2
; V1-NEXT:    liorhq $r1 = $r1, $r3
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: lor:
; V2:       # %bb.0:
; V2-NEXT:    iord $r0 = $r2, $r0
; V2-NEXT:    iord $r1 = $r3, $r1
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    compnhq.ne $r0 = $r0, 0
; V2-NEXT:    compnhq.ne $r1 = $r1, 0
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    andd $r0 = $r0, 0x10001.@
; V2-NEXT:    andd $r1 = $r1, 0x10001.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 2)
  %3 = or <8 x i16> %1, %0
  %4 = icmp ne <8 x i16> %3, zeroinitializer
  %5 = zext <8 x i1> %4 to <8 x i16>
  ret <8 x i16> %5
}

; Not sure this is better than a (compnhq.ne (ord), (make 0))
define <8 x i16> @lorneg(<8 x i16> %0, <8 x i16> %1) {
; V1-LABEL: lorneg:
; V1:       # %bb.0:
; V1-NEXT:    liorhq $r0 = $r0, $r2
; V1-NEXT:    liorhq $r1 = $r1, $r3
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    neghq $r0 = $r0
; V1-NEXT:    neghq $r1 = $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 1)
;
; V2-LABEL: lorneg:
; V2:       # %bb.0:
; V2-NEXT:    iord $r0 = $r2, $r0
; V2-NEXT:    iord $r1 = $r3, $r1
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    compnhq.ne $r0 = $r0, 0
; V2-NEXT:    compnhq.ne $r1 = $r1, 0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %3 = or <8 x i16> %1, %0
  %4 = icmp ne <8 x i16> %3, zeroinitializer
  %5 = sext <8 x i1> %4 to <8 x i16>
  ret <8 x i16> %5
}

define <8 x i16> @lnor(<8 x i16> %0, <8 x i16> %1) {
; V1-LABEL: lnor:
; V1:       # %bb.0:
; V1-NEXT:    lniorhq $r0 = $r0, $r2
; V1-NEXT:    lniorhq $r1 = $r1, $r3
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: lnor:
; V2:       # %bb.0:
; V2-NEXT:    iord $r0 = $r2, $r0
; V2-NEXT:    iord $r1 = $r3, $r1
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    compnhq.eq $r0 = $r0, 0
; V2-NEXT:    compnhq.eq $r1 = $r1, 0
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    andd $r0 = $r0, 0x10001.@
; V2-NEXT:    andd $r1 = $r1, 0x10001.@
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 2)
  %3 = or <8 x i16> %1, %0
  %4 = icmp eq <8 x i16> %3, zeroinitializer
  %5 = zext <8 x i1> %4 to <8 x i16>
  ret <8 x i16> %5
}

; Not sure this is better than a (compnhq.eq (ord), (make 0))
define <8 x i16> @lnorneg(<8 x i16> %0, <8 x i16> %1) {
; V1-LABEL: lnorneg:
; V1:       # %bb.0:
; V1-NEXT:    lniorhq $r0 = $r0, $r2
; V1-NEXT:    lniorhq $r1 = $r1, $r3
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    neghq $r0 = $r0
; V1-NEXT:    neghq $r1 = $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 1)
;
; V2-LABEL: lnorneg:
; V2:       # %bb.0:
; V2-NEXT:    iord $r0 = $r2, $r0
; V2-NEXT:    iord $r1 = $r3, $r1
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    compnhq.eq $r0 = $r0, 0
; V2-NEXT:    compnhq.eq $r1 = $r1, 0
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %3 = or <8 x i16> %1, %0
  %4 = icmp eq <8 x i16> %3, zeroinitializer
  %5 = sext <8 x i1> %4 to <8 x i16>
  ret <8 x i16> %5
}


define <8 x i16> @abdhq_rr(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: abdhq_rr:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    abdhq $r0 = $r2, $r0
; ALL-NEXT:    abdhq $r1 = $r3, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
entry:
  %sub = sub nsw <8 x i16> %a, %b
  %0 = tail call <8 x i16> @llvm.abs.v4i16(<8 x i16> %sub, i1 true)
  ret <8 x i16> %0
}

define <8 x i16> @abdhq_not_ri(<8 x i16> %0) {
; ALL-LABEL: abdhq_not_ri:
; ALL:       # %bb.0:
; ALL-NEXT:    make $r2 = 0x10000f00100012
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    abdhq $r0 = $r0, $r2
; ALL-NEXT:    abdhq $r1 = $r1, $r2
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = sub nsw <8 x i16> <i16 18, i16 16, i16 15, i16 16, i16 18, i16 16, i16 15, i16 16>, %0
  %3 = tail call <8 x i16> @llvm.abs.v4i16(<8 x i16> %2, i1 true)
  ret <8 x i16> %3
}

define <8 x i16> @abdhq_ri_(<8 x i16> %0) {
; ALL-LABEL: abdhq_ri_:
; ALL:       # %bb.0:
; ALL-NEXT:    abdhq $r0 = $r0, 0x10000f
; ALL-NEXT:    abdhq $r1 = $r1, 0x10000f
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = sub nsw <8 x i16> <i16 15, i16 16, i16 0, i16 0, i16 15, i16 16, i16 0, i16 0>, %0
  %3 = tail call <8 x i16> @llvm.abs.v4i16(<8 x i16> %2, i1 true)
  ret <8 x i16> %3
}

define <8 x i16> @abdhq_ri_at(<8 x i16> %0) {
; ALL-LABEL: abdhq_ri_at:
; ALL:       # %bb.0:
; ALL-NEXT:    abdhq $r0 = $r0, 0x10000f.@
; ALL-NEXT:    abdhq $r1 = $r1, 0x10000f.@
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = sub nsw <8 x i16> <i16 15, i16 16, i16 15, i16 16, i16 15, i16 16, i16 15, i16 16>, %0
  %3 = tail call <8 x i16> @llvm.abs.v4i16(<8 x i16> %2, i1 true)
  ret <8 x i16> %3
}

define <8 x i16> @nandd_v4i16_rr(<8 x i16> %0, <8 x i16> %1) {
; ALL-LABEL: nandd_v4i16_rr:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r2, $r0
; ALL-NEXT:    nandd $r1 = $r3, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %3 = and <8 x i16> %1, %0
  %4 = xor <8 x i16> %3, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %4
}

define <8 x i16> @nandd_v4i16_ri10(<8 x i16> %0) {
; ALL-LABEL: nandd_v4i16_ri10:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 1023
; ALL-NEXT:    nandd $r1 = $r1, 1023
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = and <8 x i16> %0, <i16 1023, i16 0, i16 0, i16 0, i16 1023, i16 0, i16 0, i16 0>
  %3 = xor <8 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %3
}

define <8 x i16> @nandd_v4i16_ri37_0(<8 x i16> %0) {
; ALL-LABEL: nandd_v4i16_ri37_0:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 0xfffd0400
; ALL-NEXT:    nandd $r1 = $r1, 0xfffd0400
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = and <8 x i16> %0, <i16 1024, i16 -3, i16 0, i16 0, i16 1024, i16 -3, i16 0, i16 0>
  %3 = xor <8 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %3
}

define <8 x i16> @nandd_v4i16_ri37_1(<8 x i16> %0) {
; ALL-LABEL: nandd_v4i16_ri37_1:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 0xfffd0400
; ALL-NEXT:    nandd $r1 = $r1, 0xfffd0400
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = and <8 x i16> %0, <i16 1024, i16 -3, i16 0, i16 0, i16 1024, i16 -3, i16 0, i16 0>
  %3 = xor <8 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %3
}

define <8 x i16> @nandd_v4i16_ri37_2(<8 x i16> %0) {
; ALL-LABEL: nandd_v4i16_ri37_2:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 0x1ffffd0400
; ALL-NEXT:    nandd $r1 = $r1, 0x1ffffd0400
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = and <8 x i16> %0, <i16 1024, i16 -3, i16 31, i16 0, i16 1024, i16 -3, i16 31, i16 0>
  %3 = xor <8 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %3
}

define <8 x i16> @nandd_v4i16_ri64_0(<8 x i16> %0) {
; ALL-LABEL: nandd_v4i16_ri64_0:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 0x20fffd0400
; ALL-NEXT:    nandd $r1 = $r1, 0x20fffd0400
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = and <8 x i16> %0, <i16 1024, i16 -3, i16 32, i16 0, i16 1024, i16 -3, i16 32, i16 0>
  %3 = xor <8 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %3
}

define <8 x i16> @nandd_v4i16_ri64_1(<8 x i16> %0) {
; ALL-LABEL: nandd_v4i16_ri64_1:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 0xfffffffd0400
; ALL-NEXT:    nandd $r1 = $r1, 0xfffffffd0400
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = and <8 x i16> %0, <i16 1024, i16 -3, i16 -1, i16 0, i16 1024, i16 -3, i16 -1, i16 0>
  %3 = xor <8 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %3
}

define <8 x i16> @nandd_v4i16_ri64_2(<8 x i16> %0) {
; ALL-LABEL: nandd_v4i16_ri64_2:
; ALL:       # %bb.0:
; ALL-NEXT:    nandd $r0 = $r0, 0x1001ffffd0400
; ALL-NEXT:    nandd $r1 = $r1, 0x1001ffffd0400
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = and <8 x i16> %0, <i16 1024, i16 -3, i16 31, i16 1, i16 1024, i16 -3, i16 31, i16 1>
  %3 = xor <8 x i16> %2, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <8 x i16> %3
}

define <8 x i16> @splat(i32 %0) {
; ALL-LABEL: splat:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = trunc i32 %0 to i16
  %3 = insertelement <8 x i16> undef, i16 %2, i32 0
  %4 = shufflevector <8 x i16> %3, <8 x i16> undef, <8 x i32> zeroinitializer
  ret <8 x i16> %4
}

define <8 x i16> @splat_0(<8 x i16> %0) {
; ALL-LABEL: splat_0:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <8 x i32> zeroinitializer
  ret <8 x i16> %2
}

define <8 x i16> @splat_1(<8 x i16> %0) {
; ALL-LABEL: splat_1:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x8040804.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  ret <8 x i16> %2
}

define <8 x i16> @splat_1_32(i32 %0) {
; ALL-LABEL: splat_1_32:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x8040804.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = lshr i32 %0, 16
  %3 = trunc i32 %2 to i16
  %4 = insertelement <8 x i16> undef, i16 %3, i32 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> undef, <8 x i32> zeroinitializer
  ret <8 x i16> %5
}

define <8 x i16> @splat_1_64(i64 %0) {
; ALL-LABEL: splat_1_64:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x8040804.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = lshr i64 %0, 16
  %3 = trunc i64 %2 to i16
  %4 = insertelement <8 x i16> undef, i16 %3, i32 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> undef, <8 x i32> zeroinitializer
  ret <8 x i16> %5
}

define <8 x i16> @splat_2(<8 x i16> %0) {
; ALL-LABEL: splat_2:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20102010.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  ret <8 x i16> %2
}

define <8 x i16> @splat_2_64(i64 %0) {
; ALL-LABEL: splat_2_64:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x20102010.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = lshr i64 %0, 32
  %3 = trunc i64 %2 to i16
  %4 = insertelement <8 x i16> undef, i16 %3, i32 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> undef, <8 x i32> zeroinitializer
  ret <8 x i16> %5
}

define <8 x i16> @splat_3(<8 x i16> %0) {
; ALL-LABEL: splat_3:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x80408040.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  ret <8 x i16> %2
}

define <8 x i16> @splat_4(<8 x i16> %0) {
; ALL-LABEL: splat_4:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r1, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <8 x i32> <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  ret <8 x i16> %2
}

define <8 x i16> @splat_5(<8 x i16> %0) {
; ALL-LABEL: splat_5:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r1, 0x8040804.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <8 x i32> <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  ret <8 x i16> %2
}

define <8 x i16> @splat_3_64(i64 %0) {
; ALL-LABEL: splat_3_64:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x80408040.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = lshr i64 %0, 48
  %3 = trunc i64 %2 to i16
  %4 = insertelement <8 x i16> undef, i16 %3, i32 0
  %5 = shufflevector <8 x i16> %4, <8 x i16> undef, <8 x i32> zeroinitializer
  ret <8 x i16> %5
}

define  <8 x i16> @v4_maxhq_rr_i16(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: v4_maxhq_rr_i16:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    maxhq $r0 = $r0, $r2
; ALL-NEXT:    maxhq $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
entry:
  %0 = call <8 x i16> @llvm.smax.v4i16(<8 x i16> %a, <8 x i16> %b)
  ret <8 x i16> %0
}

define  <8 x i16> @v4_minhq_rr_i16(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: v4_minhq_rr_i16:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    minhq $r0 = $r0, $r2
; ALL-NEXT:    minhq $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
entry:
  %0 = call <8 x i16> @llvm.smin.v4i16(<8 x i16> %a, <8 x i16> %b)
  ret <8 x i16> %0
}

define  <8 x i16> @v4_umaxhq_rr_i16(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: v4_umaxhq_rr_i16:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    maxuhq $r0 = $r0, $r2
; ALL-NEXT:    maxuhq $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
entry:
  %0 = call <8 x i16> @llvm.umax.v4i16(<8 x i16> %a, <8 x i16> %b)
  ret <8 x i16> %0
}

define  <8 x i16> @v4_uminhq_rr_i16(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: v4_uminhq_rr_i16:
; ALL:       # %bb.0: # %entry
; ALL-NEXT:    minuhq $r0 = $r0, $r2
; ALL-NEXT:    minuhq $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
entry:
  %0 = call <8 x i16> @llvm.umin.v4i16(<8 x i16> %a, <8 x i16> %b)
  ret <8 x i16> %0
}

declare <8 x i16> @llvm.smax.v4i16(<8 x i16> %a, <8 x i16> %b)
declare <8 x i16> @llvm.smin.v4i16(<8 x i16> %a, <8 x i16> %b)
declare <8 x i16> @llvm.umax.v4i16(<8 x i16> %a, <8 x i16> %b)
declare <8 x i16> @llvm.umin.v4i16(<8 x i16> %a, <8 x i16> %b)

define <8 x i16> @add_splat_const_op1(<8 x i16> %vx) #0 {
; ALL-LABEL: add_splat_const_op1:
; ALL:       # %bb.0:
; ALL-NEXT:    addhq $r0 = $r0, 0x2a002a.@
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sbmm8 $r0 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 2)
  %splatx = shufflevector <8 x i16> %vx, <8 x i16> undef, <8 x i32> zeroinitializer
  %r = add <8 x i16> %splatx, <i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42>
  ret <8 x i16> %r
}
attributes #0 = { nounwind }

define <8 x i16> @test_div_4(<8 x i16> %a, <8 x i16> %b) #0 {
; ALL-LABEL: test_div_4:
; ALL:       # %bb.0:
; ALL-NEXT:    srahqs $r2 = $r0, 15
; ALL-NEXT:    srahqs $r3 = $r1, 15
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    srlhqs $r2 = $r2, 14
; ALL-NEXT:    srlhqs $r3 = $r3, 14
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    addhq $r0 = $r0, $r2
; ALL-NEXT:    addhq $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    srahqs $r0 = $r0, 2
; ALL-NEXT:    srahqs $r1 = $r1, 2
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
  %r = sdiv <8 x i16> %a, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  ret <8 x i16> %r
}

define <8 x i16> @test_div_32(<8 x i16> %a, <8 x i16> %b) #0 {
; ALL-LABEL: test_div_32:
; ALL:       # %bb.0:
; ALL-NEXT:    srahqs $r2 = $r0, 15
; ALL-NEXT:    srahqs $r3 = $r1, 15
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    srlhqs $r2 = $r2, 11
; ALL-NEXT:    srlhqs $r3 = $r3, 11
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    addhq $r0 = $r0, $r2
; ALL-NEXT:    addhq $r1 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    srahqs $r0 = $r0, 5
; ALL-NEXT:    srahqs $r1 = $r1, 5
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
  %r = sdiv <8 x i16> %a, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  ret <8 x i16> %r
}

define <8 x i16> @test_select_cmp(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c, <8 x i16> %d) #0 {
; ALL-LABEL: test_select_cmp:
; ALL:       # %bb.0:
; ALL-NEXT:    compnhq.ne $r4 = $r4, $r6
; ALL-NEXT:    compnhq.ne $r5 = $r5, $r7
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    andd $r4 = $r4, $r5
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    compd.eq $r4 = $r4, -1
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    cmoved.even $r4 ? $r0 = $r2
; ALL-NEXT:    cmoved.even $r4 ? $r1 = $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 3)
  %cc = icmp ne <8 x i16> %c, %d
  %bc = bitcast <8 x i1> %cc to i8
  %cmp = icmp eq i8 %bc, -1
  %r = select i1 %cmp, <8 x i16> %a, <8 x i16> %b
  ret <8 x i16> %r
}

define <8 x i16> @fshl_rr(<8 x i16> %a, <8 x i16> %b, i16 %c) {
; V1-LABEL: fshl_rr:
; V1:       # %bb.0:
; V1-NEXT:    srlhqs $r2 = $r2, 1
; V1-NEXT:    sbmm8 $r4 = $r4, 0x2010201.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    srlhqs $r3 = $r3, 1
; V1-NEXT:    andd $r4 = $r4, 0xf000f.@
; V1-NEXT:    andnd $r5 = $r4, 0xf000f.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    srlhqs $r6 = $r2, $r5
; V1-NEXT:    extfz $r7 = $r5, 19, 16
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    extfz $r8 = $r5, 35, 32
; V1-NEXT:    srlhqs $r10 = $r2, $r7
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    extfz $r9 = $r5, 51, 48
; V1-NEXT:    srlhqs $r11 = $r2, $r8
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    srlhqs $r2 = $r2, $r9
; V1-NEXT:    insf $r10 = $r6, 15, 0
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    extfz $r10 = $r4, 19, 16
; V1-NEXT:    insf $r11 = $r10, 31, 0
; V1-NEXT:    ;; # (end cycle 6)
; V1-NEXT:    srlhqs $r5 = $r3, $r5
; V1-NEXT:    srlhqs $r7 = $r3, $r7
; V1-NEXT:    ;; # (end cycle 7)
; V1-NEXT:    insf $r2 = $r11, 47, 0
; V1-NEXT:    sllhqs $r6 = $r0, $r4
; V1-NEXT:    ;; # (end cycle 8)
; V1-NEXT:    insf $r7 = $r5, 15, 0
; V1-NEXT:    sllhqs $r11 = $r0, $r10
; V1-NEXT:    ;; # (end cycle 9)
; V1-NEXT:    srlhqs $r5 = $r3, $r8
; V1-NEXT:    insf $r11 = $r6, 15, 0
; V1-NEXT:    ;; # (end cycle 10)
; V1-NEXT:    extfz $r6 = $r4, 35, 32
; V1-NEXT:    extfz $r16 = $r4, 51, 48
; V1-NEXT:    ;; # (end cycle 11)
; V1-NEXT:    sllhqs $r4 = $r1, $r4
; V1-NEXT:    insf $r5 = $r7, 31, 0
; V1-NEXT:    ;; # (end cycle 12)
; V1-NEXT:    sllhqs $r7 = $r1, $r10
; V1-NEXT:    sllhqs $r15 = $r0, $r6
; V1-NEXT:    ;; # (end cycle 13)
; V1-NEXT:    sllhqs $r4 = $r1, $r6
; V1-NEXT:    insf $r7 = $r4, 15, 0
; V1-NEXT:    ;; # (end cycle 14)
; V1-NEXT:    sllhqs $r0 = $r0, $r16
; V1-NEXT:    insf $r15 = $r11, 31, 0
; V1-NEXT:    ;; # (end cycle 15)
; V1-NEXT:    srlhqs $r3 = $r3, $r9
; V1-NEXT:    insf $r4 = $r7, 31, 0
; V1-NEXT:    ;; # (end cycle 16)
; V1-NEXT:    insf $r0 = $r15, 47, 0
; V1-NEXT:    sllhqs $r1 = $r1, $r16
; V1-NEXT:    ;; # (end cycle 17)
; V1-NEXT:    iord $r0 = $r0, $r2
; V1-NEXT:    insf $r1 = $r4, 47, 0
; V1-NEXT:    insf $r3 = $r5, 47, 0
; V1-NEXT:    ;; # (end cycle 18)
; V1-NEXT:    iord $r1 = $r1, $r3
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 19)
;
; V2-LABEL: fshl_rr:
; V2:       # %bb.0:
; V2-NEXT:    srlhqs $r2 = $r2, 1
; V2-NEXT:    srlhqs $r3 = $r3, 1
; V2-NEXT:    sbmm8 $r4 = $r4, 0x2010201.@
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    andd $r4 = $r4, 0xf000f.@
; V2-NEXT:    andnd $r5 = $r4, 0xf000f.@
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    srlhqs $r6 = $r2, $r5
; V2-NEXT:    extfz $r7 = $r5, 19, 16
; V2-NEXT:    extfz $r8 = $r5, 35, 32
; V2-NEXT:    extfz $r10 = $r4, 19, 16
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    sllhqs $r9 = $r0, $r4
; V2-NEXT:    srlhqs $r11 = $r2, $r7
; V2-NEXT:    extfz $r15 = $r4, 35, 32
; V2-NEXT:    srlhqs $r16 = $r2, $r8
; V2-NEXT:    ;; # (end cycle 3)
; V2-NEXT:    sllhqs $r6 = $r0, $r10
; V2-NEXT:    srlhqs $r8 = $r3, $r8
; V2-NEXT:    insf $r11 = $r6, 15, 0
; V2-NEXT:    ;; # (end cycle 4)
; V2-NEXT:    insf $r6 = $r9, 15, 0
; V2-NEXT:    extfz $r9 = $r5, 51, 48
; V2-NEXT:    sllhqs $r11 = $r0, $r15
; V2-NEXT:    insf $r16 = $r11, 31, 0
; V2-NEXT:    ;; # (end cycle 5)
; V2-NEXT:    srlhqs $r5 = $r3, $r5
; V2-NEXT:    srlhqs $r6 = $r3, $r7
; V2-NEXT:    sllhqs $r7 = $r1, $r10
; V2-NEXT:    insf $r11 = $r6, 31, 0
; V2-NEXT:    ;; # (end cycle 6)
; V2-NEXT:    srlhqs $r2 = $r2, $r9
; V2-NEXT:    sllhqs $r4 = $r1, $r4
; V2-NEXT:    extfz $r5 = $r4, 51, 48
; V2-NEXT:    insf $r6 = $r5, 15, 0
; V2-NEXT:    ;; # (end cycle 7)
; V2-NEXT:    sllhqs $r0 = $r0, $r5
; V2-NEXT:    sllhqs $r4 = $r1, $r15
; V2-NEXT:    insf $r7 = $r4, 15, 0
; V2-NEXT:    insf $r8 = $r6, 31, 0
; V2-NEXT:    ;; # (end cycle 8)
; V2-NEXT:    sllhqs $r1 = $r1, $r5
; V2-NEXT:    insf $r2 = $r16, 47, 0
; V2-NEXT:    srlhqs $r3 = $r3, $r9
; V2-NEXT:    insf $r4 = $r7, 31, 0
; V2-NEXT:    ;; # (end cycle 9)
; V2-NEXT:    insf $r0 = $r11, 47, 0
; V2-NEXT:    insf $r1 = $r4, 47, 0
; V2-NEXT:    insf $r3 = $r8, 47, 0
; V2-NEXT:    ;; # (end cycle 10)
; V2-NEXT:    iord $r0 = $r0, $r2
; V2-NEXT:    iord $r1 = $r1, $r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 11)
  %i = insertelement <8 x i16> undef, i16 %c, i16 0
  %s = shufflevector <8 x i16> %i, <8 x i16> undef, <8 x i32> zeroinitializer
  %r = call <8 x i16> @llvm.fshl.v4i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> %s)
  ret <8 x i16> %r
}

define <8 x i16> @fshl_ri(<8 x i16> %a, <8 x i16> %b) {
; V1-LABEL: fshl_ri:
; V1:       # %bb.0:
; V1-NEXT:    srlhqs $r2 = $r2, 1
; V1-NEXT:    srlhqs $r3 = $r3, 1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllhqs $r0 = $r0, 3
; V1-NEXT:    srlhqs $r2 = $r2, 12
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    iord $r0 = $r0, $r2
; V1-NEXT:    sllhqs $r1 = $r1, 3
; V1-NEXT:    srlhqs $r3 = $r3, 12
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r3
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 3)
;
; V2-LABEL: fshl_ri:
; V2:       # %bb.0:
; V2-NEXT:    sllhqs $r0 = $r0, 3
; V2-NEXT:    sllhqs $r1 = $r1, 3
; V2-NEXT:    srlhqs $r2 = $r2, 1
; V2-NEXT:    srlhqs $r3 = $r3, 1
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    srlhqs $r2 = $r2, 12
; V2-NEXT:    srlhqs $r3 = $r3, 12
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    iord $r0 = $r0, $r2
; V2-NEXT:    iord $r1 = $r1, $r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 2)
  %r = call <8 x i16> @llvm.fshl.v4i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>)
  ret <8 x i16> %r
}

define <8 x i16> @fshl_vec(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c) {
; V1-LABEL: fshl_vec:
; V1:       # %bb.0:
; V1-NEXT:    srlhqs $r2 = $r2, 1
; V1-NEXT:    srlhqs $r3 = $r3, 1
; V1-NEXT:    andd $r4 = $r4, 0xf000f.@
; V1-NEXT:    andnd $r6 = $r4, 0xf000f.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    extfz $r7 = $r6, 19, 16
; V1-NEXT:    srlhqs $r8 = $r2, $r6
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    srlhqs $r7 = $r2, $r7
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    insf $r7 = $r8, 15, 0
; V1-NEXT:    extfz $r8 = $r6, 35, 32
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    extfz $r6 = $r6, 51, 48
; V1-NEXT:    srlhqs $r8 = $r2, $r8
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    srlhqs $r2 = $r2, $r6
; V1-NEXT:    extfz $r6 = $r4, 19, 16
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    sllhqs $r7 = $r0, $r4
; V1-NEXT:    insf $r8 = $r7, 31, 0
; V1-NEXT:    ;; # (end cycle 6)
; V1-NEXT:    insf $r2 = $r8, 47, 0
; V1-NEXT:    sllhqs $r6 = $r0, $r6
; V1-NEXT:    ;; # (end cycle 7)
; V1-NEXT:    insf $r6 = $r7, 15, 0
; V1-NEXT:    extfz $r7 = $r4, 35, 32
; V1-NEXT:    ;; # (end cycle 8)
; V1-NEXT:    extfz $r4 = $r4, 51, 48
; V1-NEXT:    sllhqs $r7 = $r0, $r7
; V1-NEXT:    ;; # (end cycle 9)
; V1-NEXT:    sllhqs $r0 = $r0, $r4
; V1-NEXT:    andnd $r4 = $r5, 0xf000f.@
; V1-NEXT:    andd $r5 = $r5, 0xf000f.@
; V1-NEXT:    insf $r7 = $r6, 31, 0
; V1-NEXT:    ;; # (end cycle 10)
; V1-NEXT:    insf $r0 = $r7, 47, 0
; V1-NEXT:    extfz $r7 = $r4, 19, 16
; V1-NEXT:    ;; # (end cycle 11)
; V1-NEXT:    iord $r0 = $r0, $r2
; V1-NEXT:    srlhqs $r6 = $r3, $r4
; V1-NEXT:    srlhqs $r7 = $r3, $r7
; V1-NEXT:    ;; # (end cycle 12)
; V1-NEXT:    extfz $r4 = $r4, 51, 48
; V1-NEXT:    extfz $r8 = $r4, 35, 32
; V1-NEXT:    ;; # (end cycle 13)
; V1-NEXT:    srlhqs $r6 = $r3, $r8
; V1-NEXT:    insf $r7 = $r6, 15, 0
; V1-NEXT:    ;; # (end cycle 14)
; V1-NEXT:    srlhqs $r3 = $r3, $r4
; V1-NEXT:    extfz $r4 = $r5, 19, 16
; V1-NEXT:    ;; # (end cycle 15)
; V1-NEXT:    insf $r6 = $r7, 31, 0
; V1-NEXT:    sllhqs $r7 = $r1, $r5
; V1-NEXT:    ;; # (end cycle 16)
; V1-NEXT:    insf $r3 = $r6, 47, 0
; V1-NEXT:    sllhqs $r4 = $r1, $r4
; V1-NEXT:    ;; # (end cycle 17)
; V1-NEXT:    insf $r4 = $r7, 15, 0
; V1-NEXT:    extfz $r7 = $r5, 35, 32
; V1-NEXT:    ;; # (end cycle 18)
; V1-NEXT:    extfz $r5 = $r5, 51, 48
; V1-NEXT:    sllhqs $r7 = $r1, $r7
; V1-NEXT:    ;; # (end cycle 19)
; V1-NEXT:    sllhqs $r1 = $r1, $r5
; V1-NEXT:    insf $r7 = $r4, 31, 0
; V1-NEXT:    ;; # (end cycle 20)
; V1-NEXT:    insf $r1 = $r7, 47, 0
; V1-NEXT:    ;; # (end cycle 21)
; V1-NEXT:    iord $r1 = $r1, $r3
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 22)
;
; V2-LABEL: fshl_vec:
; V2:       # %bb.0:
; V2-NEXT:    srlhqs $r2 = $r2, 1
; V2-NEXT:    srlhqs $r3 = $r3, 1
; V2-NEXT:    andd $r4 = $r4, 0xf000f.@
; V2-NEXT:    andnd $r6 = $r4, 0xf000f.@
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    extfz $r7 = $r6, 19, 16
; V2-NEXT:    srlhqs $r8 = $r2, $r6
; V2-NEXT:    extfz $r9 = $r6, 35, 32
; V2-NEXT:    extfz $r10 = $r4, 19, 16
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    extfz $r6 = $r6, 51, 48
; V2-NEXT:    srlhqs $r7 = $r2, $r7
; V2-NEXT:    srlhqs $r9 = $r2, $r9
; V2-NEXT:    sllhqs $r10 = $r0, $r10
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    extfz $r4 = $r4, 51, 48
; V2-NEXT:    insf $r7 = $r8, 15, 0
; V2-NEXT:    sllhqs $r8 = $r0, $r4
; V2-NEXT:    extfz $r11 = $r4, 35, 32
; V2-NEXT:    ;; # (end cycle 3)
; V2-NEXT:    srlhqs $r2 = $r2, $r6
; V2-NEXT:    andd $r5 = $r5, 0xf000f.@
; V2-NEXT:    andnd $r7 = $r5, 0xf000f.@
; V2-NEXT:    insf $r9 = $r7, 31, 0
; V2-NEXT:    ;; # (end cycle 4)
; V2-NEXT:    sllhqs $r0 = $r0, $r4
; V2-NEXT:    extfz $r4 = $r7, 19, 16
; V2-NEXT:    sllhqs $r6 = $r0, $r11
; V2-NEXT:    insf $r10 = $r8, 15, 0
; V2-NEXT:    ;; # (end cycle 5)
; V2-NEXT:    srlhqs $r4 = $r3, $r4
; V2-NEXT:    insf $r6 = $r10, 31, 0
; V2-NEXT:    extfz $r8 = $r5, 19, 16
; V2-NEXT:    srlhqs $r10 = $r3, $r7
; V2-NEXT:    ;; # (end cycle 6)
; V2-NEXT:    insf $r4 = $r10, 15, 0
; V2-NEXT:    sllhqs $r8 = $r1, $r8
; V2-NEXT:    extfz $r10 = $r7, 35, 32
; V2-NEXT:    sllhqs $r11 = $r1, $r5
; V2-NEXT:    ;; # (end cycle 7)
; V2-NEXT:    extfz $r7 = $r7, 51, 48
; V2-NEXT:    insf $r8 = $r11, 15, 0
; V2-NEXT:    srlhqs $r10 = $r3, $r10
; V2-NEXT:    extfz $r11 = $r5, 35, 32
; V2-NEXT:    ;; # (end cycle 8)
; V2-NEXT:    srlhqs $r3 = $r3, $r7
; V2-NEXT:    extfz $r5 = $r5, 51, 48
; V2-NEXT:    insf $r10 = $r4, 31, 0
; V2-NEXT:    sllhqs $r11 = $r1, $r11
; V2-NEXT:    ;; # (end cycle 9)
; V2-NEXT:    insf $r0 = $r6, 47, 0
; V2-NEXT:    sllhqs $r1 = $r1, $r5
; V2-NEXT:    insf $r2 = $r9, 47, 0
; V2-NEXT:    insf $r11 = $r8, 31, 0
; V2-NEXT:    ;; # (end cycle 10)
; V2-NEXT:    iord $r0 = $r0, $r2
; V2-NEXT:    insf $r1 = $r11, 47, 0
; V2-NEXT:    insf $r3 = $r10, 47, 0
; V2-NEXT:    ;; # (end cycle 11)
; V2-NEXT:    iord $r1 = $r1, $r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 12)
  %r = call <8 x i16> @llvm.fshl.v4i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c)
  ret <8 x i16> %r
}
define <8 x i16> @fshr_rr(<8 x i16> %a, <8 x i16> %b, i16 %c) {
; V1-LABEL: fshr_rr:
; V1:       # %bb.0:
; V1-NEXT:    sllhqs $r0 = $r0, 1
; V1-NEXT:    sbmm8 $r4 = $r4, 0x2010201.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllhqs $r1 = $r1, 1
; V1-NEXT:    andnd $r4 = $r4, 0xf000f.@
; V1-NEXT:    andd $r5 = $r4, 0xf000f.@
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    srlhqs $r6 = $r2, $r5
; V1-NEXT:    extfz $r7 = $r5, 19, 16
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    extfz $r8 = $r5, 35, 32
; V1-NEXT:    srlhqs $r10 = $r2, $r7
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    extfz $r9 = $r5, 51, 48
; V1-NEXT:    srlhqs $r11 = $r2, $r8
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    srlhqs $r2 = $r2, $r9
; V1-NEXT:    insf $r10 = $r6, 15, 0
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    extfz $r10 = $r4, 19, 16
; V1-NEXT:    insf $r11 = $r10, 31, 0
; V1-NEXT:    ;; # (end cycle 6)
; V1-NEXT:    srlhqs $r5 = $r3, $r5
; V1-NEXT:    srlhqs $r7 = $r3, $r7
; V1-NEXT:    ;; # (end cycle 7)
; V1-NEXT:    insf $r2 = $r11, 47, 0
; V1-NEXT:    sllhqs $r6 = $r0, $r4
; V1-NEXT:    ;; # (end cycle 8)
; V1-NEXT:    insf $r7 = $r5, 15, 0
; V1-NEXT:    sllhqs $r11 = $r0, $r10
; V1-NEXT:    ;; # (end cycle 9)
; V1-NEXT:    srlhqs $r5 = $r3, $r8
; V1-NEXT:    insf $r11 = $r6, 15, 0
; V1-NEXT:    ;; # (end cycle 10)
; V1-NEXT:    extfz $r6 = $r4, 35, 32
; V1-NEXT:    extfz $r16 = $r4, 51, 48
; V1-NEXT:    ;; # (end cycle 11)
; V1-NEXT:    sllhqs $r4 = $r1, $r4
; V1-NEXT:    insf $r5 = $r7, 31, 0
; V1-NEXT:    ;; # (end cycle 12)
; V1-NEXT:    sllhqs $r7 = $r1, $r10
; V1-NEXT:    sllhqs $r15 = $r0, $r6
; V1-NEXT:    ;; # (end cycle 13)
; V1-NEXT:    sllhqs $r4 = $r1, $r6
; V1-NEXT:    insf $r7 = $r4, 15, 0
; V1-NEXT:    ;; # (end cycle 14)
; V1-NEXT:    sllhqs $r0 = $r0, $r16
; V1-NEXT:    insf $r15 = $r11, 31, 0
; V1-NEXT:    ;; # (end cycle 15)
; V1-NEXT:    srlhqs $r3 = $r3, $r9
; V1-NEXT:    insf $r4 = $r7, 31, 0
; V1-NEXT:    ;; # (end cycle 16)
; V1-NEXT:    insf $r0 = $r15, 47, 0
; V1-NEXT:    sllhqs $r1 = $r1, $r16
; V1-NEXT:    ;; # (end cycle 17)
; V1-NEXT:    iord $r0 = $r0, $r2
; V1-NEXT:    insf $r1 = $r4, 47, 0
; V1-NEXT:    insf $r3 = $r5, 47, 0
; V1-NEXT:    ;; # (end cycle 18)
; V1-NEXT:    iord $r1 = $r1, $r3
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 19)
;
; V2-LABEL: fshr_rr:
; V2:       # %bb.0:
; V2-NEXT:    sllhqs $r0 = $r0, 1
; V2-NEXT:    sllhqs $r1 = $r1, 1
; V2-NEXT:    sbmm8 $r4 = $r4, 0x2010201.@
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    andnd $r4 = $r4, 0xf000f.@
; V2-NEXT:    andd $r5 = $r4, 0xf000f.@
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    srlhqs $r6 = $r2, $r5
; V2-NEXT:    extfz $r7 = $r5, 19, 16
; V2-NEXT:    extfz $r8 = $r5, 35, 32
; V2-NEXT:    extfz $r9 = $r4, 19, 16
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    srlhqs $r7 = $r3, $r7
; V2-NEXT:    sllhqs $r10 = $r0, $r4
; V2-NEXT:    srlhqs $r11 = $r2, $r7
; V2-NEXT:    sllhqs $r15 = $r0, $r9
; V2-NEXT:    ;; # (end cycle 3)
; V2-NEXT:    srlhqs $r6 = $r2, $r8
; V2-NEXT:    sllhqs $r9 = $r1, $r9
; V2-NEXT:    insf $r11 = $r6, 15, 0
; V2-NEXT:    extfz $r16 = $r4, 35, 32
; V2-NEXT:    ;; # (end cycle 4)
; V2-NEXT:    srlhqs $r5 = $r3, $r5
; V2-NEXT:    insf $r6 = $r11, 31, 0
; V2-NEXT:    extfz $r11 = $r5, 51, 48
; V2-NEXT:    insf $r15 = $r10, 15, 0
; V2-NEXT:    ;; # (end cycle 5)
; V2-NEXT:    sllhqs $r4 = $r1, $r4
; V2-NEXT:    extfz $r5 = $r4, 51, 48
; V2-NEXT:    insf $r7 = $r5, 15, 0
; V2-NEXT:    sllhqs $r10 = $r0, $r16
; V2-NEXT:    ;; # (end cycle 6)
; V2-NEXT:    sllhqs $r4 = $r1, $r16
; V2-NEXT:    srlhqs $r8 = $r3, $r8
; V2-NEXT:    insf $r9 = $r4, 15, 0
; V2-NEXT:    insf $r10 = $r15, 31, 0
; V2-NEXT:    ;; # (end cycle 7)
; V2-NEXT:    sllhqs $r0 = $r0, $r5
; V2-NEXT:    srlhqs $r2 = $r2, $r11
; V2-NEXT:    srlhqs $r3 = $r3, $r11
; V2-NEXT:    insf $r8 = $r7, 31, 0
; V2-NEXT:    ;; # (end cycle 8)
; V2-NEXT:    insf $r0 = $r10, 47, 0
; V2-NEXT:    sllhqs $r1 = $r1, $r5
; V2-NEXT:    insf $r2 = $r6, 47, 0
; V2-NEXT:    insf $r4 = $r9, 31, 0
; V2-NEXT:    ;; # (end cycle 9)
; V2-NEXT:    iord $r0 = $r0, $r2
; V2-NEXT:    insf $r1 = $r4, 47, 0
; V2-NEXT:    insf $r3 = $r8, 47, 0
; V2-NEXT:    ;; # (end cycle 10)
; V2-NEXT:    iord $r1 = $r1, $r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 11)
  %i = insertelement <8 x i16> undef, i16 %c, i16 0
  %s = shufflevector <8 x i16> %i, <8 x i16> undef, <8 x i32> zeroinitializer
  %r = call <8 x i16> @llvm.fshr.v4i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> %s)
  ret <8 x i16> %r
}

define <8 x i16> @fshr_ri(<8 x i16> %a, <8 x i16> %b, i16 %c) {
; V1-LABEL: fshr_ri:
; V1:       # %bb.0:
; V1-NEXT:    sllhqs $r0 = $r0, 1
; V1-NEXT:    sllhqs $r1 = $r1, 1
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    sllhqs $r0 = $r0, 12
; V1-NEXT:    srlhqs $r2 = $r2, 3
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    iord $r0 = $r0, $r2
; V1-NEXT:    sllhqs $r1 = $r1, 12
; V1-NEXT:    srlhqs $r3 = $r3, 3
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    iord $r1 = $r1, $r3
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 3)
;
; V2-LABEL: fshr_ri:
; V2:       # %bb.0:
; V2-NEXT:    sllhqs $r0 = $r0, 1
; V2-NEXT:    sllhqs $r1 = $r1, 1
; V2-NEXT:    srlhqs $r2 = $r2, 3
; V2-NEXT:    srlhqs $r3 = $r3, 3
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    sllhqs $r0 = $r0, 12
; V2-NEXT:    sllhqs $r1 = $r1, 12
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    iord $r0 = $r0, $r2
; V2-NEXT:    iord $r1 = $r1, $r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 2)
  %r = call <8 x i16> @llvm.fshr.v4i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>)
  ret <8 x i16> %r
}

define <8 x i16> @fshr_vec(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c) {
; V1-LABEL: fshr_vec:
; V1:       # %bb.0:
; V1-NEXT:    sllhqs $r0 = $r0, 1
; V1-NEXT:    sllhqs $r1 = $r1, 1
; V1-NEXT:    andnd $r4 = $r4, 0xf000f.@
; V1-NEXT:    andd $r6 = $r4, 0xf000f.@
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    extfz $r7 = $r6, 19, 16
; V1-NEXT:    srlhqs $r8 = $r2, $r6
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    srlhqs $r7 = $r2, $r7
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    insf $r7 = $r8, 15, 0
; V1-NEXT:    extfz $r8 = $r6, 35, 32
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    extfz $r6 = $r6, 51, 48
; V1-NEXT:    srlhqs $r8 = $r2, $r8
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    srlhqs $r2 = $r2, $r6
; V1-NEXT:    extfz $r6 = $r4, 19, 16
; V1-NEXT:    ;; # (end cycle 5)
; V1-NEXT:    sllhqs $r7 = $r0, $r4
; V1-NEXT:    insf $r8 = $r7, 31, 0
; V1-NEXT:    ;; # (end cycle 6)
; V1-NEXT:    insf $r2 = $r8, 47, 0
; V1-NEXT:    sllhqs $r6 = $r0, $r6
; V1-NEXT:    ;; # (end cycle 7)
; V1-NEXT:    insf $r6 = $r7, 15, 0
; V1-NEXT:    extfz $r7 = $r4, 35, 32
; V1-NEXT:    ;; # (end cycle 8)
; V1-NEXT:    extfz $r4 = $r4, 51, 48
; V1-NEXT:    sllhqs $r7 = $r0, $r7
; V1-NEXT:    ;; # (end cycle 9)
; V1-NEXT:    sllhqs $r0 = $r0, $r4
; V1-NEXT:    andd $r4 = $r5, 0xf000f.@
; V1-NEXT:    insf $r7 = $r6, 31, 0
; V1-NEXT:    ;; # (end cycle 10)
; V1-NEXT:    insf $r0 = $r7, 47, 0
; V1-NEXT:    extfz $r6 = $r4, 19, 16
; V1-NEXT:    ;; # (end cycle 11)
; V1-NEXT:    iord $r0 = $r0, $r2
; V1-NEXT:    srlhqs $r6 = $r3, $r6
; V1-NEXT:    srlhqs $r7 = $r3, $r4
; V1-NEXT:    ;; # (end cycle 12)
; V1-NEXT:    insf $r6 = $r7, 15, 0
; V1-NEXT:    extfz $r7 = $r4, 35, 32
; V1-NEXT:    ;; # (end cycle 13)
; V1-NEXT:    extfz $r4 = $r4, 51, 48
; V1-NEXT:    srlhqs $r7 = $r3, $r7
; V1-NEXT:    ;; # (end cycle 14)
; V1-NEXT:    srlhqs $r3 = $r3, $r4
; V1-NEXT:    andnd $r4 = $r5, 0xf000f.@
; V1-NEXT:    insf $r7 = $r6, 31, 0
; V1-NEXT:    ;; # (end cycle 15)
; V1-NEXT:    extfz $r5 = $r4, 19, 16
; V1-NEXT:    sllhqs $r6 = $r1, $r4
; V1-NEXT:    ;; # (end cycle 16)
; V1-NEXT:    insf $r3 = $r7, 47, 0
; V1-NEXT:    sllhqs $r5 = $r1, $r5
; V1-NEXT:    ;; # (end cycle 17)
; V1-NEXT:    insf $r5 = $r6, 15, 0
; V1-NEXT:    extfz $r6 = $r4, 35, 32
; V1-NEXT:    ;; # (end cycle 18)
; V1-NEXT:    extfz $r4 = $r4, 51, 48
; V1-NEXT:    sllhqs $r6 = $r1, $r6
; V1-NEXT:    ;; # (end cycle 19)
; V1-NEXT:    sllhqs $r1 = $r1, $r4
; V1-NEXT:    insf $r6 = $r5, 31, 0
; V1-NEXT:    ;; # (end cycle 20)
; V1-NEXT:    insf $r1 = $r6, 47, 0
; V1-NEXT:    ;; # (end cycle 21)
; V1-NEXT:    iord $r1 = $r1, $r3
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 22)
;
; V2-LABEL: fshr_vec:
; V2:       # %bb.0:
; V2-NEXT:    sllhqs $r0 = $r0, 1
; V2-NEXT:    sllhqs $r1 = $r1, 1
; V2-NEXT:    andnd $r4 = $r4, 0xf000f.@
; V2-NEXT:    andd $r6 = $r4, 0xf000f.@
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    extfz $r7 = $r6, 19, 16
; V2-NEXT:    srlhqs $r8 = $r2, $r6
; V2-NEXT:    extfz $r9 = $r6, 35, 32
; V2-NEXT:    extfz $r10 = $r4, 19, 16
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    extfz $r6 = $r6, 51, 48
; V2-NEXT:    srlhqs $r7 = $r2, $r7
; V2-NEXT:    srlhqs $r9 = $r2, $r9
; V2-NEXT:    sllhqs $r10 = $r0, $r10
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    extfz $r4 = $r4, 51, 48
; V2-NEXT:    insf $r7 = $r8, 15, 0
; V2-NEXT:    sllhqs $r8 = $r0, $r4
; V2-NEXT:    extfz $r11 = $r4, 35, 32
; V2-NEXT:    ;; # (end cycle 3)
; V2-NEXT:    srlhqs $r2 = $r2, $r6
; V2-NEXT:    andnd $r5 = $r5, 0xf000f.@
; V2-NEXT:    andd $r7 = $r5, 0xf000f.@
; V2-NEXT:    insf $r9 = $r7, 31, 0
; V2-NEXT:    ;; # (end cycle 4)
; V2-NEXT:    sllhqs $r0 = $r0, $r4
; V2-NEXT:    extfz $r4 = $r7, 19, 16
; V2-NEXT:    sllhqs $r6 = $r0, $r11
; V2-NEXT:    insf $r10 = $r8, 15, 0
; V2-NEXT:    ;; # (end cycle 5)
; V2-NEXT:    srlhqs $r4 = $r3, $r4
; V2-NEXT:    insf $r6 = $r10, 31, 0
; V2-NEXT:    extfz $r8 = $r5, 19, 16
; V2-NEXT:    srlhqs $r10 = $r3, $r7
; V2-NEXT:    ;; # (end cycle 6)
; V2-NEXT:    insf $r4 = $r10, 15, 0
; V2-NEXT:    sllhqs $r8 = $r1, $r8
; V2-NEXT:    extfz $r10 = $r7, 35, 32
; V2-NEXT:    sllhqs $r11 = $r1, $r5
; V2-NEXT:    ;; # (end cycle 7)
; V2-NEXT:    extfz $r7 = $r7, 51, 48
; V2-NEXT:    insf $r8 = $r11, 15, 0
; V2-NEXT:    srlhqs $r10 = $r3, $r10
; V2-NEXT:    extfz $r11 = $r5, 35, 32
; V2-NEXT:    ;; # (end cycle 8)
; V2-NEXT:    srlhqs $r3 = $r3, $r7
; V2-NEXT:    extfz $r5 = $r5, 51, 48
; V2-NEXT:    insf $r10 = $r4, 31, 0
; V2-NEXT:    sllhqs $r11 = $r1, $r11
; V2-NEXT:    ;; # (end cycle 9)
; V2-NEXT:    insf $r0 = $r6, 47, 0
; V2-NEXT:    sllhqs $r1 = $r1, $r5
; V2-NEXT:    insf $r2 = $r9, 47, 0
; V2-NEXT:    insf $r11 = $r8, 31, 0
; V2-NEXT:    ;; # (end cycle 10)
; V2-NEXT:    iord $r0 = $r0, $r2
; V2-NEXT:    insf $r1 = $r11, 47, 0
; V2-NEXT:    insf $r3 = $r10, 47, 0
; V2-NEXT:    ;; # (end cycle 11)
; V2-NEXT:    iord $r1 = $r1, $r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 12)
  %r = call <8 x i16> @llvm.fshr.v4i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c)
  ret <8 x i16> %r
}

declare <8 x i16> @llvm.fshr.v4i16(<8 x i16>, <8 x i16>, <8 x i16>)
declare <8 x i16> @llvm.fshl.v4i16(<8 x i16>, <8 x i16>, <8 x i16>)

define <8 x i16> @sdiv(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: sdiv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __divv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sdiv <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @sdiv_vs(<8 x i16> %a, i16 %b) {
; ALL-LABEL: sdiv_vs:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r2 = $r2, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    call __divv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <8 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <8 x i16> %v0, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = sdiv <8 x i16> %a, %splat
  ret <8 x i16> %div
}

define <8 x i16> @sdiv_sv(<8 x i16> %a, i16 %b) {
; ALL-LABEL: sdiv_sv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    copyd $r4 = $r0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sbmm8 $r0 = $r2, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    copyd $r2 = $r4
; ALL-NEXT:    call __divv8hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <8 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <8 x i16> %v0, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = sdiv <8 x i16> %splat, %a
  ret <8 x i16> %div
}

define <8 x i16> @sdiv_ss(i16 %a, i16 %b) {
; ALL-LABEL: sdiv_ss:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    sbmm8 $r2 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    call __divv8hi3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %va = insertelement <8 x i16> undef, i16 %b, i32 0
  %vb = insertelement <8 x i16> undef, i16 %a, i32 0
  %splata = shufflevector <8 x i16> %va, <8 x i16> undef, <8 x i32> zeroinitializer
  %splatb = shufflevector <8 x i16> %vb, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = sdiv <8 x i16> %splata, %splatb
  ret <8 x i16> %div
}

define <8 x i16> @srem(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: srem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __modv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = srem <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @srem_vs(<8 x i16> %a, i16 %b) {
; ALL-LABEL: srem_vs:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r2 = $r2, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    call __modv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <8 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <8 x i16> %v0, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = srem <8 x i16> %a, %splat
  ret <8 x i16> %div
}

define <8 x i16> @srem_sv(<8 x i16> %a, i16 %b) {
; ALL-LABEL: srem_sv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    copyd $r4 = $r0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sbmm8 $r0 = $r2, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    copyd $r2 = $r4
; ALL-NEXT:    call __modv8hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <8 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <8 x i16> %v0, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = srem <8 x i16> %splat, %a
  ret <8 x i16> %div
}

define <8 x i16> @srem_ss(i16 %a, i16 %b) {
; ALL-LABEL: srem_ss:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    sbmm8 $r2 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    call __modv8hi3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %va = insertelement <8 x i16> undef, i16 %b, i32 0
  %vb = insertelement <8 x i16> undef, i16 %a, i32 0
  %splata = shufflevector <8 x i16> %va, <8 x i16> undef, <8 x i32> zeroinitializer
  %splatb = shufflevector <8 x i16> %vb, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = srem <8 x i16> %splata, %splatb
  ret <8 x i16> %div
}

define <8 x i16> @udiv(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: udiv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __udivv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = udiv <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @udiv_vs(<8 x i16> %a, i16 %b) {
; ALL-LABEL: udiv_vs:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r2 = $r2, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    call __udivv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <8 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <8 x i16> %v0, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = udiv <8 x i16> %a, %splat
  ret <8 x i16> %div
}

define <8 x i16> @udiv_sv(<8 x i16> %a, i16 %b) {
; ALL-LABEL: udiv_sv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    copyd $r4 = $r0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sbmm8 $r0 = $r2, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    copyd $r2 = $r4
; ALL-NEXT:    call __udivv8hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <8 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <8 x i16> %v0, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = udiv <8 x i16> %splat, %a
  ret <8 x i16> %div
}

define <8 x i16> @udiv_ss(i16 %a, i16 %b) {
; ALL-LABEL: udiv_ss:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    sbmm8 $r2 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    call __udivv8hi3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %va = insertelement <8 x i16> undef, i16 %b, i32 0
  %vb = insertelement <8 x i16> undef, i16 %a, i32 0
  %splata = shufflevector <8 x i16> %va, <8 x i16> undef, <8 x i32> zeroinitializer
  %splatb = shufflevector <8 x i16> %vb, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = udiv <8 x i16> %splata, %splatb
  ret <8 x i16> %div
}

define <8 x i16> @urem(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: urem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __umodv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = urem <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @urem_vs(<8 x i16> %a, i16 %b) {
; ALL-LABEL: urem_vs:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r2 = $r2, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    call __umodv8hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <8 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <8 x i16> %v0, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = urem <8 x i16> %a, %splat
  ret <8 x i16> %div
}

define <8 x i16> @urem_sv(<8 x i16> %a, i16 %b) {
; ALL-LABEL: urem_sv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    copyd $r4 = $r0
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sbmm8 $r0 = $r2, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    copyd $r2 = $r4
; ALL-NEXT:    call __umodv8hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <8 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <8 x i16> %v0, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = urem <8 x i16> %splat, %a
  ret <8 x i16> %div
}

define <8 x i16> @urem_ss(i16 %a, i16 %b) {
; ALL-LABEL: urem_ss:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    sbmm8 $r2 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r3 = $r2
; ALL-NEXT:    call __umodv8hi3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %va = insertelement <8 x i16> undef, i16 %b, i32 0
  %vb = insertelement <8 x i16> undef, i16 %a, i32 0
  %splata = shufflevector <8 x i16> %va, <8 x i16> undef, <8 x i32> zeroinitializer
  %splatb = shufflevector <8 x i16> %vb, <8 x i16> undef, <8 x i32> zeroinitializer
  %div = urem <8 x i16> %splata, %splatb
  ret <8 x i16> %div
}

define <8 x i16> @sdivrem(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: sdivrem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -64
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 56[$r12] = $r16
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sq 40[$r12] = $r20r21
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    sq 24[$r12] = $r18r19
; ALL-NEXT:    copyd $r18 = $r3
; ALL-NEXT:    copyd $r19 = $r2
; ALL-NEXT:    copyd $r20 = $r1
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    copyd $r21 = $r0
; ALL-NEXT:    call __divv8hi3
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    msbfhq $r20 = $r1, $r18
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    lq $r18r19 = 24[$r12]
; ALL-NEXT:    msbfhq $r21 = $r0, $r19
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    addhq $r1 = $r1, $r20
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    lq $r20r21 = 40[$r12]
; ALL-NEXT:    addhq $r0 = $r0, $r21
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 56[$r12]
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 64
; ALL-NEXT:    ;; # (end cycle 9)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %q = sdiv <8 x i16> %a, %b
  %r = srem <8 x i16> %a, %b
  %res = add <8 x i16> %q, %r
  ret <8 x i16> %res
}

define <8 x i16> @udivrem(<8 x i16> %a, <8 x i16> %b) {
; ALL-LABEL: udivrem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -64
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 56[$r12] = $r16
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sq 40[$r12] = $r20r21
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    sq 24[$r12] = $r18r19
; ALL-NEXT:    copyd $r18 = $r3
; ALL-NEXT:    copyd $r19 = $r2
; ALL-NEXT:    copyd $r20 = $r1
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    copyd $r21 = $r0
; ALL-NEXT:    call __udivv8hi3
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    msbfhq $r20 = $r1, $r18
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    lq $r18r19 = 24[$r12]
; ALL-NEXT:    msbfhq $r21 = $r0, $r19
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    addhq $r1 = $r1, $r20
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    lq $r20r21 = 40[$r12]
; ALL-NEXT:    addhq $r0 = $r0, $r21
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 56[$r12]
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 64
; ALL-NEXT:    ;; # (end cycle 9)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %q = udiv <8 x i16> %a, %b
  %r = urem <8 x i16> %a, %b
  %res = add <8 x i16> %q, %r
  ret <8 x i16> %res
}
