; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,KV3_1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,KV3_2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <2 x half> @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 0x40003c00
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  ret <2 x half> <half 1.0, half 2.0>
}

define half @test_extract_0(<2 x half> %a) #0 {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <2 x half> %a, i32 0
  ret half %e
}

define half @test_extract_1(<2 x half> %a) #0 {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r0 = $r0, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %e = extractelement <2 x half> %a, i32 1
  ret half %e
}

define half @test_extract_i(<2 x half> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllw $r1 = $r1, 4
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %e = extractelement <2 x half> %a, i64 %idx
  ret half %e
}

define <2 x half> @test_fadd(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    faddhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fadd <2 x half> %a, %b
  ret <2 x half> %r
}

define <2 x half> @test_fadd_imm_0(<2 x half> %a) #0 {
; KV3_1-LABEL: test_fadd_imm_0:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxwd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    faddhq $r0 = $r0, 0x40003c00
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 1)
;
; KV3_2-LABEL: test_fadd_imm_0:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxwd $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0x40003c00
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    faddhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = fadd <2 x half> <half 1.0, half 2.0>, %a
  ret <2 x half> %r
}

define <2 x half> @test_fadd_imm_1(<2 x half> %a) #0 {
; KV3_1-LABEL: test_fadd_imm_1:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxwd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    faddhq $r0 = $r0, 0x40003c00
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 1)
;
; KV3_2-LABEL: test_fadd_imm_1:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxwd $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0x40003c00
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    faddhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = fadd <2 x half> %a, <half 1.0, half 2.0>
  ret <2 x half> %r
}

define <2 x half> @test_fsub(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fsub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fsbfhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fsub <2 x half> %a, %b
  ret <2 x half> %r
}

define <2 x half> @test_fsub_imm(<2 x half> %a) #0 {
; KV3_1-LABEL: test_fsub_imm:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxwd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    faddhq $r0 = $r0, 0xffffffffc000bc00
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 1)
;
; KV3_2-LABEL: test_fsub_imm:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxwd $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0xffffffffc000bc00
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    faddhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = fsub <2 x half> %a, <half 1.0, half 2.0>
  ret <2 x half> %r
}

define <2 x half> @test_fsub_fromimm(<2 x half> %a) #0 {
; KV3_1-LABEL: test_fsub_fromimm:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxwd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fsbfhq $r0 = $r0, 0x40003c00
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 1)
;
; KV3_2-LABEL: test_fsub_fromimm:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxwd $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0x40003c00
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fsbfhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = fsub <2 x half> <half 1.0, half 2.0>, %a
  ret <2 x half> %r
}

define <2 x half> @test_fneg(<2 x half> %a) #0 {
; CHECK-LABEL: test_fneg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fneghq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = fsub <2 x half> <half 0.0, half 0.0>, %a
  ret <2 x half> %r
}

define <2 x half> @test_fmul(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fmul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fmulhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fmul <2 x half> %a, %b
  ret <2 x half> %r
}

define <2 x half> @test_fmul_imm(<2 x half> %a) {
; KV3_1-LABEL: test_fmul_imm:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    zxwd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fmulhq $r0 = $r0, 0x40003c00
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 1)
;
; KV3_2-LABEL: test_fmul_imm:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxwd $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0x40003c00
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fmulhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 1)
  %r = fmul <2 x half> %a, <half 1.0, half 2.0>
  ret <2 x half> %r
}

define <2 x half> @test_fdiv(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fdiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenmhw $r0 = $r19
; CHECK-NEXT:    fwidenmhw $r1 = $r18
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    fwidenlhw $r0 = $r19
; CHECK-NEXT:    fnarrowwh $r20 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    call __divsf3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = fdiv <2 x half> %a, %b
  ret <2 x half> %r
}

define <2 x half> @test_frem(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_frem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenmhw $r0 = $r19
; CHECK-NEXT:    fwidenmhw $r1 = $r18
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    fwidenlhw $r0 = $r19
; CHECK-NEXT:    fnarrowwh $r20 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    call fmodf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = frem <2 x half> %a, %b
  ret <2 x half> %r
}

define void @test_ldst_v2f16(<2 x half>* %a, <2 x half>* %b) {
; CHECK-LABEL: test_ldst_v2f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %t1 = load <2 x half>, <2 x half>* %a
  store <2 x half> %t1, <2 x half>* %b, align 16
  ret void
}

declare <2 x half> @test_callee(<2 x half> %a, <2 x half> %b) #0

define <2 x half> @test_call(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @test_callee(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_call_flipped(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @test_callee(<2 x half> %b, <2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_tailcall_flipped(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = tail call <2 x half> @test_callee(<2 x half> %b, <2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_select(<2 x half> %a, <2 x half> %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = select i1 %c, <2 x half> %a, <2 x half> %b
  ret <2 x half> %r
}

define <2 x half> @test_select_cc(<2 x half> %a, <2 x half> %b, <2 x half> %c, <2 x half> %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r2 = $r2, $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cmovehq.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %cc = fcmp une <2 x half> %c, %d
  %r = select <2 x i1> %cc, <2 x half> %a, <2 x half> %b
  ret <2 x half> %r
}

define <2 x float> @test_select_cc_f32_f16(<2 x float> %a, <2 x float> %b, <2 x half> %c, <2 x half> %d) #0 {
; CHECK-LABEL: test_select_cc_f32_f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r2 = $r2, $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sxlhwp $r2 = $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cmovewp.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %cc = fcmp une <2 x half> %c, %d
  %r = select <2 x i1> %cc, <2 x float> %a, <2 x float> %b
  ret <2 x float> %r
}

define <2 x half> @test_select_cc_f16_f32(<2 x half> %a, <2 x half> %b, <2 x float> %c, <2 x float> %d) #0 {
; CHECK-LABEL: test_select_cc_f16_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnwp.une $r2 = $r2, $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x20100201
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cmovehq.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %cc = fcmp une <2 x float> %c, %d
  %r = select <2 x i1> %cc, <2 x half> %a, <2 x half> %b
  ret <2 x half> %r
}

define <2 x i1> @test_fcmp_une(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_une:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp une <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ueq(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ueq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ueq $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ueq <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ugt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ugt <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_uge(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp uge <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ult(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.ult $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ult <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ule(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ule <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_uno(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_uno:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.ult $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = fcmp uno <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_one(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_one:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp one <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_oeq(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_oeq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp oeq <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ogt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ogt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ogt <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_oge(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_oge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp oge <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_olt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_olt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp olt <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ole(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ole:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fcmp ole <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ord(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_fcmp_ord:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.olt $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    orw $r0 = $r0, $r2
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x401
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = fcmp ord <2 x half> %a, %b
  ret <2 x i1> %r
}

define <2 x i16> @test_fptosi_i16(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fixedwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x20100201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %r = fptosi <2 x half> %a to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i32> @test_fptosi_i32(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fixedwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fptosi <2 x half> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i64> @test_fptosi_i64(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptosi_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    fwidenmwd $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fixedd.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %r = fptosi <2 x half> %a to <2 x i64>
  ret <2 x i64> %r
}

define <2 x i16> @test_fptoui_2xi16(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_2xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fixeduwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x20100201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 5)
  %r = fptoui <2 x half> %a to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i32> @test_fptoui_2xi32(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fixeduwp.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fptoui <2 x half> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i64> @test_fptoui_2xi64(<2 x half> %a) #0 {
; CHECK-LABEL: test_fptoui_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    fwidenmwd $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fixedud.rz $r1 = $r1, 0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %r = fptoui <2 x half> %a to <2 x i64>
  ret <2 x i64> %r
}

define <2 x half> @test_uitofp_2xi16(<2 x i16> %a) #0 {
; KV3_1-LABEL: test_uitofp_2xi16:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    sbmm8 $r0 = $r0, 0x80400000201
; KV3_1-NEXT:    make $r1 = 0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    floatuwp.rn $r0 = $r0, 0
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 5)
;
; KV3_2-LABEL: test_uitofp_2xi16:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    zxlhwp $r0 = $r0
; KV3_2-NEXT:    make $r1 = 0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    floatuwp.rn $r0 = $r0, 0
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 5)
  %r = uitofp <2 x i16> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_uitofp_2xi32(<2 x i32> %a) #0 {
; CHECK-LABEL: test_uitofp_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatuwp.rn $r0 = $r0, 0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
  %r = uitofp <2 x i32> %a to <2 x half>
  ret <2 x half> %r
}

; Could use vector fnarrow variants
define <2 x half> @test_uitofp_2xi64(<2 x i64> %a) #0 {
; CHECK-LABEL: test_uitofp_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatud.rn $r1 = $r1, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    floatud.rn $r0 = $r0, 0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowdw.rn $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    fnarrowwh.rn $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 7)
  %r = uitofp <2 x i64> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_sitofp_2xi32(<2 x i32> %a) #0 {
; CHECK-LABEL: test_sitofp_2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatwp.rn $r0 = $r0, 0
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 4)
  %r = sitofp <2 x i32> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_sitofp_2xi64(<2 x i64> %a) #0 {
; CHECK-LABEL: test_sitofp_2xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    floatd.rn $r1 = $r1, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    floatd.rn $r0 = $r0, 0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowdw.rn $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    fnarrowdw.rn $r0 = $r0
; CHECK-NEXT:    fnarrowwh.rn $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 7)
  %r = sitofp <2 x i64> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_uitofp_2xi32_fadd(<2 x i32> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_uitofp_2xi32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    floatuwp.rn $r2 = $r0, 0
; CHECK-NEXT:    make $r3 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r2r3
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    faddhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 6)
  %c = uitofp <2 x i32> %a to <2 x half>
  %r = fadd <2 x half> %b, %c
  ret <2 x half> %r
}

define <2 x half> @test_sitofp_2xi32_fadd(<2 x i32> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_sitofp_2xi32_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    floatwp.rn $r2 = $r0, 0
; CHECK-NEXT:    make $r3 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwhq.rn $r0 = $r2r3
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    faddhq $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 6)
  %c = sitofp <2 x i32> %a to <2 x half>
  %r = fadd <2 x half> %b, %c
  ret <2 x half> %r
}

define <2 x half> @test_fptrunc_2xfloat(<2 x float> %a) #0 {
; CHECK-LABEL: test_fptrunc_2xfloat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwhq $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fptrunc <2 x float> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x half> @test_fptrunc_2xdouble(<2 x double> %a) #0 {
; CHECK-LABEL: test_fptrunc_2xdouble:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnarrowdwp $r0 = $r0r1
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwhq $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fptrunc <2 x double> %a to <2 x half>
  ret <2 x half> %r
}

define <2 x float> @test_fpext_2xfloat(<2 x half> %a) #0 {
; CHECK-LABEL: test_fpext_2xfloat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = fpext <2 x half> %a to <2 x float>
  ret <2 x float> %r
}

define <2 x double> @test_fpext_2xdouble(<2 x half> %a) #0 {
; CHECK-LABEL: test_fpext_2xdouble:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    fwidenmwd $r1 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = fpext <2 x half> %a to <2 x double>
  ret <2 x double> %r
}

define <2 x i16> @test_bitcast_2xhalf_to_2xi16(<2 x half> %a) #0 {
; CHECK-LABEL: test_bitcast_2xhalf_to_2xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = bitcast <2 x half> %a to <2 x i16>
  ret <2 x i16> %r
}

define <2 x half> @test_bitcast_2xi16_to_2xhalf(<2 x i16> %a) #0 {
; CHECK-LABEL: test_bitcast_2xi16_to_2xhalf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = bitcast <2 x i16> %a to <2 x half>
  ret <2 x half> %r
}

declare <2 x half> @llvm.sqrt.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.powi.v2f16(<2 x half> %a, i32 %b) #0
declare <2 x half> @llvm.sin.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.cos.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.pow.v2f16(<2 x half> %a, <2 x half> %b) #0
declare <2 x half> @llvm.exp.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.exp2.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.log.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.log10.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.log2.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.fma.v2f16(<2 x half> %a, <2 x half> %b, <2 x half> %c) #0
declare <2 x half> @llvm.fabs.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.minnum.v2f16(<2 x half> %a, <2 x half> %b) #0
declare <2 x half> @llvm.maxnum.v2f16(<2 x half> %a, <2 x half> %b) #0
declare <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %b) #0
declare <2 x half> @llvm.floor.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.ceil.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.trunc.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.rint.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.nearbyint.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.round.v2f16(<2 x half> %a) #0
declare <2 x half> @llvm.fmuladd.v2f16(<2 x half> %a, <2 x half> %b, <2 x half> %c) #0

define <2 x half> @test_sqrt(<2 x half> %a) #0 {
; CHECK-LABEL: test_sqrt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call sqrtf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.sqrt.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_powi(<2 x half> %a, i32 %b) #0 {
; CHECK-LABEL: test_powi:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenmhw $r0 = $r19
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    fwidenlhw $r0 = $r19
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r20 = $r0
; CHECK-NEXT:    call __powisf2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.powi.v2f16(<2 x half> %a, i32 %b)
 ret <2 x half> %r
}

define <2 x half> @test_sin(<2 x half> %a) #0 {
; CHECK-LABEL: test_sin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call sinf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.sin.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_cos(<2 x half> %a) #0 {
; CHECK-LABEL: test_cos:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call cosf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.cos.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_pow(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_pow:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenmhw $r0 = $r19
; CHECK-NEXT:    fwidenmhw $r1 = $r18
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    fwidenlhw $r0 = $r19
; CHECK-NEXT:    fnarrowwh $r20 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    call powf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r20, 31, 16
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.pow.v2f16(<2 x half> %a, <2 x half> %b)
 ret <2 x half> %r
}

define <2 x half> @test_exp(<2 x half> %a) #0 {
; CHECK-LABEL: test_exp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call expf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.exp.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

define <2 x half> @test_exp2(<2 x half> %a) #0 {
; CHECK-LABEL: test_exp2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call exp2f
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.exp2.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

define <2 x half> @test_log(<2 x half> %a) #0 {
; CHECK-LABEL: test_log:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call logf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.log.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

define <2 x half> @test_log10(<2 x half> %a) #0 {
; CHECK-LABEL: test_log10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call log10f
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.log10.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

;;; XCHECK-LABEL: test_log2(
define <2 x half> @test_log2(<2 x half> %a) #0 {
; CHECK-LABEL: test_log2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call log2f
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
 %r = call <2 x half> @llvm.log2.v2f16(<2 x half> %a)
 ret <2 x half> %r
}

define <2 x half> @test_fma(<2 x half> %a, <2 x half> %b, <2 x half> %c) #0 {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r0 = $r2
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    zxwd $r3 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ffmahq $r0 = $r3, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = call <2 x half> @llvm.fma.v2f16(<2 x half> %a, <2 x half> %b, <2 x half> %c)
  ret <2 x half> %r
}

define <2 x half> @test_fabs(<2 x half> %a) #0 {
; CHECK-LABEL: test_fabs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = call <2 x half> @llvm.fabs.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_minnum(<2 x half> %a, <2 x half> %b) #0 {
; KV3_1-LABEL: test_minnum:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    sllhqs $r2 = $r0, 1
; KV3_1-NEXT:    fcompnhq.olt $r3 = $r1, $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    compnhq.gtu $r2 = $r2, 0xf800f800
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    orw $r2 = $r3, $r2
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    cmovehq.odd $r2 ? $r0 = $r1
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 3)
;
; KV3_2-LABEL: test_minnum:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    fminhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
  %r = call <2 x half> @llvm.minnum.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_minnum_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_minnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fminhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = call fast <2 x half> @llvm.minnum.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_maxnum(<2 x half> %a, <2 x half> %b) #0 {
; KV3_1-LABEL: test_maxnum:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    sllhqs $r2 = $r0, 1
; KV3_1-NEXT:    fcompnhq.olt $r3 = $r0, $r1
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    compnhq.gtu $r2 = $r2, 0xf800f800
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    orw $r2 = $r3, $r2
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    cmovehq.odd $r2 ? $r0 = $r1
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 3)
;
; KV3_2-LABEL: test_maxnum:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    fmaxhq $r0 = $r0, $r1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
  %r = call <2 x half> @llvm.maxnum.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_maxnum_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_maxnum_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fmaxhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %r = call fast <2 x half> @llvm.maxnum.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_copysign(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_copysign:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andw $r0 = $r0, 0x7fff7fff
; CHECK-NEXT:    andw $r1 = $r1, 0x80008000
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    orw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = call <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %b)
  ret <2 x half> %r
}

define <2 x half> @test_copysign_v2f32(<2 x half> %a, <2 x float> %b) #0 {
; CHECK-LABEL: test_copysign_v2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andw $r0 = $r0, 0x7fff7fff
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    make $r3 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwhq $r1 = $r2r3
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    andw $r1 = $r1, 0x80008000
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    orw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %tb = fptrunc <2 x float> %b to <2 x half>
  %r = call <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %tb)
  ret <2 x half> %r
}

define <2 x half> @test_copysign_v2f64(<2 x double> %b, <2 x half> %a) #0 {
; CHECK-LABEL: test_copysign_v2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fnarrowdwp $r0 = $r0r1
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    andw $r2 = $r2, 0x7fff7fff
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fnarrowwhq $r0 = $r0r1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    andw $r0 = $r0, 0x80008000
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    orw $r0 = $r2, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %tb = fptrunc <2 x double> %b to <2 x half>
  %r = call <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %tb)
  ret <2 x half> %r
}

define <2 x float> @test_copysign_extended(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: test_copysign_extended:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andw $r0 = $r0, 0x7fff7fff
; CHECK-NEXT:    andw $r1 = $r1, 0x80008000
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    orw $r0 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fwidenlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %r = call <2 x half> @llvm.copysign.v2f16(<2 x half> %a, <2 x half> %b)
  %xr = fpext <2 x half> %r to <2 x float>
  ret <2 x float> %xr
}

define <2 x half> @test_floor(<2 x half> %a) #0 {
; CHECK-LABEL: test_floor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call floorf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.floor.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_ceil(<2 x half> %a) #0 {
; CHECK-LABEL: test_ceil:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call ceilf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.ceil.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_trunc(<2 x half> %a) #0 {
; CHECK-LABEL: test_trunc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call truncf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.trunc.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_rint(<2 x half> %a) #0 {
; CHECK-LABEL: test_rint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call rintf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.rint.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_nearbyint(<2 x half> %a) #0 {
; CHECK-LABEL: test_nearbyint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call nearbyintf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.nearbyint.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_round(<2 x half> %a) #0 {
; CHECK-LABEL: test_round:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    fwidenmhw $r0 = $r18
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    fwidenlhw $r1 = $r18
; CHECK-NEXT:    fnarrowwh $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    call roundf
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fnarrowwh $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r18, 31, 16
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <2 x half> @llvm.round.v2f16(<2 x half> %a)
  ret <2 x half> %r
}

define <2 x half> @test_fmuladd(<2 x half> %a, <2 x half> %b, <2 x half> %c) #0 {
; CHECK-LABEL: test_fmuladd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r0 = $r2
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    zxwd $r3 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ffmahq $r0 = $r3, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %r = call <2 x half> @llvm.fmuladd.v2f16(<2 x half> %a, <2 x half> %b, <2 x half> %c)
  ret <2 x half> %r
}

define <2 x half> @test_shufflevector(<2 x half> %a) #0 {
; CHECK-LABEL: test_shufflevector:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x2010804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %s = shufflevector <2 x half> %a, <2 x half> undef, <2 x i32> <i32 1, i32 0>
  ret <2 x half> %s
}

define <2 x half> @test_insertelement0(<2 x half> %a, half %x) #0 {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %i = insertelement <2 x half> %a, half %x, i64 0
  ret <2 x half> %i
}

define <2 x half> @test_insertelement1(<2 x half> %a, half %x) #0 {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %i = insertelement <2 x half> %a, half %x, i64 1
  ret <2 x half> %i
}

define <2 x half> @test_insertelement(<2 x half> %a, half %x, i64 %p) #0 {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    copyd $r3 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r3 = $r1, 15, 0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cmoved.even $r2 ? $r0 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %i = insertelement <2 x half> %a, half %x, i64 %p
  ret <2 x half> %i
}

define <2 x half> @shuffle_v2half_0_0(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_0_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r0, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 0, i32 0>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_0_1(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_0_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 0, i32 1>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_0_2(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_0_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 0, i32 2>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_0_3(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_0_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r1 = $r1, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 0, i32 3>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_1_0(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_1_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x2010804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 1, i32 0>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_1_1(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_1_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x8040804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 1, i32 1>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_1_2(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_1_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 1, i32 2>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_1_3(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_1_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, 16
; CHECK-NEXT:    srlw $r1 = $r1, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 1, i32 3>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_2_0(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_2_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 2, i32 0>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_2_1(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_2_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 2, i32 1>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_2_2(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_2_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r0, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 2, i32 2>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_2_3(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_2_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 2, i32 3>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_3_0(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_3_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r1 = $r1, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 3, i32 0>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_3_1(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_3_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r1, 16
; CHECK-NEXT:    srlw $r2 = $r0, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 3, i32 1>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_3_2(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_3_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r1, 0x2010804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 3, i32 2>
  ret <2 x half> %2
}

define <2 x half> @shuffle_v2half_3_3(<2 x half> %0, <2 x half> %1) #0 {
; CHECK-LABEL: shuffle_v2half_3_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r1, 0x8040804
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %2 = shufflevector <2 x half> %0, <2 x half> %1, <2 x i32> <i32 3, i32 3>
  ret <2 x half> %2
}

define <2 x i16> @fcmp_setoeq(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setoeq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp oeq <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setoeq_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setoeq_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp oeq <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setogt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setogt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ogt <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setogt_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setogt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ogt <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setoge(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setoge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp oge <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setoge_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setoge_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp oge <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setolt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setolt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp olt <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setolt_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setolt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp olt <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setole(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setole:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ole <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setole_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setole_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ole <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setone(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setone:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp one <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setone_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setone_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp one <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setord(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setord:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.olt $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    orw $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp ord <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setord_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setord_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ord <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setuno(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setuno:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.ult $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp uno <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setuno_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setuno_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp uno <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setueq(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setueq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.ueq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ueq <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setueq_single(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setueq_single:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setueq_single:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ueq <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setugt(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setugt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.ult $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ugt <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setugt_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setugt_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ugt <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setuge(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setuge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp uge <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setuge_single(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setuge_single:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setuge_single:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp uge <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setult(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setult:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.ult $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ult <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setult_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setult_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ult <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setule(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setule:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.uge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ule <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setule_single(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setule_single:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setule_single:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp ule <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setune(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setune:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp une <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setune_single(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setune_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp une <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setoeq_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setoeq_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast oeq <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setoeq_single_fast(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setoeq_single_fast:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setoeq_single_fast:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast oeq <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setogt_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setogt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ogt <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setogt_single_fast(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setogt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ogt <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setoge_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setoge_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast oge <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setoge_single_fast(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setoge_single_fast:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setoge_single_fast:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast oge <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setolt_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setolt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast olt <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setolt_single_fast(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setolt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast olt <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setole_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setole_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ole <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setole_single_fast(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setole_single_fast:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setole_single_fast:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ole <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setone_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setone_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast one <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setone_single_fast(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setone_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast one <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setord_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setord_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.olt $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    orw $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast ord <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setord_single_fast(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setord_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ord <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setuno_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setuno_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.uge $r0 = $r0, $r1
; CHECK-NEXT:    fcompnhq.ult $r2 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    andw $r0 = $r0, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = fcmp fast uno <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setuno_single_fast(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setuno_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast uno <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setueq_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setueq_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ueq <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setueq_single_fast(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setueq_single_fast:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setueq_single_fast:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ueq <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setugt_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setugt_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ugt <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setugt_single_fast(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setugt_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ugt <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setuge_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setuge_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast uge <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setuge_single_fast(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setuge_single_fast:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setuge_single_fast:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast uge <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setult_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setult_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ult <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setult_single_fast(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setult_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ult <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setule_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setule_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ule <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setule_single_fast(<2 x half> %a) #0 {
; KV3_1-LABEL: fcmp_setule_single_fast:
; KV3_1:       # %bb.0: # %entry
; KV3_1-NEXT:    make $r0 = 0x10001
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;; # (end cycle 0)
;
; KV3_2-LABEL: fcmp_setule_single_fast:
; KV3_2:       # %bb.0: # %entry
; KV3_2-NEXT:    make $r0 = -1
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast ule <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setune_fast(<2 x half> %a, <2 x half> %b) #0 {
; CHECK-LABEL: fcmp_setune_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast une <2 x half> %a, %b
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define <2 x i16> @fcmp_setune_single_fast(<2 x half> %a) #0 {
; CHECK-LABEL: fcmp_setune_single_fast:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %0 = fcmp fast une <2 x half> %a, %a
  %1 = sext <2 x i1> %0 to <2 x i16>
  ret <2 x i16> %1
}

define float @fwidenmhw(<2 x half> %v) #0 {
; CHECK-LABEL: fwidenmhw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenmhw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %vecext = extractelement <2 x half> %v, i32 1
  %conv = fpext half %vecext to float
  ret float %conv
}

define <2 x half> @subvect_2(<4 x half> %0) {
; CHECK-LABEL: subvect_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r0 = $r0, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = shufflevector <4 x half> %0, <4 x half> undef, <2 x i32> <i32 2, i32 3>
  ret <2 x half> %2
}

define <2 x half> @subvect_0(<4 x half> %0) {
; CHECK-LABEL: subvect_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x half> %0, <4 x half> undef, <2 x i32> <i32 0, i32 1>
  ret <2 x half> %2
}

; TODO: compw.eq is not required, should invert the fcomp CC and use cmovew.weqz
define <2 x half> @test_select_cmp(<2 x half> %a, <2 x half> %b, <2 x half> %c, <2 x half> %d) #0 {
; CHECK-LABEL: test_select_cmp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcompnhq.une $r2 = $r2, $r3
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    compw.eq $r2 = $r2, -1
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    cmoved.even $r2 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %cc = fcmp une <2 x half> %c, %d
  %bc = bitcast <2 x i1> %cc to i2
  %cmp = icmp eq i2 %bc, -1
  %r = select i1 %cmp, <2 x half> %a, <2 x half> %b
  ret <2 x half> %r
}

attributes #0 = { nounwind }
