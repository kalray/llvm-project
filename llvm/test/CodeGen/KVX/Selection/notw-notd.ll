; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @f_i32(i32 %x){
; CHECK-LABEL: f_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    notw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %neg = xor i32 %x, -1
  ret i32 %neg
}

define i64 @f_i64(i64 %x){
; CHECK-LABEL: f_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    notd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %neg = xor i64 %x, -1
  ret i64 %neg
}

define <2 x i32> @f_v2i32_imp(<2 x i32> %x){
; CHECK-LABEL: f_v2i32_imp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    notd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %neg = xor <2 x i32> %x, <i32 -1, i32 -1>
  ret <2 x i32> %neg
}

define <2 x i32> @f_v2i32_exp(<2 x i32> %x){
; CHECK-LABEL: f_v2i32_exp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    notd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %xor = xor <2 x i32> %x, <i32 -1, i32 -1>
  ret <2 x i32> %xor
}

define <2 x i16> @f_v2i16_imp(<2 x i16> %x){
; CHECK-LABEL: f_v2i16_imp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    notw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %neg = xor <2 x i16> %x, <i16 -1, i16 -1>
  ret <2 x i16> %neg
}

define <2 x i16> @f_v2i16_exp(<2 x i16> %x){
; CHECK-LABEL: f_v2i16_exp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    notw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %xor = xor <2 x i16> %x, <i16 -1, i16 -1>
  ret <2 x i16> %xor
}

define <4 x i16> @f_v4i16_imp(<4 x i16> %x){
; CHECK-LABEL: f_v4i16_imp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    notd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %neg = xor <4 x i16> %x, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %neg
}

define <4 x i16> @f_v4i16_exp(<4 x i16> %x){
; CHECK-LABEL: f_v4i16_exp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    notd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %xor = xor <4 x i16> %x, <i16 -1, i16 -1, i16 -1, i16 -1>
  ret <4 x i16> %xor
}

