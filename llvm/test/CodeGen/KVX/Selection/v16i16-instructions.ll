; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck --check-prefixes=ALL,V1 %s
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck --check-prefixes=ALL,V2 %s
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <16 x i16> @test_div(<16 x i16> %a, <16 x i16> %b) #0 {
; ALL-LABEL: test_div:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __divv16hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sdiv <16 x i16> %a, %b
  ret <16 x i16> %r
}

define <16 x i16> @test_rem(<16 x i16> %a, <16 x i16> %b) #0 {
; ALL-LABEL: test_rem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __modv16hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = srem <16 x i16> %a, %b
  ret <16 x i16> %r
}

define <16 x i16> @test_div_4(<16 x i16> %a, <16 x i16> %b) #0 {
; V1-LABEL: test_div_4:
; V1:       # %bb.0:
; V1-NEXT:    srahqs $r4 = $r0, 15
; V1-NEXT:    srahqs $r5 = $r1, 15
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    srlhqs $r4 = $r4, 14
; V1-NEXT:    srlhqs $r5 = $r5, 14
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    addhq $r0 = $r0, $r4
; V1-NEXT:    addhq $r1 = $r1, $r5
; V1-NEXT:    srahqs $r6 = $r2, 15
; V1-NEXT:    srahqs $r7 = $r3, 15
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    srlhqs $r4 = $r6, 14
; V1-NEXT:    srlhqs $r5 = $r7, 14
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    srahqs $r0 = $r0, 2
; V1-NEXT:    srahqs $r1 = $r1, 2
; V1-NEXT:    addhq $r2 = $r2, $r4
; V1-NEXT:    addhq $r3 = $r3, $r5
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    srahqs $r2 = $r2, 2
; V1-NEXT:    srahqs $r3 = $r3, 2
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: test_div_4:
; V2:       # %bb.0:
; V2-NEXT:    srahqs $r4 = $r0, 15
; V2-NEXT:    srahqs $r5 = $r1, 15
; V2-NEXT:    srahqs $r6 = $r2, 15
; V2-NEXT:    srahqs $r7 = $r3, 15
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    srlhqs $r4 = $r4, 14
; V2-NEXT:    srlhqs $r5 = $r5, 14
; V2-NEXT:    srlhqs $r6 = $r6, 14
; V2-NEXT:    srlhqs $r7 = $r7, 14
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    addhq $r0 = $r0, $r4
; V2-NEXT:    addhq $r1 = $r1, $r5
; V2-NEXT:    addhq $r2 = $r2, $r6
; V2-NEXT:    addhq $r3 = $r3, $r7
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    srahqs $r0 = $r0, 2
; V2-NEXT:    srahqs $r1 = $r1, 2
; V2-NEXT:    srahqs $r2 = $r2, 2
; V2-NEXT:    srahqs $r3 = $r3, 2
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 3)
  %r = sdiv <16 x i16> %a, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  ret <16 x i16> %r
}

define <16 x i16> @test_div_32(<16 x i16> %a, <16 x i16> %b) #0 {
; V1-LABEL: test_div_32:
; V1:       # %bb.0:
; V1-NEXT:    srahqs $r4 = $r0, 15
; V1-NEXT:    srahqs $r5 = $r1, 15
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    srlhqs $r4 = $r4, 11
; V1-NEXT:    srlhqs $r5 = $r5, 11
; V1-NEXT:    ;; # (end cycle 1)
; V1-NEXT:    addhq $r0 = $r0, $r4
; V1-NEXT:    addhq $r1 = $r1, $r5
; V1-NEXT:    srahqs $r6 = $r2, 15
; V1-NEXT:    srahqs $r7 = $r3, 15
; V1-NEXT:    ;; # (end cycle 2)
; V1-NEXT:    srlhqs $r4 = $r6, 11
; V1-NEXT:    srlhqs $r5 = $r7, 11
; V1-NEXT:    ;; # (end cycle 3)
; V1-NEXT:    srahqs $r0 = $r0, 5
; V1-NEXT:    srahqs $r1 = $r1, 5
; V1-NEXT:    addhq $r2 = $r2, $r4
; V1-NEXT:    addhq $r3 = $r3, $r5
; V1-NEXT:    ;; # (end cycle 4)
; V1-NEXT:    srahqs $r2 = $r2, 5
; V1-NEXT:    srahqs $r3 = $r3, 5
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 5)
;
; V2-LABEL: test_div_32:
; V2:       # %bb.0:
; V2-NEXT:    srahqs $r4 = $r0, 15
; V2-NEXT:    srahqs $r5 = $r1, 15
; V2-NEXT:    srahqs $r6 = $r2, 15
; V2-NEXT:    srahqs $r7 = $r3, 15
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    srlhqs $r4 = $r4, 11
; V2-NEXT:    srlhqs $r5 = $r5, 11
; V2-NEXT:    srlhqs $r6 = $r6, 11
; V2-NEXT:    srlhqs $r7 = $r7, 11
; V2-NEXT:    ;; # (end cycle 1)
; V2-NEXT:    addhq $r0 = $r0, $r4
; V2-NEXT:    addhq $r1 = $r1, $r5
; V2-NEXT:    addhq $r2 = $r2, $r6
; V2-NEXT:    addhq $r3 = $r3, $r7
; V2-NEXT:    ;; # (end cycle 2)
; V2-NEXT:    srahqs $r0 = $r0, 5
; V2-NEXT:    srahqs $r1 = $r1, 5
; V2-NEXT:    srahqs $r2 = $r2, 5
; V2-NEXT:    srahqs $r3 = $r3, 5
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 3)
  %r = sdiv <16 x i16> %a, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  ret <16 x i16> %r
}

define <16 x i16> @sdiv(<16 x i16> %a, <16 x i16> %b) {
; ALL-LABEL: sdiv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __divv16hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = sdiv <16 x i16> %a, %b
  ret <16 x i16> %r
}

define <16 x i16> @sdiv_vs(<16 x i16> %a, i16 %b) {
; ALL-LABEL: sdiv_vs:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r4 = $r4, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r5 = $r4
; ALL-NEXT:    copyd $r6 = $r4
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r7 = $r4
; ALL-NEXT:    call __divv16hi3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <16 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <16 x i16> %v0, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = sdiv <16 x i16> %a, %splat
  ret <16 x i16> %div
}

define <16 x i16> @sdiv_sv(<16 x i16> %a, i16 %b) {
; ALL-LABEL: sdiv_sv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r6 = $r2
; ALL-NEXT:    copyd $r7 = $r3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sbmm8 $r0 = $r4, 0x2010201.@
; ALL-NEXT:    copyd $r5 = $r1
; ALL-NEXT:    copyd $r8 = $r0
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r3 = $r0
; ALL-NEXT:    copyd $r4 = $r8
; ALL-NEXT:    call __divv16hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <16 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <16 x i16> %v0, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = sdiv <16 x i16> %splat, %a
  ret <16 x i16> %div
}

define <16 x i16> @sdiv_ss(i16 %a, i16 %b) {
; ALL-LABEL: sdiv_ss:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    sbmm8 $r4 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r2 = $r1
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    copyd $r5 = $r4
; ALL-NEXT:    copyd $r6 = $r4
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r7 = $r4
; ALL-NEXT:    call __divv16hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %va = insertelement <16 x i16> undef, i16 %b, i32 0
  %vb = insertelement <16 x i16> undef, i16 %a, i32 0
  %splata = shufflevector <16 x i16> %va, <16 x i16> undef, <16 x i32> zeroinitializer
  %splatb = shufflevector <16 x i16> %vb, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = sdiv <16 x i16> %splata, %splatb
  ret <16 x i16> %div
}

define <16 x i16> @srem(<16 x i16> %a, <16 x i16> %b) {
; ALL-LABEL: srem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __modv16hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = srem <16 x i16> %a, %b
  ret <16 x i16> %r
}

define <16 x i16> @srem_vs(<16 x i16> %a, i16 %b) {
; ALL-LABEL: srem_vs:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r4 = $r4, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r5 = $r4
; ALL-NEXT:    copyd $r6 = $r4
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r7 = $r4
; ALL-NEXT:    call __modv16hi3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <16 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <16 x i16> %v0, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = srem <16 x i16> %a, %splat
  ret <16 x i16> %div
}

define <16 x i16> @srem_sv(<16 x i16> %a, i16 %b) {
; ALL-LABEL: srem_sv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r6 = $r2
; ALL-NEXT:    copyd $r7 = $r3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sbmm8 $r0 = $r4, 0x2010201.@
; ALL-NEXT:    copyd $r5 = $r1
; ALL-NEXT:    copyd $r8 = $r0
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r3 = $r0
; ALL-NEXT:    copyd $r4 = $r8
; ALL-NEXT:    call __modv16hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <16 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <16 x i16> %v0, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = srem <16 x i16> %splat, %a
  ret <16 x i16> %div
}

define <16 x i16> @srem_ss(i16 %a, i16 %b) {
; ALL-LABEL: srem_ss:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    sbmm8 $r4 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r2 = $r1
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    copyd $r5 = $r4
; ALL-NEXT:    copyd $r6 = $r4
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r7 = $r4
; ALL-NEXT:    call __modv16hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %va = insertelement <16 x i16> undef, i16 %b, i32 0
  %vb = insertelement <16 x i16> undef, i16 %a, i32 0
  %splata = shufflevector <16 x i16> %va, <16 x i16> undef, <16 x i32> zeroinitializer
  %splatb = shufflevector <16 x i16> %vb, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = srem <16 x i16> %splata, %splatb
  ret <16 x i16> %div
}

define <16 x i16> @udiv(<16 x i16> %a, <16 x i16> %b) {
; ALL-LABEL: udiv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __udivv16hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = udiv <16 x i16> %a, %b
  ret <16 x i16> %r
}

define <16 x i16> @udiv_vs(<16 x i16> %a, i16 %b) {
; ALL-LABEL: udiv_vs:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r4 = $r4, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r5 = $r4
; ALL-NEXT:    copyd $r6 = $r4
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r7 = $r4
; ALL-NEXT:    call __udivv16hi3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <16 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <16 x i16> %v0, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = udiv <16 x i16> %a, %splat
  ret <16 x i16> %div
}

define <16 x i16> @udiv_sv(<16 x i16> %a, i16 %b) {
; ALL-LABEL: udiv_sv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r6 = $r2
; ALL-NEXT:    copyd $r7 = $r3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sbmm8 $r0 = $r4, 0x2010201.@
; ALL-NEXT:    copyd $r5 = $r1
; ALL-NEXT:    copyd $r8 = $r0
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r3 = $r0
; ALL-NEXT:    copyd $r4 = $r8
; ALL-NEXT:    call __udivv16hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <16 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <16 x i16> %v0, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = udiv <16 x i16> %splat, %a
  ret <16 x i16> %div
}

define <16 x i16> @udiv_ss(i16 %a, i16 %b) {
; ALL-LABEL: udiv_ss:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    sbmm8 $r4 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r2 = $r1
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    copyd $r5 = $r4
; ALL-NEXT:    copyd $r6 = $r4
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r7 = $r4
; ALL-NEXT:    call __udivv16hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %va = insertelement <16 x i16> undef, i16 %b, i32 0
  %vb = insertelement <16 x i16> undef, i16 %a, i32 0
  %splata = shufflevector <16 x i16> %va, <16 x i16> undef, <16 x i32> zeroinitializer
  %splatb = shufflevector <16 x i16> %vb, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = udiv <16 x i16> %splata, %splatb
  ret <16 x i16> %div
}

define <16 x i16> @urem(<16 x i16> %a, <16 x i16> %b) {
; ALL-LABEL: urem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    call __umodv16hi3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = urem <16 x i16> %a, %b
  ret <16 x i16> %r
}

define <16 x i16> @urem_vs(<16 x i16> %a, i16 %b) {
; ALL-LABEL: urem_vs:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r4 = $r4, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r5 = $r4
; ALL-NEXT:    copyd $r6 = $r4
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r7 = $r4
; ALL-NEXT:    call __umodv16hi3
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <16 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <16 x i16> %v0, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = urem <16 x i16> %a, %splat
  ret <16 x i16> %div
}

define <16 x i16> @urem_sv(<16 x i16> %a, i16 %b) {
; ALL-LABEL: urem_sv:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r6 = $r2
; ALL-NEXT:    copyd $r7 = $r3
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sbmm8 $r0 = $r4, 0x2010201.@
; ALL-NEXT:    copyd $r5 = $r1
; ALL-NEXT:    copyd $r8 = $r0
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r1 = $r0
; ALL-NEXT:    copyd $r2 = $r0
; ALL-NEXT:    copyd $r3 = $r0
; ALL-NEXT:    copyd $r4 = $r8
; ALL-NEXT:    call __umodv16hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %v0 = insertelement <16 x i16> undef, i16 %b, i32 0
  %splat = shufflevector <16 x i16> %v0, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = urem <16 x i16> %splat, %a
  ret <16 x i16> %div
}

define <16 x i16> @urem_ss(i16 %a, i16 %b) {
; ALL-LABEL: urem_ss:
; ALL:       # %bb.0:
; ALL-NEXT:    sbmm8 $r1 = $r1, 0x2010201.@
; ALL-NEXT:    addd $r12 = $r12, -32
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 24[$r12] = $r16
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    sbmm8 $r4 = $r0, 0x2010201.@
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r2 = $r1
; ALL-NEXT:    copyd $r3 = $r1
; ALL-NEXT:    copyd $r5 = $r4
; ALL-NEXT:    copyd $r6 = $r4
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    copyd $r7 = $r4
; ALL-NEXT:    call __umodv16hi3
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    ld $r16 = 24[$r12]
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 32
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %va = insertelement <16 x i16> undef, i16 %b, i32 0
  %vb = insertelement <16 x i16> undef, i16 %a, i32 0
  %splata = shufflevector <16 x i16> %va, <16 x i16> undef, <16 x i32> zeroinitializer
  %splatb = shufflevector <16 x i16> %vb, <16 x i16> undef, <16 x i32> zeroinitializer
  %div = urem <16 x i16> %splata, %splatb
  ret <16 x i16> %div
}

define <16 x i16> @sdivrem(<16 x i16> %a, <16 x i16> %b) {
; ALL-LABEL: sdivrem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -96
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 88[$r12] = $r16
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sq 72[$r12] = $r24r25
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    so 40[$r12] = $r20r21r22r23
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    sq 24[$r12] = $r18r19
; ALL-NEXT:    copyd $r18 = $r7
; ALL-NEXT:    copyd $r19 = $r6
; ALL-NEXT:    copyd $r20 = $r5
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    copyd $r21 = $r4
; ALL-NEXT:    copyd $r22 = $r3
; ALL-NEXT:    copyd $r23 = $r2
; ALL-NEXT:    copyd $r24 = $r1
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    copyd $r25 = $r0
; ALL-NEXT:    call __divv16hi3
; ALL-NEXT:    ;; # (end cycle 6)
; ALL-NEXT:    msbfhq $r22 = $r3, $r18
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    lq $r18r19 = 24[$r12]
; ALL-NEXT:    msbfhq $r23 = $r2, $r19
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    addhq $r3 = $r3, $r22
; ALL-NEXT:    msbfhq $r24 = $r1, $r20
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    lo $r20r21r22r23 = 40[$r12]
; ALL-NEXT:    addhq $r2 = $r2, $r23
; ALL-NEXT:    msbfhq $r25 = $r0, $r21
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    addhq $r1 = $r1, $r24
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    lq $r24r25 = 72[$r12]
; ALL-NEXT:    addhq $r0 = $r0, $r25
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ld $r16 = 88[$r12]
; ALL-NEXT:    ;; # (end cycle 6)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 96
; ALL-NEXT:    ;; # (end cycle 11)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %q = sdiv <16 x i16> %a, %b
  %r = srem <16 x i16> %a, %b
  %res = add <16 x i16> %q, %r
  ret <16 x i16> %res
}

define <16 x i16> @udivrem(<16 x i16> %a, <16 x i16> %b) {
; ALL-LABEL: udivrem:
; ALL:       # %bb.0:
; ALL-NEXT:    addd $r12 = $r12, -96
; ALL-NEXT:    get $r16 = $ra
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    sd 88[$r12] = $r16
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    sq 72[$r12] = $r24r25
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    so 40[$r12] = $r20r21r22r23
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    sq 24[$r12] = $r18r19
; ALL-NEXT:    copyd $r18 = $r7
; ALL-NEXT:    copyd $r19 = $r6
; ALL-NEXT:    copyd $r20 = $r5
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    copyd $r21 = $r4
; ALL-NEXT:    copyd $r22 = $r3
; ALL-NEXT:    copyd $r23 = $r2
; ALL-NEXT:    copyd $r24 = $r1
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    copyd $r25 = $r0
; ALL-NEXT:    call __udivv16hi3
; ALL-NEXT:    ;; # (end cycle 6)
; ALL-NEXT:    msbfhq $r22 = $r3, $r18
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    lq $r18r19 = 24[$r12]
; ALL-NEXT:    msbfhq $r23 = $r2, $r19
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    addhq $r3 = $r3, $r22
; ALL-NEXT:    msbfhq $r24 = $r1, $r20
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    lo $r20r21r22r23 = 40[$r12]
; ALL-NEXT:    addhq $r2 = $r2, $r23
; ALL-NEXT:    msbfhq $r25 = $r0, $r21
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    addhq $r1 = $r1, $r24
; ALL-NEXT:    ;; # (end cycle 4)
; ALL-NEXT:    lq $r24r25 = 72[$r12]
; ALL-NEXT:    addhq $r0 = $r0, $r25
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    ld $r16 = 88[$r12]
; ALL-NEXT:    ;; # (end cycle 6)
; ALL-NEXT:    set $ra = $r16
; ALL-NEXT:    addd $r12 = $r12, 96
; ALL-NEXT:    ;; # (end cycle 11)
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %q = udiv <16 x i16> %a, %b
  %r = urem <16 x i16> %a, %b
  %res = add <16 x i16> %q, %r
  ret <16 x i16> %res
}

attributes #0 = { nounwind }
