; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i64 @ORNDrr(i64 %0, i64 %1) {
; CHECK-LABEL: ORNDrr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ornd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = xor i64 %0, -1
  %4 = or i64 %3, %1
  ret i64 %4
}

define i64 @ORNDri10(i64 %0) {
; CHECK-LABEL: ORNDri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ornd $r0 = $r0, -60
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = or i64 %0, -60
  %3 = xor i64 %2, 59
  ret i64 %3
}

define i64 @ORNDri37(i64 %0) {
; CHECK-LABEL: ORNDri37:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ornd $r0 = $r0, 0x1fffffffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = or i64 %0, 137438953471
  %3 = xor i64 %2, -137438953472
  ret i64 %3
}

define i64 @ORNDri64(i64 %0) {
; CHECK-LABEL: ORNDri64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ornd $r0 = $r0, 0x2000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = or i64 %0, 137438953472
  %3 = xor i64 %2, -137438953473
  ret i64 %3
}

define <2 x i32> @ORNDrr_v2i32(<2 x i32> %0, <2 x i32> %1) {
; CHECK-LABEL: ORNDrr_v2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ornd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = xor <2 x i32> %0, <i32 -1, i32 -1>
  %4 = or <2 x i32> %3, %1
  ret <2 x i32> %4
}

define <2 x i32> @ORNDri_v2i32(<2 x i32> %0) {
; CHECK-LABEL: ORNDri_v2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ornd $r0 = $r0, 0x4ffffffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = xor <2 x i32> %0, <i32 -5, i32 -5>
  %3 = or <2 x i32> %2, <i32 -1, i32 4>
  ret <2 x i32> %3
}

define <8 x i8> @ORNDrr_v8i8(<8 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: ORNDrr_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ornd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = xor <8 x i8> %0, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %4 = or <8 x i8> %3, %1
  ret <8 x i8> %4
}

define <8 x i8> @ORNDri_v8i8(<8 x i8> %0) {
; CHECK-LABEL: ORNDri_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ornd $r0 = $r0, 0x403020104030201
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = xor <8 x i8> %0, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %3 = or <8 x i8> %2, <i8 1, i8 2, i8 3, i8 4, i8 1, i8 2, i8 3, i8 4>
  ret <8 x i8> %3
}

define i64 @NOT_ORNDri10(i64 %0) {
; CHECK-LABEL: NOT_ORNDri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ord $r0 = $r0, -60
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    xord $r0 = $r0, 60
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %2 = or i64 %0, -60
  %3 = xor i64 %2, 60
  ret i64 %3
}
