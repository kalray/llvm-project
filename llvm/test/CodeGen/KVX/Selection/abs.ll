; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @absw(i32 %a){
; CHECK-LABEL: absw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    absw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = icmp slt i32 %a, 0
  %neg = sub nsw i32 0, %a
  %1 = select i1 %0, i32 %neg, i32 %a
  ret i32 %1
}

define i64 @absd(i64 %a){
; CHECK-LABEL: absd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    absd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = icmp slt i64 %a, 0
  %neg = sub nsw i64 0, %a
  %1 = select i1 %0, i64 %neg, i64 %a
  ret i64 %1
}

define <2 x i32> @abswp(<2 x i32> %a){
; CHECK-LABEL: abswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = icmp slt <2 x i32> %a, zeroinitializer
  %1 = sub nsw <2 x i32> zeroinitializer, %a
  %2 = select <2 x i1> %0, <2 x i32> %1, <2 x i32> %a
  ret <2 x i32> %2
}


define <4 x i16> @abshq(<4 x i16> %a){
; CHECK-LABEL: abshq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = icmp slt <4 x i16> %a, zeroinitializer
  %1 = sub <4 x i16> zeroinitializer, %a
  %2 = select <4 x i1> %0, <4 x i16> %1, <4 x i16> %a
  ret <4 x i16> %2
}

define <4 x i16> @abshq_2(<4 x i16> %a){
; CHECK-LABEL: abshq_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sub = sub <4 x i16> zeroinitializer, %a
  %cmp = icmp slt <4 x i16> %sub, %a
  %cond = select <4 x i1> %cmp, <4 x i16> %a, <4 x i16> %sub
  ret <4 x i16> %cond
}

define <2 x i16> @abshqv2(<2 x i16> %a){
; CHECK-LABEL: abshqv2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = icmp slt <2 x i16> %a, zeroinitializer
  %1 = sub <2 x i16> zeroinitializer, %a
  %2 = select <2 x i1> %0, <2 x i16> %1, <2 x i16> %a
  ret <2 x i16> %2
}

define <2 x i16> @abshqv2_2(<2 x i16> %a){
; CHECK-LABEL: abshqv2_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sub = sub <2 x i16> zeroinitializer, %a
  %cmp = icmp slt <2 x i16> %sub, %a
  %cond = select <2 x i1> %cmp, <2 x i16> %a, <2 x i16> %sub
  ret <2 x i16> %cond
}

define i32 @absw2(i32 %a) {
; CHECK-LABEL: absw2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    absw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sub = sub nsw i32 0, %a
  %cmp = icmp slt i32 %sub, %a
  %cond = select i1 %cmp, i32 %a, i32 %sub
  ret i32 %cond
}

define i64 @abs2(i64 %a) {
; CHECK-LABEL: abs2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    absd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sub = sub nsw i64 0, %a
  %cmp = icmp slt i64 %sub, %a
  %cond = select i1 %cmp, i64 %a, i64 %sub
  ret i64 %cond
}
