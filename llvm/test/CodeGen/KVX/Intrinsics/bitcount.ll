; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: clang -march=kv3-1 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @cbsw(i32 %0) {
; CHECK-LABEL: cbsw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i32 @llvm.ctpop.i32(i32 %0), !range !2
  ret i32 %2
}

declare i32 @llvm.ctpop.i32(i32) #1

define i32 @clzw(i32 %0) {
; CHECK-LABEL: clzw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i32 @llvm.ctlz.i32(i32 %0, i1 false), !range !2
  ret i32 %2
}

declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

define i32 @ctzw(i32 %0) {
; CHECK-LABEL: ctzw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i32 @llvm.cttz.i32(i32 %0, i1 false), !range !2
  ret i32 %2
}

declare i32 @llvm.cttz.i32(i32, i1 immarg) #1

define <2 x i32> @cbswp(<2 x i32> %0) {
; CHECK-LABEL: cbswp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <2 x i32> @llvm.ctpop.v2i32(<2 x i32> %0)
  ret <2 x i32> %2
}

declare <2 x i32> @llvm.ctpop.v2i32(<2 x i32>) #1

define <2 x i32> @clzwp(<2 x i32> %0) {
; CHECK-LABEL: clzwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <2 x i32> @llvm.ctlz.v2i32(<2 x i32> %0, i1 false)
  ret <2 x i32> %2
}

declare <2 x i32> @llvm.ctlz.v2i32(<2 x i32>, i1 immarg) #1

define <2 x i32> @ctzwp(<2 x i32> %0) {
; CHECK-LABEL: ctzwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <2 x i32> @llvm.cttz.v2i32(<2 x i32> %0, i1 false)
  ret <2 x i32> %2
}

declare <2 x i32> @llvm.cttz.v2i32(<2 x i32>, i1 immarg) #1

define <4 x i32> @cbswq(<4 x i32> %0) {
; CHECK-LABEL: cbswq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    cbswp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <4 x i32> @llvm.ctpop.v4i32(<4 x i32> %0)
  ret <4 x i32> %2
}

declare <4 x i32> @llvm.ctpop.v4i32(<4 x i32>) #1

define <4 x i32> @clzwq(<4 x i32> %0) {
; CHECK-LABEL: clzwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    clzwp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <4 x i32> @llvm.ctlz.v4i32(<4 x i32> %0, i1 false)
  ret <4 x i32> %2
}

declare <4 x i32> @llvm.ctlz.v4i32(<4 x i32>, i1 immarg) #1

define <4 x i32> @ctzwq(<4 x i32> %0) {
; CHECK-LABEL: ctzwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ctzwp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <4 x i32> @llvm.cttz.v4i32(<4 x i32> %0, i1 false)
  ret <4 x i32> %2
}

declare <4 x i32> @llvm.cttz.v4i32(<4 x i32>, i1 immarg) #1

define <8 x i32> @cbswo(<8 x i32> %0) {
; CHECK-LABEL: cbswo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    cbswp $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cbswp $r2 = $r2
; CHECK-NEXT:    cbswp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %2 = tail call <8 x i32> @llvm.ctpop.v8i32(<8 x i32> %0)
  ret <8 x i32> %2
}

declare <8 x i32> @llvm.ctpop.v8i32(<8 x i32>) #1

define <8 x i32> @clzwo(<8 x i32> %0) {
; CHECK-LABEL: clzwo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    clzwp $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    clzwp $r2 = $r2
; CHECK-NEXT:    clzwp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %2 = tail call <8 x i32> @llvm.ctlz.v8i32(<8 x i32> %0, i1 false)
  ret <8 x i32> %2
}

declare <8 x i32> @llvm.ctlz.v8i32(<8 x i32>, i1 immarg) #1

define <8 x i32> @ctzwo(<8 x i32> %0) {
; CHECK-LABEL: ctzwo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ctzwp $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ctzwp $r2 = $r2
; CHECK-NEXT:    ctzwp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %2 = tail call <8 x i32> @llvm.cttz.v8i32(<8 x i32> %0, i1 false)
  ret <8 x i32> %2
}

declare <8 x i32> @llvm.cttz.v8i32(<8 x i32>, i1 immarg) #1

define i64 @cbsd(i64 %0) {
; CHECK-LABEL: cbsd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i64 @llvm.ctpop.i64(i64 %0), !range !3
  ret i64 %2
}

declare i64 @llvm.ctpop.i64(i64) #1

define i64 @clzd(i64 %0) {
; CHECK-LABEL: clzd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i64 @llvm.ctlz.i64(i64 %0, i1 false), !range !3
  ret i64 %2
}

declare i64 @llvm.ctlz.i64(i64, i1 immarg) #1

define i64 @ctzd(i64 %0) {
; CHECK-LABEL: ctzd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i64 @llvm.cttz.i64(i64 %0, i1 false), !range !3
  ret i64 %2
}

declare i64 @llvm.cttz.i64(i64, i1 immarg) #1

define <2 x i64> @cbsdp(<2 x i64> %0) {
; CHECK-LABEL: cbsdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    cbsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <2 x i64> @llvm.ctpop.v2i64(<2 x i64> %0)
  ret <2 x i64> %2
}

declare <2 x i64> @llvm.ctpop.v2i64(<2 x i64>) #1

define <2 x i64> @clzdp(<2 x i64> %0) {
; CHECK-LABEL: clzdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <2 x i64> @llvm.ctlz.v2i64(<2 x i64> %0, i1 false)
  ret <2 x i64> %2
}

declare <2 x i64> @llvm.ctlz.v2i64(<2 x i64>, i1 immarg) #1

define <2 x i64> @ctzdp(<2 x i64> %0) {
; CHECK-LABEL: ctzdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ctzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call <2 x i64> @llvm.cttz.v2i64(<2 x i64> %0, i1 false)
  ret <2 x i64> %2
}

declare <2 x i64> @llvm.cttz.v2i64(<2 x i64>, i1 immarg) #1

define <4 x i64> @cbsdq(<4 x i64> %0) {
; CHECK-LABEL: cbsdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    cbsd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cbsd $r2 = $r2
; CHECK-NEXT:    cbsd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %2 = tail call <4 x i64> @llvm.ctpop.v4i64(<4 x i64> %0)
  ret <4 x i64> %2
}

declare <4 x i64> @llvm.ctpop.v4i64(<4 x i64>) #1

define <4 x i64> @clzdq(<4 x i64> %0) {
; CHECK-LABEL: clzdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    clzd $r2 = $r2
; CHECK-NEXT:    clzd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %2 = tail call <4 x i64> @llvm.ctlz.v4i64(<4 x i64> %0, i1 false)
  ret <4 x i64> %2
}

declare <4 x i64> @llvm.ctlz.v4i64(<4 x i64>, i1 immarg) #1

define <4 x i64> @ctzdq(<4 x i64> %0) {
; CHECK-LABEL: ctzdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ctzd $r1 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ctzd $r2 = $r2
; CHECK-NEXT:    ctzd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %2 = tail call <4 x i64> @llvm.cttz.v4i64(<4 x i64> %0, i1 false)
  ret <4 x i64> %2
}

declare <4 x i64> @llvm.cttz.v4i64(<4 x i64>, i1 immarg) #1

!2 = !{i32 0, i32 33}
!3 = !{i64 0, i64 65}
