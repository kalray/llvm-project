; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,KVXV1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,KVXV2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @usub_sat32(i32 %a, i32 %b) {
; KVXV1-LABEL: usub_sat32:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxuw $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_sat32:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusw $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call i32 @llvm.usub.sat.i32(i32 %b, i32 %a)
  ret i32 %0
}

define i32 @usub_sat32_ri(i32 %a) {
; KVXV1-LABEL: usub_sat32_ri:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxuw $r1 = $r0, 0xcaca
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_sat32_ri:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusw $r0 = $r0, 0xcaca
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call i32 @llvm.usub.sat.i32(i32 51914, i32 %a)
  ret i32 %0
}

; TODO: This could be hq, but i16 is not legal.
define signext i16 @usub_sat16(i16 signext %a, i16 signext %b) {
; KVXV1-LABEL: usub_sat16:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    zxhd $r1 = $r1
; KVXV1-NEXT:    zxhd $r2 = $r0
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    maxuw $r1 = $r1, $r2
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r1
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    sxhd $r0 = $r0
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 3)
;
; KVXV2-LABEL: usub_sat16:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    zxhd $r0 = $r0
; KVXV2-NEXT:    zxhd $r1 = $r1
; KVXV2-NEXT:    ;; # (end cycle 0)
; KVXV2-NEXT:    sbfusw $r0 = $r0, $r1
; KVXV2-NEXT:    ;; # (end cycle 1)
; KVXV2-NEXT:    sxhd $r0 = $r0
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 2)
entry:
  %0 = tail call i16 @llvm.usub.sat.i16(i16 %b, i16 %a)
  ret i16 %0
}

; TODO: This could be bo, but i8 is not legal.
define signext i8 @usub_sat8(i8 signext %a, i8 signext %b) {
; KVXV1-LABEL: usub_sat8:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    zxbd $r1 = $r1
; KVXV1-NEXT:    zxbd $r2 = $r0
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    maxuw $r1 = $r1, $r2
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r1
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    sxbd $r0 = $r0
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 3)
;
; KVXV2-LABEL: usub_sat8:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    zxbd $r0 = $r0
; KVXV2-NEXT:    zxbd $r1 = $r1
; KVXV2-NEXT:    ;; # (end cycle 0)
; KVXV2-NEXT:    sbfusw $r0 = $r0, $r1
; KVXV2-NEXT:    ;; # (end cycle 1)
; KVXV2-NEXT:    sxbd $r0 = $r0
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 2)
entry:
  %0 = tail call i8 @llvm.usub.sat.i8(i8 %b, i8 %a)
  ret i8 %0
}

define signext i64 @usub_sat64(i64 signext %a, i64 signext %b) {
; KVXV1-LABEL: usub_sat64:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxud $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfd $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_sat64:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusd $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call i64 @llvm.usub.sat.i64(i64 %b, i64 %a)
  ret i64 %0
}

define signext i64 @usub_sat64_ri(i64 signext %a) {
; KVXV1-LABEL: usub_sat64_ri:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxud $r1 = $r0, -512
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfd $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_sat64_ri:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusd $r0 = $r0, -512
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call i64 @llvm.usub.sat.i64(i64 -512, i64 %a)
  ret i64 %0
}

define signext i64 @usub_sat64_ri37(i64 signext %a) {
; KVXV1-LABEL: usub_sat64_ri37:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxud $r1 = $r0, 0x1fffffffff
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfd $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_sat64_ri37:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    make $r1 = 0x1fffffffff
; KVXV2-NEXT:    ;; # (end cycle 0)
; KVXV2-NEXT:    sbfusd $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 1)
entry:
  %0 = tail call i64 @llvm.usub.sat.i64(i64 137438953471, i64 %a)
  ret i64 %0
}

define signext i64 @usub_sat64_ri64(i64 signext %a) {
; KVXV1-LABEL: usub_sat64_ri64:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxud $r1 = $r0, 0x7fffffffffffffff
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfd $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_sat64_ri64:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    make $r1 = 0x7fffffffffffffff
; KVXV2-NEXT:    ;; # (end cycle 0)
; KVXV2-NEXT:    sbfusd $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 1)
entry:
  %0 = tail call i64 @llvm.usub.sat.i64(i64 9223372036854775807, i64 %a)
  ret i64 %0
}

define signext i64 @usub_sat64_ri_at(i64 signext %a) {
; KVXV1-LABEL: usub_sat64_ri_at:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxud $r1 = $r0, 0x1beeeeef1beeeeef
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfd $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_sat64_ri_at:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusd.@ $r0 = $r0, 0x1beeeeef
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call i64 @llvm.usub.sat.i64(i64 2012808794214428399, i64 %a)
  ret i64 %0
}

define <2 x i32> @usub_satv2i32(<2 x i32> %a, <2 x i32> %b) {
; KVXV1-LABEL: usub_satv2i32:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxuwp $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfwp $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_satv2i32:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfuswp $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %b, <2 x i32> %a)
  ret <2 x i32> %0
}

define <2 x i32> @usub_satv2i32_ri_(<2 x i32> %a) {
; KVXV1-LABEL: usub_satv2i32_ri_:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    make $r1 = 15
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    maxuwp $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    sbfwp $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 2)
;
; KVXV2-LABEL: usub_satv2i32_ri_:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfuswp $r0 = $r0, 15
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> <i32 15, i32 0>, <2 x i32> %a)
  ret <2 x i32> %0
}

define <2 x i32> @usub_satv2i32_ri_at(<2 x i32> %a) {
; KVXV1-LABEL: usub_satv2i32_ri_at:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    make $r1 = 0xf0000000f
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    maxuwp $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    sbfwp $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 2)
;
; KVXV2-LABEL: usub_satv2i32_ri_at:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfuswp.@ $r0 = $r0, 15
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> <i32 15, i32 15>, <2 x i32> %a)
  ret <2 x i32> %0
}

define <2 x i32> @usub_satv2i32_rr(<2 x i32> %a) {
; KVXV1-LABEL: usub_satv2i32_rr:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    make $r1 = 0x1b58000002bc
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    maxuwp $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    sbfwp $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 2)
;
; KVXV2-LABEL: usub_satv2i32_rr:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    make $r1 = 0x1b58000002bc
; KVXV2-NEXT:    ;; # (end cycle 0)
; KVXV2-NEXT:    sbfuswp $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 1)
entry:
  %0 = tail call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> <i32 700, i32 7000>, <2 x i32> %a)
  ret <2 x i32> %0
}

define <2 x i16> @usub_satv2i16(<2 x i16> %a, <2 x i16> %b) {
; KVXV1-LABEL: usub_satv2i16:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxuhq $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfhq $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_satv2i16:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfushq $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %b, <2 x i16> %a)
  ret <2 x i16> %0
}

define <2 x i16> @usub_satv2i16_ri(<2 x i16> %a) {
; KVXV1-LABEL: usub_satv2i16_ri:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxuhq $r1 = $r0, 0x10001
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfhq $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_satv2i16_ri:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfushq $r0 = $r0, 0x10001
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> <i16 1, i16 1>, <2 x i16> %a)
  ret <2 x i16> %0
}

define <4 x i16> @usub_satv4i16(<4 x i16> %a, <4 x i16> %b) {
; KVXV1-LABEL: usub_satv4i16:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxuhq $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfhq $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_satv4i16:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfushq $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %b, <4 x i16> %a)
  ret <4 x i16> %0
}

define <4 x i16> @usub_satv4i16_ri_(<4 x i16> %a) {
; KVXV1-LABEL: usub_satv4i16_ri_:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxuhq $r1 = $r0, 0x9e8f618
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfhq $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_satv4i16_ri_:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfushq $r0 = $r0, 0x9e8f618
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> <i16 63000, i16 -63000, i16 0, i16 0>, <4 x i16> %a)
  ret <4 x i16> %0
}

define <4 x i16> @usub_satv4i16_ri_at(<4 x i16> %a) {
; KVXV1-LABEL: usub_satv4i16_ri_at:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    maxuhq.@ $r1 = $r0, 0x9e8f618
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfhq $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 1)
;
; KVXV2-LABEL: usub_satv4i16_ri_at:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfushq.@ $r0 = $r0, 0x9e8f618
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> <i16 63000, i16 -63000, i16 63000, i16 -63000>, <4 x i16> %a)
  ret <4 x i16> %0
}

define <4 x i32> @usub_satv4i32(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: usub_satv4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuwp $r2 = $r2, $r0
; CHECK-NEXT:    maxuwp $r3 = $r3, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sbfwp $r0 = $r0, $r2
; CHECK-NEXT:    sbfwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %0 = tail call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %b, <4 x i32> %a)
  ret <4 x i32> %0
}

define i32 @usub_sat32_ext16(i32 %a, i16 %b) {
; KVXV1-LABEL: usub_sat32_ext16:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    sxhd $r1 = $r1
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    maxuw $r1 = $r1, $r0
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 2)
;
; KVXV2-LABEL: usub_sat32_ext16:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sxhd $r1 = $r1
; KVXV2-NEXT:    ;; # (end cycle 0)
; KVXV2-NEXT:    sbfusw $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 1)
entry:
  %0 = sext i16 %b to i32
  %1 = tail call i32 @llvm.usub.sat.i32(i32 %0, i32 %a)
  ret i32 %1
}

define <2 x i8> @usub_satv2i8(<2 x i8> %a, <2 x i8> %b) {
; KVXV1-LABEL: usub_satv2i8:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    zxbd $r0 = $r0
; KVXV1-NEXT:    zxbd $r1 = $r1
; KVXV1-NEXT:    extfz $r2 = $r0, 15, 8
; KVXV1-NEXT:    extfz $r3 = $r1, 15, 8
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    zxbd $r0 = $r0
; KVXV1-NEXT:    zxbd $r1 = $r1
; KVXV1-NEXT:    zxbd $r2 = $r2
; KVXV1-NEXT:    zxbd $r3 = $r3
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    maxuw $r1 = $r1, $r0
; KVXV1-NEXT:    maxuw $r3 = $r3, $r2
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r1
; KVXV1-NEXT:    sbfw $r2 = $r2, $r3
; KVXV1-NEXT:    ;; # (end cycle 3)
; KVXV1-NEXT:    insf $r0 = $r2, 15, 8
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 4)
;
; KVXV2-LABEL: usub_satv2i8:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusbo $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %b, <2 x i8> %a)
  ret <2 x i8> %0
}

define <2 x i8> @usub_satv2i8_ri(<2 x i8> %a) {
; KVXV1-LABEL: usub_satv2i8_ri:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    zxbd $r0 = $r0
; KVXV1-NEXT:    extfz $r1 = $r0, 15, 8
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    zxbd $r0 = $r0
; KVXV1-NEXT:    zxbd $r1 = $r1
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    maxuw $r2 = $r1, 1
; KVXV1-NEXT:    maxuw $r3 = $r0, 1
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r3
; KVXV1-NEXT:    sbfw $r1 = $r1, $r2
; KVXV1-NEXT:    ;; # (end cycle 3)
; KVXV1-NEXT:    insf $r0 = $r1, 15, 8
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 4)
;
; KVXV2-LABEL: usub_satv2i8_ri:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusbo $r0 = $r0, 257
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> <i8 1, i8 1>, <2 x i8> %a)
  ret <2 x i8> %0
}

define <4 x i8> @usub_satv4i8(<4 x i8> %a, <4 x i8> %b) {
; KVXV1-LABEL: usub_satv4i8:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    srlw $r2 = $r0, 24
; KVXV1-NEXT:    srlw $r3 = $r1, 24
; KVXV1-NEXT:    extfz $r4 = $r0, 23, 16
; KVXV1-NEXT:    extfz $r5 = $r1, 23, 16
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    zxbd $r0 = $r0
; KVXV1-NEXT:    zxbd $r1 = $r1
; KVXV1-NEXT:    extfz $r6 = $r0, 15, 8
; KVXV1-NEXT:    extfz $r7 = $r1, 15, 8
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    zxbd $r2 = $r2
; KVXV1-NEXT:    zxbd $r3 = $r3
; KVXV1-NEXT:    zxbd $r4 = $r4
; KVXV1-NEXT:    zxbd $r5 = $r5
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    zxbd $r0 = $r0
; KVXV1-NEXT:    zxbd $r1 = $r1
; KVXV1-NEXT:    zxbd $r6 = $r6
; KVXV1-NEXT:    zxbd $r7 = $r7
; KVXV1-NEXT:    ;; # (end cycle 3)
; KVXV1-NEXT:    maxuw $r1 = $r1, $r0
; KVXV1-NEXT:    maxuw $r3 = $r3, $r2
; KVXV1-NEXT:    maxuw $r5 = $r5, $r4
; KVXV1-NEXT:    maxuw $r7 = $r7, $r6
; KVXV1-NEXT:    ;; # (end cycle 4)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r1
; KVXV1-NEXT:    sbfw $r2 = $r2, $r3
; KVXV1-NEXT:    sbfw $r3 = $r4, $r5
; KVXV1-NEXT:    sbfw $r4 = $r6, $r7
; KVXV1-NEXT:    ;; # (end cycle 5)
; KVXV1-NEXT:    insf $r0 = $r4, 15, 8
; KVXV1-NEXT:    insf $r3 = $r2, 15, 8
; KVXV1-NEXT:    ;; # (end cycle 6)
; KVXV1-NEXT:    insf $r0 = $r3, 31, 16
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 7)
;
; KVXV2-LABEL: usub_satv4i8:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusbo $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %b, <4 x i8> %a)
  ret <4 x i8> %0
}

define <4 x i8> @usub_satv4i8_ri(<4 x i8> %a) {
; KVXV1-LABEL: usub_satv4i8_ri:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    zxbd $r0 = $r0
; KVXV1-NEXT:    extfz $r1 = $r0, 23, 16
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    zxbd $r0 = $r0
; KVXV1-NEXT:    zxbd $r1 = $r1
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    maxuw $r2 = $r1, 129
; KVXV1-NEXT:    maxuw $r3 = $r0, 127
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    sbfw $r0 = $r0, $r3
; KVXV1-NEXT:    sbfw $r1 = $r1, $r2
; KVXV1-NEXT:    make $r2 = 0
; KVXV1-NEXT:    ;; # (end cycle 3)
; KVXV1-NEXT:    insf $r0 = $r2, 15, 8
; KVXV1-NEXT:    insf $r1 = $r2, 15, 8
; KVXV1-NEXT:    ;; # (end cycle 4)
; KVXV1-NEXT:    insf $r0 = $r1, 31, 16
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 5)
;
; KVXV2-LABEL: usub_satv4i8_ri:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusbo $r0 = $r0, 0x81007f
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> <i8 127, i8 0, i8 -127, i8 0>, <4 x i8> %a)
  ret <4 x i8> %0
}

define <8 x i8> @usub_satv8i8(<8 x i8> %a, <8 x i8> %b) {
; KVXV1-LABEL: usub_satv8i8:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    sllhqs $r0 = $r0, 8
; KVXV1-NEXT:    sllhqs $r1 = $r1, 8
; KVXV1-NEXT:    andd.@ $r2 = $r1, 0xff00ff00
; KVXV1-NEXT:    andd.@ $r3 = $r0, 0xff00ff00
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sbfhq $r0 = $r0, $r1
; KVXV1-NEXT:    sbfhq $r3 = $r3, $r2
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    compnhq.leu $r1 = $r0, $r1
; KVXV1-NEXT:    compnhq.leu $r2 = $r3, $r2
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    andd $r0 = $r1, $r0
; KVXV1-NEXT:    andd $r2 = $r2, $r3
; KVXV1-NEXT:    ;; # (end cycle 3)
; KVXV1-NEXT:    srlhqs $r0 = $r0, 8
; KVXV1-NEXT:    andd.@ $r1 = $r2, 0xff00ff00
; KVXV1-NEXT:    ;; # (end cycle 4)
; KVXV1-NEXT:    ord $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 5)
;
; KVXV2-LABEL: usub_satv8i8:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusbo $r0 = $r0, $r1
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %b, <8 x i8> %a)
  ret <8 x i8> %0
}

define <8 x i8> @usub_satv8i8_ri_(<8 x i8> %a) {
; KVXV1-LABEL: usub_satv8i8_ri_:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    sllhqs $r0 = $r0, 8
; KVXV1-NEXT:    make $r1 = 0x81007f
; KVXV1-NEXT:    andd.@ $r3 = $r0, 0xff00ff00
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sllhqs $r1 = $r1, 8
; KVXV1-NEXT:    andd.@ $r2 = $r1, 0xff00ff00
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    sbfhq $r0 = $r0, $r1
; KVXV1-NEXT:    sbfhq $r3 = $r3, $r2
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    compnhq.leu $r1 = $r0, $r1
; KVXV1-NEXT:    compnhq.leu $r2 = $r3, $r2
; KVXV1-NEXT:    ;; # (end cycle 3)
; KVXV1-NEXT:    andd $r0 = $r1, $r0
; KVXV1-NEXT:    andd $r2 = $r2, $r3
; KVXV1-NEXT:    ;; # (end cycle 4)
; KVXV1-NEXT:    srlhqs $r0 = $r0, 8
; KVXV1-NEXT:    andd.@ $r1 = $r2, 0xff00ff00
; KVXV1-NEXT:    ;; # (end cycle 5)
; KVXV1-NEXT:    ord $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 6)
;
; KVXV2-LABEL: usub_satv8i8_ri_:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusbo $r0 = $r0, 0x81007f
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> <i8 127, i8 0, i8 -127, i8 0, i8 0, i8 0, i8 0, i8 0>, <8 x i8> %a)
  ret <8 x i8> %0
}

define <8 x i8> @usub_satv8i8_ri_at(<8 x i8> %a) {
; KVXV1-LABEL: usub_satv8i8_ri_at:
; KVXV1:       # %bb.0: # %entry
; KVXV1-NEXT:    sllhqs $r0 = $r0, 8
; KVXV1-NEXT:    make $r1 = 0x81007f0081007f
; KVXV1-NEXT:    andd.@ $r3 = $r0, 0xff00ff00
; KVXV1-NEXT:    ;; # (end cycle 0)
; KVXV1-NEXT:    sllhqs $r1 = $r1, 8
; KVXV1-NEXT:    andd.@ $r2 = $r1, 0xff00ff00
; KVXV1-NEXT:    ;; # (end cycle 1)
; KVXV1-NEXT:    sbfhq $r0 = $r0, $r1
; KVXV1-NEXT:    sbfhq $r3 = $r3, $r2
; KVXV1-NEXT:    ;; # (end cycle 2)
; KVXV1-NEXT:    compnhq.leu $r1 = $r0, $r1
; KVXV1-NEXT:    compnhq.leu $r2 = $r3, $r2
; KVXV1-NEXT:    ;; # (end cycle 3)
; KVXV1-NEXT:    andd $r0 = $r1, $r0
; KVXV1-NEXT:    andd $r2 = $r2, $r3
; KVXV1-NEXT:    ;; # (end cycle 4)
; KVXV1-NEXT:    srlhqs $r0 = $r0, 8
; KVXV1-NEXT:    andd.@ $r1 = $r2, 0xff00ff00
; KVXV1-NEXT:    ;; # (end cycle 5)
; KVXV1-NEXT:    ord $r0 = $r0, $r1
; KVXV1-NEXT:    ret
; KVXV1-NEXT:    ;; # (end cycle 6)
;
; KVXV2-LABEL: usub_satv8i8_ri_at:
; KVXV2:       # %bb.0: # %entry
; KVXV2-NEXT:    sbfusbo.@ $r0 = $r0, 0x81007f
; KVXV2-NEXT:    ret
; KVXV2-NEXT:    ;; # (end cycle 0)
entry:
  %0 = tail call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> <i8 127, i8 0, i8 -127, i8 0, i8 127, i8 0, i8 -127, i8 0>, <8 x i8> %a)
  ret <8 x i8> %0
}

declare void @use64(i64)
declare i32 @llvm.usub.sat.i32(i32, i32)
declare i16 @llvm.usub.sat.i16(i16, i16)
declare i8 @llvm.usub.sat.i8(i8, i8)
declare i64 @llvm.usub.sat.i64(i64, i64)
declare <4 x i32> @llvm.usub.sat.v4i32(<4 x i32>, <4 x i32>)
declare <4 x i16> @llvm.usub.sat.v4i16(<4 x i16>, <4 x i16>)
declare <2 x i16> @llvm.usub.sat.v2i16(<2 x i16>, <2 x i16>)
declare <2 x i32> @llvm.usub.sat.v2i32(<2 x i32>, <2 x i32>)
declare <2 x i8>  @llvm.usub.sat.v2i8(<2 x i8>, <2 x i8>)
declare <4 x i8>  @llvm.usub.sat.v4i8(<4 x i8>, <4 x i8>)
declare <8 x i8>  @llvm.usub.sat.v8i8(<8 x i8>, <8 x i8>)
