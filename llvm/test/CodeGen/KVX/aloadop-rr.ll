; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
; ref: T13217
target triple = "kvx-kalray-cos"

@b = common global i32* null, align 8
@a = common global i64 0, align 8
@c = common global i64* null, align 8

define void @foo32() {
; CHECK-LABEL: foo32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = b
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    make $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r1 = $r1, 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_1: # %entry
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz.u $r5 = $r1[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r4 = $r2, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapw $r1[$r0] = $r4r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r4 ? .LBB0_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2: # %entry
; CHECK-NEXT:    copyw $r0 = $r5
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32*, i32** @b, align 8
  %1 = load i64, i64* @a, align 8
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %1
  %2 = atomicrmw or i32* %arrayidx, i32 0 seq_cst
  ret void
}

define void @foo64() {
; CHECK-LABEL: foo64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = c
; CHECK-NEXT:    make $r1 = a
; CHECK-NEXT:    make $r2 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r1 = $r1, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB1_1: # %entry
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ld.u $r5 = $r1[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r4 = $r2, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapd $r1[$r0] = $r4r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r4 ? .LBB1_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2: # %entry
; CHECK-NEXT:    copyd $r0 = $r5
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i64*, i64** @c, align 8
  %1 = load i64, i64* @a, align 8
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 %1
  %2 = atomicrmw or i64* %arrayidx, i64 0 seq_cst
  ret void
}
