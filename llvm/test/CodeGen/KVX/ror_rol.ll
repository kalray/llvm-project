; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define i32 @rol_i32_ri(i32 %in) {
; CHECK-LABEL: rol_i32_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    rolw $r0 = $r0, 9
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
    %left = shl i32 %in, 9
    %right = lshr i32 %in, 23
    %val5 = or i32 %left, %right
    ret i32 %val5
}

; ror and rol are semantically the same thing.
; For the immediates, llvm decides to use rol
define i32 @ror_i32_ri(i32 %in) {
; CHECK-LABEL: ror_i32_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    rolw $r0 = $r0, 23
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
    %left = lshr i32 %in, 9
    %right = shl i32 %in, 23
    %val5 = or i32 %right, %left
    ret i32 %val5
}

define i32 @ror_i32_rr(i32 %in, i32 %r) {
; CHECK-LABEL: ror_i32_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    rorw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
    %l  = sub i32 32, %r
    %left = shl i32 %in, %l
    %right = lshr i32 %in, %r
    %ror = or i32 %left, %right
    ret i32 %ror
}

define i32 @rol_i32_rr(i32 %in, i32 %l) {
; CHECK-LABEL: rol_i32_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    rolw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
    %r  = sub i32 32, %l
    %left = shl i32 %in, %l
    %right = lshr i32 %in, %r
    %rol = or i32 %left, %right
    ret i32 %rol
}

declare <2 x i32> @llvm.fshl.v2i32(<2 x i32>, <2 x i32>, <2 x i32>)
define <2 x i32> @test_fshl_v2i32(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: test_fshl_v2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r2 = $r1, 36, 32
; CHECK-NEXT:    rolw $r1 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    rolwps $r0 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = tail call <2 x i32> @llvm.fshl.v2i32(<2 x i32> %a, <2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %or
}


declare <2 x i16> @llvm.fshl.v2i16(<2 x i16>, <2 x i16>, <2 x i16>)
define <2 x i16> @test_fshl_v2i16(<2 x i16> %a, <2 x i16> %b) {
; CHECK-LABEL: test_fshl_v2i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r2 = $r1, 0xf000f
; CHECK-NEXT:    neghq $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r1 = $r1, 0xf000f
; CHECK-NEXT:    sllhqs $r3 = $r0, $r2
; CHECK-NEXT:    extfz $r2 = $r2, 19, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r4 = $r1, 19, 16
; CHECK-NEXT:    sllhqs $r2 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r1 = $r0, $r1
; CHECK-NEXT:    srlhqs $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 15, 0
; CHECK-NEXT:    insf $r0 = $r1, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r2, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = tail call <2 x i16> @llvm.fshl.v2i16(<2 x i16> %a, <2 x i16> %a, <2 x i16> %b)
  ret <2 x i16> %or
}

declare <3 x i16> @llvm.fshl.v3i16(<3 x i16>, <3 x i16>, <3 x i16>)
define <3 x i16> @test_fshl_v3i16(<3 x i16> %a, <3 x i16> %b) {
; CHECK-LABEL: test_fshl_v3i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r2 = $r1, 0xf000f000f000f
; CHECK-NEXT:    neghq $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r4 = $r2, 19, 16
; CHECK-NEXT:    sllhqs $r3 = $r0, $r2
; CHECK-NEXT:    andd $r1 = $r1, 0xf000f000f000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r4 = $r0, $r4
; CHECK-NEXT:    extfz $r5 = $r2, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r3, 15, 0
; CHECK-NEXT:    sllhqs $r3 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 31, 0
; CHECK-NEXT:    extfz $r4 = $r1, 19, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r5 = $r0, $r1
; CHECK-NEXT:    srlhqs $r4 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r5, 15, 0
; CHECK-NEXT:    extfz $r5 = $r1, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r2 = $r2, 51, 48
; CHECK-NEXT:    srlhqs $r5 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r1 = $r1, 51, 48
; CHECK-NEXT:    sllhqs $r2 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r4, 31, 0
; CHECK-NEXT:    srlhqs $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 47, 0
; CHECK-NEXT:    insf $r0 = $r5, 47, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r2, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = tail call <3 x i16> @llvm.fshl.v3i16(<3 x i16> %a, <3 x i16> %a, <3 x i16> %b)
  ret <3 x i16> %or
}

declare <4 x i16> @llvm.fshl.v4i16(<4 x i16>, <4 x i16>, <4 x i16>)
define <4 x i16> @test_fshl_v4i16(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: test_fshl_v4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r2 = $r1, 0xf000f000f000f
; CHECK-NEXT:    neghq $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r4 = $r2, 19, 16
; CHECK-NEXT:    sllhqs $r3 = $r0, $r2
; CHECK-NEXT:    andd $r1 = $r1, 0xf000f000f000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r4 = $r0, $r4
; CHECK-NEXT:    extfz $r5 = $r2, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r3, 15, 0
; CHECK-NEXT:    sllhqs $r3 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r3 = $r4, 31, 0
; CHECK-NEXT:    extfz $r4 = $r1, 19, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r5 = $r0, $r1
; CHECK-NEXT:    srlhqs $r4 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r5, 15, 0
; CHECK-NEXT:    extfz $r5 = $r1, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r2 = $r2, 51, 48
; CHECK-NEXT:    srlhqs $r5 = $r0, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r1 = $r1, 51, 48
; CHECK-NEXT:    sllhqs $r2 = $r0, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r4, 31, 0
; CHECK-NEXT:    srlhqs $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r3, 47, 0
; CHECK-NEXT:    insf $r0 = $r5, 47, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r0 = $r2, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = tail call <4 x i16> @llvm.fshl.v4i16(<4 x i16> %a, <4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %or
}

declare <8 x i16> @llvm.fshl.v8i16(<8 x i16>, <8 x i16>, <8 x i16>)
define <8 x i16> @test_fshl_v8i16(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: test_fshl_v8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r4 = $r2, 0xf000f000f000f
; CHECK-NEXT:    neghq $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r5 = $r4, 19, 16
; CHECK-NEXT:    sllhqs $r6 = $r0, $r4
; CHECK-NEXT:    andd $r2 = $r2, 0xf000f000f000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r5 = $r0, $r5
; CHECK-NEXT:    extfz $r7 = $r2, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r6, 15, 0
; CHECK-NEXT:    extfz $r6 = $r4, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r6 = $r0, $r6
; CHECK-NEXT:    extfz $r4 = $r4, 51, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r6 = $r5, 31, 0
; CHECK-NEXT:    sllhqs $r4 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r6, 47, 0
; CHECK-NEXT:    extfz $r6 = $r2, 19, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r5 = $r0, $r2
; CHECK-NEXT:    srlhqs $r6 = $r0, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r6 = $r5, 15, 0
; CHECK-NEXT:    srlhqs $r5 = $r0, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r6, 31, 0
; CHECK-NEXT:    andd $r6 = $r3, 0xf000f000f000f
; CHECK-NEXT:    extfz $r2 = $r2, 51, 48
; CHECK-NEXT:    neghq $r3 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r0 = $r0, $r2
; CHECK-NEXT:    extfz $r2 = $r6, 19, 16
; CHECK-NEXT:    andd $r3 = $r3, 0xf000f000f000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r7 = $r1, $r6
; CHECK-NEXT:    sllhqs $r2 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r7, 15, 0
; CHECK-NEXT:    extfz $r7 = $r3, 19, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r5, 47, 0
; CHECK-NEXT:    extfz $r5 = $r6, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r8 = $r1, $r3
; CHECK-NEXT:    srlhqs $r7 = $r1, $r7
; CHECK-NEXT:    ord $r0 = $r4, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r5 = $r1, $r5
; CHECK-NEXT:    insf $r7 = $r8, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r8 = $r3, 35, 32
; CHECK-NEXT:    insf $r5 = $r2, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r8 = $r1, $r8
; CHECK-NEXT:    extfz $r2 = $r6, 51, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r3 = $r3, 51, 48
; CHECK-NEXT:    sllhqs $r2 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r8 = $r7, 31, 0
; CHECK-NEXT:    srlhqs $r1 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r5, 47, 0
; CHECK-NEXT:    insf $r1 = $r8, 47, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r1 = $r2, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = tail call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %a, <8 x i16> %a, <8 x i16> %b)
  ret <8 x i16> %or
}

declare <16 x i16> @llvm.fshl.v16i16(<16 x i16>, <16 x i16>, <16 x i16>)
define <16 x i16> @test_fshl_v16i16(<16 x i16> %a, <16 x i16> %b) {
; CHECK-LABEL: test_fshl_v16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andd $r8 = $r4, 0xf000f000f000f
; CHECK-NEXT:    neghq $r4 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r9 = $r8, 19, 16
; CHECK-NEXT:    sllhqs $r10 = $r0, $r8
; CHECK-NEXT:    andd $r4 = $r4, 0xf000f000f000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r9 = $r0, $r9
; CHECK-NEXT:    extfz $r11 = $r4, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r9 = $r10, 15, 0
; CHECK-NEXT:    extfz $r10 = $r8, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r10 = $r0, $r10
; CHECK-NEXT:    extfz $r8 = $r8, 51, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r10 = $r9, 31, 0
; CHECK-NEXT:    sllhqs $r8 = $r0, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r8 = $r10, 47, 0
; CHECK-NEXT:    extfz $r10 = $r4, 19, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r9 = $r0, $r4
; CHECK-NEXT:    srlhqs $r10 = $r0, $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r10 = $r9, 15, 0
; CHECK-NEXT:    srlhqs $r9 = $r0, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r9 = $r10, 31, 0
; CHECK-NEXT:    andd $r10 = $r5, 0xf000f000f000f
; CHECK-NEXT:    extfz $r4 = $r4, 51, 48
; CHECK-NEXT:    neghq $r5 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r0 = $r0, $r4
; CHECK-NEXT:    extfz $r4 = $r10, 19, 16
; CHECK-NEXT:    andd $r5 = $r5, 0xf000f000f000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r11 = $r1, $r10
; CHECK-NEXT:    sllhqs $r4 = $r1, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r11, 15, 0
; CHECK-NEXT:    extfz $r11 = $r10, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r11 = $r1, $r11
; CHECK-NEXT:    extfz $r10 = $r10, 51, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r11 = $r4, 31, 0
; CHECK-NEXT:    sllhqs $r4 = $r1, $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r10 = $r5, 19, 16
; CHECK-NEXT:    insf $r0 = $r9, 47, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r4 = $r11, 47, 0
; CHECK-NEXT:    srlhqs $r9 = $r1, $r5
; CHECK-NEXT:    ord $r0 = $r8, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r10 = $r1, $r10
; CHECK-NEXT:    extfz $r11 = $r5, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r10 = $r9, 15, 0
; CHECK-NEXT:    srlhqs $r9 = $r1, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r9 = $r10, 31, 0
; CHECK-NEXT:    andd $r10 = $r6, 0xf000f000f000f
; CHECK-NEXT:    extfz $r5 = $r5, 51, 48
; CHECK-NEXT:    neghq $r6 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r1 = $r1, $r5
; CHECK-NEXT:    extfz $r5 = $r10, 19, 16
; CHECK-NEXT:    andd $r6 = $r6, 0xf000f000f000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r11 = $r2, $r10
; CHECK-NEXT:    sllhqs $r5 = $r2, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r11, 15, 0
; CHECK-NEXT:    extfz $r11 = $r10, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r11 = $r2, $r11
; CHECK-NEXT:    extfz $r10 = $r10, 51, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r11 = $r5, 31, 0
; CHECK-NEXT:    sllhqs $r5 = $r2, $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r10 = $r6, 19, 16
; CHECK-NEXT:    insf $r1 = $r9, 47, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r5 = $r11, 47, 0
; CHECK-NEXT:    srlhqs $r9 = $r2, $r6
; CHECK-NEXT:    ord $r1 = $r4, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r10 = $r2, $r10
; CHECK-NEXT:    extfz $r11 = $r6, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r10 = $r9, 15, 0
; CHECK-NEXT:    srlhqs $r9 = $r2, $r11
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r9 = $r10, 31, 0
; CHECK-NEXT:    andd $r10 = $r7, 0xf000f000f000f
; CHECK-NEXT:    extfz $r6 = $r6, 51, 48
; CHECK-NEXT:    neghq $r7 = $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r2 = $r2, $r6
; CHECK-NEXT:    extfz $r6 = $r10, 19, 16
; CHECK-NEXT:    andd $r7 = $r7, 0xf000f000f000f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r11 = $r3, $r10
; CHECK-NEXT:    sllhqs $r6 = $r3, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r6 = $r11, 15, 0
; CHECK-NEXT:    extfz $r11 = $r7, 19, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r2 = $r9, 47, 0
; CHECK-NEXT:    extfz $r9 = $r10, 35, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r15 = $r3, $r7
; CHECK-NEXT:    srlhqs $r11 = $r3, $r11
; CHECK-NEXT:    ord $r2 = $r5, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllhqs $r9 = $r3, $r9
; CHECK-NEXT:    insf $r11 = $r15, 15, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r15 = $r7, 35, 32
; CHECK-NEXT:    insf $r9 = $r6, 31, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlhqs $r15 = $r3, $r15
; CHECK-NEXT:    extfz $r6 = $r10, 51, 48
; CHECK-NEXT:    ;;
; CHECK-NEXT:    extfz $r7 = $r7, 51, 48
; CHECK-NEXT:    sllhqs $r6 = $r3, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r15 = $r11, 31, 0
; CHECK-NEXT:    srlhqs $r3 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r6 = $r9, 47, 0
; CHECK-NEXT:    insf $r3 = $r15, 47, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ord $r3 = $r6, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = tail call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %a, <16 x i16> %a, <16 x i16> %b)
  ret <16 x i16> %or
}
