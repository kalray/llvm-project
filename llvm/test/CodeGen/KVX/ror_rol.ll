; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define i32 @rol_i32_ri(i32 %in) {
; CHECK-LABEL: rol_i32_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    rolw $r0 = $r0, 9
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
    %left = shl i32 %in, 9
    %right = lshr i32 %in, 23
    %val5 = or i32 %left, %right
    ret i32 %val5
}

; ror and rol are semantically the same thing.
; For the immediates, llvm decides to use rol
define i32 @ror_i32_ri(i32 %in) {
; CHECK-LABEL: ror_i32_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    rolw $r0 = $r0, 23
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
    %left = lshr i32 %in, 9
    %right = shl i32 %in, 23
    %val5 = or i32 %right, %left
    ret i32 %val5
}

define i32 @ror_i32_rr(i32 %in, i32 %r) {
; CHECK-LABEL: ror_i32_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    rorw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
    %l  = sub i32 32, %r
    %left = shl i32 %in, %l
    %right = lshr i32 %in, %r
    %ror = or i32 %left, %right
    ret i32 %ror
}

define i32 @rol_i32_rr(i32 %in, i32 %l) {
; CHECK-LABEL: rol_i32_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    rolw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
    %r  = sub i32 32, %l
    %left = shl i32 %in, %l
    %right = lshr i32 %in, %r
    %rol = or i32 %left, %right
    ret i32 %rol
}
