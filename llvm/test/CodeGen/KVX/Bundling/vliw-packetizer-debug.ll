; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -asm-verbose=false -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -asm-verbose=false -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

; This checks that debug informations (.cfi_*, .Ltmp*) are correctly moved out from bundles.

define i32 @debug_sanity(ptr nocapture %p, i32 %a, i32 %b, i32 %c, i32 %d) !dbg !7 {
; CHECK-LABEL: debug_sanity:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .file 1 "/dir" "source.c"
; CHECK-NEXT:    .loc 1 5 0
; CHECK-NEXT:    .cfi_sections .debug_frame
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 16[$r12] = $r20
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    .cfi_offset 20, -16
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_offset 19, -32
; CHECK-NEXT:    .cfi_offset 18, -24
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    .loc 1 6 19 prologue_end
; CHECK-NEXT:    addw $r0 = $r3, $r18
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .loc 1 6 23 is_stmt 0
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    addx2w $r20 = $r2, $r0
; CHECK-NEXT:    call debug_sanity_extfn
; CHECK-NEXT:    ;; # (end cycle 5)
; CHECK-NEXT:    .loc 1 7 14 is_stmt 1
; CHECK-NEXT:    addw $r0 = $r0, $r20
; CHECK-NEXT:    sxwd $r1 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    .loc 1 7 8 is_stmt 0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    sw.xs $r1[$r19] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    .loc 1 8 3 is_stmt 1
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:    .cfi_restore 19
; CHECK-NEXT:    .cfi_restore 18
; CHECK-NEXT:    ld $r20 = 16[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    .cfi_restore 20
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    .loc 1 8 3 epilogue_begin is_stmt 0
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 9)
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    .cfi_restore 67
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .Ltmp2:
entry:
  call void @llvm.dbg.value(metadata ptr %p, metadata !13, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 %b, metadata !15, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 %c, metadata !16, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 %d, metadata !17, metadata !DIExpression()), !dbg !19
  %factor = shl i32 %b, 1
  %add1 = add i32 %c, %a, !dbg !20
  %add2 = add i32 %add1, %factor, !dbg !21
  call void @llvm.dbg.value(metadata i32 %add2, metadata !18, metadata !DIExpression()), !dbg !19
  %call = tail call i32 @debug_sanity_extfn(i32 %b), !dbg !22
  %add3 = add nsw i32 %call, %add2, !dbg !23
  %idxprom = sext i32 %a to i64, !dbg !24
  %arrayidx = getelementptr inbounds i32, ptr %p, i64 %idxprom, !dbg !24
  store i32 %add3, ptr %arrayidx, align 4, !dbg !25, !tbaa !26
  ret i32 %add2, !dbg !30
}

declare i32 @debug_sanity_extfn(i32)

declare void @llvm.dbg.value(metadata, metadata, metadata)

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Kalray clang version X", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "source.c", directory: "/dir")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 2}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"Kalray clang version X"}
!7 = distinct !DISubprogram(name: "debug_sanity", scope: !1, file: !1, line: 4, type: !8, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!8 = !DISubroutineType(types: !9)
!9 = !{!10, !11, !10, !10, !10, !10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!12 = !{!13, !14, !15, !16, !17, !18}
!13 = !DILocalVariable(name: "p", arg: 1, scope: !7, file: !1, line: 4, type: !11)
!14 = !DILocalVariable(name: "a", arg: 2, scope: !7, file: !1, line: 4, type: !10)
!15 = !DILocalVariable(name: "b", arg: 3, scope: !7, file: !1, line: 4, type: !10)
!16 = !DILocalVariable(name: "c", arg: 4, scope: !7, file: !1, line: 4, type: !10)
!17 = !DILocalVariable(name: "d", arg: 5, scope: !7, file: !1, line: 4, type: !10)
!18 = !DILocalVariable(name: "sum", scope: !7, file: !1, line: 6, type: !10)
!19 = !DILocation(line: 0, scope: !7)
!20 = !DILocation(line: 6, column: 19, scope: !7)
!21 = !DILocation(line: 6, column: 23, scope: !7)
!22 = !DILocation(line: 7, column: 16, scope: !7)
!23 = !DILocation(line: 7, column: 14, scope: !7)
!24 = !DILocation(line: 7, column: 3, scope: !7)
!25 = !DILocation(line: 7, column: 8, scope: !7)
!26 = !{!27, !27, i64 0}
!27 = !{!"int", !28, i64 0}
!28 = !{!"omnipotent char", !29, i64 0}
!29 = !{!"Simple C/C++ TBAA"}
!30 = !DILocation(line: 8, column: 3, scope: !7)
