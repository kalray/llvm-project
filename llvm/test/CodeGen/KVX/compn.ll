; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,V1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=CHECK,V2
target triple = "kvx-kalray-cos"

define i32 @foo_i32_i32_lt(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_lt:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.lt $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_lt:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.lt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_le(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_le:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.le $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_le:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.le $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sle i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_gt(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_gt:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.gt $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_gt:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.gt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_ge(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_ge:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.ge $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_ge:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.ge $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sge i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_ltu(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_ltu:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.ltu $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_ltu:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.ltu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_leu(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_leu:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.leu $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_leu:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.leu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ule i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_gtu(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_gtu:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.gtu $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_gtu:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.gtu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_geu(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_geu:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.geu $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_geu:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.geu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp uge i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_eq(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_eq:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.eq $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_eq:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.eq $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_neq(i32 %a, i32 %b){
; V1-LABEL: foo_i32_i32_neq:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.ne $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_neq:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.ne $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_i32_lt(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_lt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_le(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_le:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.le $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_gt(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_gt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_ge(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_ge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_ltu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_ltu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_leu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_leu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.leu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_gtu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_gtu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_geu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_geu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.geu $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_eq(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.eq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_neq(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_neq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ne $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i32 @foo_i32_f32_lt(float %a, float %b){
; V1-LABEL: foo_i32_f32_lt:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.olt $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_lt:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.olt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp olt float %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_le(float %a, float %b){
; V1-LABEL: foo_i32_f32_le:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.oge $r0 = $r1, $r0
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_le:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.oge $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp ole float %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_gt(float %a, float %b){
; V1-LABEL: foo_i32_f32_gt:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.olt $r0 = $r1, $r0
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_gt:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.olt $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp ogt float %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_ge(float %a, float %b){
; V1-LABEL: foo_i32_f32_ge:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.oge $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_ge:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.oge $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp oge float %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_eq(float %a, float %b){
; V1-LABEL: foo_i32_f32_eq:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.oeq $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_eq:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.oeq $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp oeq float %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_neq(float %a, float %b){
; V1-LABEL: foo_i32_f32_neq:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.une $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_neq:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.une $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp une float %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_f32_lt(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_lt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.olt $r1 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt float %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_le(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_le:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.oge $r1 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ole float %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_gt(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_gt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.olt $r1 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ogt float %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_ge(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_ge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.oge $r1 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oge float %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_eq(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.oeq $r1 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq float %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_neq(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_neq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.une $r1 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une float %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i32 @foo_i32_f16_eq(half %a, half %b){
; CHECK-LABEL: foo_i32_f16_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r0 = 0xffffffff
; CHECK-NEXT:    andw $r1 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une half %a, %b
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_f16_eq(half %a, half %b){
; CHECK-LABEL: foo_i64_f16_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    andw $r1 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une half %a, %b
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i32 @foo_i32_i32_lt_ri(i32 %a){
; V1-LABEL: foo_i32_i32_lt_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.lt $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_lt_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.lt $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_le_ri(i32 %a){
; V1-LABEL: foo_i32_i32_le_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.lt $r0 = $r0, 6
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_le_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.lt $r0 = $r0, 6
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sle i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_gt_ri(i32 %a){
; V1-LABEL: foo_i32_i32_gt_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.gt $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_gt_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.gt $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_ge_ri(i32 %a){
; V1-LABEL: foo_i32_i32_ge_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.gt $r0 = $r0, 4
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_ge_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.gt $r0 = $r0, 4
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sge i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_ltu_ri(i32 %a){
; V1-LABEL: foo_i32_i32_ltu_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.ltu $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_ltu_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.ltu $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_leu_ri(i32 %a){
; V1-LABEL: foo_i32_i32_leu_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.ltu $r0 = $r0, 6
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_leu_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.ltu $r0 = $r0, 6
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ule i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_gtu_ri(i32 %a){
; V1-LABEL: foo_i32_i32_gtu_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.gtu $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_gtu_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.gtu $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_geu_ri(i32 %a){
; V1-LABEL: foo_i32_i32_geu_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.gtu $r0 = $r0, 4
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_geu_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.gtu $r0 = $r0, 4
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp uge i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_eq_ri(i32 %a){
; V1-LABEL: foo_i32_i32_eq_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.eq $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_eq_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.eq $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_neq_ri(i32 %a){
; V1-LABEL: foo_i32_i32_neq_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compw.ne $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_i32_neq_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnw.ne $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, 5
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_i32_lt_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_lt_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_le_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_le_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, 6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_gt_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_gt_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_ge_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_ge_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_ltu_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_ltu_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_leu_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_leu_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, 6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_gtu_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_gtu_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_geu_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_geu_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_eq_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_eq_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.eq $r0 = $r0, 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_neq_ri(i32 %a){
; CHECK-LABEL: foo_i64_i32_neq_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ne $r0 = $r0, 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, 5
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i32 @foo_i32_f32_lt_ri(float %a){
; V1-LABEL: foo_i32_f32_lt_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.olt $r0 = $r0, 0x40a00000
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_lt_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.olt $r0 = $r0, 0x40a00000
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp olt float %a, 5.0
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_le_ri(float %a){
; V1-LABEL: foo_i32_f32_le_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    make $r1 = 0x40a00000
; V1-NEXT:    ;;
; V1-NEXT:    fcompw.oge $r0 = $r1, $r0
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_le_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x40a00000
; V2-NEXT:    ;;
; V2-NEXT:    fcompnw.oge $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp ole float %a, 5.0
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_gt_ri(float %a){
; V1-LABEL: foo_i32_f32_gt_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    make $r1 = 0x40a00000
; V1-NEXT:    ;;
; V1-NEXT:    fcompw.olt $r0 = $r1, $r0
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_gt_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0x40a00000
; V2-NEXT:    ;;
; V2-NEXT:    fcompnw.olt $r0 = $r1, $r0
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp ogt float %a, 5.0
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_ge_ri(float %a){
; V1-LABEL: foo_i32_f32_ge_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.oge $r0 = $r0, 0x40a00000
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_ge_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.oge $r0 = $r0, 0x40a00000
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp oge float %a, 5.0
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_eq_ri(float %a){
; V1-LABEL: foo_i32_f32_eq_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.oeq $r0 = $r0, 0x40a00000
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_eq_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.oeq $r0 = $r0, 0x40a00000
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp oeq float %a, 5.0
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_neq_ri(float %a){
; V1-LABEL: foo_i32_f32_neq_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    fcompw.une $r0 = $r0, 0x40a00000
; V1-NEXT:    ;;
; V1-NEXT:    negw $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i32_f32_neq_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    fcompnw.une $r0 = $r0, 0x40a00000
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = fcmp une float %a, 5.0
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_f32_lt_ri(float %a){
; CHECK-LABEL: foo_i64_f32_lt_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.olt $r1 = $r0, 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt float %a, 5.0
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_le_ri(float %a){
; CHECK-LABEL: foo_i64_f32_le_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.oge $r1 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ole float %a, 5.0
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_gt_ri(float %a){
; CHECK-LABEL: foo_i64_f32_gt_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.olt $r1 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ogt float %a, 5.0
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_ge_ri(float %a){
; CHECK-LABEL: foo_i64_f32_ge_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.oge $r1 = $r0, 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oge float %a, 5.0
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_eq_ri(float %a){
; CHECK-LABEL: foo_i64_f32_eq_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.oeq $r1 = $r0, 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq float %a, 5.0
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_neq_ri(float %a){
; CHECK-LABEL: foo_i64_f32_neq_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    fcompw.une $r1 = $r0, 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une float %a, 5.0
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}

define i32 @foo_i32_f16_eq_ri(half %a){
; CHECK-LABEL: foo_i32_f16_eq_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x4500
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r0 = 0xffffffff
; CHECK-NEXT:    andw $r1 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une half %a, 5.0
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_f16_eq_ri(half %a){
; CHECK-LABEL: foo_i64_f16_eq_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x4500
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    andw $r1 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r1 ? $r0 = 0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une half %a, 5.0
  %conv1 = sext i1 %cmp to i64
  ret i64 %conv1
}


define i64 @foo_i32_i64_gt(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i64_gt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i32_i64_lt_ri(i32 %a){
; CHECK-LABEL: foo_i32_i64_lt_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i32 @foo_i32_f64_lt(double %a){
; CHECK-LABEL: foo_i32_f64_lt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x4014000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompd.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    negw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt double %a, 5.0
  %conv = sext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_i64_lt(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_lt:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.lt $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_lt:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.lt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp slt i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_le(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_le:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.le $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_le:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.le $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sle i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_gt(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_gt:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gt $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_gt:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.gt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sgt i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_ge(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_ge:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ge $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_ge:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.ge $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sge i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_ltu(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_ltu:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ltu $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_ltu:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.ltu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ult i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_leu(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_leu:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.leu $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_leu:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.leu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ule i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_gtu(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_gtu:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gtu $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_gtu:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.gtu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ugt i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_geu(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_geu:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.geu $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_geu:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.geu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp uge i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_eq(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_eq:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.eq $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_eq:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.eq $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_neq(i64 %a, i64 %b){
; V1-LABEL: foo_i64_i64_neq:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ne $r0 = $r0, $r1
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_neq:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.ne $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ne i64 %a, %b
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}


define i64 @foo_i64_i64_lt_ri(i64 %a){
; V1-LABEL: foo_i64_i64_lt_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.lt $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_lt_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.lt $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp slt i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_le_ri(i64 %a){
; V1-LABEL: foo_i64_i64_le_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.lt $r0 = $r0, 6
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_le_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.lt $r0 = $r0, 6
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sle i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_gt_ri(i64 %a){
; V1-LABEL: foo_i64_i64_gt_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gt $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_gt_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.gt $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sgt i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_ge_ri(i64 %a){
; V1-LABEL: foo_i64_i64_ge_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gt $r0 = $r0, 4
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_ge_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.gt $r0 = $r0, 4
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sge i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_ltu_ri(i64 %a){
; V1-LABEL: foo_i64_i64_ltu_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ltu $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_ltu_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.ltu $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ult i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_leu_ri(i64 %a){
; V1-LABEL: foo_i64_i64_leu_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ltu $r0 = $r0, 6
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_leu_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.ltu $r0 = $r0, 6
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ule i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_gtu_ri(i64 %a){
; V1-LABEL: foo_i64_i64_gtu_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gtu $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_gtu_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.gtu $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ugt i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_geu_ri(i64 %a){
; V1-LABEL: foo_i64_i64_geu_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gtu $r0 = $r0, 4
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_geu_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.gtu $r0 = $r0, 4
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp uge i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_eq_ri(i64 %a){
; V1-LABEL: foo_i64_i64_eq_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.eq $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_eq_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.eq $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_neq_ri(i64 %a){
; V1-LABEL: foo_i64_i64_neq_ri:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ne $r0 = $r0, 5
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_neq_ri:
; V2:       # %bb.0: # %entry
; V2-NEXT:    compnd.ne $r0 = $r0, 5
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ne i64 %a, 5
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}


define i64 @foo_i64_i64_lt_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_lt_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.lt $r0 = $r0, 0xbeef0000beef
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_lt_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000beef
; V2-NEXT:    ;;
; V2-NEXT:    compnd.lt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp slt i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_le_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_le_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.lt $r0 = $r0, 0xbeef0000bef0
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_le_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000bef0
; V2-NEXT:    ;;
; V2-NEXT:    compnd.lt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sle i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_gt_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_gt_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gt $r0 = $r0, 0xbeef0000beef
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_gt_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000beef
; V2-NEXT:    ;;
; V2-NEXT:    compnd.gt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sgt i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_ge_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_ge_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gt $r0 = $r0, 0xbeef0000beee
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_ge_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000beee
; V2-NEXT:    ;;
; V2-NEXT:    compnd.gt $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp sge i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_ltu_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_ltu_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ltu $r0 = $r0, 0xbeef0000beef
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_ltu_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000beef
; V2-NEXT:    ;;
; V2-NEXT:    compnd.ltu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ult i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_leu_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_leu_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ltu $r0 = $r0, 0xbeef0000bef0
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_leu_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000bef0
; V2-NEXT:    ;;
; V2-NEXT:    compnd.ltu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ule i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_gtu_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_gtu_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gtu $r0 = $r0, 0xbeef0000beef
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_gtu_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000beef
; V2-NEXT:    ;;
; V2-NEXT:    compnd.gtu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ugt i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_geu_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_geu_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.gtu $r0 = $r0, 0xbeef0000beee
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_geu_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000beee
; V2-NEXT:    ;;
; V2-NEXT:    compnd.gtu $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp uge i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_eq_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_eq_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.eq $r0 = $r0, 0xbeef0000beef
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_eq_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000beef
; V2-NEXT:    ;;
; V2-NEXT:    compnd.eq $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}

define i64 @foo_i64_i64_neq_ri_at(i64 %a){
; V1-LABEL: foo_i64_i64_neq_ri_at:
; V1:       # %bb.0: # %entry
; V1-NEXT:    compd.ne $r0 = $r0, 0xbeef0000beef
; V1-NEXT:    ;;
; V1-NEXT:    negd $r0 = $r0
; V1-NEXT:    ret
; V1-NEXT:    ;;
;
; V2-LABEL: foo_i64_i64_neq_ri_at:
; V2:       # %bb.0: # %entry
; V2-NEXT:    make $r1 = 0xbeef0000beef
; V2-NEXT:    ;;
; V2-NEXT:    compnd.ne $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
entry:
  %cmp = icmp ne i64 %a, 209933706510063
  %conv = sext i1 %cmp to i64
  ret i64 %conv
}
