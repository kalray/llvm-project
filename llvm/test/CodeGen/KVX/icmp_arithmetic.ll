; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s

target triple = "kvx-kalray-cos"

define <2 x i16> @set_eq_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_eq_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_eq_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_eq_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ne_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_ne_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ne_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_ne_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ugt_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_ugt_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ugt_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_ugt_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_uge_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_uge_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_uge_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_uge_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ult_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_ult_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ult_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_ult_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ule_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_ule_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_ule_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_ule_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sgt_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_sgt_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sgt_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_sgt_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sge_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_sge_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sge_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_sge_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_slt_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_slt_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_slt_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_slt_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sle_v2i16_rr(<2 x i16> %a, <2 x i16> %b){
; CHECK-LABEL: set_sle_v2i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <2 x i16> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i16> @set_sle_v2i16_ri(<2 x i16> %a){
; CHECK-LABEL: set_sle_v2i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x70007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <2 x i16> %a, <i16 7, i16 7>
  %r = sext <2 x i1> %cmp to <2 x i16>
  ret <2 x i16> %r
}

define <2 x i32> @set_eq_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_eq_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_eq_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_eq_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ne_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_ne_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ne_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_ne_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ugt_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_ugt_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ugt_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_ugt_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_uge_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_uge_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_uge_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_uge_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ult_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_ult_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ult_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_ult_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ule_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_ule_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_ule_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_ule_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sgt_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_sgt_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sgt_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_sgt_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sge_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_sge_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sge_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_sge_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_slt_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_slt_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_slt_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_slt_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sle_v2i32_rr(<2 x i32> %a, <2 x i32> %b){
; CHECK-LABEL: set_sle_v2i32_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnwp.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <2 x i32> %a, %b
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i32> @set_sle_v2i32_ri(<2 x i32> %a){
; CHECK-LABEL: set_sle_v2i32_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x700000007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnwp.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <2 x i32> %a, <i32 7, i32 7>
  %r = sext <2 x i1> %cmp to <2 x i32>
  ret <2 x i32> %r
}

; RUN: llc -O2 -o - %s | FileCheck %s

target triple = "kvx-kalray-cos"

define <4 x i16> @set_eq_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_eq_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_eq_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_eq_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ne_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_ne_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ne_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_ne_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ugt_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_ugt_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ugt_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_ugt_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_uge_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_uge_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_uge_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_uge_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ult_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_ult_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ult_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_ult_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ule_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_ule_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_ule_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_ule_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sgt_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_sgt_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sgt_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_sgt_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sge_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_sge_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sge_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_sge_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_slt_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_slt_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_slt_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_slt_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sle_v4i16_rr(<4 x i16> %a, <4 x i16> %b){
; CHECK-LABEL: set_sle_v4i16_rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compnhq.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <4 x i16> %a, %b
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}

define <4 x i16> @set_sle_v4i16_ri(<4 x i16> %a){
; CHECK-LABEL: set_sle_v4i16_ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = 0x7000700070007
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compnhq.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle <4 x i16> %a, <i16 7, i16 7, i16 7, i16 7>
  %r = sext <4 x i1> %cmp to <4 x i16>
  ret <4 x i16> %r
}
