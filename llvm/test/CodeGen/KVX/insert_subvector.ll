; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s -O3 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O3 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O3 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O3 -march=kv3-2 -c -o /dev/null %s
target triple = "kvx-kalray-cos"

define <8 x i8> @insert_v2i8_into_v8i8_at0(<2 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: insert_v2i8_into_v8i8_at0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 15, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x i8> %0, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x i8> %3, <8 x i8> %1, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <8 x i8> %4
}

define <8 x i8> @insert_v2i8_into_v8i8_at2(<2 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: insert_v2i8_into_v8i8_at2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x i8> %0, <2 x i8> poison, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x i8> %1, <8 x i8> %3, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i8> %4, <8 x i8> %1, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  ret <8 x i8> %5
}

define <8 x i8> @insert_v2i8_into_v8i8_at4(<2 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: insert_v2i8_into_v8i8_at4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 47, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x i8> %0, <2 x i8> poison, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x i8> %1, <8 x i8> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %5 = shufflevector <8 x i8> %4, <8 x i8> %1, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  ret <8 x i8> %5
}

define <8 x i8> @insert_v2i8_into_v8i8_at6(<2 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: insert_v2i8_into_v8i8_at6:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 63, 48
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x i8> %0, <2 x i8> poison, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x i8> %1, <8 x i8> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i8> %4
}

define <8 x i8> @insert_lower_v8i8(<4 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: insert_lower_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 31, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <4 x i8> %0, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x i8> %3, <8 x i8> %1, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  ret <8 x i8> %4
}

define <8 x i8> @insert_higher_v8i8(<4 x i8> %0, <8 x i8> %1) {
; CHECK-LABEL: insert_higher_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 63, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <4 x i8> %0, <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x i8> %1, <8 x i8> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  ret <8 x i8> %4
}

define <8 x half> @insert_lower_v8f16(<4 x half> %0, <8 x half> %1) {
; CHECK-LABEL: insert_lower_v8f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <4 x half> %0, <4 x half> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x half> %3, <8 x half> %1, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  ret <8 x half> %4
}

define <8 x half> @insert_higher_v8f16(<4 x half> %0, <8 x half> %1) {
; CHECK-LABEL: insert_higher_v8f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <4 x half> %0, <4 x half> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x half> %1, <8 x half> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  ret <8 x half> %4
}

define <8 x i16> @insert_lower_v8i16(<4 x i16> %0, <8 x i16> %1) {
; CHECK-LABEL: insert_lower_v8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <4 x i16> %0, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x i16> %3, <8 x i16> %1, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  ret <8 x i16> %4
}

define <8 x i16> @insert_higher_v8i16(<4 x i16> %0, <8 x i16> %1) {
; CHECK-LABEL: insert_higher_v8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <4 x i16> %0, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %4 = shufflevector <8 x i16> %1, <8 x i16> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  ret <8 x i16> %4
}

define <4 x i8> @insert_lower_v4i8(<2 x i8> %0, <4 x i8> %1) {
; CHECK-LABEL: insert_lower_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 15, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x i8> %0, <2 x i8> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x i8> %3, <4 x i8> %1, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  ret <4 x i8> %4
}

define <4 x i8> @insert_higqer_v4i8(<2 x i8> %0, <4 x i8> %1) {
; CHECK-LABEL: insert_higqer_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 31, 16
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x i8> %0, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x i8> %1, <4 x i8> %3, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  ret <4 x i8> %4
}

define <4 x half> @insert_lower_v4f16(<2 x half> %0, <4 x half> %1) {
; CHECK-LABEL: insert_lower_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 31, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x half> %0, <2 x half> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x half> %3, <4 x half> %1, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  ret <4 x half> %4
}

define <4 x half> @insert_higher_v4f16(<2 x half> %0, <4 x half> %1) {
; CHECK-LABEL: insert_higher_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 63, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x half> %0, <2 x half> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x half> %1, <4 x half> %3, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  ret <4 x half> %4
}

define <4 x i16> @insert_lower_v4i16(<2 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: insert_lower_v4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 31, 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x i16> %0, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x i16> %3, <4 x i16> %1, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  ret <4 x i16> %4
}

define <4 x i16> @insert_higher_v4i16(<2 x i16> %0, <4 x i16> %1) {
; CHECK-LABEL: insert_higher_v4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r1 = $r0, 63, 32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <2 x i16> %0, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x i16> %1, <4 x i16> %3, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  ret <4 x i16> %4
}

define <4 x float> @insert_lower_v4f32(<2 x float> %0, <4 x float> %1) {
; CHECK-LABEL: insert_lower_v4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <2 x float> %0, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x float> %3, <4 x float> %1, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  ret <4 x float> %4
}

define <4 x float> @insert_higher_v4f32(<2 x float> %0, <4 x float> %1) {
; CHECK-LABEL: insert_higher_v4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <2 x float> %0, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x float> %1, <4 x float> %3, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  ret <4 x float> %4
}

define <4 x i32> @insert_lower_v4i32(<2 x i32> %0, <4 x i32> %1) {
; CHECK-LABEL: insert_lower_v4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <2 x i32> %0, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x i32> %3, <4 x i32> %1, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  ret <4 x i32> %4
}

define <4 x i32> @insert_higher_v4i32(<2 x i32> %0, <4 x i32> %1) {
; CHECK-LABEL: insert_higher_v4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <2 x i32> %0, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x i32> %1, <4 x i32> %3, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  ret <4 x i32> %4
}

define <4 x i64> @insert_lower_v4i64(<2 x i64> %0, <4 x i64> %1) {
; CHECK-LABEL: insert_lower_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r4
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <2 x i64> %0, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x i64> %3, <4 x i64> %1, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  ret <4 x i64> %4
}

define <4 x i64> @insert_higher_v4i64(<2 x i64> %0, <4 x i64> %1) {
; CHECK-LABEL: insert_higher_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r3 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <2 x i64> %0, <2 x i64> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x i64> %1, <4 x i64> %3, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  ret <4 x i64> %4
}

define <4 x double> @insert_lower_v4f64(<2 x double> %0, <4 x double> %1) {
; CHECK-LABEL: insert_lower_v4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r4
; CHECK-NEXT:    copyd $r3 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <2 x double> %0, <2 x double> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x double> %3, <4 x double> %1, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  ret <4 x double> %4
}

define <4 x double> @insert_higher_v4f64(<2 x double> %0, <4 x double> %1) {
; CHECK-LABEL: insert_higher_v4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    copyd $r2 = $r0
; CHECK-NEXT:    copyd $r3 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = shufflevector <2 x double> %0, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4 = shufflevector <4 x double> %1, <4 x double> %3, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  ret <4 x double> %4
}

