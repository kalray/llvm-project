; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @foo_i32_i32_lt(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_lt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_le(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_le:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_gt(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_gt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_ge(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_ge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_ltu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_ltu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_leu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_leu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_gtu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_gtu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_geu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_geu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_eq(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_i32_neq(i32 %a, i32 %b){
; CHECK-LABEL: foo_i32_i32_neq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_i32_lt(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_lt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_le(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_le:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.le $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sle i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_gt(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_gt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_ge(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_ge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sge i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_ltu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_ltu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ltu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_leu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_leu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.leu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ule i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_gtu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_gtu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gtu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_geu(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_geu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.geu $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp uge i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_eq(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.eq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_i32_neq(i32 %a, i32 %b){
; CHECK-LABEL: foo_i64_i32_neq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.ne $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i32 @foo_i32_f32_lt(float %a, float %b){
; CHECK-LABEL: foo_i32_f32_lt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt float %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_le(float %a, float %b){
; CHECK-LABEL: foo_i32_f32_le:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ole float %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_gt(float %a, float %b){
; CHECK-LABEL: foo_i32_f32_gt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ogt float %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_ge(float %a, float %b){
; CHECK-LABEL: foo_i32_f32_ge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oge float %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_eq(float %a, float %b){
; CHECK-LABEL: foo_i32_f32_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq float %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @foo_i32_f32_neq(float %a, float %b){
; CHECK-LABEL: foo_i32_f32_neq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.une $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une float %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_f32_lt(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_lt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt float %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_le(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_le:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ole float %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_gt(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_gt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ogt float %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_ge(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_ge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oge float %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_eq(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq float %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @foo_i64_f32_neq(float %a, float %b){
; CHECK-LABEL: foo_i64_f32_neq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.une $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une float %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i32 @foo_i32_f16_eq(half %a, half %b){
; CHECK-LABEL: foo_i32_f16_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une half %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i64 @foo_i64_f16_eq(half %a, half %b){
; CHECK-LABEL: foo_i64_f16_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une half %a, %b
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

