; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=kvx-kalray-cos | FileCheck %s

define i32 @f32min(i32 *%src, i32 %b) {
; CHECK-LABEL: f32min:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz.u $r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minw $r2 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapw 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r2 ? .LBB0_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    copyw $r0 = $r3
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw min i32 *%src, i32 %b seq_cst
  ret i32 %res
}

define i32 @f32max(i32 *%src, i32 %b) {
; CHECK-LABEL: f32max:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz.u $r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxw $r2 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapw 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r2 ? .LBB1_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    copyw $r0 = $r3
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw max i32 *%src, i32 %b seq_cst
  ret i32 %res
}

define i32 @f32umin(i32 *%src, i32 %b) {
; CHECK-LABEL: f32umin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB2_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz.u $r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minuw $r2 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapw 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r2 ? .LBB2_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    copyw $r0 = $r3
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw umin i32 *%src, i32 %b seq_cst
  ret i32 %res
}

define i32 @f32umax(i32 *%src, i32 %b) {
; CHECK-LABEL: f32umax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB3_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz.u $r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxuw $r2 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapw 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r2 ? .LBB3_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    copyw $r0 = $r3
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw umax i32 *%src, i32 %b seq_cst
  ret i32 %res
}

define i64 @f64min(i64 *%src, i64 %b) {
; CHECK-LABEL: f64min:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB4_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ld.u $r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mind $r2 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapd 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r2 ? .LBB4_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    copyd $r0 = $r3
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw min i64 *%src, i64 %b seq_cst
  ret i64 %res
}

define i64 @f64max(i64 *%src, i64 %b) {
; CHECK-LABEL: f64max:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB5_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ld.u $r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxd $r2 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapd 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r2 ? .LBB5_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    copyd $r0 = $r3
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw max i64 *%src, i64 %b seq_cst
  ret i64 %res
}

define i64 @f64umin(i64 *%src, i64 %b) {
; CHECK-LABEL: f64umin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB6_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ld.u $r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    minud $r2 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapd 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r2 ? .LBB6_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    copyd $r0 = $r3
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw umin i64 *%src, i64 %b seq_cst
  ret i64 %res
}

define i64 @f64umax(i64 *%src, i64 %b) {
; CHECK-LABEL: f64umax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB7_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ld.u $r3 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maxud $r2 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    acswapd 0[$r0] = $r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r2 ? .LBB7_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    copyd $r0 = $r3
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw umax i64 *%src, i64 %b seq_cst
  ret i64 %res
}
