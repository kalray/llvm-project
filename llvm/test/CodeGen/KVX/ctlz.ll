; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: clang -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i16 @ctlzi16(i16 %a) {
; CHECK-LABEL: ctlzi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clzw $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addw $r0 = $r0, -16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i16 @llvm.ctlz.i16(i16 %a)
  ret i16 %res
}

define i32 @clzw(i32 %a) {
; CHECK-LABEL: clzw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i32 @llvm.ctlz.i32(i32 %a)
  ret i32 %res
}

define i64 @clzd(i64 %a) {
; CHECK-LABEL: clzd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call i64 @llvm.ctlz.i64(i64 %a)
  ret i64 %res
}

define <2 x i16> @ctlzv2i16(<2 x i16> %a) {
; CHECK-LABEL: ctlzv2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    srlw $r1 = $r0, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clzw $r0 = $r0
; CHECK-NEXT:    clzw $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addw $r0 = $r0, -16
; CHECK-NEXT:    addw $r1 = $r1, -16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i16> @llvm.ctlz.v2i16(<2 x i16> %a)
  ret <2 x i16> %res
}

define <2 x i32> @clzwp(<2 x i32> %a) {
; CHECK-LABEL: clzwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i32> @llvm.ctlz.v2i32(<2 x i32> %a)
  ret <2 x i32> %res
}

define <2 x i64> @ctlzv2i64(<2 x i64> %a) {
; CHECK-LABEL: ctlzv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = call <2 x i64> @llvm.ctlz.v2i64(<2 x i64> %a)
  ret <2 x i64> %res
}

declare i16 @llvm.ctlz.i16(i16)
declare i32 @llvm.ctlz.i32(i32)
declare i64 @llvm.ctlz.i64(i64)
declare <2 x i16> @llvm.ctlz.v2i16(<2 x i16>)
declare <2 x i32> @llvm.ctlz.v2i32(<2 x i32>)
declare <2 x i64> @llvm.ctlz.v2i64(<2 x i64>)
