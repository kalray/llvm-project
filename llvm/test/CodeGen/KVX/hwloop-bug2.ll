; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -disable-kvx-hwloops=false -o - -O3 %s | FileCheck %s
target triple = "kvx-kalray-cos"

; This test ensures that we can still hwloop an internal loop
; from an external infinite loop such as, in C:
; -----
; a, b;
; *c;
; d() {
;   c = a;
;   for (;;) {
;     for (int e = 0; e < 2000; e++)
;       b = c[e];
;     f();
;   }
; }
; -----

@a = common global i32 0, align 4
@c = common global i32* null, align 8
@b = common global i32 0, align 4

define i32 @d() {
; CHECK-LABEL: d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sq 8[$r12] = $r18r19
; CHECK-NEXT:    make $r0 = a
; CHECK-NEXT:    make $r18 = c
; CHECK-NEXT:    make $r2 = 0x7d0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 18, -16
; CHECK-NEXT:    .cfi_offset 19, -24
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    make $r19 = b
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r18] = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    loopdo $r2, .__LOOPDO_0_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # %for.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    lwz.xs $r2 = $r1[$r0]
; CHECK-NEXT:    addd $r1 = $r1, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sw 0[$r19] = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .__LOOPDO_0_END_:
; CHECK-NEXT:  # %bb.1: # %for.cond.cleanup
; CHECK-NEXT:    # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    call f
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r0 = 0[$r18]
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    goto .LBB0_2
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* @a, align 4
  %conv = sext i32 %0 to i64
  %1 = inttoptr i64 %conv to i32*
  store i32* %1, i32** @c, align 8
  br label %for.cond

for.cond:
  %2 = phi i32* [ %.pre, %for.cond.cleanup ], [ %1, %entry ]
  br label %for.body

for.cond.cleanup:
  %call = tail call i32 bitcast (i32 (...)* @f to i32 ()*)()
  %.pre = load i32*, i32** @c, align 8
  br label %for.cond

for.body:
  %indvars.iv = phi i64 [ 0, %for.cond ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %indvars.iv
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* @b, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 2000
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

declare i32 @f(...)
