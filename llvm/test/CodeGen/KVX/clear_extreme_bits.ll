; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK
target triple = "kvx-kalray-cos"

define i16 @clear_lower_16(i16 %0, i16 %1) {
; CHECK-LABEL: clear_lower_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl nsw i16 -1, %1
  %4 = and i16 %3, %0
  ret i16 %4
}

define i16 @clear2_lower_16(i16 %0, i16 %1) {
; CHECK-LABEL: clear2_lower_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i16 %0, %1
  %4 = shl nsw i16 %3, %1
  ret i16 %4
}


define i32 @clear_lower_32(i32 %0, i32 %1) {
; CHECK-LABEL: clear_lower_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl nsw i32 -1, %1
  %4 = and i32 %3, %0
  ret i32 %4
}

define i32 @clear2_lower_32(i32 %0, i32 %1) {
; CHECK-LABEL: clear2_lower_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i32 %0, %1
  %4 = shl nsw i32 %3, %1
  ret i32 %4
}

define i64 @clear_lower_64(i64 %0, i64 %1) {
; CHECK-LABEL: clear_lower_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl nsw i64 -1, %1
  %4 = and i64 %3, %0
  ret i64 %4
}

define i64 @clear2_lower_64(i64 %0, i64 %1) {
; CHECK-LABEL: clear2_lower_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i64 %0, %1
  %4 = shl nsw i64 %3, %1
  ret i64 %4
}

define i16 @clear_upper_16(i16 %0, i16 %1) {
; CHECK-LABEL: clear_upper_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i16 -1, %1
  %4 = and i16 %3, %0
  ret i16 %4
}

define i16 @clear2_upper_16(i16 %0, i16 %1) {
; CHECK-LABEL: clear2_upper_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i16 %0, %1
  %4 = lshr i16 %3, %1
  ret i16 %4
}


define i32 @clear_upper_32(i32 %0, i32 %1) {
; CHECK-LABEL: clear_upper_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i32 -1, %1
  %4 = and i32 %3, %0
  ret i32 %4
}

define i32 @clear2_upper_32(i32 %0, i32 %1) {
; CHECK-LABEL: clear2_upper_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i32 %0, %1
  %4 = lshr i32 %3, %1
  ret i32 %4
}

define i64 @clear_upper_64(i64 %0, i64 %1) {
; CHECK-LABEL: clear_upper_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = lshr i64 -1, %1
  %4 = and i64 %3, %0
  ret i64 %4
}

define i64 @clear2_upper_64(i64 %0, i64 %1) {
; CHECK-LABEL: clear2_upper_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slld $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    srld $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %0, %1
  %4 = lshr i64 %3, %1
  ret i64 %4
}
