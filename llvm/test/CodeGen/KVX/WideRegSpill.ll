; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O3 -o - %s | FileCheck %s

; From the c src:
; a() {
;   int b = 0;
;   __tca256 c;
;   __tca512 d = __builtin_kvx_buildfvw(c, c);
;   for (int col;; col += 2) {
;     int e;
;     __tca512 f, g;
;     __tca1024 h;
;     __tca256 i;
; #pragma unroll 3
;     for (; e < b; ++e)
;       f = d;
;     h = __builtin_kvx_buildfwm(f, g);
;     i = __builtin_kvx_convwbv(h, ".rz.sat");
;     *(__tca256 *)col = i;
;   }
; }
target triple = "kvx-kalray-cos"

define i32 @a() {
; CHECK-LABEL: a:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -384
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_def_cfa_offset 384
; CHECK-NEXT:    .cfi_register 67, 16
; CHECK-NEXT:    sd 376[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 67, -8
; CHECK-NEXT:    sd 368[$r12] = $r14
; CHECK-NEXT:    addd $r14 = $r12, 368
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 14, -16
; CHECK-NEXT:    .cfi_def_cfa 14, 16
; CHECK-NEXT:    sd 360[$r12] = $r31
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 31, -24
; CHECK-NEXT:    sq 344[$r12] = $r20r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 20, -32
; CHECK-NEXT:    .cfi_offset 21, -40
; CHECK-NEXT:    sq 328[$r12] = $r18r19
; CHECK-NEXT:    andd $r31 = $r12, -128
; CHECK-NEXT:    make $r19 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    .cfi_offset 18, -48
; CHECK-NEXT:    .cfi_offset 19, -56
; CHECK-NEXT:    sv 128[$r31] = $a0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 160[$r31] = $a1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 192[$r31] = $a2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 224[$r31] = $a3
; CHECK-NEXT:    goto .LBB0_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    lv $a4 = 128[$r31]
; CHECK-NEXT:    compw.eq $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a5 = 160[$r31]
; CHECK-NEXT:    sllw $r0 = $r0, 6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a6 = 192[$r31]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lv $a7 = 224[$r31]
; CHECK-NEXT:    copyv $a0 = $a5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    alignv $a5 = $a1, $a0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyv $a1 = $a4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    alignv $a4 = $a0, $a1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_5: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    convwbv0.rz.sat $a0_x = $a4a5a6a7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    convwbv1.rz.sat $a0_y = $a4a5a6a7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    convwbv2.rz.sat $a0_z = $a4a5a6a7
; CHECK-NEXT:    copyv $a8 = $a4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyv $a9 = $a5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 128[$r31] = $a8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 160[$r31] = $a9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 192[$r31] = $a10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 224[$r31] = $a11
; CHECK-NEXT:    convwbv3.rz.sat $a0_t = $a4a5a6a7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sv 0[$r19] = $a0
; CHECK-NEXT:    addd $r19 = $r19, 2
; CHECK-NEXT:    copyd $r21 = $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_1: # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB0_4 Depth 2
; CHECK-NEXT:    maxw $r20 = $r21, 0
; CHECK-NEXT:    make $r1 = 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfw $r18 = $r21, $r20
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    call __umoddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    make $r1 = 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addw $r0 = $r0, 1
; CHECK-NEXT:    call __umoddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compw.ltu $r1 = $r18, 2
; CHECK-NEXT:    zxwd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.odd $r1 ? .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.3: # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    zxbd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compw.eq $r1 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r2 = $r1
; CHECK-NEXT:    make $r1 = 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r2 ? $r1 = 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r0 ? $r1 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addw $r0 = $r1, $r21
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addw $r0 = $r0, -3
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_4: # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    addw $r0 = $r0, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compw.lt $r1 = $r0, -2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.odd $r1 ? .LBB0_4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_5
; CHECK-NEXT:    ;;
  %1 = tail call <512 x i1> @llvm.kvx.buildfvw(<256 x i1> undef, <256 x i1> undef)
  br label %2

2:
  %3 = phi i64 [ %30, %25 ], [ 0, %0 ]
  %4 = phi <512 x i1> [ %26, %25 ], [ undef, %0 ]
  %5 = phi i32 [ %7, %25 ], [ undef, %0 ]
  %6 = icmp sgt i32 %5, 0
  %7 = select i1 %6, i32 %5, i32 0
  %8 = sub i32 %7, %5
  %9 = urem i32 %8, 3
  %10 = trunc i32 %9 to i8
  %11 = add nuw nsw i8 %10, 1
  %12 = urem i8 %11, 3
  %13 = icmp eq i8 %12, 1
  %14 = select i1 %13, <512 x i1> %4, <512 x i1> %1
  %15 = icmp ult i32 %8, 2
  br i1 %15, label %25, label %16

16:
  %17 = icmp eq i8 %12, 0
  %18 = select i1 %13, i32 1, i32 2
  %19 = select i1 %17, i32 0, i32 %18
  %20 = add nsw i32 %5, %19
  br label %21

21:
  %22 = phi i32 [ %24, %21 ], [ %20, %16 ]
  %23 = icmp slt i32 %22, -2
  %24 = add nsw i32 %22, 3
  br i1 %23, label %21, label %25

25:
  %26 = phi <512 x i1> [ %14, %2 ], [ %1, %21 ]
  %27 = tail call <1024 x i1> @llvm.kvx.buildfwm(<512 x i1> %26, <512 x i1> undef)
  %28 = tail call <256 x i1> @llvm.kvx.convwbv(<1024 x i1> %27, i32 3, i32 0)
  %29 = inttoptr i64 %3 to <256 x i1>*
  store <256 x i1> %28, <256 x i1>* %29, align 32
  %30 = add i64 %3, 2
  br label %2
}

declare <512 x i1> @llvm.kvx.buildfvw(<256 x i1>, <256 x i1>)

declare <1024 x i1> @llvm.kvx.buildfwm(<512 x i1>, <512 x i1>)

declare <256 x i1> @llvm.kvx.convwbv(<1024 x i1>, i32, i32)
