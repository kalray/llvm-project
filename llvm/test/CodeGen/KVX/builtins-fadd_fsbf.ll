; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=V2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define double @faddd(double %0, double %1) {
; CHECK-LABEL: faddd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddd.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddd:
; V2:       # %bb.0:
; V2-NEXT:    faddd.rz $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call double @llvm.kvx.fadd.f64(double %0, double %1, i32 3, i32 0)
  ret double %3
}

declare double @llvm.kvx.fadd.f64(double, double, i32, i32)

define <2 x double> @fadddc(<2 x double> %0, <2 x double> %1) {
; CHECK-LABEL: fadddc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fadddc.c.rn $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fadddc:
; V2:       # %bb.0:
; V2-NEXT:    fadddc.c.rn $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x double> @llvm.kvx.faddc.v2f64(<2 x double> %0, <2 x double> %1, i32 0, i32 0)
  ret <2 x double> %3
}

declare <2 x double> @llvm.kvx.faddc.v2f64(<2 x double>, <2 x double>, i32, i32)

define <2 x double> @fadddp(<2 x double> %0, <2 x double> %1) {
; CHECK-LABEL: fadddp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fadddp.rn $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fadddp:
; V2:       # %bb.0:
; V2-NEXT:    fadddp.rn $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x double> @llvm.kvx.fadd.v2f64(<2 x double> %0, <2 x double> %1, i32 0, i32 0)
  ret <2 x double> %3
}

declare <2 x double> @llvm.kvx.fadd.v2f64(<2 x double>, <2 x double>, i32, i32)

define <4 x double> @fadddq(<4 x double> %0, <4 x double> %1) {
; CHECK-LABEL: fadddq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fadddp.rn $r0r1 = $r0r1, $r4r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fadddp.rn $r2r3 = $r2r3, $r6r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fadddq:
; V2:       # %bb.0:
; V2-NEXT:    fadddp.rn $r0r1 = $r0r1, $r4r5
; V2-NEXT:    ;;
; V2-NEXT:    fadddp.rn $r2r3 = $r2r3, $r6r7
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = shufflevector <4 x double> %0, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x double> %1, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %5 = tail call <2 x double> @llvm.kvx.fadd.v2f64(<2 x double> %3, <2 x double> %4, i32 0, i32 0)
  %6 = shufflevector <4 x double> %0, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %7 = shufflevector <4 x double> %1, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <2 x double> @llvm.kvx.fadd.v2f64(<2 x double> %6, <2 x double> %7, i32 0, i32 0)
  %9 = shufflevector <2 x double> %5, <2 x double> %8, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %9
}

define half @faddh(half %0, half %1) {
; CHECK-LABEL: faddh:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddhq.s $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddh:
; V2:       # %bb.0:
; V2-NEXT:    faddhq.s $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call half @llvm.kvx.fadd.f16(half %0, half %1, i32 7, i32 1)
  ret half %3
}

declare half @llvm.kvx.fadd.f16(half, half, i32, i32)

define <2 x half> @faddhp(<2 x half> %0, <2 x half> %1) {
; CHECK-LABEL: faddhp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddhq.rz.s $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddhp:
; V2:       # %bb.0:
; V2-NEXT:    faddhq.rz.s $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x half> @llvm.kvx.fadd.v2f16(<2 x half> %0, <2 x half> %1, i32 3, i32 1)
  ret <2 x half> %3
}

declare <2 x half> @llvm.kvx.fadd.v2f16(<2 x half>, <2 x half>, i32, i32)

define <4 x half> @faddhq(<4 x half> %0, <4 x half> %1) {
; CHECK-LABEL: faddhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddhq.s $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddhq:
; V2:       # %bb.0:
; V2-NEXT:    faddhq.s $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <4 x half> @llvm.kvx.fadd.v4f16(<4 x half> %0, <4 x half> %1, i32 7, i32 1)
  ret <4 x half> %3
}

declare <4 x half> @llvm.kvx.fadd.v4f16(<4 x half>, <4 x half>, i32, i32)

define float @faddw(float %0, float %1) {
; CHECK-LABEL: faddw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddw.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddw:
; V2:       # %bb.0:
; V2-NEXT:    faddw.rz $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call float @llvm.kvx.fadd.f32(float %0, float %1, i32 3, i32 0)
  ret float %3
}

declare float @llvm.kvx.fadd.f32(float, float, i32, i32)

define <2 x float> @faddwc(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: faddwc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddwc.c.rn $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddwc:
; V2:       # %bb.0:
; V2-NEXT:    faddwc.c.rn $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.faddc.v2f32(<2 x float> %0, <2 x float> %1, i32 0, i32 0)
  ret <2 x float> %3
}

declare <2 x float> @llvm.kvx.faddc.v2f32(<2 x float>, <2 x float>, i32, i32)

define <4 x float> @faddwcp(<4 x float> %0, <4 x float> %1) {
; CHECK-LABEL: faddwcp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddwcp.c.rn $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddwcp:
; V2:       # %bb.0:
; V2-NEXT:    faddwcp.c.rn $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <4 x float> @llvm.kvx.faddc.v4f32(<4 x float> %0, <4 x float> %1, i32 0, i32 0)
  ret <4 x float> %3
}

declare <4 x float> @llvm.kvx.faddc.v4f32(<4 x float>, <4 x float>, i32, i32)

define <8 x float> @faddwo(<8 x float> %0, <8 x float> %1) {
; CHECK-LABEL: faddwo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddwq.rn $r0r1 = $r0r1, $r4r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddwq.rn $r2r3 = $r2r3, $r6r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddwo:
; V2:       # %bb.0:
; V2-NEXT:    faddwq.rn $r0r1 = $r0r1, $r4r5
; V2-NEXT:    ;;
; V2-NEXT:    faddwq.rn $r2r3 = $r2r3, $r6r7
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = tail call <4 x float> @llvm.kvx.fadd.v4f32(<4 x float> %3, <4 x float> %4, i32 0, i32 0)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8 = tail call <4 x float> @llvm.kvx.fadd.v4f32(<4 x float> %6, <4 x float> %7, i32 0, i32 0)
  %9 = shufflevector <4 x float> %5, <4 x float> %8, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %9
}

declare <4 x float> @llvm.kvx.fadd.v4f32(<4 x float>, <4 x float>, i32, i32)

define <2 x float> @faddwp(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: faddwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddwp.rn $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddwp:
; V2:       # %bb.0:
; V2-NEXT:    faddwp.rn $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.fadd.v2f32(<2 x float> %0, <2 x float> %1, i32 0, i32 0)
  ret <2 x float> %3
}

declare <2 x float> @llvm.kvx.fadd.v2f32(<2 x float>, <2 x float>, i32, i32)

define <4 x float> @faddwq(<4 x float> %0, <4 x float> %1) {
; CHECK-LABEL: faddwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    faddwq.rn $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: faddwq:
; V2:       # %bb.0:
; V2-NEXT:    faddwq.rn $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <4 x float> @llvm.kvx.fadd.v4f32(<4 x float> %0, <4 x float> %1, i32 0, i32 0)
  ret <4 x float> %3
}

define double @fsbfd(double %0, double %1) {
; CHECK-LABEL: fsbfd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfd.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfd:
; V2:       # %bb.0:
; V2-NEXT:    fsbfd.rz $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call double @llvm.kvx.fsbf.f64(double %0, double %1, i32 3, i32 0)
  ret double %3
}

declare double @llvm.kvx.fsbf.f64(double, double, i32, i32)

define <2 x double> @fsbfdc(<2 x double> %0, <2 x double> %1) {
; CHECK-LABEL: fsbfdc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfdc.c.rn $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfdc:
; V2:       # %bb.0:
; V2-NEXT:    fsbfdc.c.rn $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x double> @llvm.kvx.fsbfc.v2f64(<2 x double> %0, <2 x double> %1, i32 0, i32 0)
  ret <2 x double> %3
}

declare <2 x double> @llvm.kvx.fsbfc.v2f64(<2 x double>, <2 x double>, i32, i32)

define <2 x double> @fsbfdp(<2 x double> %0, <2 x double> %1) {
; CHECK-LABEL: fsbfdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfdp.rn $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfdp:
; V2:       # %bb.0:
; V2-NEXT:    fsbfdp.rn $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x double> @llvm.kvx.fsbf.v2f64(<2 x double> %0, <2 x double> %1, i32 0, i32 0)
  ret <2 x double> %3
}

declare <2 x double> @llvm.kvx.fsbf.v2f64(<2 x double>, <2 x double>, i32, i32)

define <4 x double> @fsbfdq(<4 x double> %0, <4 x double> %1) {
; CHECK-LABEL: fsbfdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfdp.rn $r0r1 = $r0r1, $r4r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfdp.rn $r2r3 = $r2r3, $r6r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfdq:
; V2:       # %bb.0:
; V2-NEXT:    fsbfdp.rn $r0r1 = $r0r1, $r4r5
; V2-NEXT:    ;;
; V2-NEXT:    fsbfdp.rn $r2r3 = $r2r3, $r6r7
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = shufflevector <4 x double> %0, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x double> %1, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %5 = tail call <2 x double> @llvm.kvx.fsbf.v2f64(<2 x double> %3, <2 x double> %4, i32 0, i32 0)
  %6 = shufflevector <4 x double> %0, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %7 = shufflevector <4 x double> %1, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <2 x double> @llvm.kvx.fsbf.v2f64(<2 x double> %6, <2 x double> %7, i32 0, i32 0)
  %9 = shufflevector <2 x double> %5, <2 x double> %8, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %9
}

define half @fsbfh(half %0, half %1) {
; CHECK-LABEL: fsbfh:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfhq.s $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfh:
; V2:       # %bb.0:
; V2-NEXT:    fsbfhq.s $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call half @llvm.kvx.fsbf.f16(half %0, half %1, i32 7, i32 1)
  ret half %3
}

declare half @llvm.kvx.fsbf.f16(half, half, i32, i32)

define <2 x half> @fsbfhp(<2 x half> %0, <2 x half> %1) {
; CHECK-LABEL: fsbfhp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfhq.rz.s $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfhp:
; V2:       # %bb.0:
; V2-NEXT:    fsbfhq.rz.s $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x half> @llvm.kvx.fsbf.v2f16(<2 x half> %0, <2 x half> %1, i32 3, i32 1)
  ret <2 x half> %3
}

declare <2 x half> @llvm.kvx.fsbf.v2f16(<2 x half>, <2 x half>, i32, i32)

define <4 x half> @fsbfhq(<4 x half> %0, <4 x half> %1) {
; CHECK-LABEL: fsbfhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfhq.s $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfhq:
; V2:       # %bb.0:
; V2-NEXT:    fsbfhq.s $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <4 x half> @llvm.kvx.fsbf.v4f16(<4 x half> %0, <4 x half> %1, i32 7, i32 1)
  ret <4 x half> %3
}

declare <4 x half> @llvm.kvx.fsbf.v4f16(<4 x half>, <4 x half>, i32, i32)

define float @fsbfw(float %0, float %1) {
; CHECK-LABEL: fsbfw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfw.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfw:
; V2:       # %bb.0:
; V2-NEXT:    fsbfw.rz $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call float @llvm.kvx.fsbf.f32(float %0, float %1, i32 3, i32 0)
  ret float %3
}

declare float @llvm.kvx.fsbf.f32(float, float, i32, i32)

define <2 x float> @fsbfwc(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: fsbfwc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfwc.c.rn $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfwc:
; V2:       # %bb.0:
; V2-NEXT:    fsbfwc.c.rn $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.fsbfc.v2f32(<2 x float> %0, <2 x float> %1, i32 0, i32 0)
  ret <2 x float> %3
}

declare <2 x float> @llvm.kvx.fsbfc.v2f32(<2 x float>, <2 x float>, i32, i32)

define <4 x float> @fsbfwcp(<4 x float> %0, <4 x float> %1) {
; CHECK-LABEL: fsbfwcp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfwcp.c.rn $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfwcp:
; V2:       # %bb.0:
; V2-NEXT:    fsbfwcp.c.rn $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <4 x float> @llvm.kvx.fsbfc.v4f32(<4 x float> %0, <4 x float> %1, i32 0, i32 0)
  ret <4 x float> %3
}

declare <4 x float> @llvm.kvx.fsbfc.v4f32(<4 x float>, <4 x float>, i32, i32)

define <8 x float> @fsbfwo(<8 x float> %0, <8 x float> %1) {
; CHECK-LABEL: fsbfwo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfwq.rn $r0r1 = $r0r1, $r4r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fsbfwq.rn $r2r3 = $r2r3, $r6r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfwo:
; V2:       # %bb.0:
; V2-NEXT:    fsbfwq.rn $r0r1 = $r0r1, $r4r5
; V2-NEXT:    ;;
; V2-NEXT:    fsbfwq.rn $r2r3 = $r2r3, $r6r7
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = tail call <4 x float> @llvm.kvx.fsbf.v4f32(<4 x float> %3, <4 x float> %4, i32 0, i32 0)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8 = tail call <4 x float> @llvm.kvx.fsbf.v4f32(<4 x float> %6, <4 x float> %7, i32 0, i32 0)
  %9 = shufflevector <4 x float> %5, <4 x float> %8, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %9
}

declare <4 x float> @llvm.kvx.fsbf.v4f32(<4 x float>, <4 x float>, i32, i32)

define <2 x float> @fsbfwp(<2 x float> %0, <2 x float> %1) {
; CHECK-LABEL: fsbfwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfwp.rn $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfwp:
; V2:       # %bb.0:
; V2-NEXT:    fsbfwp.rn $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.fsbf.v2f32(<2 x float> %0, <2 x float> %1, i32 0, i32 0)
  ret <2 x float> %3
}

declare <2 x float> @llvm.kvx.fsbf.v2f32(<2 x float>, <2 x float>, i32, i32)

define <4 x float> @fsbfwq(<4 x float> %0, <4 x float> %1) {
; CHECK-LABEL: fsbfwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fsbfwq.rn $r0r1 = $r0r1, $r2r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
;
; V2-LABEL: fsbfwq:
; V2:       # %bb.0:
; V2-NEXT:    fsbfwq.rn $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;;
  %3 = tail call <4 x float> @llvm.kvx.fsbf.v4f32(<4 x float> %0, <4 x float> %1, i32 0, i32 0)
  ret <4 x float> %3
}

