; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV2
target triple = "kvx-kalray-cos"

declare i32 @llvm.sshl.sat.i32(i32, i32)
declare i32 @llvm.ushl.sat.i32(i32, i32)

declare i64 @llvm.sshl.sat.i64(i64, i64)
declare i64 @llvm.ushl.sat.i64(i64, i64)

declare <2 x i8> @llvm.sshl.sat.v2i8(<2 x i8>, <2 x i8>)
declare <2 x i8> @llvm.ushl.sat.v2i8(<2 x i8>, <2 x i8>)

declare <2 x i16> @llvm.sshl.sat.v2i16(<2 x i16>, <2 x i16>)
declare <2 x i16> @llvm.ushl.sat.v2i16(<2 x i16>, <2 x i16>)

declare <2 x i32> @llvm.sshl.sat.v2i32(<2 x i32>, <2 x i32>)
declare <2 x i32> @llvm.ushl.sat.v2i32(<2 x i32>, <2 x i32>)

declare <4 x i8> @llvm.sshl.sat.v4i8(<4 x i8>, <4 x i8>)
declare <4 x i8> @llvm.ushl.sat.v4i8(<4 x i8>, <4 x i8>)

declare <4 x i16> @llvm.sshl.sat.v4i16(<4 x i16>, <4 x i16>)
declare <4 x i16> @llvm.ushl.sat.v4i16(<4 x i16>, <4 x i16>)

declare <8 x i8> @llvm.sshl.sat.v8i8(<8 x i8>, <8 x i8>)
declare <8 x i8> @llvm.ushl.sat.v8i8(<8 x i8>, <8 x i8>)

define i32 @sat_sshl_i32(i32 %lhs, i32 %rhs) {
; ALL-LABEL: sat_sshl_i32:
; ALL:       # %bb.0:
; ALL-NEXT:    slsw $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call i32 @llvm.sshl.sat.i32(i32 %lhs, i32 %rhs)
  ret i32 %r
}
define i32 @sat_ushl_i32(i32 %lhs, i32 %rhs) {
; CV1-LABEL: sat_ushl_i32:
; CV1:       # %bb.0:
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_i32:
; CV2:       # %bb.0:
; CV2-NEXT:    slusw $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call i32 @llvm.ushl.sat.i32(i32 %lhs, i32 %rhs)
  ret i32 %r
}

define i64 @sat_sshl_i64(i64 %lhs, i64 %rhs) {
; ALL-LABEL: sat_sshl_i64:
; ALL:       # %bb.0:
; ALL-NEXT:    slsd $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call i64 @llvm.sshl.sat.i64(i64 %lhs, i64 %rhs)
  ret i64 %r
}
define i64 @sat_ushl_i64(i64 %lhs, i64 %rhs) {
; CV1-LABEL: sat_ushl_i64:
; CV1:       # %bb.0:
; CV1-NEXT:    slld $r2 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    srld $r1 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    compd.ne $r0 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    cmoved.odd $r0 ? $r2 = -1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_i64:
; CV2:       # %bb.0:
; CV2-NEXT:    slusd $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call i64 @llvm.ushl.sat.i64(i64 %lhs, i64 %rhs)
  ret i64 %r
}

define <2 x i8> @sat_sshl_v2i8(<2 x i8> %lhs, i8 %srhs) {
; CV1-LABEL: sat_sshl_v2i8:
; CV1:       # %bb.0:
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r2 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r0 = $r0, $r1
; CV1-NEXT:    slsw $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, 24
; CV1-NEXT:    sraw $r1 = $r2, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_sshl_v2i8:
; CV2:       # %bb.0:
; CV2-NEXT:    slsbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <2 x i8> poison, i8 %srhs, i64 0
  %rhs = shufflevector<2 x i8> %tmp, <2 x i8> undef, <2 x i32> zeroinitializer
  %r = call <2 x i8> @llvm.sshl.sat.v2i8(<2 x i8> %lhs, <2 x i8> %rhs)
  ret <2 x i8> %r
}

define <2 x i8> @sat_ushl_v2i8(<2 x i8> %lhs, i8 %srhs) {
; CV1-LABEL: sat_ushl_v2i8:
; CV1:       # %bb.0:
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r2 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, $r1
; CV1-NEXT:    slld $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    minud $r1 = $r2, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 24
; CV1-NEXT:    srlw $r1 = $r1, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v2i8:
; CV2:       # %bb.0:
; CV2-NEXT:    slusbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <2 x i8> poison, i8 %srhs, i64 0
  %rhs = shufflevector<2 x i8> %tmp, <2 x i8> undef, <2 x i32> zeroinitializer
  %r = call <2 x i8> @llvm.ushl.sat.v2i8(<2 x i8> %lhs, <2 x i8> %rhs)
  ret <2 x i8> %r
}

define <2 x i16> @sat_sshl_v2i16(<2 x i16> %lhs, i16 %srhs) {
; ALL-LABEL: sat_sshl_v2i16:
; ALL:       # %bb.0:
; ALL-NEXT:    slshqs $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %tmp = insertelement <2 x i16> poison, i16 %srhs, i64 0
  %rhs = shufflevector<2 x i16> %tmp, <2 x i16> undef, <2 x i32> zeroinitializer
  %r = call <2 x i16> @llvm.sshl.sat.v2i16(<2 x i16> %lhs, <2 x i16> %rhs)
  ret <2 x i16> %r
}

define <2 x i16> @sat_ushl_v2i16(<2 x i16> %lhs, i16 %srhs) {
; CV1-LABEL: sat_ushl_v2i16:
; CV1:       # %bb.0:
; CV1-NEXT:    zxhd $r0 = $r0
; CV1-NEXT:    zxhd $r1 = $r1
; CV1-NEXT:    srlw $r2 = $r0, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 16
; CV1-NEXT:    sllw $r2 = $r2, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, $r1
; CV1-NEXT:    slld $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    minud $r1 = $r2, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 16
; CV1-NEXT:    srlw $r1 = $r1, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 31, 16
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v2i16:
; CV2:       # %bb.0:
; CV2-NEXT:    slushqs $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <2 x i16> poison, i16 %srhs, i64 0
  %rhs = shufflevector<2 x i16> %tmp, <2 x i16> undef, <2 x i32> zeroinitializer
  %r = call <2 x i16> @llvm.ushl.sat.v2i16(<2 x i16> %lhs, <2 x i16> %rhs)
  ret <2 x i16> %r
}

define <2 x i32> @sat_sshl_v2i32(<2 x i32> %lhs, i32 %srhs) {
; ALL-LABEL: sat_sshl_v2i32:
; ALL:       # %bb.0:
; ALL-NEXT:    slswps $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %tmp = insertelement <2 x i32> poison, i32 %srhs, i64 0
  %rhs = shufflevector<2 x i32> %tmp, <2 x i32> undef, <2 x i32> zeroinitializer
  %r = call <2 x i32> @llvm.sshl.sat.v2i32(<2 x i32> %lhs, <2 x i32> %rhs)
  ret <2 x i32> %r
}

define <2 x i32> @sat_ushl_v2i32(<2 x i32> %lhs, i32 %srhs) {
; CV1-LABEL: sat_ushl_v2i32:
; CV1:       # %bb.0:
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    srad $r2 = $r0, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, $r1
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    slld $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r1 = $r2, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v2i32:
; CV2:       # %bb.0:
; CV2-NEXT:    sluswps $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <2 x i32> poison, i32 %srhs, i64 0
  %rhs = shufflevector<2 x i32> %tmp, <2 x i32> undef, <2 x i32> zeroinitializer
  %r = call <2 x i32> @llvm.ushl.sat.v2i32(<2 x i32> %lhs, <2 x i32> %rhs)
  ret <2 x i32> %r
}

define <4 x i8> @sat_sshl_v4i8(<4 x i8> %lhs, i8 %srhs) {
; CV1-LABEL: sat_sshl_v4i8:
; CV1:       # %bb.0:
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    srlw $r2 = $r0, 24
; CV1-NEXT:    extfz $r3 = $r0, 23, 16
; CV1-NEXT:    extfz $r4 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    sllw $r3 = $r3, 24
; CV1-NEXT:    sllw $r4 = $r4, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r0 = $r0, $r1
; CV1-NEXT:    slsw $r2 = $r2, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, 24
; CV1-NEXT:    sraw $r1 = $r2, 24
; CV1-NEXT:    slsw $r3 = $r3, $r1
; CV1-NEXT:    slsw $r4 = $r4, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r2 = $r3, 24
; CV1-NEXT:    sraw $r3 = $r4, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r3, 15, 8
; CV1-NEXT:    insf $r2 = $r1, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 31, 16
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_sshl_v4i8:
; CV2:       # %bb.0:
; CV2-NEXT:    slsbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <4 x i8> poison, i8 %srhs, i64 0
  %rhs = shufflevector<4 x i8> %tmp, <4 x i8> undef, <4 x i32> zeroinitializer
  %r = call <4 x i8> @llvm.sshl.sat.v4i8(<4 x i8> %lhs, <4 x i8> %rhs)
  ret <4 x i8> %r
}

define <4 x i8> @sat_ushl_v4i8(<4 x i8> %lhs, i8 %srhs) {
; CV1-LABEL: sat_ushl_v4i8:
; CV1:       # %bb.0:
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    srlw $r2 = $r0, 24
; CV1-NEXT:    extfz $r3 = $r0, 23, 16
; CV1-NEXT:    extfz $r4 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    sllw $r3 = $r3, 24
; CV1-NEXT:    sllw $r4 = $r4, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    zxwd $r3 = $r3
; CV1-NEXT:    zxwd $r4 = $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, $r1
; CV1-NEXT:    slld $r2 = $r2, $r1
; CV1-NEXT:    slld $r3 = $r3, $r1
; CV1-NEXT:    slld $r4 = $r4, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    minud $r1 = $r2, 0xffffffff
; CV1-NEXT:    minud $r2 = $r3, 0xffffffff
; CV1-NEXT:    minud $r3 = $r4, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 24
; CV1-NEXT:    srlw $r1 = $r1, 24
; CV1-NEXT:    srlw $r2 = $r2, 24
; CV1-NEXT:    srlw $r3 = $r3, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r3, 15, 8
; CV1-NEXT:    insf $r2 = $r1, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 31, 16
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v4i8:
; CV2:       # %bb.0:
; CV2-NEXT:    slusbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <4 x i8> poison, i8 %srhs, i64 0
  %rhs = shufflevector<4 x i8> %tmp, <4 x i8> undef, <4 x i32> zeroinitializer
  %r = call <4 x i8> @llvm.ushl.sat.v4i8(<4 x i8> %lhs, <4 x i8> %rhs)
  ret <4 x i8> %r
}

define <4 x i16> @sat_sshl_v4i16(<4 x i16> %lhs, i16 %srhs) {
; ALL-LABEL: sat_sshl_v4i16:
; ALL:       # %bb.0:
; ALL-NEXT:    slshqs $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %tmp = insertelement <4 x i16> poison, i16 %srhs, i64 0
  %rhs = shufflevector<4 x i16> %tmp, <4 x i16> undef, <4 x i32> zeroinitializer
  %r = call <4 x i16> @llvm.sshl.sat.v4i16(<4 x i16> %lhs, <4 x i16> %rhs)
  ret <4 x i16> %r
}

define <4 x i16> @sat_ushl_v4i16(<4 x i16> %lhs, i16 %srhs) {
; CV1-LABEL: sat_ushl_v4i16:
; CV1:       # %bb.0:
; CV1-NEXT:    zxhd $r0 = $r0
; CV1-NEXT:    srld $r2 = $r0, 48
; CV1-NEXT:    extfz $r3 = $r0, 47, 32
; CV1-NEXT:    srlw $r4 = $r0, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxhd $r1 = $r1
; CV1-NEXT:    sllw $r2 = $r2, 16
; CV1-NEXT:    sllw $r3 = $r3, 16
; CV1-NEXT:    sllw $r4 = $r4, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 16
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    zxwd $r3 = $r3
; CV1-NEXT:    zxwd $r4 = $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, $r1
; CV1-NEXT:    slld $r2 = $r2, $r1
; CV1-NEXT:    slld $r3 = $r3, $r1
; CV1-NEXT:    slld $r4 = $r4, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    minud $r1 = $r2, 0xffffffff
; CV1-NEXT:    minud $r2 = $r3, 0xffffffff
; CV1-NEXT:    minud $r3 = $r4, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 16
; CV1-NEXT:    srlw $r1 = $r1, 16
; CV1-NEXT:    srlw $r2 = $r2, 16
; CV1-NEXT:    srlw $r3 = $r3, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r3, 31, 16
; CV1-NEXT:    insf $r2 = $r1, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v4i16:
; CV2:       # %bb.0:
; CV2-NEXT:    slushqs $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <4 x i16> poison, i16 %srhs, i64 0
  %rhs = shufflevector<4 x i16> %tmp, <4 x i16> undef, <4 x i32> zeroinitializer
  %r = call <4 x i16> @llvm.ushl.sat.v4i16(<4 x i16> %lhs, <4 x i16> %rhs)
  ret <4 x i16> %r
}

define <8 x i8> @sat_sshl_v8i8(<8 x i8> %lhs, i8 %srhs) {
; CV1-LABEL: sat_sshl_v8i8:
; CV1:       # %bb.0:
; CV1-NEXT:    srld $r2 = $r0, 56
; CV1-NEXT:    extfz $r3 = $r0, 55, 48
; CV1-NEXT:    extfz $r4 = $r0, 47, 40
; CV1-NEXT:    srlw $r6 = $r0, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r5 = $r0, 39, 32
; CV1-NEXT:    extfz $r7 = $r0, 23, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    sllw $r3 = $r3, 24
; CV1-NEXT:    extfz $r8 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r4 = $r4, 24
; CV1-NEXT:    sllw $r5 = $r5, 24
; CV1-NEXT:    sllw $r6 = $r6, 24
; CV1-NEXT:    sllw $r7 = $r7, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    slsw $r2 = $r2, $r1
; CV1-NEXT:    slsw $r3 = $r3, $r1
; CV1-NEXT:    sllw $r8 = $r8, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r4 = $r4, $r1
; CV1-NEXT:    slsw $r5 = $r5, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r0 = $r0, $r1
; CV1-NEXT:    slsw $r6 = $r6, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r1 = $r2, 24
; CV1-NEXT:    sraw $r2 = $r3, 24
; CV1-NEXT:    slsw $r7 = $r7, $r1
; CV1-NEXT:    slsw $r8 = $r8, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, 24
; CV1-NEXT:    sraw $r3 = $r4, 24
; CV1-NEXT:    sraw $r4 = $r5, 24
; CV1-NEXT:    sraw $r5 = $r6, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r2 = $r1, 15, 8
; CV1-NEXT:    insf $r4 = $r3, 15, 8
; CV1-NEXT:    sraw $r6 = $r7, 24
; CV1-NEXT:    sraw $r7 = $r8, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r7, 15, 8
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r6, 31, 16
; CV1-NEXT:    insf $r4 = $r2, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r4, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_sshl_v8i8:
; CV2:       # %bb.0:
; CV2-NEXT:    slsbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <8 x i8> poison, i8 %srhs, i64 0
  %rhs = shufflevector<8 x i8> %tmp, <8 x i8> undef, <8 x i32> zeroinitializer
  %r = call <8 x i8> @llvm.sshl.sat.v8i8(<8 x i8> %lhs, <8 x i8> %rhs)
  ret <8 x i8> %r
}

define <8 x i8> @sat_ushl_v8i8(<8 x i8> %lhs, i8 %srhs) {
; CV1-LABEL: sat_ushl_v8i8:
; CV1:       # %bb.0:
; CV1-NEXT:    extfz $r2 = $r0, 55, 48
; CV1-NEXT:    srld $r3 = $r0, 56
; CV1-NEXT:    extfz $r4 = $r0, 47, 40
; CV1-NEXT:    srlw $r6 = $r0, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r1 = $r1
; CV1-NEXT:    extfz $r5 = $r0, 39, 32
; CV1-NEXT:    extfz $r7 = $r0, 23, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    sllw $r3 = $r3, 24
; CV1-NEXT:    extfz $r8 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r4 = $r4, 24
; CV1-NEXT:    sllw $r5 = $r5, 24
; CV1-NEXT:    sllw $r6 = $r6, 24
; CV1-NEXT:    sllw $r7 = $r7, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    zxwd $r3 = $r3
; CV1-NEXT:    sllw $r8 = $r8, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r4 = $r4
; CV1-NEXT:    zxwd $r5 = $r5
; CV1-NEXT:    zxwd $r6 = $r6
; CV1-NEXT:    zxwd $r7 = $r7
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    slld $r2 = $r2, $r1
; CV1-NEXT:    slld $r3 = $r3, $r1
; CV1-NEXT:    zxwd $r8 = $r8
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r4 = $r4, $r1
; CV1-NEXT:    slld $r5 = $r5, $r1
; CV1-NEXT:    slld $r6 = $r6, $r1
; CV1-NEXT:    slld $r7 = $r7, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, $r1
; CV1-NEXT:    minud $r1 = $r3, 0xffffffff
; CV1-NEXT:    minud $r2 = $r2, 0xffffffff
; CV1-NEXT:    slld $r8 = $r8, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r3 = $r4, 0xffffffff
; CV1-NEXT:    minud $r4 = $r5, 0xffffffff
; CV1-NEXT:    minud $r5 = $r6, 0xffffffff
; CV1-NEXT:    minud $r6 = $r7, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    srlw $r1 = $r1, 24
; CV1-NEXT:    srlw $r2 = $r2, 24
; CV1-NEXT:    minud $r7 = $r8, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r3 = $r3, 24
; CV1-NEXT:    srlw $r4 = $r4, 24
; CV1-NEXT:    srlw $r5 = $r5, 24
; CV1-NEXT:    srlw $r6 = $r6, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 24
; CV1-NEXT:    insf $r2 = $r1, 15, 8
; CV1-NEXT:    insf $r4 = $r3, 15, 8
; CV1-NEXT:    srlw $r7 = $r7, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r7, 15, 8
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r6, 31, 16
; CV1-NEXT:    insf $r4 = $r2, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r4, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v8i8:
; CV2:       # %bb.0:
; CV2-NEXT:    slusbos $r0 = $r0, $r1
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %tmp = insertelement <8 x i8> poison, i8 %srhs, i64 0
  %rhs = shufflevector<8 x i8> %tmp, <8 x i8> undef, <8 x i32> zeroinitializer
  %r = call <8 x i8> @llvm.ushl.sat.v8i8(<8 x i8> %lhs, <8 x i8> %rhs)
  ret <8 x i8> %r
}

define i32 @sat_sshl_i32_ri(i32 %lhs) {
; ALL-LABEL: sat_sshl_i32_ri:
; ALL:       # %bb.0:
; ALL-NEXT:    slsw $r0 = $r0, 7
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call i32 @llvm.sshl.sat.i32(i32 %lhs, i32 7)
  ret i32 %r
}
define i32 @sat_ushl_i32_ri(i32 %lhs) {
;
; CV1-LABEL: sat_ushl_i32_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_i32_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slusw $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call i32 @llvm.ushl.sat.i32(i32 %lhs, i32 7)
  ret i32 %r
}

define i64 @sat_sshl_i64_ri(i64 %lhs) {
; ALL-LABEL: sat_sshl_i64_ri:
; ALL:       # %bb.0:
; ALL-NEXT:    slsd $r0 = $r0, 7
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call i64 @llvm.sshl.sat.i64(i64 %lhs, i64 7)
  ret i64 %r
}

define i64 @sat_ushl_i64_ri(i64 %lhs) {
; CV1-LABEL: sat_ushl_i64_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    clrf $r1 = $r0, 63, 57
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, 7
; CV1-NEXT:    compd.ne $r1 = $r0, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    cmoved.odd $r1 ? $r0 = -1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_i64_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slusd $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call i64 @llvm.ushl.sat.i64(i64 %lhs, i64 7)
  ret i64 %r
}

define <2 x i8> @sat_sshl_v2i8_ri(<2 x i8> %lhs) {
; CV1-LABEL: sat_sshl_v2i8_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    sllw $r1 = $r1, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r0 = $r0, 7
; CV1-NEXT:    slsw $r1 = $r1, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, 24
; CV1-NEXT:    sraw $r1 = $r1, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_sshl_v2i8_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slsbos $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <2 x i8> @llvm.sshl.sat.v2i8(<2 x i8> %lhs, <2 x i8> <i8 7, i8 7>)
  ret <2 x i8> %r
}
define <2 x i8> @sat_ushl_v2i8_ri(<2 x i8> %lhs) {
;
; CV1-LABEL: sat_ushl_v2i8_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    extfz $r1 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    sllw $r1 = $r1, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    zxwd $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, 7
; CV1-NEXT:    slld $r1 = $r1, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    minud $r1 = $r1, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 24
; CV1-NEXT:    srlw $r1 = $r1, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 15, 8
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v2i8_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slusbos $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <2 x i8> @llvm.ushl.sat.v2i8(<2 x i8> %lhs, <2 x i8> <i8 7, i8 7>)
  ret <2 x i8> %r
}

define <2 x i16> @sat_sshl_v2i16_ri(<2 x i16> %lhs) {
; ALL-LABEL: sat_sshl_v2i16_ri:
; ALL:       # %bb.0:
; ALL-NEXT:    slshqs $r0 = $r0, 7
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <2 x i16> @llvm.sshl.sat.v2i16(<2 x i16> %lhs, <2 x i16> <i16 7, i16 7>)
  ret <2 x i16> %r
}
define <2 x i16> @sat_ushl_v2i16_ri(<2 x i16> %lhs) {
;
; CV1-LABEL: sat_ushl_v2i16_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    zxhd $r0 = $r0
; CV1-NEXT:    srlw $r1 = $r0, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 16
; CV1-NEXT:    sllw $r1 = $r1, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    zxwd $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, 7
; CV1-NEXT:    slld $r1 = $r1, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    minud $r1 = $r1, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 16
; CV1-NEXT:    srlw $r1 = $r1, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 31, 16
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v2i16_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slushqs $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <2 x i16> @llvm.ushl.sat.v2i16(<2 x i16> %lhs, <2 x i16> <i16 7, i16 7>)
  ret <2 x i16> %r
}

define <2 x i32> @sat_sshl_v2i32_ri(<2 x i32> %lhs) {
; ALL-LABEL: sat_sshl_v2i32_ri:
; ALL:       # %bb.0:
; ALL-NEXT:    slswps $r0 = $r0, 7
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <2 x i32> @llvm.sshl.sat.v2i32(<2 x i32> %lhs, <2 x i32> <i32 7, i32 7>)
  ret <2 x i32> %r
}
define <2 x i32> @sat_ushl_v2i32_ri(<2 x i32> %lhs) {
;
; CV1-LABEL: sat_ushl_v2i32_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    srad $r1 = $r0, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, 7
; CV1-NEXT:    zxwd $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    slld $r1 = $r1, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r1 = $r1, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r1, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v2i32_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    sluswps $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <2 x i32> @llvm.ushl.sat.v2i32(<2 x i32> %lhs, <2 x i32> <i32 7, i32 7>)
  ret <2 x i32> %r
}

define <4 x i8> @sat_sshl_v4i8_ri(<4 x i8> %lhs) {
; CV1-LABEL: sat_sshl_v4i8_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    srlw $r1 = $r0, 24
; CV1-NEXT:    extfz $r2 = $r0, 23, 16
; CV1-NEXT:    extfz $r3 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    sllw $r1 = $r1, 24
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    sllw $r3 = $r3, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r1 = $r1, 7
; CV1-NEXT:    slsw $r2 = $r2, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r0 = $r0, 7
; CV1-NEXT:    sraw $r1 = $r1, 24
; CV1-NEXT:    sraw $r2 = $r2, 24
; CV1-NEXT:    slsw $r3 = $r3, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, 24
; CV1-NEXT:    insf $r2 = $r1, 15, 8
; CV1-NEXT:    sraw $r3 = $r3, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r3, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 31, 16
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_sshl_v4i8_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slsbos $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <4 x i8> @llvm.sshl.sat.v4i8(<4 x i8> %lhs, <4 x i8> <i8 7, i8 7, i8 7, i8 7>)
  ret <4 x i8> %r
}
define <4 x i8> @sat_ushl_v4i8_ri(<4 x i8> %lhs) {
;
; CV1-LABEL: sat_ushl_v4i8_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    srlw $r1 = $r0, 24
; CV1-NEXT:    extfz $r2 = $r0, 23, 16
; CV1-NEXT:    extfz $r3 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    sllw $r1 = $r1, 24
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    sllw $r3 = $r3, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    zxwd $r1 = $r1
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    zxwd $r3 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, 7
; CV1-NEXT:    slld $r1 = $r1, 7
; CV1-NEXT:    slld $r2 = $r2, 7
; CV1-NEXT:    slld $r3 = $r3, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    minud $r1 = $r1, 0xffffffff
; CV1-NEXT:    minud $r2 = $r2, 0xffffffff
; CV1-NEXT:    minud $r3 = $r3, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 24
; CV1-NEXT:    srlw $r1 = $r1, 24
; CV1-NEXT:    srlw $r2 = $r2, 24
; CV1-NEXT:    srlw $r3 = $r3, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r3, 15, 8
; CV1-NEXT:    insf $r2 = $r1, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 31, 16
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v4i8_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slusbos $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <4 x i8> @llvm.ushl.sat.v4i8(<4 x i8> %lhs, <4 x i8> <i8 7, i8 7, i8 7, i8 7>)
  ret <4 x i8> %r
}

define <4 x i16> @sat_sshl_v4i16_ri(<4 x i16> %lhs) {
; ALL-LABEL: sat_sshl_v4i16_ri:
; ALL:       # %bb.0:
; ALL-NEXT:    slshqs $r0 = $r0, 7
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %r = call <4 x i16> @llvm.sshl.sat.v4i16(<4 x i16> %lhs, <4 x i16> <i16 7, i16 7, i16 7, i16 7>)
  ret <4 x i16> %r
}
define <4 x i16> @sat_ushl_v4i16_ri(<4 x i16> %lhs) {
;
; CV1-LABEL: sat_ushl_v4i16_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    zxhd $r0 = $r0
; CV1-NEXT:    srld $r1 = $r0, 48
; CV1-NEXT:    extfz $r2 = $r0, 47, 32
; CV1-NEXT:    srlw $r3 = $r0, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 16
; CV1-NEXT:    sllw $r1 = $r1, 16
; CV1-NEXT:    sllw $r2 = $r2, 16
; CV1-NEXT:    sllw $r3 = $r3, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    zxwd $r1 = $r1
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    zxwd $r3 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, 7
; CV1-NEXT:    slld $r1 = $r1, 7
; CV1-NEXT:    slld $r2 = $r2, 7
; CV1-NEXT:    slld $r3 = $r3, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    minud $r1 = $r1, 0xffffffff
; CV1-NEXT:    minud $r2 = $r2, 0xffffffff
; CV1-NEXT:    minud $r3 = $r3, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 16
; CV1-NEXT:    srlw $r1 = $r1, 16
; CV1-NEXT:    srlw $r2 = $r2, 16
; CV1-NEXT:    srlw $r3 = $r3, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r3, 31, 16
; CV1-NEXT:    insf $r2 = $r1, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r2, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v4i16_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slushqs $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <4 x i16> @llvm.ushl.sat.v4i16(<4 x i16> %lhs, <4 x i16> <i16 7, i16 7, i16 7, i16 7>)
  ret <4 x i16> %r
}

define <8 x i8> @sat_sshl_v8i8_ri(<8 x i8> %lhs) {
; CV1-LABEL: sat_sshl_v8i8_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    srld $r1 = $r0, 56
; CV1-NEXT:    extfz $r2 = $r0, 55, 48
; CV1-NEXT:    extfz $r3 = $r0, 47, 40
; CV1-NEXT:    srlw $r5 = $r0, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    extfz $r4 = $r0, 39, 32
; CV1-NEXT:    extfz $r6 = $r0, 23, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    sllw $r1 = $r1, 24
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    extfz $r7 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r3 = $r3, 24
; CV1-NEXT:    sllw $r4 = $r4, 24
; CV1-NEXT:    sllw $r5 = $r5, 24
; CV1-NEXT:    sllw $r6 = $r6, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    slsw $r1 = $r1, 7
; CV1-NEXT:    slsw $r2 = $r2, 7
; CV1-NEXT:    sllw $r7 = $r7, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r3 = $r3, 7
; CV1-NEXT:    slsw $r4 = $r4, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r1 = $r1, 24
; CV1-NEXT:    sraw $r2 = $r2, 24
; CV1-NEXT:    slsw $r5 = $r5, 7
; CV1-NEXT:    slsw $r6 = $r6, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    slsw $r0 = $r0, 7
; CV1-NEXT:    sraw $r3 = $r3, 24
; CV1-NEXT:    sraw $r4 = $r4, 24
; CV1-NEXT:    slsw $r7 = $r7, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r2 = $r1, 15, 8
; CV1-NEXT:    sraw $r5 = $r5, 24
; CV1-NEXT:    sraw $r6 = $r6, 24
; CV1-NEXT:    sraw $r7 = $r7, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    sraw $r0 = $r0, 24
; CV1-NEXT:    insf $r4 = $r3, 15, 8
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r7, 15, 8
; CV1-NEXT:    insf $r4 = $r2, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r6, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r4, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_sshl_v8i8_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slsbos $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <8 x i8> @llvm.sshl.sat.v8i8(<8 x i8> %lhs, <8 x i8> <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>)
  ret <8 x i8> %r
}
define <8 x i8> @sat_ushl_v8i8_ri(<8 x i8> %lhs) {
;
; CV1-LABEL: sat_ushl_v8i8_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    extfz $r1 = $r0, 55, 48
; CV1-NEXT:    srld $r2 = $r0, 56
; CV1-NEXT:    extfz $r3 = $r0, 47, 40
; CV1-NEXT:    srlw $r5 = $r0, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    extfz $r4 = $r0, 39, 32
; CV1-NEXT:    extfz $r6 = $r0, 23, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    zxbd $r0 = $r0
; CV1-NEXT:    sllw $r1 = $r1, 24
; CV1-NEXT:    sllw $r2 = $r2, 24
; CV1-NEXT:    extfz $r7 = $r0, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r3 = $r3, 24
; CV1-NEXT:    sllw $r4 = $r4, 24
; CV1-NEXT:    sllw $r5 = $r5, 24
; CV1-NEXT:    sllw $r6 = $r6, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    sllw $r0 = $r0, 24
; CV1-NEXT:    zxwd $r1 = $r1
; CV1-NEXT:    zxwd $r2 = $r2
; CV1-NEXT:    sllw $r7 = $r7, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r3 = $r3
; CV1-NEXT:    zxwd $r4 = $r4
; CV1-NEXT:    zxwd $r5 = $r5
; CV1-NEXT:    zxwd $r6 = $r6
; CV1-NEXT:    ;;
; CV1-NEXT:    zxwd $r0 = $r0
; CV1-NEXT:    slld $r1 = $r1, 7
; CV1-NEXT:    slld $r2 = $r2, 7
; CV1-NEXT:    zxwd $r7 = $r7
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r3 = $r3, 7
; CV1-NEXT:    slld $r4 = $r4, 7
; CV1-NEXT:    slld $r5 = $r5, 7
; CV1-NEXT:    slld $r6 = $r6, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r0 = $r0, 7
; CV1-NEXT:    minud $r1 = $r1, 0xffffffff
; CV1-NEXT:    minud $r2 = $r2, 0xffffffff
; CV1-NEXT:    slld $r7 = $r7, 7
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r3 = $r3, 0xffffffff
; CV1-NEXT:    minud $r4 = $r4, 0xffffffff
; CV1-NEXT:    minud $r5 = $r5, 0xffffffff
; CV1-NEXT:    minud $r6 = $r6, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    minud $r0 = $r0, 0xffffffff
; CV1-NEXT:    srlw $r1 = $r1, 24
; CV1-NEXT:    srlw $r2 = $r2, 24
; CV1-NEXT:    minud $r7 = $r7, 0xffffffff
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r3 = $r3, 24
; CV1-NEXT:    srlw $r4 = $r4, 24
; CV1-NEXT:    srlw $r5 = $r5, 24
; CV1-NEXT:    srlw $r6 = $r6, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r0 = $r0, 24
; CV1-NEXT:    insf $r1 = $r2, 15, 8
; CV1-NEXT:    insf $r4 = $r3, 15, 8
; CV1-NEXT:    srlw $r7 = $r7, 24
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r7, 15, 8
; CV1-NEXT:    insf $r6 = $r5, 15, 8
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r6, 31, 16
; CV1-NEXT:    insf $r4 = $r1, 31, 16
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r0 = $r4, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sat_ushl_v8i8_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    slusbos $r0 = $r0, 7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %r = call <8 x i8> @llvm.ushl.sat.v8i8(<8 x i8> %lhs, <8 x i8> <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>)
  ret <8 x i8> %r
}
