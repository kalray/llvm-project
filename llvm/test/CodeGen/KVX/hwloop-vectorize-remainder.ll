; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -disable-kvx-hwloops=false -O3 -o - %s | FileCheck %s
; Taken from Coremark/core_matrix.c
target triple = "kvx-kalray-cos"




; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @matrix_mul_const(i32 %0, i32* nocapture %1, i16* nocapture readonly %2, i16 %3) local_unnamed_addr #0 {
; CHECK-LABEL: matrix_mul_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cb.weqz $r0 ? .LBB0_11
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    sxhd $r3 = $r3
; CHECK-NEXT:    zxwd $r4 = $r0
; CHECK-NEXT:    make $r8 = 0
; CHECK-NEXT:    compw.ltu $r9 = $r0, 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clrf $r5 = $r4, 0, 31
; CHECK-NEXT:    copyd $r10 = $r3
; CHECK-NEXT:    make $r16 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r6 = $r5, -2
; CHECK-NEXT:    insf $r10 = $r10, 63, 32
; CHECK-NEXT:    compd.eq $r15 = $r5, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r6 = $r4, -1
; CHECK-NEXT:    srld $r7 = $r6, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r7 = $r7, 1
; CHECK-NEXT:    compd.gtu $r11 = $r6, 0xffffffff
; CHECK-NEXT:    goto .LBB0_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_10: # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    addw $r8 = $r8, $r0
; CHECK-NEXT:    addw $r16 = $r16, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compw.ne $r17 = $r16, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.even $r17 ? .LBB0_11
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB0_6 Depth 2
; CHECK-NEXT:    # Child Loop BB0_9 Depth 2
; CHECK-NEXT:    cb.even $r9 ? .LBB0_3
; CHECK-NEXT:    make $r32 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_8: # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    sbfd $r17 = $r32, $r4
; CHECK-NEXT:    addw $r32 = $r8, $r32
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_9: # Parent Loop BB0_2 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    addd $r17 = $r17, -1
; CHECK-NEXT:    addw $r32 = $r32, 1
; CHECK-NEXT:    zxwd $r33 = $r32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhs.xs $r34 = $r33[$r2]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulw $r34 = $r34, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.dnez $r17 ? .LBB0_9
; CHECK-NEXT:    sw.xs $r33[$r1] = $r34
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_10
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_3: # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    mulw $r17 = $r16, $r0
; CHECK-NEXT:    make $r32 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    notw $r17 = $r17
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compw.ltu $r17 = $r17, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cb.odd $r17 ? .LBB0_8
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.4: # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    cb.odd $r11 ? .LBB0_8
; CHECK-NEXT:    make $r32 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.5: # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    copyd $r17 = $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    loopdo $r7, .__LOOPDO_0_END_
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_6: # Parent Loop BB0_2 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    addw $r17 = $r17, 2
; CHECK-NEXT:    zxwd $r32 = $r17
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r32 = $r32, 2
; CHECK-NEXT:    slld $r33 = $r32, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r33 = $r33[$r2]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxlhwp $r33 = $r33
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwp $r33 = $r10, $r33
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd $r32[$r1] = $r33
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .__LOOPDO_0_END_:
; CHECK-NEXT:  # %bb.7: # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    cb.odd $r15 ? .LBB0_10
; CHECK-NEXT:    copyd $r32 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    goto .LBB0_8
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_11:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %5 = icmp eq i32 %0, 0
  br i1 %5, label %60, label %6

6:                                                ; preds = %4
  %7 = sext i16 %3 to i32
  %8 = zext i32 %0 to i64
  %9 = zext i32 %0 to i64
  %10 = add nsw i64 %9, -1
  br label %11

11:                                               ; preds = %6, %57
  %12 = phi i32 [ 0, %6 ], [ %58, %57 ]
  %13 = mul i32 %12, %0
  %14 = zext i32 %0 to i64
  %15 = icmp ult i32 %0, 2
  br i1 %15, label %43, label %16

16:                                               ; preds = %11
  %17 = mul i32 %12, %0
  %18 = trunc i64 %10 to i32
  %19 = xor i32 %17, -1
  %20 = icmp ult i32 %19, %18
  %21 = icmp ugt i64 %10, 4294967295
  %22 = or i1 %20, %21
  br i1 %22, label %43, label %23

23:                                               ; preds = %16
  %24 = and i64 %8, 4294967294
  %25 = insertelement <2 x i32> poison, i32 %7, i32 0
  %26 = shufflevector <2 x i32> %25, <2 x i32> poison, <2 x i32> zeroinitializer
  br label %27

27:                                               ; preds = %27, %23
  %28 = phi i64 [ 0, %23 ], [ %39, %27 ]
  %29 = trunc i64 %28 to i32
  %30 = add i32 %13, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %2, i64 %31
  %33 = bitcast i16* %32 to <2 x i16>*
  %34 = load <2 x i16>, <2 x i16>* %33, align 2, !tbaa !2
  %35 = sext <2 x i16> %34 to <2 x i32>
  %36 = mul nsw <2 x i32> %26, %35
  %37 = getelementptr inbounds i32, i32* %1, i64 %31
  %38 = bitcast i32* %37 to <2 x i32>*
  store <2 x i32> %36, <2 x i32>* %38, align 4, !tbaa !6
  %39 = add i64 %28, 2
  %40 = icmp eq i64 %39, %24
  br i1 %40, label %41, label %27, !llvm.loop !8

41:                                               ; preds = %27
  %42 = icmp eq i64 %24, %8
  br i1 %42, label %57, label %43

43:                                               ; preds = %16, %11, %41
  %44 = phi i64 [ 0, %16 ], [ 0, %11 ], [ %24, %41 ]
  br label %45

45:                                               ; preds = %43, %45
  %46 = phi i64 [ %55, %45 ], [ %44, %43 ]
  %47 = trunc i64 %46 to i32
  %48 = add i32 %13, %47
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i16, i16* %2, i64 %49
  %51 = load i16, i16* %50, align 2, !tbaa !2
  %52 = sext i16 %51 to i32
  %53 = mul nsw i32 %52, %7
  %54 = getelementptr inbounds i32, i32* %1, i64 %49
  store i32 %53, i32* %54, align 4, !tbaa !6
  %55 = add nuw nsw i64 %46, 1
  %56 = icmp eq i64 %55, %14
  br i1 %56, label %57, label %45, !llvm.loop !12

57:                                               ; preds = %45, %41
  %58 = add nuw i32 %12, 1
  %59 = icmp eq i32 %58, %0
  br i1 %59, label %60, label %11, !llvm.loop !14

60:                                               ; preds = %57, %4
  ret void
}

attributes #0 = { nofree norecurse nounwind uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Kalray clang version 12.0.1 (git:software/tools/llvm-project 7a3fdf88ca0896fe92d18962b2029b3fa130eaf7)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"short", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !4, i64 0}
!8 = distinct !{!8, !9, !10, !11}
!9 = !{!"llvm.loop.mustprogress"}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !9, !10, !13, !11}
!13 = !{!"llvm.loop.remainder"}
!14 = distinct !{!14, !9, !10}
