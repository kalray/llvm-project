; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

@g1 = common global i64 0, align 8
@g2 = common global i64 0, align 8
@gf1 = common global double 0.000000e+00, align 8
@gf2 = common global double 0.000000e+00, align 8
@gi32_1 = common global i32 0, align 4
@gi32_2 = common global i32 0, align 4

define i64 @Int64TernaryRegImm(i1 %value, i64 %v1){
; CHECK-LABEL: Int64TernaryRegImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r0 ? $r2 = 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i64 %v1, i64 4
  ret i64 %cond
}

define i64 @Int64TernaryRegImm2(i64 %v1, i1 %value){
; CHECK-LABEL: Int64TernaryRegImm2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r1 ? $r0 = 4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i64 %v1, i64 4
  ret i64 %cond
}

define i64 @Int64TernaryImmReg(i1 %value, i64 %v2){
; CHECK-LABEL: Int64TernaryImmReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r2 = $r0, 1
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r2 ? $r0 = 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i64 3, i64 %v2
  ret i64 %cond
}

define i64 @Int64TernaryImmReg2(i64 %v2, i1 %value){
; CHECK-LABEL: Int64TernaryImmReg2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r1 ? $r0 = 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i64 3, i64 %v2
  ret i64 %cond
}

define i64 @Int64TernaryRegReg(i1 %value, i64 %v1, i64 %v2){
; CHECK-LABEL: Int64TernaryRegReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r3 = $r0, 1
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i64 %v1, i64 %v2
  ret i64 %cond
}

define i64 @Int64TernaryImmImm(i1 %value){
; CHECK-LABEL: Int64TernaryImmImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = select i1 %value, i64 3, i64 7
  ret i64 %conv
}

define i64 @Int64TernaryGlobalGlobal(i1 %value){
; CHECK-LABEL: Int64TernaryGlobalGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = g1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r1 ? $r0 = g2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i64, i64* @g1, align 8
  %1 = load i64, i64* @g2, align 8
  %cond = select i1 %value, i64 %0, i64 %1
  ret i64 %cond
}

define i64 @Int64TernaryGlobalImm(i1 %value){
; CHECK-LABEL: Int64TernaryGlobalImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = g1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r0 ? $r2 = 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i64, i64* @g1, align 8
  %cond = select i1 %value, i64 %0, i64 3
  ret i64 %cond
}

define i64 @Int64TernaryImmGlobal(i1 %value){
; CHECK-LABEL: Int64TernaryImmGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = g1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r0 ? $r1 = 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i64, i64* @g1, align 8
  %cond = select i1 %value, i64 3, i64 %0
  ret i64 %cond
}

define i64 @Int64TernaryRegGlobal(i1 %value, i64 %v1){
; CHECK-LABEL: Int64TernaryRegGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r2 = g1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r2 = 0[$r2]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i64, i64* @g1, align 8
  %cond = select i1 %value, i64 %v1, i64 %0
  ret i64 %cond
}

define i64 @Int64TernaryGlobalReg(i1 %value, i64 %v1){
; CHECK-LABEL: Int64TernaryGlobalReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r2 = g1
; CHECK-NEXT:    andw $r3 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r2 = 0[$r2]
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i64, i64* @g1, align 8
  %cond = select i1 %value, i64 %0, i64 %v1
  ret i64 %cond
}

define double @FloatTernaryRegImm(i1 %value, double %v1){
; CHECK-LABEL: FloatTernaryRegImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r0 ? $r2 = 0x4010000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, double %v1, double 4.000000e+00
  ret double %cond
}

define double @FloatTernaryImmReg(i1 %value, double %v2){
; CHECK-LABEL: FloatTernaryImmReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r2 = $r0, 1
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r2 ? $r0 = 0x4008000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, double 3.000000e+00, double %v2
  ret double %cond
}

define double @FloatTernaryRegReg(i1 %value, double %v1, double %v2){
; CHECK-LABEL: FloatTernaryRegReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r3 = $r0, 1
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, double %v1, double %v2
  ret double %cond
}

define double @FloatTernaryImmImm(i1 %value){
; CHECK-LABEL: FloatTernaryImmImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x4008000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r1 ? $r0 = 0x401c000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, double 3.000000e+00, double 7.000000e+00
  ret double %cond
}

define double @FloatTernaryGlobalGlobal(i1 %value){
; CHECK-LABEL: FloatTernaryGlobalGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = gf1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r1 ? $r0 = gf2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load double, double* @gf1, align 8
  %1 = load double, double* @gf2, align 8
  %cond = select i1 %value, double %0, double %1
  ret double %cond
}

define double @FloatTernaryGlobalImm(i1 %value){
; CHECK-LABEL: FloatTernaryGlobalImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = gf1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r0 ? $r2 = 0x4008000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load double, double* @gf1, align 8
  %cond = select i1 %value, double %0, double 3.000000e+00
  ret double %cond
}

define double @FloatTernaryImmGlobal(i1 %value){
; CHECK-LABEL: FloatTernaryImmGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = gf1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r0 ? $r1 = 0x4008000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load double, double* @gf1, align 8
  %cond = select i1 %value, double 3.000000e+00, double %0
  ret double %cond
}

define double @FloatTernaryRegGlobal(i1 %value, double %v1){
; CHECK-LABEL: FloatTernaryRegGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r2 = gf1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r2 = 0[$r2]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load double, double* @gf1, align 8
  %cond = select i1 %value, double %v1, double %0
  ret double %cond
}

define double @FloatTernaryGlobalReg(i1 %value, double %v1){
; CHECK-LABEL: FloatTernaryGlobalReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r2 = gf1
; CHECK-NEXT:    andw $r3 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r2 = 0[$r2]
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load double, double* @gf1, align 8
  %cond = select i1 %value, double %0, double %v1
  ret double %cond
}

define i32 @Int32TernaryRegImm(i1 %value, i32 %v1){
; CHECK-LABEL: Int32TernaryRegImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r0 ? $r2 = 4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i32 %v1, i32 4
  ret i32 %cond
}

define i32 @Int32TernaryImmReg(i1 %value, i32 %v2){
; CHECK-LABEL: Int32TernaryImmReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r2 = $r0, 1
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r2 ? $r0 = 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i32 3, i32 %v2
  ret i32 %cond
}

define i32 @Int32TernaryRegReg(i1 %value, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryRegReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r3 = $r0, 1
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i32 %v1, i32 %v2
  ret i32 %cond
}

define i32 @Int32TernaryImmImm(i1 %value){
; CHECK-LABEL: Int32TernaryImmImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cond = select i1 %value, i32 3, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryGlobalGlobal(i1 %value){
; CHECK-LABEL: Int32TernaryGlobalGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = gi32_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r1 ? $r0 = gi32_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* @gi32_1, align 4
  %1 = load i32, i32* @gi32_2, align 4
  %cond = select i1 %value, i32 %0, i32 %1
  ret i32 %cond
}

define i32 @Int32TernaryGlobalImm(i1 %value){
; CHECK-LABEL: Int32TernaryGlobalImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = gi32_1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r0 ? $r2 = 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* @gi32_1, align 4
  %cond = select i1 %value, i32 %0, i32 3
  ret i32 %cond
}

define i32 @Int32TernaryImmGlobal(i1 %value){
; CHECK-LABEL: Int32TernaryImmGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r1 = gi32_1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r0 ? $r1 = 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* @gi32_1, align 4
  %cond = select i1 %value, i32 3, i32 %0
  ret i32 %cond
}

define i32 @Int32TernaryRegGlobal(i1 %value, i32 %v1){
; CHECK-LABEL: Int32TernaryRegGlobal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r2 = gi32_1
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r2 = 0[$r2]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* @gi32_1, align 4
  %cond = select i1 %value, i32 %v1, i32 %0
  ret i32 %cond
}

define i32 @Int32TernaryGlobalReg(i1 %value, i32 %v1){
; CHECK-LABEL: Int32TernaryGlobalReg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r2 = gi32_1
; CHECK-NEXT:    andw $r3 = $r0, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r2 = 0[$r2]
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r3 ? $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* @gi32_1, align 4
  %cond = select i1 %value, i32 %0, i32 %v1
  ret i32 %cond
}

define i32 @Int32TernaryCond1(i32 %v){
; CHECK-LABEL: Int32TernaryCond1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, i32 5, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCond2(i32 %v){
; CHECK-LABEL: Int32TernaryCond2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r1 ? $r0 = 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, i32 7, i32 5
  ret i32 %cond
}

define i32 @Int32TernaryCond3(i32 %v){
; CHECK-LABEL: Int32TernaryCond3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wgez $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 0
  %cond = select i1 %cmp, i32 5, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCond4(i32 %v){
; CHECK-LABEL: Int32TernaryCond4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wltz $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, -1
  %cond = select i1 %cmp, i32 5, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCond5(i32 %v){
; CHECK-LABEL: Int32TernaryCond5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wgtz $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 1
  %cond = select i1 %cmp, i32 5, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCond6(i32 %v){
; CHECK-LABEL: Int32TernaryCond6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wlez $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, 0
  %cond = select i1 %cmp, i32 5, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCond7(i32 %v){
; CHECK-LABEL: Int32TernaryCond7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, i32 5, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCond8(i32 %v){
; CHECK-LABEL: Int32TernaryCond8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r1 ? $r0 = 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, i32 7, i32 5
  ret i32 %cond
}

define i64 @Int64TernaryCond1(i64 %v){
; CHECK-LABEL: Int64TernaryCond1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %v, 0
  %conv = select i1 %cmp, i64 5, i64 7
  ret i64 %conv
}

define i64 @Int64TernaryCond2(i64 %v){
; CHECK-LABEL: Int64TernaryCond2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r1 ? $r0 = 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %v, 0
  %conv = select i1 %cmp, i64 7, i64 5
  ret i64 %conv
}

define i64 @Int64TernaryCond3(i64 %v){
; CHECK-LABEL: Int64TernaryCond3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dgez $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i64 %v, 0
  %conv = select i1 %cmp, i64 5, i64 7
  ret i64 %conv
}

define i64 @Int64TernaryCond4(i64 %v){
; CHECK-LABEL: Int64TernaryCond4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dltz $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i64 %v, -1
  %conv = select i1 %cmp, i64 5, i64 7
  ret i64 %conv
}

define i64 @Int64TernaryCond5(i64 %v){
; CHECK-LABEL: Int64TernaryCond5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dgtz $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i64 %v, 1
  %conv = select i1 %cmp, i64 5, i64 7
  ret i64 %conv
}

define i64 @Int64TernaryCond6(i64 %v){
; CHECK-LABEL: Int64TernaryCond6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dlez $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i64 %v, 0
  %conv = select i1 %cmp, i64 5, i64 7
  ret i64 %conv
}

define i64 @Int64TernaryCond7(i64 %v){
; CHECK-LABEL: Int64TernaryCond7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r1 ? $r0 = 7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i64 %v, 1
  %cmp = icmp eq i64 %and, 0
  %conv = select i1 %cmp, i64 5, i64 7
  ret i64 %conv
}

define i64 @Int64TernaryCond8(i64 %v){
; CHECK-LABEL: Int64TernaryCond8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r1 ? $r0 = 5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i64 %v, 1
  %cmp = icmp eq i64 %and, 0
  %conv = select i1 %cmp, i64 7, i64 5
  ret i64 %conv
}

define half @Float16TernaryCond(i32 %v){
; CHECK-LABEL: Float16TernaryCond:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x4700
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r1 ? $r0 = 0x4500
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, half 0xH4700, half 0xH4500
  ret half %cond
}

define float @FloatTernaryCond1(i32 %v){
; CHECK-LABEL: FloatTernaryCond1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r1 ? $r0 = 0x40e00000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, float 5.000000e+00, float 7.000000e+00
  ret float %cond
}

define float @FloatTernaryCond2(i32 %v){
; CHECK-LABEL: FloatTernaryCond2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x40e00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r1 ? $r0 = 0x40a00000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, float 7.000000e+00, float 5.000000e+00
  ret float %cond
}

define float @FloatTernaryCond3(i32 %v){
; CHECK-LABEL: FloatTernaryCond3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wgez $r1 ? $r0 = 0x40e00000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 0
  %cond = select i1 %cmp, float 5.000000e+00, float 7.000000e+00
  ret float %cond
}

define float @FloatTernaryCond4(i32 %v){
; CHECK-LABEL: FloatTernaryCond4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wltz $r1 ? $r0 = 0x40e00000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, -1
  %cond = select i1 %cmp, float 5.000000e+00, float 7.000000e+00
  ret float %cond
}

define float @FloatTernaryCond5(i32 %v){
; CHECK-LABEL: FloatTernaryCond5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wgtz $r1 ? $r0 = 0x40e00000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 1
  %cond = select i1 %cmp, float 5.000000e+00, float 7.000000e+00
  ret float %cond
}

define float @FloatTernaryCond6(i32 %v){
; CHECK-LABEL: FloatTernaryCond6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wlez $r1 ? $r0 = 0x40e00000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, 0
  %cond = select i1 %cmp, float 5.000000e+00, float 7.000000e+00
  ret float %cond
}

define float @FloatTernaryCond7(i32 %v){
; CHECK-LABEL: FloatTernaryCond7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x40a00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r1 ? $r0 = 0x40e00000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, float 5.000000e+00, float 7.000000e+00
  ret float %cond
}

define float @FloatTernaryCond8(i32 %v){
; CHECK-LABEL: FloatTernaryCond8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x40e00000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r1 ? $r0 = 0x40a00000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, float 7.000000e+00, float 5.000000e+00
  ret float %cond
}

define double @DoubleTernaryCond1(i32 %v){
; CHECK-LABEL: DoubleTernaryCond1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x4014000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r1 ? $r0 = 0x401c000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, double 5.000000e+00, double 7.000000e+00
  ret double %cond
}

define double @DoubleTernaryCond2(i32 %v){
; CHECK-LABEL: DoubleTernaryCond2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x401c000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r1 ? $r0 = 0x4014000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, double 7.000000e+00, double 5.000000e+00
  ret double %cond
}

define double @DoubleTernaryCond3(i32 %v){
; CHECK-LABEL: DoubleTernaryCond3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x4014000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wgez $r1 ? $r0 = 0x401c000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 0
  %cond = select i1 %cmp, double 5.000000e+00, double 7.000000e+00
  ret double %cond
}

define double @DoubleTernaryCond4(i32 %v){
; CHECK-LABEL: DoubleTernaryCond4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x4014000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wltz $r1 ? $r0 = 0x401c000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, -1
  %cond = select i1 %cmp, double 5.000000e+00, double 7.000000e+00
  ret double %cond
}

define double @DoubleTernaryCond5(i32 %v){
; CHECK-LABEL: DoubleTernaryCond5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x4014000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wgtz $r1 ? $r0 = 0x401c000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 1
  %cond = select i1 %cmp, double 5.000000e+00, double 7.000000e+00
  ret double %cond
}

define double @DoubleTernaryCond6(i32 %v){
; CHECK-LABEL: DoubleTernaryCond6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x4014000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wlez $r1 ? $r0 = 0x401c000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, 0
  %cond = select i1 %cmp, double 5.000000e+00, double 7.000000e+00
  ret double %cond
}

define double @DoubleTernaryCond7(i32 %v){
; CHECK-LABEL: DoubleTernaryCond7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x4014000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r1 ? $r0 = 0x401c000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, double 5.000000e+00, double 7.000000e+00
  ret double %cond
}

define double @DoubleTernaryCond8(i32 %v){
; CHECK-LABEL: DoubleTernaryCond8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyw $r1 = $r0
; CHECK-NEXT:    make $r0 = 0x401c000000000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r1 ? $r0 = 0x4014000000000000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, double 7.000000e+00, double 5.000000e+00
  ret double %cond
}

define i32 @Int32TernaryCondRegImm1(i32 %v, i32 %v1){
; CHECK-LABEL: Int32TernaryCondRegImm1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r0 ? $r2 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, i32 %v1, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCondRegImm2(i32 %v, i32 %v1){
; CHECK-LABEL: Int32TernaryCondRegImm2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.weqz $r0 ? $r1 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, i32 7, i32 %v1
  ret i32 %cond
}

define i32 @Int32TernaryCondRegImm3(i32 %v, i32 %v1){
; CHECK-LABEL: Int32TernaryCondRegImm3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wgez $r0 ? $r2 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 0
  %cond = select i1 %cmp, i32 %v1, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCondRegImm4(i32 %v, i32 %v1){
; CHECK-LABEL: Int32TernaryCondRegImm4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wltz $r0 ? $r2 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, -1
  %cond = select i1 %cmp, i32 %v1, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCondRegImm5(i32 %v, i32 %v1){
; CHECK-LABEL: Int32TernaryCondRegImm5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wgtz $r0 ? $r2 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 1
  %cond = select i1 %cmp, i32 %v1, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCondRegImm6(i32 %v, i32 %v1){
; CHECK-LABEL: Int32TernaryCondRegImm6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wlez $r0 ? $r2 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, 0
  %cond = select i1 %cmp, i32 %v1, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCondRegImm7(i32 %v, i32 %v1){
; CHECK-LABEL: Int32TernaryCondRegImm7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    copyd $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r0 ? $r2 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, i32 %v1, i32 7
  ret i32 %cond
}

define i32 @Int32TernaryCondRegImm8(i32 %v, i32 %v1){
; CHECK-LABEL: Int32TernaryCondRegImm8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.even $r0 ? $r1 = 7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, i32 7, i32 %v1
  ret i32 %cond
}

define i32 @Int32TernaryCondRegReg1(i32 %v, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryCondRegReg1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.weqz $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, i32 %v1, i32 %v2
  ret i32 %cond
}

define i32 @Int32TernaryCondRegReg2(i32 %v, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryCondRegReg2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.weqz $r0 ? $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %v, 0
  %cond = select i1 %cmp, i32 %v2, i32 %v1
  ret i32 %cond
}

define i32 @Int32TernaryCondRegReg3(i32 %v, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryCondRegReg3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.wltz $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 0
  %cond = select i1 %cmp, i32 %v1, i32 %v2
  ret i32 %cond
}

define i32 @Int32TernaryCondRegReg4(i32 %v, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryCondRegReg4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.wgez $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, -1
  %cond = select i1 %cmp, i32 %v1, i32 %v2
  ret i32 %cond
}

define i32 @Int32TernaryCondRegReg5(i32 %v, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryCondRegReg5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.wlez $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp slt i32 %v, 1
  %cond = select i1 %cmp, i32 %v1, i32 %v2
  ret i32 %cond
}

define i32 @Int32TernaryCondRegReg6(i32 %v, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryCondRegReg6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.wgtz $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp sgt i32 %v, 0
  %cond = select i1 %cmp, i32 %v1, i32 %v2
  ret i32 %cond
}

define i32 @Int32TernaryCondRegReg7(i32 %v, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryCondRegReg7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.even $r0 ? $r2 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, i32 %v1, i32 %v2
  ret i32 %cond
}

define i32 @Int32TernaryCondRegReg8(i32 %v, i32 %v1, i32 %v2){
; CHECK-LABEL: Int32TernaryCondRegReg8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cmoved.even $r0 ? $r1 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %v, 1
  %cmp = icmp eq i32 %and, 0
  %cond = select i1 %cmp, i32 %v2, i32 %v1
  ret i32 %cond
}

