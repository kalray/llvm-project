; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 --asm-verbose=false -verify-machineinstrs -o - %s | FileCheck %s --check-prefixes=CHECK,CV1
; RUN: llc -mcpu=kv3-2 --asm-verbose=false -verify-machineinstrs -o - %s | FileCheck %s --check-prefixes=CHECK,CV2
; RUN: clang -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

; Tests for atomic_fence operations
define i64 @thread_fence(i64 %0) {
; CHECK-LABEL: thread_fence:
; CHECK:         fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  fence release
  ret i64 %0
}

define i64 @signal_fence(i64 %0) {
; CHECK-LABEL: signal_fence:
; CHECK:         ret
; CHECK-NEXT:    ;;
  fence syncscope("singlethread") acquire
  ret i64 %0
}


; Tests for atomic_swap operations
define i64 @atomicrmw_i64_xchg(i64* %ptr, i64 %c, i64 %s) {
; CV1-LABEL: atomicrmw_i64_xchg:
; CV1:       .LBB2_1:
; CV1-NEXT:    copyd $r2 = $r1
; CV1-NEXT:    ld.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r0] = $r2r3
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r2 ? .LBB2_1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r3
; CV1-NEXT:    fence
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i64_xchg:
; CV2:       .LBB2_1:
; CV2-NEXT:    copyd $r2 = $r1
; CV2-NEXT:    ld.u $r3 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r2, [$r0] = $r2r3
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r2 ? .LBB2_1
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r3
; CV2-NEXT:    fence
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw xchg i64* %ptr, i64 %c release
  ret i64 %res
}

define i32 @atomicrmw_i32_xchg(i32* %ptr, i32 %c, i32 %s) {
; CV1-LABEL: atomicrmw_i32_xchg:
; CV1:       .LBB3_1:
; CV1-NEXT:    copyw $r2 = $r1
; CV1-NEXT:    lwz.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapw 0[$r0] = $r2r3
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r2 ? .LBB3_1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyw $r0 = $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i32_xchg:
; CV2:       .LBB3_1:
; CV2-NEXT:    copyw $r2 = $r1
; CV2-NEXT:    lwz.u $r3 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapw $r2, [$r0] = $r2r3
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r2 ? .LBB3_1
; CV2-NEXT:    ;;
; CV2-NEXT:    copyw $r0 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw xchg i32* %ptr, i32 %c monotonic
  ret i32 %res
}

define i64 @atomicrmw_i64_xchg_as(i64 addrspace(1)* %ptr, i64 %c, i64 %s) {
; CV1-LABEL: atomicrmw_i64_xchg_as:
; CV1:         addd $r12 = $r12, -32
; CV1-NEXT:    get $r16 = $ra
; CV1-NEXT:    ;;
; CV1-NEXT:    sd 24[$r12] = $r16
; CV1-NEXT:    ;;
; CV1-NEXT:    sq 8[$r12] = $r18r19
; CV1-NEXT:    make $r0 = 5
; CV1-NEXT:    copyd $r18 = $r1
; CV1-NEXT:    copyd $r19 = $r0
; CV1-NEXT:    call __kvx_atomic_global_in
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB4_1:
; CV1-NEXT:    copyd $r0 = $r18
; CV1-NEXT:    ld.u $r1 = 0[$r19]
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r19] = $r0r1
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r0 ? .LBB4_1
; CV1-NEXT:    ;;
; CV1-NEXT:    make $r0 = 5
; CV1-NEXT:    copyd $r18 = $r1
; CV1-NEXT:    call __kvx_atomic_global_out
; CV1-NEXT:    ;;
; CV1-NEXT:    lq $r18r19 = 8[$r12]
; CV1-NEXT:    copyd $r0 = $r18
; CV1-NEXT:    ;;
; CV1-NEXT:    ld $r16 = 24[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    set $ra = $r16
; CV1-NEXT:    addd $r12 = $r12, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i64_xchg_as:
; CV2:         addd $r12 = $r12, -32
; CV2-NEXT:    get $r16 = $ra
; CV2-NEXT:    ;;
; CV2-NEXT:    sd 24[$r12] = $r16
; CV2-NEXT:    ;;
; CV2-NEXT:    sq 8[$r12] = $r18r19
; CV2-NEXT:    make $r0 = 5
; CV2-NEXT:    copyd $r18 = $r1
; CV2-NEXT:    copyd $r19 = $r0
; CV2-NEXT:    call __kvx_atomic_global_in
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB4_1:
; CV2-NEXT:    copyd $r0 = $r18
; CV2-NEXT:    ld.u $r1 = 0[$r19]
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r0, [$r19] = $r0r1
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r0 ? .LBB4_1
; CV2-NEXT:    ;;
; CV2-NEXT:    make $r0 = 5
; CV2-NEXT:    copyd $r18 = $r1
; CV2-NEXT:    call __kvx_atomic_global_out
; CV2-NEXT:    ;;
; CV2-NEXT:    lq $r18r19 = 8[$r12]
; CV2-NEXT:    copyd $r0 = $r18
; CV2-NEXT:    ;;
; CV2-NEXT:    ld $r16 = 24[$r12]
; CV2-NEXT:    ;;
; CV2-NEXT:    set $ra = $r16
; CV2-NEXT:    addd $r12 = $r12, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw xchg i64 addrspace(1)* %ptr, i64 %c seq_cst
  ret i64 %res
}

define i8 @atomic_test_and_set(i8* %ptr) {
; CV1-LABEL: atomic_test_and_set:
; CV1:         make $r1 = 1
; CV1-NEXT:    andd $r3 = $r0, 3
; CV1-NEXT:    fence
; CV1-NEXT:    ;;
; CV1-NEXT:    slld $r3 = $r3, 3
; CV1-NEXT:    sbfd $r7 = $r3, 0
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB5_1:
; CV1-NEXT:    lwz.u $r5 = $r7[$r0]
; CV1-NEXT:    sllw $r6 = $r1, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    srlw $r2 = $r5, $r3
; CV1-NEXT:    orw $r4 = $r5, $r6
; CV1-NEXT:    ;;
; CV1-NEXT:    andw $r2 = $r2, 255
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.wnez $r2 ? .LBB5_3
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapw $r7[$r0] = $r4r5
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r4 ? .LBB5_1
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB5_3:
; CV1-NEXT:    compw.ne $r0 = $r2, 0
; CV1-NEXT:    fence
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomic_test_and_set:
; CV2:         make $r1 = 1
; CV2-NEXT:    andd $r3 = $r0, 3
; CV2-NEXT:    fence
; CV2-NEXT:    ;;
; CV2-NEXT:    slld $r3 = $r3, 3
; CV2-NEXT:    sbfd $r7 = $r3, 0
; CV2-NEXT:    ;;
; CV2-NEXT:    addd $r0 = $r0, $r7
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB5_1:
; CV2-NEXT:    lwz.u $r5 = 0[$r0]
; CV2-NEXT:    sllw $r6 = $r1, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    srlw $r2 = $r5, $r3
; CV2-NEXT:    orw $r4 = $r5, $r6
; CV2-NEXT:    ;;
; CV2-NEXT:    andw $r2 = $r2, 255
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.wnez $r2 ? .LBB5_3
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapw $r4, [$r0] = $r4r5
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r4 ? .LBB5_1
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB5_3:
; CV2-NEXT:    compw.ne $r0 = $r2, 0
; CV2-NEXT:    fence
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw xchg i8* %ptr, i8 1 seq_cst
  %tobool = icmp ne i8 %res, 0
  %conv = zext i1 %tobool to i8
  ret i8 %conv
}


; Tests for atomic_cmp_swap operations
define i64 @cmpxchg_i64(i64* %ptr, i64 %c, i64 %s) {
; CV1-LABEL: cmpxchg_i64:
; CV1:         copyd $r5 = $r1
; CV1-NEXT:    fence
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB6_1:
; CV1-NEXT:    copyd $r4 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r0] = $r4r5
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.odd $r4 ? .LBB6_3
; CV1-NEXT:    ;;
; CV1-NEXT:    ld.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    compd.eq $r4 = $r3, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.odd $r4 ? .LBB6_1
; CV1-NEXT:    ;;
; CV1-NEXT:    goto .LBB6_4
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB6_3:
; CV1-NEXT:    copyd $r3 = $r5
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB6_4:
; CV1-NEXT:    copyd $r0 = $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: cmpxchg_i64:
; CV2:         copyd $r5 = $r1
; CV2-NEXT:    fence
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB6_1:
; CV2-NEXT:    copyd $r4 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r4, [$r0] = $r4r5
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.odd $r4 ? .LBB6_3
; CV2-NEXT:    ;;
; CV2-NEXT:    ld.u $r3 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    compd.eq $r4 = $r3, $r5
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.odd $r4 ? .LBB6_1
; CV2-NEXT:    ;;
; CV2-NEXT:    goto .LBB6_4
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB6_3:
; CV2-NEXT:    copyd $r3 = $r5
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB6_4:
; CV2-NEXT:    copyd $r0 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %cx = cmpxchg i64* %ptr, i64 %c, i64 %s seq_cst seq_cst
  %res = extractvalue { i64, i1 } %cx, 0
  ret i64 %res
}


; Tests for atomic_load operations
define i8 @atomic_load_i8(i8 *%ptr) {
; CHECK-LABEL: atomic_load_i8:
; CHECK:         lbz.u $r0 = 0[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = load atomic i8, i8 *%ptr monotonic, align 1 ; i.e. relaxed
  ret i8 %res
}

define i16 @atomic_load_i16(i16 *%ptr) {
; CHECK-LABEL: atomic_load_i16:
; CHECK:         fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.u $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = load atomic i16, i16 *%ptr seq_cst, align 2
  ret i16 %res
}

define i32 @atomic_load_i32(i32 addrspace(1)*%ptr) {
; CHECK-LABEL: atomic_load_i32:
; CHECK:         addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 16[$r12] = $r18
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    call __kvx_atomic_global_in
; CHECK-NEXT:    ;;
; CHECK-NEXT:    make $r0 = 5
; CHECK-NEXT:    lwz.u $r18 = 0[$r18]
; CHECK-NEXT:    call __kvx_atomic_global_out
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r18
; CHECK-NEXT:    ld $r18 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = load atomic i32, i32 addrspace(1)*%ptr seq_cst, align 4
  ret i32 %res
}


; Tests for atomic_store operations
define void @atomic_store_i32(i32* %ptr, i32 %l) {
; CHECK-LABEL: atomic_store_i32:
; CHECK:         sw 0[$r0] = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  store atomic i32 %l, i32* %ptr release, align 4
  ret void
}

define void @atomic_store_i64(i64 addrspace(1)* %ptr, i64 %l) {
; CHECK-LABEL: atomic_store_i64:
; CHECK:         addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 8[$r12] = $r18r19
; CHECK-NEXT:    make $r0 = 3
; CHECK-NEXT:    copyd $r18 = $r1
; CHECK-NEXT:    copyd $r19 = $r0
; CHECK-NEXT:    call __kvx_atomic_global_in
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 0[$r19] = $r18
; CHECK-NEXT:    make $r0 = 3
; CHECK-NEXT:    call __kvx_atomic_global_out
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  store atomic i64 %l, i64 addrspace(1)* %ptr release, align 8
  ret void
}


; Tests for atomic rmw operations
define i8 @atomicrmw_i8_min(i8 *%src, i8 %b) {
; CHECK-LABEL: atomicrmw_i8_min:
; CHECK:         addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call __sync_fetch_and_min_1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %res = atomicrmw min i8 *%src, i8 %b seq_cst
  ret i8 %res
}

define i64 @atomicrmw_i64_max(i64 *%src, i64 %b) {
; CV1-LABEL: atomicrmw_i64_max:
; CV1:         fence
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB13_1:
; CV1-NEXT:    ld.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    maxd $r2 = $r1, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r0] = $r2r3
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r2 ? .LBB13_1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r3
; CV1-NEXT:    fence
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i64_max:
; CV2:         fence
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB13_1:
; CV2-NEXT:    ld.u $r3 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    maxd $r2 = $r1, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r2, [$r0] = $r2r3
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r2 ? .LBB13_1
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r3
; CV2-NEXT:    fence
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw max i64 *%src, i64 %b seq_cst
  ret i64 %res
}

define i64 @atomicrmw_i64_add(i64 *%src, i64 %b) {
; CV1-LABEL: atomicrmw_i64_add:
; CV1:       .LBB14_1:
; CV1-NEXT:    ld.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r2 = $r1, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r0] = $r2r3
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r2 ? .LBB14_1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r3
; CV1-NEXT:    fence
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i64_add:
; CV2:       .LBB14_1:
; CV2-NEXT:    ld.u $r3 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    addd $r2 = $r1, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r2, [$r0] = $r2r3
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r2 ? .LBB14_1
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r3
; CV2-NEXT:    fence
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw add i64 *%src, i64 %b release
  ret i64 %res
}

define i64 @atomicrmw_i64_sub(i64 *%src, i64 %b) {
; CV1-LABEL: atomicrmw_i64_sub:
; CV1:       .LBB15_1:
; CV1-NEXT:    ld.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r2 = $r1, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r0] = $r2r3
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r2 ? .LBB15_1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r3
; CV1-NEXT:    fence
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i64_sub:
; CV2:       .LBB15_1:
; CV2-NEXT:    ld.u $r3 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    sbfd $r2 = $r1, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r2, [$r0] = $r2r3
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r2 ? .LBB15_1
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r3
; CV2-NEXT:    fence
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw sub i64 *%src, i64 %b release
  ret i64 %res
}

define i64 @atomicrmw_i64_nand(i64 *%src, i64 %b) {
; CV1-LABEL: atomicrmw_i64_nand:
; CV1:       .LBB16_1:
; CV1-NEXT:    ld.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    nandd $r2 = $r1, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r0] = $r2r3
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r2 ? .LBB16_1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r3
; CV1-NEXT:    fence
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i64_nand:
; CV2:       .LBB16_1:
; CV2-NEXT:    ld.u $r3 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    nandd $r2 = $r1, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r2, [$r0] = $r2r3
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r2 ? .LBB16_1
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r3
; CV2-NEXT:    fence
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw nand i64 *%src, i64 %b release
  ret i64 %res
}

define i32 @atomicrmw_i32_xor(i32 *%src, i32 %b) {
; CV1-LABEL: atomicrmw_i32_xor:
; CV1:       .LBB17_1:
; CV1-NEXT:    lwz.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    xorw $r2 = $r1, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapw 0[$r0] = $r2r3
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r2 ? .LBB17_1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyw $r0 = $r3
; CV1-NEXT:    fence
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i32_xor:
; CV2:       .LBB17_1:
; CV2-NEXT:    lwz.u $r3 = 0[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    xorw $r2 = $r1, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapw $r2, [$r0] = $r2r3
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r2 ? .LBB17_1
; CV2-NEXT:    ;;
; CV2-NEXT:    copyw $r0 = $r3
; CV2-NEXT:    fence
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw xor i32 *%src, i32 %b release
  ret i32 %res
}

; Test for __global OpenCL AS
define i64 @atomicrmw_i64_sub_global_as(i64 addrspace(1)*%src, i64 %b) {
; CV1-LABEL: atomicrmw_i64_sub_global_as:
; CV1:         addd $r12 = $r12, -32
; CV1-NEXT:    get $r16 = $ra
; CV1-NEXT:    ;;
; CV1-NEXT:    sd 24[$r12] = $r16
; CV1-NEXT:    ;;
; CV1-NEXT:    sq 8[$r12] = $r18r19
; CV1-NEXT:    make $r0 = 3
; CV1-NEXT:    copyd $r18 = $r1
; CV1-NEXT:    copyd $r19 = $r0
; CV1-NEXT:    call __kvx_atomic_global_in
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB18_1:
; CV1-NEXT:    ld.u $r1 = 0[$r19]
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfd $r0 = $r18, $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r19] = $r0r1
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r0 ? .LBB18_1
; CV1-NEXT:    ;;
; CV1-NEXT:    make $r0 = 3
; CV1-NEXT:    copyd $r18 = $r1
; CV1-NEXT:    call __kvx_atomic_global_out
; CV1-NEXT:    ;;
; CV1-NEXT:    lq $r18r19 = 8[$r12]
; CV1-NEXT:    copyd $r0 = $r18
; CV1-NEXT:    ;;
; CV1-NEXT:    ld $r16 = 24[$r12]
; CV1-NEXT:    ;;
; CV1-NEXT:    set $ra = $r16
; CV1-NEXT:    addd $r12 = $r12, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: atomicrmw_i64_sub_global_as:
; CV2:         addd $r12 = $r12, -32
; CV2-NEXT:    get $r16 = $ra
; CV2-NEXT:    ;;
; CV2-NEXT:    sd 24[$r12] = $r16
; CV2-NEXT:    ;;
; CV2-NEXT:    sq 8[$r12] = $r18r19
; CV2-NEXT:    make $r0 = 3
; CV2-NEXT:    copyd $r18 = $r1
; CV2-NEXT:    copyd $r19 = $r0
; CV2-NEXT:    call __kvx_atomic_global_in
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB18_1:
; CV2-NEXT:    ld.u $r1 = 0[$r19]
; CV2-NEXT:    ;;
; CV2-NEXT:    sbfd $r0 = $r18, $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r0, [$r19] = $r0r1
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r0 ? .LBB18_1
; CV2-NEXT:    ;;
; CV2-NEXT:    make $r0 = 3
; CV2-NEXT:    copyd $r18 = $r1
; CV2-NEXT:    call __kvx_atomic_global_out
; CV2-NEXT:    ;;
; CV2-NEXT:    lq $r18r19 = 8[$r12]
; CV2-NEXT:    copyd $r0 = $r18
; CV2-NEXT:    ;;
; CV2-NEXT:    ld $r16 = 24[$r12]
; CV2-NEXT:    ;;
; CV2-NEXT:    set $ra = $r16
; CV2-NEXT:    addd $r12 = $r12, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %res = atomicrmw sub i64 addrspace(1)*%src, i64 %b release
  ret i64 %res
}


; Test for immediates that doesn't hold on 37 bits
define i64 @bigimm(i64* %0, i64 %1) {
; CV1-LABEL: bigimm:
; CV1:         addd $r0 = $r0, 0x40000000000
; CV1-NEXT:    fence
; CV1-NEXT:    ;;
; CV1-NEXT:  .LBB19_1:
; CV1-NEXT:    ld.u $r3 = 0[$r0]
; CV1-NEXT:    ;;
; CV1-NEXT:    addd $r2 = $r1, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    acswapd 0[$r0] = $r2r3
; CV1-NEXT:    ;;
; CV1-NEXT:    cb.even $r2 ? .LBB19_1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r3
; CV1-NEXT:    fence
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: bigimm:
; CV2:         fence
; CV2-NEXT:    ;;
; CV2-NEXT:  .LBB19_1:
; CV2-NEXT:    ld.u $r3 = 0x40000000000[$r0]
; CV2-NEXT:    ;;
; CV2-NEXT:    addd $r2 = $r1, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    acswapd $r2, 0x40000000000[$r0] = $r2r3
; CV2-NEXT:    ;;
; CV2-NEXT:    cb.even $r2 ? .LBB19_1
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r3
; CV2-NEXT:    fence
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = getelementptr inbounds i64, i64* %0, i64 549755813888
  %4 = atomicrmw add i64* %3, i64 %1 seq_cst
  ret i64 %4
}
