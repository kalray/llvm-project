; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @load8to32(ptr nocapture readonly %0) {
; CHECK-LABEL: load8to32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lbs.u $r0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %2 = load atomic i8, ptr %0 seq_cst, align 1
  %3 = sext i8 %2 to i32
  ret i32 %3
}

define i16 @load8to16(ptr nocapture readonly %0) {
; CHECK-LABEL: load8to16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lbs.u $r0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %2 = load atomic i8, ptr %0 seq_cst, align 1
  %3 = sext i8 %2 to i16
  ret i16 %3
}

define i64 @load8to64(ptr nocapture readonly %0) {
; CHECK-LABEL: load8to64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lbs.u $r0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %2 = load atomic i8, ptr %0 seq_cst, align 1
  %3 = sext i8 %2 to i64
  ret i64 %3
}

define i32 @load16to32(ptr nocapture readonly %0) {
; CHECK-LABEL: load16to32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lhs.u $r0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %2 = load atomic i16, ptr %0 seq_cst, align 2
  %3 = sext i16 %2 to i32
  ret i32 %3
}

define i64 @load16to64(ptr nocapture readonly %0) {
; CHECK-LABEL: load16to64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fence
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lhs.u $r0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    fence
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 2)
  %2 = load atomic i16, ptr %0 seq_cst, align 2
  %3 = sext i16 %2 to i64
  ret i64 %3
}
