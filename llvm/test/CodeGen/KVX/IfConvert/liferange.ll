; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s

target triple = "kvx-kalray-cos"

@.str.88 = external unnamed_addr constant [52 x i8]

declare void @__kmp_debug_printf(ptr, ...)

declare void @__kmp_msg_format(i32, ...)

define void @__kmpc_doacross_post(i32 %0) {
; CHECK-LABEL: __kmpc_doacross_post:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sq 8[$r12] = $r18r19
; CHECK-NEXT:    cb.weqz $r1 ? .LBB0_10
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    # implicit-def: $r1
; CHECK-NEXT:    compd.ltu $r0 = $r0, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.odd $r0 ? .LBB0_7
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    # implicit-def: $r1
; CHECK-NEXT:    make $r19 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.wnez $r19 ? .LBB0_5
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.3: # %.critedge1.preheader
; CHECK-NEXT:    # implicit-def: $r1
; CHECK-NEXT:    cb.wnez $r19 ? .LBB0_5
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  # %bb.4:
; CHECK-NEXT:    ld $r0 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    call __udivdi3
; CHECK-NEXT:    ;; # (end cycle 4)
; CHECK-NEXT:    copyd $r1 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_5:
; CHECK-NEXT:    cb.wnez $r19 ? .LBB0_7
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.6:
; CHECK-NEXT:    # implicit-def: $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_7:
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.wnez $r0 ? .LBB0_9
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.8:
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    make $r0 = .str.88
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    andd $r2 = $r1, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    goto __kmp_debug_printf
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_9:
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_10:
; CHECK-NEXT:    make $r0 = 0x40084
; CHECK-NEXT:    call __kmp_msg_format
; CHECK-NEXT:    ;; # (end cycle 0)
  br i1 undef, label %3, label %2

2:
  tail call void (i32, ...) @__kmp_msg_format(i32 262276)
  unreachable

3:
  br i1 undef, label %4, label %5

4:
  br label %5

5:
  br i1 undef, label %8, label %6

6:
  br i1 undef, label %7, label %76

7:
  br label %76

8:
  br i1 undef, label %9, label %10

9:
  br label %10

10:
  br i1 undef, label %11, label %12

11:
  br label %15

12:
  br i1 undef, label %13, label %14

13:
  br label %15

14:
  br label %15

15:
  %16 = icmp ugt i64 undef, 1
  br i1 %16, label %17, label %69

17:
  br i1 undef, label %47, label %18

18:
  br label %19

19:
  br i1 undef, label %20, label %21

20:
  br label %24

21:
  br i1 undef, label %22, label %23

22:
  br label %24

23:
  br label %24

24:
  br i1 undef, label %28, label %25

25:
  br i1 undef, label %27, label %26

26:
  br label %29

27:
  br label %29

28:
  br label %29

29:
  br i1 undef, label %33, label %30

30:
  br i1 undef, label %32, label %31

31:
  br label %34

32:
  br label %34

33:
  br label %34

34:
  %35 = load i64, ptr undef
  %36 = load i64, ptr undef
  br i1 undef, label %43, label %37

37:
  br i1 undef, label %42, label %38

38:
  %39 = sub nsw i64 0, %36
  %40 = sub nsw i64 0, %35
  %41 = udiv i64 %39, %40
  br label %44

42:
  br label %44

43:
  br label %44

44:
  %45 = phi i64 [ undef, %43 ], [ undef, %42 ], [ %41, %38 ]
  %46 = add nsw i64 %45, 0
  br i1 undef, label %47, label %19

47:
  %48 = phi i64 [ undef, %17 ], [ %46, %44 ]
  br i1 undef, label %69, label %49

49:
  br i1 undef, label %53, label %50

50:
  br i1 undef, label %52, label %51

51:
  br label %54

52:
  br label %54

53:
  br label %54

54:
  br i1 undef, label %69, label %55

55:
  %56 = icmp eq i64 undef, 1
  br i1 %56, label %60, label %57

57:
  br i1 undef, label %59, label %58

58:
  br label %61

59:
  br label %61

60:
  br label %61

61:
  br i1 undef, label %69, label %62

62:
  %63 = icmp eq i64 undef, 1
  br i1 %63, label %67, label %64

64:
  br i1 undef, label %66, label %65

65:
  br label %68

66:
  br label %68

67:
  br label %68

68:
  br label %69

69:
  %70 = phi i64 [ undef, %15 ], [ %48, %47 ], [ undef, %54 ], [ undef, %61 ], [ undef, %68 ]
  br i1 undef, label %71, label %72

71:
  br label %72

72:
  br i1 undef, label %73, label %76

73:
  %74 = and i64 %70, -32
  %75 = add nsw i64 %74, 0
  tail call void (ptr, ...) @__kmp_debug_printf(ptr nonnull @.str.88, i32 %0, i64 %75)
  br label %76

76:
  ret void
}

