; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -verify-machineinstrs -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @test0(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.wnez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %tobool = icmp eq i32 %a, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; FIXME: Could be just sw.weqz $r0 ? [$r1] = $r0
define void @test1(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cb.weqz $r0 ? .LBB1_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB1_2: # %if.then
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %cmp = icmp eq i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test2(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.wgtz $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp sgt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test3(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.wgez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp sgt i32 %a, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test4(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.wltz $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp slt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test5(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.wlez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp slt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test6(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.lt $r2 = $r0, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw.even $r2 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %cmp = icmp sgt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test7(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.wgtz $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp sgt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test8(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.wlez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp slt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test9(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test9:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compw.gt $r2 = $r0, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw.even $r2 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %cmp = icmp slt i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test10(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sd.dnez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %tobool = icmp eq i64 %a, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; FIXME: Could be just 'sd.deqz $r0 ? [$r1] = $r0'
define void @test11(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test11:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cb.deqz $r0 ? .LBB11_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB11_2: # %if.then
; CHECK-NEXT:    make $r0 = 0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 0[$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %cmp = icmp eq i64 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test12(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sd.dgtz $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp sgt i64 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test13(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test13:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sd.dgez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp sgt i64 %a, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test14(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test14:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sd.dltz $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp slt i64 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test15(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test15:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sd.dlez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp slt i64 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test16(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.lt $r2 = $r0, 2
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd.even $r2 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %cmp = icmp sgt i64 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test17(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test17:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sd.dgtz $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp sgt i64 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test18(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test18:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sd.dlez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp slt i64 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test19(i64 %a, i64* nocapture %p){
; CHECK-LABEL: test19:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.gt $r2 = $r0, 1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd.even $r2 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %cmp = icmp slt i64 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test20(i64 %a, i64 %b, i64* nocapture %p){
; CHECK-LABEL: test20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.ne $r1 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd.even $r1 ? [$r2] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %cmp = icmp eq i64 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test21(i64 %a, i64 %b, i64* nocapture %p){
; CHECK-LABEL: test21:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    compd.eq $r1 = $r0, $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd.even $r1 ? [$r2] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
entry:
  %cmp = icmp eq i64 %a, %b
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 %a, i64* %p, align 8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

define void @test22(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test22:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.wnez $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %cmp = icmp eq i32 %a, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

define void @test23(i16 %a, i32* nocapture %p){
; CHECK-LABEL: test23:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxhd $r2 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    cb.weqz $r2 ? .LBB23_2
; CHECK-NEXT:    ;;
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    sxhd $r0 = $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sw 0[$r1] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:  .LBB23_2: # %if.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i16 %a, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %conv = sext i16 %a to i32
  store i32 %conv, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

define void @test24(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test24:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.even $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %and = and i32 %a, 1
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test25(i32 %a, i32* nocapture %p){
; CHECK-LABEL: test25:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.odd $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %and = and i32 %a, 1
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 %a, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

define void @test26(i64 %a, i32* nocapture %p){
; CHECK-LABEL: test26:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.even $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %and = and i64 %a, 1
  %cmp = icmp eq i64 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = trunc i64 %a to i32
  store i32 %conv, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @test27(i64 %a, i32* nocapture %p){
; CHECK-LABEL: test27:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sw.odd $r0 ? [$r1] = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
entry:
  %and = and i64 %a, 1
  %tobool = icmp eq i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %conv = trunc i64 %a to i32
  store i32 %conv, i32* %p, align 4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

