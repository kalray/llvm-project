; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define i64 @not_muluwrr(i32 %b, i32 %c) {
; CHECK-LABEL: not_muluwrr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = mul i32 %c, %b
  %conv = zext i32 %mul to i64
  ret i64 %conv
}

define i64 @not_muluwri(i32 %b) {
; CHECK-LABEL: not_muluwri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulw $r0 = $r0, 0x4d2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = mul i32 %b, 1234
  %conv = zext i32 %mul to i64
  ret i64 %conv
}

define i64 @not_muluwdri2(i32* nocapture readonly %b) {
; CHECK-LABEL: not_muluwdri2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = mul i64 %conv, 4294967296
  ret i64 %mul
}

define i64 @muluwdrr(i32 %b, i32 %c) {
; CHECK-LABEL: muluwdrr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    muluwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %conv1 = zext i32 %c to i64
  %mul = mul nuw i64 %conv1, %conv
  ret i64 %mul
}

define i64 @muluwdri(i32 %b) {
; CHECK-LABEL: muluwdri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    muluwd $r0 = $r0, 0x4d2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %mul = mul nuw nsw i64 %conv, 1234
  ret i64 %mul
}
define i64 @muluwdri_load(i32* nocapture readonly %b)  {
; CHECK-LABEL: muluwdri_load:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r0 = $r0, 0x4d2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = mul nuw nsw i64 %conv, 1234
  ret i64 %mul
}
define i64 @muluwdrr_load(i32* nocapture readonly %b, i32 %c)  {
; CHECK-LABEL: muluwdrr_load:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %conv1 = zext i32 %c to i64
  %mul = mul nuw i64 %conv, %conv1
  ret i64 %mul
}

define i64 @muluwdrr_load2(i32* nocapture readonly %b, i32* nocapture readonly %c) {
; CHECK-LABEL: muluwdrr_load2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %1 = load i32, i32* %c, align 4
  %conv1 = zext i32 %1 to i64
  %mul = mul nuw i64 %conv1, %conv
  ret i64 %mul
}

define i64 @muluwdri2(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r0 = $r0, 0x4d2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = mul nuw nsw i64 %conv, 1234
  ret i64 %mul
}
define i64 @muluwdri3(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r0 = $r0, -1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = mul i64 %conv, 4294967295
  ret i64 %mul
}

define i64 @muluwdi16(i16 %b, i16 %c)  {
; CHECK-LABEL: muluwdi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i64
  %conv1 = zext i16 %c to i64
  %mul = mul nuw nsw i64 %conv1, %conv
  ret i64 %mul
}
define i64 @muluwdi16_1(i16 %b, i32 %c) {
; CHECK-LABEL: muluwdi16_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i64
  %conv1 = zext i32 %c to i64
  %mul = mul nuw nsw i64 %conv1, %conv
  ret i64 %mul
}
define i64 @muluwdi16_2(i32 %b, i16 %c) {
; CHECK-LABEL: muluwdi16_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i32 %b to i64
  %conv1 = zext i16 %c to i64
  %mul = mul nuw nsw i64 %conv1, %conv
  ret i64 %mul
}

define i64 @muluwdri_shl1(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri_shl1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = shl i64 %conv, 1
  ret i64 %mul
}

define i64 @muluwdri_x4(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri_x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = mul i64 %conv, 4
  ret i64 %mul
}

define i64 @muluwdri_shl2(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri_shl2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = shl i64 %conv, 2
  ret i64 %mul
}

define i64 @muluwdri_x8(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri_x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = mul i64 %conv, 8
  ret i64 %mul
}

define i64 @muluwdri_shl3(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri_shl3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = shl i64 %conv, 3
  ret i64 %mul
}

define i64 @muluwdri_x16(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri_x16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = mul i64 %conv, 16
  ret i64 %mul
}

define i64 @muluwdri_shl4(i32* nocapture readonly %b) {
; CHECK-LABEL: muluwdri_shl4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = zext i32 %0 to i64
  %mul = shl i64 %conv, 4
  ret i64 %mul
}


; --------------------------------- Signed word:
define i64 @not_mulwrr(i32 %b, i32 %c) {
; CHECK-LABEL: not_mulwrr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulw $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = mul i32 %c, %b
  %conv = sext i32 %mul to i64
  ret i64 %conv
}

define i64 @not_mulwri(i32 %b) {
; CHECK-LABEL: not_mulwri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulw $r0 = $r0, 0x4d2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = mul i32 %b, 1234
  %conv = sext i32 %mul to i64
  ret i64 %conv
}

define i64 @not_mulwdri2(i32* nocapture readonly %b) {
; CHECK-LABEL: not_mulwdri2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r0 = $r0, 0x200000002
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 8589934594
  ret i64 %mul
}

define i64 @mulwdrr(i32 %b, i32 %c) {
; CHECK-LABEL: mulwdrr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %conv1 = sext i32 %c to i64
  %mul = mul nuw i64 %conv1, %conv
  ret i64 %mul
}

define i64 @mulwdri(i32 %b) {
; CHECK-LABEL: mulwdri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulwd $r0 = $r0, 0x4d2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %mul = mul nuw nsw i64 %conv, 1234
  ret i64 %mul
}
define i64 @mulwdri_load(i32* nocapture readonly %b)  {
; CHECK-LABEL: mulwdri_load:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r0 = $r0, 0x4d2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = mul nuw nsw i64 %conv, 1234
  ret i64 %mul
}
define i64 @mulwdrr_load(i32* nocapture readonly %b, i32 %c)  {
; CHECK-LABEL: mulwdrr_load:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %conv1 = sext i32 %c to i64
  %mul = mul nuw i64 %conv, %conv1
  ret i64 %mul
}

define i64 @mulwdrr_load2(i32* nocapture readonly %b, i32* nocapture readonly %c) {
; CHECK-LABEL: mulwdrr_load2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz $r1 = 0[$r1]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %c, align 4
  %conv1 = sext i32 %1 to i64
  %mul = mul nuw i64 %conv1, %conv
  ret i64 %mul
}

define i64 @mulwdri2(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r0 = $r0, 0x4d2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = mul nuw nsw i64 %conv, 1234
  ret i64 %mul
}
define i64 @mulwdri3(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lwz $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r0 = $r0, -1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4294967295
  ret i64 %mul
}

define i64 @mulwdi16(i16 %b, i16 %c)  {
; CHECK-LABEL: mulwdi16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxhd $r0 = $r0
; CHECK-NEXT:    sxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %conv1 = sext i16 %c to i64
  %mul = mul nuw nsw i64 %conv1, %conv
  ret i64 %mul
}
define i64 @mulwdi16_1(i16 %b, i32 %c) {
; CHECK-LABEL: mulwdi16_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sxhd $r0 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %conv1 = sext i32 %c to i64
  %mul = mul nuw nsw i64 %conv1, %conv
  ret i64 %mul
}
define i64 @mulwdi16_2(i32 %b, i16 %c) {
; CHECK-LABEL: mulwdi16_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwd $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %conv1 = zext i16 %c to i64
  %mul = mul nuw nsw i64 %conv1, %conv
  ret i64 %mul
}

define i64 @mulwdri_x2(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri_x2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 2
  ret i64 %mul
}

define i64 @mulwdri_shl1(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri_shl1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = shl i64 %conv, 1
  ret i64 %mul
}

define i64 @mulwdri_x4(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri_x4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4
  ret i64 %mul
}

define i64 @mulwdri_shl2(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri_shl2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = shl i64 %conv, 2
  ret i64 %mul
}

define i64 @mulwdri_x8(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri_x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 8
  ret i64 %mul
}

define i64 @mulwdri_shl3(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri_shl3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = shl i64 %conv, 3
  ret i64 %mul
}

define i64 @mulwdri_x16(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri_x16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 16
  ret i64 %mul
}

define i64 @mulwdri_shl4(i32* nocapture readonly %b) {
; CHECK-LABEL: mulwdri_shl4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lws $r0 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r0 = $r0, 4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = load i32, i32* %b, align 4
  %conv = sext i32 %0 to i64
  %mul = shl i64 %conv, 4
  ret i64 %mul
}

