; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define i8 @int_char(i8* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: int_char:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 32
  %4 = ashr exact i64 %3, 32
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = load i8, i8* %5, align 1
  ret i8 %6
}

define i16 @int_short(i16* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: int_short:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 32
  %4 = ashr exact i64 %3, 32
  %5 = getelementptr inbounds i16, i16* %0, i64 %4
  %6 = load i16, i16* %5, align 2
  ret i16 %6
}

define i32 @int_word(i32* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: int_word:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 32
  %4 = ashr exact i64 %3, 32
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = load i32, i32* %5, align 4
  ret i32 %6
}

define i64 @int_double(i64* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: int_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 32
  %4 = ashr exact i64 %3, 32
  %5 = getelementptr inbounds i64, i64* %0, i64 %4
  %6 = load i64, i64* %5, align 8
  ret i64 %6
}

define i8 @uint_char(i8* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: uint_char:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 4294967295
  %4 = getelementptr inbounds i8, i8* %0, i64 %3
  %5 = load i8, i8* %4, align 1
  ret i8 %5
}

define i16 @uint_short(i16* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: uint_short:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 4294967295
  %4 = getelementptr inbounds i16, i16* %0, i64 %3
  %5 = load i16, i16* %4, align 2
  ret i16 %5
}

define i32 @uint_word(i32* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: uint_word:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 4294967295
  %4 = getelementptr inbounds i32, i32* %0, i64 %3
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

define i64 @uint_double(i64* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: uint_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 4294967295
  %4 = getelementptr inbounds i64, i64* %0, i64 %3
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

define i8 @short_char(i8* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: short_char:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 48
  %4 = ashr exact i64 %3, 48
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = load i8, i8* %5, align 1
  ret i8 %6
}

define i16 @short_short(i16* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: short_short:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 48
  %4 = ashr exact i64 %3, 48
  %5 = getelementptr inbounds i16, i16* %0, i64 %4
  %6 = load i16, i16* %5, align 2
  ret i16 %6
}

define i32 @short_word(i32* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: short_word:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 48
  %4 = ashr exact i64 %3, 48
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = load i32, i32* %5, align 4
  ret i32 %6
}

define i64 @short_double(i64* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: short_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxhd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 48
  %4 = ashr exact i64 %3, 48
  %5 = getelementptr inbounds i64, i64* %0, i64 %4
  %6 = load i64, i64* %5, align 8
  ret i64 %6
}

define i8 @ushort_char(i8* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: ushort_char:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrf $r1 = $r1, 63, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 65535
  %4 = getelementptr inbounds i8, i8* %0, i64 %3
  %5 = load i8, i8* %4, align 1
  ret i8 %5
}

define i16 @ushort_short(i16* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: ushort_short:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrf $r1 = $r1, 63, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 65535
  %4 = getelementptr inbounds i16, i16* %0, i64 %3
  %5 = load i16, i16* %4, align 2
  ret i16 %5
}

define i32 @ushort_word(i32* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: ushort_word:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrf $r1 = $r1, 63, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 65535
  %4 = getelementptr inbounds i32, i32* %0, i64 %3
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

define i64 @ushort_double(i64* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: ushort_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrf $r1 = $r1, 63, 16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 65535
  %4 = getelementptr inbounds i64, i64* %0, i64 %3
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

define i8 @char_char(i8* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: char_char:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 56
  %4 = ashr exact i64 %3, 56
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = load i8, i8* %5, align 1
  ret i8 %6
}

define i16 @char_short(i16* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: char_short:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 56
  %4 = ashr exact i64 %3, 56
  %5 = getelementptr inbounds i16, i16* %0, i64 %4
  %6 = load i16, i16* %5, align 2
  ret i16 %6
}

define i32 @char_word(i32* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: char_word:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 56
  %4 = ashr exact i64 %3, 56
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = load i32, i32* %5, align 4
  ret i32 %6
}

define i64 @char_double(i64* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: char_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shl i64 %1, 56
  %4 = ashr exact i64 %3, 56
  %5 = getelementptr inbounds i64, i64* %0, i64 %4
  %6 = load i64, i64* %5, align 8
  ret i64 %6
}

define i8 @uchar_char(i8* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: uchar_char:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrf $r1 = $r1, 63, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lbz $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 255
  %4 = getelementptr inbounds i8, i8* %0, i64 %3
  %5 = load i8, i8* %4, align 1
  ret i8 %5
}

define i16 @uchar_short(i16* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: uchar_short:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrf $r1 = $r1, 63, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lhz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 255
  %4 = getelementptr inbounds i16, i16* %0, i64 %3
  %5 = load i16, i16* %4, align 2
  ret i16 %5
}

define i32 @uchar_word(i32* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: uchar_word:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrf $r1 = $r1, 63, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lwz.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 255
  %4 = getelementptr inbounds i32, i32* %0, i64 %3
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

define i64 @uchar_double(i64* nocapture readonly %0, i64 %1) {
; CHECK-LABEL: uchar_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrf $r1 = $r1, 63, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld.xs $r0 = $r1[$r0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = and i64 %1, 255
  %4 = getelementptr inbounds i64, i64* %0, i64 %3
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}
