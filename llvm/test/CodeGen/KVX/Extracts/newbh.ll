; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s --check-prefixes=KV3_1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=KV3_2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

%struct.cnode = type { i16, double, [3 x double], i32, i32, [8 x ptr], ptr }

@nbody = common global i32 0
@NumNodes = common global i32 0
@.str.3 = private unnamed_addr constant [22 x i8] c"Assertion Failure #%d\00"
@cp_free_list = global ptr null
@bp_free_list = global ptr null
@root = common global ptr null
@rmin = common global [3 x double] zeroinitializer
@xxxrsize = common global double 0.000000e+00
@arg1 = common global i32 0

declare i32 @printf(ptr readonly, ...)

declare noalias ptr @malloc(i64 noundef)

declare void @abort() local_unnamed_addr

define void @expandbox(ptr %0, ptr %1, i32 %2, i32 %3) {
; KV3_1-LABEL: expandbox:
; KV3_1:       # %bb.0:
; KV3_1-NEXT:    addd $r12 = $r12, -128
; KV3_1-NEXT:    get $r16 = $ra
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    sd 120[$r12] = $r16
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    so 88[$r12] = $r28r29r30r31
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    so 56[$r12] = $r24r25r26r27
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    so 24[$r12] = $r20r21r22r23
; KV3_1-NEXT:    ;; # (end cycle 4)
; KV3_1-NEXT:    sq 8[$r12] = $r18r19
; KV3_1-NEXT:    copyd $r18 = $r1
; KV3_1-NEXT:    copyd $r19 = $r0
; KV3_1-NEXT:    ;; # (end cycle 5)
; KV3_1-NEXT:    lq $r22r23 = 16[$r19]
; KV3_1-NEXT:    ;; # (end cycle 6)
; KV3_1-NEXT:    ld $r29 = 0[$r18]
; KV3_1-NEXT:    ;; # (end cycle 7)
; KV3_1-NEXT:    ld $r20 = 24[$r18]
; KV3_1-NEXT:    ;; # (end cycle 8)
; KV3_1-NEXT:    ld $r24 = 32[$r19]
; KV3_1-NEXT:    ;; # (end cycle 9)
; KV3_1-NEXT:    fsbfd $r0 = $r29, $r22
; KV3_1-NEXT:    ;; # (end cycle 10)
; KV3_1-NEXT:    copyd $r1 = $r20
; KV3_1-NEXT:    call __divdf3
; KV3_1-NEXT:    ;; # (end cycle 11)
; KV3_1-NEXT:    lq $r26r27 = 8[$r18]
; KV3_1-NEXT:    copyd $r1 = $r20
; KV3_1-NEXT:    copyd $r22 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fsbfd $r0 = $r26, $r23
; KV3_1-NEXT:    call __divdf3
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    fsbfd $r0 = $r27, $r24
; KV3_1-NEXT:    copyd $r1 = $r20
; KV3_1-NEXT:    copyd $r21 = $r0
; KV3_1-NEXT:    call __divdf3
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    make $r1 = 0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.ult $r1 = $r0, $r1
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.wnez $r1 ? .LBB0_7
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.1:
; KV3_1-NEXT:    make $r1 = 0x3ff0000000000000
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.uge $r0 = $r0, $r1
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.2:
; KV3_1-NEXT:    make $r0 = 0x4000000000000000
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.ult $r0 = $r0, $r22
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.3:
; KV3_1-NEXT:    make $r0 = 0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.ult $r0 = $r22, $r0
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.4:
; KV3_1-NEXT:    make $r0 = 0x3ff0000000000000
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.uge $r0 = $r22, $r0
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.5:
; KV3_1-NEXT:    make $r0 = 0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.ult $r0 = $r21, $r0
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.6:
; KV3_1-NEXT:    make $r0 = 0x3ff0000000000000
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.olt $r0 = $r21, $r0
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_25
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  .LBB0_7:
; KV3_1-NEXT:    make $r3 = cp_free_list
; KV3_1-NEXT:    make $r23 = 0x3ff0000000000000
; KV3_1-NEXT:    make $r28 = 0
; KV3_1-NEXT:    goto .LBB0_9
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:  .LBB0_8: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    make $r0 = 0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_25
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  .LBB0_9: # =>This Inner Loop Header: Depth=1
; KV3_1-NEXT:    make $r0 = 0x408f400000000000
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.uge $r0 = $r20, $r0
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_27
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.10: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    fmuld $r0 = $r20, 0x3fe0000000000000
; KV3_1-NEXT:    ld $r1 = 16[$r19]
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    faddd $r22 = $r29, $r0
; KV3_1-NEXT:    ;; # (end cycle 4)
; KV3_1-NEXT:    copyd $r1 = $r0
; KV3_1-NEXT:    fcompd.olt $r2 = $r1, $r22
; KV3_1-NEXT:    ;; # (end cycle 8)
; KV3_1-NEXT:    fadddp $r24r25 = $r26r27, $r0r1
; KV3_1-NEXT:    ;; # (end cycle 9)
; KV3_1-NEXT:    cb.weqz $r2 ? .LBB0_12
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.11: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    fsbfd $r29 = $r20, $r29
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    sd 0[$r18] = $r29
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:  .LBB0_12: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    ld $r0 = 24[$r19]
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.olt $r0 = $r0, $r24
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    cb.weqz $r0 ? .LBB0_14
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.13: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    fsbfd $r26 = $r20, $r26
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    sd 8[$r18] = $r26
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:  .LBB0_14: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    ld $r0 = 32[$r19]
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fcompd.uge $r0 = $r0, $r25
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    cb.wnez $r0 ? .LBB0_16
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.15: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    fsbfd $r27 = $r20, $r27
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    sd 16[$r18] = $r27
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:  .LBB0_16: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    ld $r0 = 32[$r18]
; KV3_1-NEXT:    faddd $r20 = $r20, $r20
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    sd 24[$r18] = $r20
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    cb.deqz $r0 ? .LBB0_8
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.17: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    ld $r21 = 0[$r3]
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    cb.deqz $r21 ? .LBB0_19
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.18: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    ld $r0 = 112[$r21]
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    sd 0[$r3] = $r0
; KV3_1-NEXT:    goto .LBB0_20
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:  .LBB0_19: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    make $r0 = 120
; KV3_1-NEXT:    call malloc
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    copyd $r21 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:  .LBB0_20: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    sw 40[$r21] = $r28
; KV3_1-NEXT:    make $r0 = 2
; KV3_1-NEXT:    copyd $r29 = $r28
; KV3_1-NEXT:    copyd $r30 = $r28
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    sh 0[$r21] = $r0
; KV3_1-NEXT:    copyd $r31 = $r28
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    so 48[$r21] = $r28r29r30r31
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    so 80[$r21] = $r28r29r30r31
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    ld $r29 = 0[$r18]
; KV3_1-NEXT:    ;; # (end cycle 4)
; KV3_1-NEXT:    ld $r20 = 24[$r18]
; KV3_1-NEXT:    ;; # (end cycle 5)
; KV3_1-NEXT:    fsbfd $r0 = $r29, $r22
; KV3_1-NEXT:    ;; # (end cycle 7)
; KV3_1-NEXT:    copyd $r1 = $r20
; KV3_1-NEXT:    call __divdf3
; KV3_1-NEXT:    ;; # (end cycle 8)
; KV3_1-NEXT:    lq $r26r27 = 8[$r18]
; KV3_1-NEXT:    copyd $r2 = $r20
; KV3_1-NEXT:    copyd $r3 = $r20
; KV3_1-NEXT:    copyd $r22 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fsbfdp $r0r1 = $r26r27, $r24r25
; KV3_1-NEXT:    call __divv2df3
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    fcompd.olt $r0 = $r1, $r23
; KV3_1-NEXT:    make $r3 = -1
; KV3_1-NEXT:    copyd $r24 = $r0
; KV3_1-NEXT:    make $r30 = 0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    make $r0 = -1
; KV3_1-NEXT:    cmoved.even $r0 ? $r3 = 0
; KV3_1-NEXT:    fcompd.olt $r4 = $r24, $r23
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cmoved.even $r4 ? $r0 = 0
; KV3_1-NEXT:    fcompd.oge $r2 = $r1, $r30
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    cmoved.even $r2 ? $r3 = 0
; KV3_1-NEXT:    fcompd.oge $r4 = $r24, $r30
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    cmoved.even $r4 ? $r0 = 0
; KV3_1-NEXT:    ;; # (end cycle 4)
; KV3_1-NEXT:    insf $r0 = $r3, 15, 8
; KV3_1-NEXT:    ;; # (end cycle 5)
; KV3_1-NEXT:    extfz $r2 = $r0, 15, 8
; KV3_1-NEXT:    ;; # (end cycle 6)
; KV3_1-NEXT:    cb.even $r2 ? .LBB0_26
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.21: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    fcompd.ult $r2 = $r22, $r30
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    cb.wnez $r2 ? .LBB0_26
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.22: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    fcompd.uge $r2 = $r22, $r23
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    cb.wnez $r2 ? .LBB0_26
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.23: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    zxbd $r0 = $r0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    andw $r0 = $r0, 1
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    cb.weqz $r0 ? .LBB0_26
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  # %bb.24: # in Loop: Header=BB0_9 Depth=1
; KV3_1-NEXT:    fmuld $r0 = $r1, 0x41d0000000000000
; KV3_1-NEXT:    call floor
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fixedd.rz $r25 = $r0, 0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fmuld $r0 = $r24, 0x41d0000000000000
; KV3_1-NEXT:    call floor
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    fixedd.rz $r24 = $r0, 0
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fmuld $r0 = $r22, 0x41d0000000000000
; KV3_1-NEXT:    call floor
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    fixedd.rz $r0 = $r0, 0
; KV3_1-NEXT:    srlw $r1 = $r24, 28
; KV3_1-NEXT:    extfz $r2 = $r25, 29, 29
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    andw $r1 = $r1, 2
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    srlw $r0 = $r0, 27
; KV3_1-NEXT:    ;; # (end cycle 4)
; KV3_1-NEXT:    andw $r0 = $r0, 4
; KV3_1-NEXT:    ;; # (end cycle 5)
; KV3_1-NEXT:    iorw $r0 = $r1, $r0
; KV3_1-NEXT:    ld $r1 = 32[$r18]
; KV3_1-NEXT:    ;; # (end cycle 6)
; KV3_1-NEXT:    iorw $r0 = $r0, $r2
; KV3_1-NEXT:    ;; # (end cycle 7)
; KV3_1-NEXT:    addx8uwd $r0 = $r0, $r21
; KV3_1-NEXT:    ;; # (end cycle 8)
; KV3_1-NEXT:    sd 48[$r0] = $r1
; KV3_1-NEXT:    ;; # (end cycle 9)
; KV3_1-NEXT:    sd 32[$r18] = $r21
; KV3_1-NEXT:    ;; # (end cycle 10)
; KV3_1-NEXT:    ld $r0 = 16[$r19]
; KV3_1-NEXT:    ;; # (end cycle 11)
; KV3_1-NEXT:    lq $r24r25 = 24[$r19]
; KV3_1-NEXT:    copyd $r1 = $r20
; KV3_1-NEXT:    ;; # (end cycle 12)
; KV3_1-NEXT:    fsbfd $r0 = $r29, $r0
; KV3_1-NEXT:    call __divdf3
; KV3_1-NEXT:    ;; # (end cycle 14)
; KV3_1-NEXT:    fcompd.olt $r0 = $r0, $r23
; KV3_1-NEXT:    fcompd.oge $r1 = $r0, $r30
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    fsbfd $r0 = $r26, $r24
; KV3_1-NEXT:    copyd $r1 = $r20
; KV3_1-NEXT:    andw $r21 = $r1, $r0
; KV3_1-NEXT:    call __divdf3
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    fcompd.olt $r0 = $r0, $r23
; KV3_1-NEXT:    fcompd.oge $r1 = $r0, $r30
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    andw $r0 = $r1, $r0
; KV3_1-NEXT:    copyd $r1 = $r20
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    fsbfd $r0 = $r27, $r25
; KV3_1-NEXT:    andw $r21 = $r21, $r0
; KV3_1-NEXT:    call __divdf3
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    fcompd.olt $r0 = $r0, $r23
; KV3_1-NEXT:    fcompd.oge $r1 = $r0, $r30
; KV3_1-NEXT:    make $r3 = cp_free_list
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    andw $r0 = $r1, $r0
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    andw $r0 = $r0, $r21
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    cb.weqz $r0 ? .LBB0_9
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  .LBB0_25: # %.loopexit
; KV3_1-NEXT:    lq $r18r19 = 8[$r12]
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    lo $r20r21r22r23 = 24[$r12]
; KV3_1-NEXT:    ;; # (end cycle 1)
; KV3_1-NEXT:    lo $r24r25r26r27 = 56[$r12]
; KV3_1-NEXT:    ;; # (end cycle 2)
; KV3_1-NEXT:    lo $r28r29r30r31 = 88[$r12]
; KV3_1-NEXT:    ;; # (end cycle 3)
; KV3_1-NEXT:    ld $r16 = 120[$r12]
; KV3_1-NEXT:    ;; # (end cycle 4)
; KV3_1-NEXT:    set $ra = $r16
; KV3_1-NEXT:    addd $r12 = $r12, 128
; KV3_1-NEXT:    ;; # (end cycle 9)
; KV3_1-NEXT:    ret
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  .LBB0_26:
; KV3_1-NEXT:    make $r0 = .L.str.3
; KV3_1-NEXT:    make $r1 = 1
; KV3_1-NEXT:    call printf
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    call abort
; KV3_1-NEXT:    ;;
; KV3_1-NEXT:  .LBB0_27:
; KV3_1-NEXT:    make $r0 = .L.str.3
; KV3_1-NEXT:    make $r1 = 999
; KV3_1-NEXT:    call printf
; KV3_1-NEXT:    ;; # (end cycle 0)
; KV3_1-NEXT:    call abort
; KV3_1-NEXT:    ;;
;
; KV3_2-LABEL: expandbox:
; KV3_2:       # %bb.0:
; KV3_2-NEXT:    addd $r12 = $r12, -128
; KV3_2-NEXT:    get $r16 = $ra
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    sd 120[$r12] = $r16
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    so 88[$r12] = $r28r29r30r31
; KV3_2-NEXT:    ;; # (end cycle 2)
; KV3_2-NEXT:    so 56[$r12] = $r24r25r26r27
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    so 24[$r12] = $r20r21r22r23
; KV3_2-NEXT:    ;; # (end cycle 4)
; KV3_2-NEXT:    sq 8[$r12] = $r18r19
; KV3_2-NEXT:    copyd $r18 = $r1
; KV3_2-NEXT:    copyd $r19 = $r0
; KV3_2-NEXT:    ;; # (end cycle 5)
; KV3_2-NEXT:    lq $r22r23 = 16[$r19]
; KV3_2-NEXT:    ;; # (end cycle 6)
; KV3_2-NEXT:    ld $r29 = 0[$r18]
; KV3_2-NEXT:    ;; # (end cycle 7)
; KV3_2-NEXT:    ld $r20 = 24[$r18]
; KV3_2-NEXT:    ;; # (end cycle 8)
; KV3_2-NEXT:    ld $r24 = 32[$r19]
; KV3_2-NEXT:    ;; # (end cycle 9)
; KV3_2-NEXT:    fsbfd $r0 = $r29, $r22
; KV3_2-NEXT:    ;; # (end cycle 10)
; KV3_2-NEXT:    copyd $r1 = $r20
; KV3_2-NEXT:    call __divdf3
; KV3_2-NEXT:    ;; # (end cycle 11)
; KV3_2-NEXT:    lq $r26r27 = 8[$r18]
; KV3_2-NEXT:    copyd $r1 = $r20
; KV3_2-NEXT:    copyd $r22 = $r0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fsbfd $r0 = $r26, $r23
; KV3_2-NEXT:    call __divdf3
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    fsbfd $r0 = $r27, $r24
; KV3_2-NEXT:    copyd $r1 = $r20
; KV3_2-NEXT:    copyd $r21 = $r0
; KV3_2-NEXT:    call __divdf3
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    make $r1 = 0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.ult $r1 = $r0, $r1
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.wnez $r1 ? .LBB0_7
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.1:
; KV3_2-NEXT:    make $r1 = 0x3ff0000000000000
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.uge $r0 = $r0, $r1
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.2:
; KV3_2-NEXT:    make $r0 = 0x4000000000000000
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.ult $r0 = $r0, $r22
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.3:
; KV3_2-NEXT:    make $r0 = 0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.ult $r0 = $r22, $r0
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.4:
; KV3_2-NEXT:    make $r0 = 0x3ff0000000000000
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.uge $r0 = $r22, $r0
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.5:
; KV3_2-NEXT:    make $r0 = 0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.ult $r0 = $r21, $r0
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_7
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.6:
; KV3_2-NEXT:    make $r0 = 0x3ff0000000000000
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.olt $r0 = $r21, $r0
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_25
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  .LBB0_7:
; KV3_2-NEXT:    make $r3 = cp_free_list
; KV3_2-NEXT:    make $r23 = 0x3ff0000000000000
; KV3_2-NEXT:    make $r28 = 0
; KV3_2-NEXT:    goto .LBB0_9
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:  .LBB0_8: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    make $r0 = 0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_25
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  .LBB0_9: # =>This Inner Loop Header: Depth=1
; KV3_2-NEXT:    make $r0 = 0x408f400000000000
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.uge $r0 = $r20, $r0
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_27
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.10: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    make $r0 = 0x3fe0000000000000
; KV3_2-NEXT:    ld $r1 = 16[$r19]
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fmuld $r0 = $r20, $r0
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    faddd $r22 = $r29, $r0
; KV3_2-NEXT:    ;; # (end cycle 5)
; KV3_2-NEXT:    copyd $r1 = $r0
; KV3_2-NEXT:    fcompd.olt $r2 = $r1, $r22
; KV3_2-NEXT:    ;; # (end cycle 9)
; KV3_2-NEXT:    fadddp $r24r25 = $r26r27, $r0r1
; KV3_2-NEXT:    ;; # (end cycle 10)
; KV3_2-NEXT:    cb.weqz $r2 ? .LBB0_12
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.11: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    fsbfd $r29 = $r20, $r29
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    sd 0[$r18] = $r29
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:  .LBB0_12: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    ld $r0 = 24[$r19]
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.olt $r0 = $r0, $r24
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    cb.weqz $r0 ? .LBB0_14
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.13: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    fsbfd $r26 = $r20, $r26
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    sd 8[$r18] = $r26
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:  .LBB0_14: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    ld $r0 = 32[$r19]
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompd.uge $r0 = $r0, $r25
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    cb.wnez $r0 ? .LBB0_16
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.15: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    fsbfd $r27 = $r20, $r27
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    sd 16[$r18] = $r27
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:  .LBB0_16: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    ld $r0 = 32[$r18]
; KV3_2-NEXT:    faddd $r20 = $r20, $r20
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    sd 24[$r18] = $r20
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    cb.deqz $r0 ? .LBB0_8
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.17: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    ld $r21 = 0[$r3]
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    cb.deqz $r21 ? .LBB0_19
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.18: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    ld $r0 = 112[$r21]
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    sd 0[$r3] = $r0
; KV3_2-NEXT:    goto .LBB0_20
; KV3_2-NEXT:    ;; # (end cycle 2)
; KV3_2-NEXT:  .LBB0_19: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    make $r0 = 120
; KV3_2-NEXT:    call malloc
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    copyd $r21 = $r0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:  .LBB0_20: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    sw 40[$r21] = $r28
; KV3_2-NEXT:    make $r0 = 2
; KV3_2-NEXT:    copyd $r29 = $r28
; KV3_2-NEXT:    copyd $r30 = $r28
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    sh 0[$r21] = $r0
; KV3_2-NEXT:    copyd $r31 = $r28
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    so 48[$r21] = $r28r29r30r31
; KV3_2-NEXT:    ;; # (end cycle 2)
; KV3_2-NEXT:    so 80[$r21] = $r28r29r30r31
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    ld $r29 = 0[$r18]
; KV3_2-NEXT:    ;; # (end cycle 4)
; KV3_2-NEXT:    ld $r20 = 24[$r18]
; KV3_2-NEXT:    ;; # (end cycle 5)
; KV3_2-NEXT:    fsbfd $r0 = $r29, $r22
; KV3_2-NEXT:    ;; # (end cycle 7)
; KV3_2-NEXT:    copyd $r1 = $r20
; KV3_2-NEXT:    call __divdf3
; KV3_2-NEXT:    ;; # (end cycle 8)
; KV3_2-NEXT:    lq $r26r27 = 8[$r18]
; KV3_2-NEXT:    copyd $r2 = $r20
; KV3_2-NEXT:    copyd $r3 = $r20
; KV3_2-NEXT:    copyd $r22 = $r0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fsbfdp $r0r1 = $r26r27, $r24r25
; KV3_2-NEXT:    call __divv2df3
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    fcompnd.olt $r3 = $r1, $r23
; KV3_2-NEXT:    copyd $r24 = $r0
; KV3_2-NEXT:    make $r30 = 0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fcompnd.olt $r0 = $r24, $r23
; KV3_2-NEXT:    fcompd.oge $r2 = $r1, $r30
; KV3_2-NEXT:    fcompd.oge $r4 = $r24, $r30
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cmoved.even $r4 ? $r0 = 0
; KV3_2-NEXT:    cmoved.even $r2 ? $r3 = 0
; KV3_2-NEXT:    ;; # (end cycle 2)
; KV3_2-NEXT:    insf $r0 = $r3, 15, 8
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    extfz $r2 = $r0, 15, 8
; KV3_2-NEXT:    ;; # (end cycle 4)
; KV3_2-NEXT:    cb.even $r2 ? .LBB0_26
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.21: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    fcompd.ult $r2 = $r22, $r30
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    cb.wnez $r2 ? .LBB0_26
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.22: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    fcompd.uge $r2 = $r22, $r23
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    cb.wnez $r2 ? .LBB0_26
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.23: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    zxbd $r0 = $r0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    andw $r0 = $r0, 1
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    cb.weqz $r0 ? .LBB0_26
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  # %bb.24: # in Loop: Header=BB0_9 Depth=1
; KV3_2-NEXT:    make $r31 = 0x41d0000000000000
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fmuld $r0 = $r1, $r31
; KV3_2-NEXT:    call floor
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    fixedd.rz $r25 = $r0, 0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fmuld $r0 = $r24, $r31
; KV3_2-NEXT:    call floor
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    fixedd.rz $r24 = $r0, 0
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fmuld $r0 = $r22, $r31
; KV3_2-NEXT:    call floor
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    fixedd.rz $r0 = $r0, 0
; KV3_2-NEXT:    srlw $r1 = $r24, 28
; KV3_2-NEXT:    extfz $r2 = $r25, 29, 29
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    andw $r1 = $r1, 2
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    srlw $r0 = $r0, 27
; KV3_2-NEXT:    ;; # (end cycle 4)
; KV3_2-NEXT:    andw $r0 = $r0, 4
; KV3_2-NEXT:    ;; # (end cycle 5)
; KV3_2-NEXT:    iorw $r0 = $r1, $r0
; KV3_2-NEXT:    ld $r1 = 32[$r18]
; KV3_2-NEXT:    ;; # (end cycle 6)
; KV3_2-NEXT:    iorw $r0 = $r0, $r2
; KV3_2-NEXT:    ;; # (end cycle 7)
; KV3_2-NEXT:    addx8uwd $r0 = $r0, $r21
; KV3_2-NEXT:    ;; # (end cycle 8)
; KV3_2-NEXT:    sd 48[$r0] = $r1
; KV3_2-NEXT:    ;; # (end cycle 9)
; KV3_2-NEXT:    sd 32[$r18] = $r21
; KV3_2-NEXT:    ;; # (end cycle 10)
; KV3_2-NEXT:    ld $r0 = 16[$r19]
; KV3_2-NEXT:    ;; # (end cycle 11)
; KV3_2-NEXT:    lq $r24r25 = 24[$r19]
; KV3_2-NEXT:    copyd $r1 = $r20
; KV3_2-NEXT:    ;; # (end cycle 12)
; KV3_2-NEXT:    fsbfd $r0 = $r29, $r0
; KV3_2-NEXT:    call __divdf3
; KV3_2-NEXT:    ;; # (end cycle 14)
; KV3_2-NEXT:    fcompd.olt $r0 = $r0, $r23
; KV3_2-NEXT:    fcompd.oge $r1 = $r0, $r30
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    fsbfd $r0 = $r26, $r24
; KV3_2-NEXT:    copyd $r1 = $r20
; KV3_2-NEXT:    andw $r21 = $r1, $r0
; KV3_2-NEXT:    call __divdf3
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    fcompd.olt $r0 = $r0, $r23
; KV3_2-NEXT:    fcompd.oge $r1 = $r0, $r30
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    andw $r0 = $r1, $r0
; KV3_2-NEXT:    copyd $r1 = $r20
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    fsbfd $r0 = $r27, $r25
; KV3_2-NEXT:    andw $r21 = $r21, $r0
; KV3_2-NEXT:    call __divdf3
; KV3_2-NEXT:    ;; # (end cycle 2)
; KV3_2-NEXT:    fcompd.olt $r0 = $r0, $r23
; KV3_2-NEXT:    fcompd.oge $r1 = $r0, $r30
; KV3_2-NEXT:    make $r3 = cp_free_list
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    andw $r0 = $r1, $r0
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    andw $r0 = $r0, $r21
; KV3_2-NEXT:    ;; # (end cycle 2)
; KV3_2-NEXT:    cb.weqz $r0 ? .LBB0_9
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  .LBB0_25: # %.loopexit
; KV3_2-NEXT:    lq $r18r19 = 8[$r12]
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    lo $r20r21r22r23 = 24[$r12]
; KV3_2-NEXT:    ;; # (end cycle 1)
; KV3_2-NEXT:    lo $r24r25r26r27 = 56[$r12]
; KV3_2-NEXT:    ;; # (end cycle 2)
; KV3_2-NEXT:    lo $r28r29r30r31 = 88[$r12]
; KV3_2-NEXT:    ;; # (end cycle 3)
; KV3_2-NEXT:    ld $r16 = 120[$r12]
; KV3_2-NEXT:    ;; # (end cycle 4)
; KV3_2-NEXT:    set $ra = $r16
; KV3_2-NEXT:    addd $r12 = $r12, 128
; KV3_2-NEXT:    ;; # (end cycle 9)
; KV3_2-NEXT:    ret
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  .LBB0_26:
; KV3_2-NEXT:    make $r0 = .L.str.3
; KV3_2-NEXT:    make $r1 = 1
; KV3_2-NEXT:    call printf
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    call abort
; KV3_2-NEXT:    ;;
; KV3_2-NEXT:  .LBB0_27:
; KV3_2-NEXT:    make $r0 = .L.str.3
; KV3_2-NEXT:    make $r1 = 999
; KV3_2-NEXT:    call printf
; KV3_2-NEXT:    ;; # (end cycle 0)
; KV3_2-NEXT:    call abort
; KV3_2-NEXT:    ;;
  %5 = getelementptr inbounds i8, ptr %0, i64 16
  %6 = load double, ptr %5, align 8
  %7 = getelementptr inbounds i8, ptr %0, i64 24
  %8 = load double, ptr %7, align 8
  %9 = getelementptr inbounds i8, ptr %0, i64 32
  %10 = load double, ptr %9, align 8
  %11 = getelementptr inbounds i8, ptr %1, i64 24
  %12 = load double, ptr %11, align 8
  %13 = load double, ptr %1, align 8
  %14 = fsub double %6, %13
  %15 = fdiv double %14, %12
  %16 = fcmp oge double %15, 0.000000e+00
  %17 = fcmp olt double %15, 1.000000e+00
  %toto = fcmp ole double %15, 2.000000e+00
  %18 = and i1 %16, %17
  %titi = and i1 %toto, %18
  %19 = getelementptr inbounds i8, ptr %1, i64 8
  %20 = getelementptr inbounds i8, ptr %1, i64 16
  %21 = load <2 x double>, ptr %19, align 16
  %22 = extractelement <2 x double> %21, i64 0
  %23 = fsub double %8, %22
  %24 = fdiv double %23, %12
  %25 = fcmp oge double %24, 0.000000e+00
  %26 = fcmp olt double %24, 1.000000e+00
  %27 = and i1 %25, %26
  %28 = and i1 %titi, %27
  %29 = extractelement <2 x double> %21, i64 1
  %30 = fsub double %10, %29
  %31 = fdiv double %30, %12
  %32 = fcmp oge double %31, 0.000000e+00
  %33 = fcmp olt double %31, 1.000000e+00
  %34 = and i1 %32, %33
  %35 = and i1 %34, %28
  br i1 %35, label %.loopexit, label %36

36:
  %37 = getelementptr inbounds i8, ptr %1, i64 32
  br label %38

38:
  %39 = phi double [ %13, %36 ], [ %141, %140 ]
  %40 = phi double [ %12, %36 ], [ %142, %140 ]
  %41 = phi <2 x double> [ %21, %36 ], [ %144, %140 ]
  %42 = fcmp olt double %40, 1.000000e+03
  br i1 %42, label %43, label %51

43:
  %44 = fmul double %40, 5.000000e-01
  %45 = fadd double %39, %44
  %46 = insertelement <2 x double> poison, double %44, i64 0
  %47 = shufflevector <2 x double> %46, <2 x double> poison, <2 x i32> zeroinitializer
  %48 = fadd <2 x double> %41, %47
  %49 = load double, ptr %5, align 8
  %50 = fcmp olt double %49, %45
  br i1 %50, label %53, label %55

51:
  %52 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @.str.3, i32 999)
  tail call void @abort()
  unreachable

53:
  %54 = fsub double %39, %40
  store double %54, ptr %1, align 8
  br label %55

55:
  %56 = phi double [ %39, %43 ], [ %54, %53 ]
  %57 = load double, ptr %7, align 8
  %58 = extractelement <2 x double> %48, i64 0
  %59 = fcmp olt double %57, %58
  %60 = extractelement <2 x double> %41, i64 0
  br i1 %59, label %146, label %148

61:
  %62 = load ptr, ptr @cp_free_list, align 8
  %63 = icmp eq ptr %62, null
  br i1 %63, label %67, label %64

64:
  %65 = getelementptr inbounds i8, ptr %62, i64 112
  %66 = load ptr, ptr %65, align 8
  store ptr %66, ptr @cp_free_list, align 8
  br label %69

67:
  %68 = tail call noalias dereferenceable_or_null(120) ptr @malloc(i64 120)
  br label %69

69:
  %70 = phi ptr [ %62, %64 ], [ %68, %67 ]
  store i16 2, ptr %70, align 2
  %71 = getelementptr inbounds i8, ptr %70, i64 40
  store i32 0, ptr %71, align 4
  %72 = getelementptr i8, ptr %70, i64 48
  tail call void @llvm.memset.p0.i64(ptr nonnull align 8 dereferenceable(64) %72, i8 0, i64 64, i1 false)
  %73 = load double, ptr %1, align 8
  %74 = fsub double %45, %73
  %75 = load double, ptr %11, align 8
  %76 = fdiv double %74, %75
  %77 = fcmp oge double %76, 0.000000e+00
  %78 = fcmp olt double %76, 1.000000e+00
  %79 = and i1 %77, %78
  %80 = load <2 x double>, ptr %19, align 16
  %81 = fsub <2 x double> %48, %80
  %82 = insertelement <2 x double> poison, double %75, i64 0
  %83 = shufflevector <2 x double> %82, <2 x double> poison, <2 x i32> zeroinitializer
  %84 = fdiv <2 x double> %81, %83
  %85 = fcmp oge <2 x double> %84, zeroinitializer
  %86 = fcmp olt <2 x double> %84, <double 1.000000e+00, double 1.000000e+00>
  %87 = and <2 x i1> %85, %86
  %88 = extractelement <2 x i1> %87, i64 0
  %89 = and i1 %79, %88
  %90 = extractelement <2 x i1> %87, i64 1
  %91 = and i1 %90, %89
  br i1 %91, label %94, label %92

92:
  %93 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @.str.3, i32 1)
  tail call void @abort()
  unreachable

94:
  %95 = extractelement <2 x double> %84, i64 1
  %96 = fmul double %95, 0x41D0000000000000
  %97 = tail call double @llvm.floor.f64(double %96)
  %98 = fptosi double %97 to i32
  %99 = extractelement <2 x double> %84, i64 0
  %100 = fmul double %99, 0x41D0000000000000
  %101 = tail call double @llvm.floor.f64(double %100)
  %102 = fptosi double %101 to i32
  %103 = fmul double %76, 0x41D0000000000000
  %104 = tail call double @llvm.floor.f64(double %103)
  %105 = fptosi double %104 to i32
  %106 = lshr i32 %105, 27
  %107 = and i32 %106, 4
  %108 = lshr i32 %102, 28
  %109 = and i32 %108, 2
  %110 = or disjoint i32 %109, %107
  %111 = lshr i32 %98, 29
  %112 = and i32 %111, 1
  %113 = or disjoint i32 %110, %112
  %114 = load ptr, ptr %37, align 8
  %115 = zext nneg i32 %113 to i64
  %116 = getelementptr inbounds %struct.cnode, ptr %70, i64 0, i32 5, i64 %115
  store ptr %114, ptr %116, align 8
  store ptr %70, ptr %37, align 8
  %117 = load double, ptr %5, align 8
  %118 = load double, ptr %7, align 8
  %119 = load double, ptr %9, align 8
  %120 = fsub double %117, %73
  %121 = fdiv double %120, %75
  %122 = fcmp oge double %121, 0.000000e+00
  %123 = fcmp olt double %121, 1.000000e+00
  %124 = and i1 %122, %123
  %125 = extractelement <2 x double> %80, i64 0
  %126 = fsub double %118, %125
  %127 = fdiv double %126, %75
  %128 = fcmp oge double %127, 0.000000e+00
  %129 = fcmp olt double %127, 1.000000e+00
  %130 = and i1 %128, %129
  %131 = and i1 %124, %130
  %132 = extractelement <2 x double> %80, i64 1
  %133 = fsub double %119, %132
  %134 = fdiv double %133, %75
  %135 = fcmp oge double %134, 0.000000e+00
  %136 = fcmp olt double %134, 1.000000e+00
  %137 = and i1 %135, %136
  %138 = and i1 %137, %131
  %139 = zext i1 %138 to i32
  br label %140

140:
  %141 = phi double [ %73, %94 ], [ %56, %156 ]
  %142 = phi double [ %75, %94 ], [ %158, %156 ]
  %143 = phi i32 [ %139, %94 ], [ 0, %156 ]
  %144 = phi <2 x double> [ %80, %94 ], [ %162, %156 ]
  %145 = icmp eq i32 %143, 0
  br i1 %145, label %38, label %.loopexit

.loopexit:
  ret void

146:
  %147 = fsub double %60, %40
  store double %147, ptr %19, align 8
  br label %148

148:
  %149 = phi double [ %147, %146 ], [ %60, %55 ]
  %150 = load double, ptr %9, align 8
  %151 = extractelement <2 x double> %48, i64 1
  %152 = fcmp olt double %150, %151
  %153 = extractelement <2 x double> %41, i64 1
  br i1 %152, label %154, label %156

154:
  %155 = fsub double %153, %40
  store double %155, ptr %20, align 8
  br label %156

156:
  %157 = phi double [ %155, %154 ], [ %153, %148 ]
  %158 = fmul double %40, 2.000000e+00
  store double %158, ptr %11, align 8
  %159 = load ptr, ptr %37, align 8
  %160 = icmp eq ptr %159, null
  %161 = insertelement <2 x double> poison, double %149, i64 0
  %162 = insertelement <2 x double> %161, double %157, i64 1
  br i1 %160, label %140, label %61
}

declare double @llvm.floor.f64(double)

declare void @llvm.memset.p0.i64(ptr writeonly, i8, i64, i1 immarg)

