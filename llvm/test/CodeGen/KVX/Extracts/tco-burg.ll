; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s
; RUN: clang -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"
; Derived from llvm-test-suite's MultiSource/Applications/Burg.

%struct.list = type { ptr, %struct.list* }

define void @reveachList(ptr (ptr )* nocapture %f, %struct.list* readonly %l){
; CHECK-LABEL: reveachList:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sq 8[$r12] = $r18r19
; CHECK-NEXT:    cb.deqz $r1 ? .LBB0_2
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:  # %bb.1: # %if.end
; CHECK-NEXT:    ld $r2 = 8[$r1]
; CHECK-NEXT:    copyd $r18 = $r0
; CHECK-NEXT:    copyd $r19 = $r1
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    copyd $r1 = $r2
; CHECK-NEXT:    call reveachList
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    ld $r0 = 0[$r19]
; CHECK-NEXT:    copyd $r4 = $r18
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 7)
; CHECK-NEXT:    igoto $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:  .LBB0_2: # %common.ret
; CHECK-NEXT:    lq $r18r19 = 8[$r12]
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %tobool = icmp eq %struct.list* %l, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %next = getelementptr inbounds %struct.list, %struct.list* %l, i64 0, i32 1
  %0 = load %struct.list*, %struct.list** %next, align 8
  tail call void @reveachList(ptr (ptr )* %f, %struct.list* %0)
  %x = getelementptr inbounds %struct.list, %struct.list* %l, i64 0, i32 0
  %1 = load ptr, ptr %x, align 8
  %call = tail call ptr %f(ptr %1) #1
  ret void

return:                                           ; preds = %entry
  ret void
}

