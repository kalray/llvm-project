; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define <4 x i64> @test_ret_const() #0 {
; CHECK-LABEL: test_ret_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r0 = 1
; CHECK-NEXT:    make $r1 = 2
; CHECK-NEXT:    make $r2 = 1
; CHECK-NEXT:    make $r3 = 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  ret <4 x i64> <i64 1, i64 2, i64 1, i64 2>
}

define i64 @test_extract_0(<4 x i64> %a) #0 {
; CHECK-LABEL: test_extract_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i64> %a, i64 0
  ret i64 %e
}

define i64 @test_extract_1(<4 x i64> %a) #0 {
; CHECK-LABEL: test_extract_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i64> %a, i64 1
  ret i64 %e
}

define <4 x i64> @test_fma(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c) #0 {
; CHECK-LABEL: test_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddd $r1 = $r5, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddd $r0 = $r4, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddd $r2 = $r6, $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    maddd $r3 = $r7, $r11
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <4 x i64> %b, %c
  %ad = add <4 x i64> %a, %m
  ret <4 x i64> %ad
}

; TODO: Improve immediate variants
define <4 x i64> @test_fma_imm(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_fma_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addx2d $r1 = $r5, $r1
; CHECK-NEXT:    addd $r0 = $r0, $r4
; CHECK-NEXT:    addd $r2 = $r2, $r6
; CHECK-NEXT:    addx2d $r3 = $r7, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %m = mul <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %b
  %ad = add <4 x i64> %a, %m
  ret <4 x i64> %ad
}


define i64 @test_extract_i(<4 x i64> %a, i64 %idx) #0 {
; CHECK-LABEL: test_extract_i:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    andd $r4 = $r4, 3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r5 = $r12, 0
; CHECK-NEXT:    so 0[$r12] = $r0r1r2r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld.xs $r0 = $r4[$r5]
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %e = extractelement <4 x i64> %a, i64 %idx
  ret i64 %e
}

define <4 x i64> @test_add(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_add:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r1 = $r1, $r5
; CHECK-NEXT:    addd $r0 = $r0, $r4
; CHECK-NEXT:    addd $r2 = $r2, $r6
; CHECK-NEXT:    addd $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i64> %a, %b
  ret <4 x i64> %r
}

define <4 x i64> @test_add_imm_0(<4 x i64> %a) #0 {
; CHECK-LABEL: test_add_imm_0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r0 = $r0, 1
; CHECK-NEXT:    addd $r1 = $r1, 2
; CHECK-NEXT:    addd $r2 = $r2, 1
; CHECK-NEXT:    addd $r3 = $r3, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %a
  ret <4 x i64> %r
}

define <4 x i64> @test_add_imm_1(<4 x i64> %a) #0 {
; CHECK-LABEL: test_add_imm_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r0 = $r0, 1
; CHECK-NEXT:    addd $r1 = $r1, 2
; CHECK-NEXT:    addd $r2 = $r2, 1
; CHECK-NEXT:    addd $r3 = $r3, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = add <4 x i64> %a, <i64 1, i64 2, i64 1, i64 2>
  ret <4 x i64> %r
}

define <4 x i64> @test_sub(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_sub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbfd $r1 = $r5, $r1
; CHECK-NEXT:    sbfd $r0 = $r4, $r0
; CHECK-NEXT:    sbfd $r2 = $r6, $r2
; CHECK-NEXT:    sbfd $r3 = $r7, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i64> %a, %b
  ret <4 x i64> %r
}

define <4 x i64> @test_sub_imm(<4 x i64> %a) #0 {
; CHECK-LABEL: test_sub_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r0 = $r0, -1
; CHECK-NEXT:    addd $r1 = $r1, -2
; CHECK-NEXT:    addd $r2 = $r2, -1
; CHECK-NEXT:    addd $r3 = $r3, -2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i64> %a, <i64 1, i64 2, i64 1, i64 2>
  ret <4 x i64> %r
}

define <4 x i64> @test_sub_fromimm(<4 x i64> %a) #0 {
; CHECK-LABEL: test_sub_fromimm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbfd $r0 = $r0, 1
; CHECK-NEXT:    sbfd $r1 = $r1, 2
; CHECK-NEXT:    sbfd $r2 = $r2, 1
; CHECK-NEXT:    sbfd $r3 = $r3, 2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i64> <i64 1, i64 2, i64 1, i64 2>, %a
  ret <4 x i64> %r
}

define <4 x i64> @test_neg(<4 x i64> %a) #0 {
; CHECK-LABEL: test_neg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    negd $r0 = $r0
; CHECK-NEXT:    negd $r1 = $r1
; CHECK-NEXT:    negd $r2 = $r2
; CHECK-NEXT:    negd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sub <4 x i64> <i64 0, i64 0, i64 0, i64 0>, %a
  ret <4 x i64> %r
}

; FIXME: The calling convention passes 2 <2 x i64> and
; dag combine decides to not use <4 x i64> for a single
; instruction.
define <4 x i64> @test_mul(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_mul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muld $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r2 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r3 = $r3, $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <4 x i64> %a, %b
  ret <4 x i64> %r
}

define <4 x i64> @test_mul_2(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c) #0 {
; CHECK-LABEL: test_mul_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muld $r3 = $r3, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r2 = $r2, $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r0 = $r0, $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r1 = $r1, $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r0 = $r0, $r8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r2 = $r2, $r10
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muld $r3 = $r3, $r11
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = mul <4 x i64> %a, %b
  %r1 = mul <4 x i64> %r, %c
  ret <4 x i64> %r1
}

define <4 x i64> @test_div(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_div:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 48[$r12] = $r25
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 16[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r7
; CHECK-NEXT:    copyd $r19 = $r6
; CHECK-NEXT:    copyd $r20 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r3
; CHECK-NEXT:    copyd $r22 = $r2
; CHECK-NEXT:    copyd $r23 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r25 = $r0
; CHECK-NEXT:    copyd $r0 = $r23
; CHECK-NEXT:    copyd $r1 = $r20
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r22
; CHECK-NEXT:    copyd $r1 = $r19
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r22 = $r0
; CHECK-NEXT:    copyd $r0 = $r21
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call __divdi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r3 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    copyd $r1 = $r25
; CHECK-NEXT:    copyd $r2 = $r22
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r25 = 48[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = sdiv <4 x i64> %a, %b
  ret <4 x i64> %r
}

define <4 x i64> @test_rem(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_rem:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -64
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 56[$r12] = $r16
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 48[$r12] = $r25
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 16[$r12] = $r20r21r22r23
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sq 0[$r12] = $r18r19
; CHECK-NEXT:    copyd $r18 = $r7
; CHECK-NEXT:    copyd $r19 = $r6
; CHECK-NEXT:    copyd $r20 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r21 = $r3
; CHECK-NEXT:    copyd $r22 = $r2
; CHECK-NEXT:    copyd $r23 = $r0
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r25 = $r0
; CHECK-NEXT:    copyd $r0 = $r23
; CHECK-NEXT:    copyd $r1 = $r20
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r20 = $r0
; CHECK-NEXT:    copyd $r0 = $r22
; CHECK-NEXT:    copyd $r1 = $r19
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r22 = $r0
; CHECK-NEXT:    copyd $r0 = $r21
; CHECK-NEXT:    copyd $r1 = $r18
; CHECK-NEXT:    call __moddi3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r3 = $r0
; CHECK-NEXT:    copyd $r0 = $r20
; CHECK-NEXT:    copyd $r1 = $r25
; CHECK-NEXT:    copyd $r2 = $r22
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lq $r18r19 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    lo $r20r21r22r23 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r25 = 48[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 56[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 64
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = srem <4 x i64> %a, %b
  ret <4 x i64> %r
}

define void @test_ldst_v4i64(<4 x i64>* %a, <4 x i64>* %b) {
; CHECK-LABEL: test_ldst_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lo $r4r5r6r7 = 0[$r0]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 0[$r1] = $r4r5r6r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %t1 = load <4 x i64>, <4 x i64>* %a
  store <4 x i64> %t1, <4 x i64>* %b, align 16
  ret void
}

declare <4 x i64> @test_callee(<4 x i64> %a, <4 x i64> %b) #0

define <4 x i64> @test_call(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i64> @test_callee(<4 x i64> %a, <4 x i64> %b)
  ret <4 x i64> %r
}

define <4 x i64> @test_call_flipped(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_call_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    copyd $r8 = $r3
; CHECK-NEXT:    copyd $r9 = $r2
; CHECK-NEXT:    copyd $r10 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r11 = $r0
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    copyd $r4 = $r11
; CHECK-NEXT:    copyd $r5 = $r10
; CHECK-NEXT:    copyd $r6 = $r9
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r7 = $r8
; CHECK-NEXT:    call test_callee
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i64> @test_callee(<4 x i64> %b, <4 x i64> %a)
  ret <4 x i64> %r
}

define <4 x i64> @test_tailcall_flipped(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_tailcall_flipped:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r8 = $r3
; CHECK-NEXT:    copyd $r9 = $r2
; CHECK-NEXT:    copyd $r10 = $r1
; CHECK-NEXT:    copyd $r11 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r4 = $r11
; CHECK-NEXT:    copyd $r5 = $r10
; CHECK-NEXT:    copyd $r6 = $r9
; CHECK-NEXT:    copyd $r7 = $r8
; CHECK-NEXT:    goto test_callee
; CHECK-NEXT:    ;;
  %r = tail call <4 x i64> @test_callee(<4 x i64> %b, <4 x i64> %a)
  ret <4 x i64> %r
}

define <4 x i64> @test_select(<4 x i64> %a, <4 x i64> %b, i1 zeroext %c) #0 {
; CHECK-LABEL: test_select:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.wnez $r8 ? $r4 = $r0
; CHECK-NEXT:    cmoved.wnez $r8 ? $r5 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.wnez $r8 ? $r6 = $r2
; CHECK-NEXT:    cmoved.wnez $r8 ? $r7 = $r3
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = select i1 %c, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i64> @test_select_cc(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c, <4 x i64> %d) #0 {
; CHECK-LABEL: test_select_cc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld $r15 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r17 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r32 = 24[$r12]
; CHECK-NEXT:    compd.lt $r9 = $r9, $r15
; CHECK-NEXT:    compd.lt $r8 = $r8, $r16
; CHECK-NEXT:    compd.lt $r10 = $r10, $r17
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compd.lt $r11 = $r11, $r32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r15 = $r11
; CHECK-NEXT:    make $r11 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r11 = 0
; CHECK-NEXT:    copyw $r15 = $r10
; CHECK-NEXT:    make $r10 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r10 = 0
; CHECK-NEXT:    copyw $r15 = $r8
; CHECK-NEXT:    make $r8 = -1
; CHECK-NEXT:    cmoved.dnez $r11 ? $r7 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r8 = 0
; CHECK-NEXT:    copyw $r15 = $r9
; CHECK-NEXT:    make $r9 = -1
; CHECK-NEXT:    cmoved.dnez $r10 ? $r6 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r9 = 0
; CHECK-NEXT:    cmoved.dnez $r8 ? $r4 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r9 ? $r5 = $r1
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp slt <4 x i64> %c, %d
  %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i64> @test_select_cc_f32_f32(<4 x i64> %a, <4 x i64> %b, <4 x i64> %c, <4 x i64> %d) #0 {
; CHECK-LABEL: test_select_cc_f32_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld $r15 = 8[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r16 = 0[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r17 = 16[$r12]
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ld $r32 = 24[$r12]
; CHECK-NEXT:    compd.ltu $r9 = $r9, $r15
; CHECK-NEXT:    compd.ltu $r8 = $r8, $r16
; CHECK-NEXT:    compd.ltu $r10 = $r10, $r17
; CHECK-NEXT:    ;;
; CHECK-NEXT:    compd.ltu $r11 = $r11, $r32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r15 = $r11
; CHECK-NEXT:    make $r11 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r11 = 0
; CHECK-NEXT:    copyw $r15 = $r10
; CHECK-NEXT:    make $r10 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r10 = 0
; CHECK-NEXT:    copyw $r15 = $r8
; CHECK-NEXT:    make $r8 = -1
; CHECK-NEXT:    cmoved.dnez $r11 ? $r7 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r8 = 0
; CHECK-NEXT:    copyw $r15 = $r9
; CHECK-NEXT:    make $r9 = -1
; CHECK-NEXT:    cmoved.dnez $r10 ? $r6 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r15 ? $r9 = 0
; CHECK-NEXT:    cmoved.dnez $r8 ? $r4 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.dnez $r9 ? $r5 = $r1
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %cc = icmp ult <4 x i64> %c, %d
  %r = select <4 x i1> %cc, <4 x i64> %a, <4 x i64> %b
  ret <4 x i64> %r
}

define <4 x i1> @test_icmp_ule(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_ule:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.leu $r3 = $r3, $r7
; CHECK-NEXT:    compd.leu $r0 = $r0, $r4
; CHECK-NEXT:    compd.leu $r2 = $r2, $r6
; CHECK-NEXT:    compd.leu $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r4 = $r3
; CHECK-NEXT:    make $r3 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r3 = 0
; CHECK-NEXT:    copyw $r4 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r2 = 0
; CHECK-NEXT:    copyw $r4 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r1 = 0
; CHECK-NEXT:    copyw $r4 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ule <4 x i64> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_slt(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_slt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.lt $r3 = $r3, $r7
; CHECK-NEXT:    compd.lt $r0 = $r0, $r4
; CHECK-NEXT:    compd.lt $r2 = $r2, $r6
; CHECK-NEXT:    compd.lt $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r4 = $r3
; CHECK-NEXT:    make $r3 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r3 = 0
; CHECK-NEXT:    copyw $r4 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r2 = 0
; CHECK-NEXT:    copyw $r4 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r1 = 0
; CHECK-NEXT:    copyw $r4 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp slt <4 x i64> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ugt(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_ugt:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.gtu $r3 = $r3, $r7
; CHECK-NEXT:    compd.gtu $r0 = $r0, $r4
; CHECK-NEXT:    compd.gtu $r2 = $r2, $r6
; CHECK-NEXT:    compd.gtu $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r4 = $r3
; CHECK-NEXT:    make $r3 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r3 = 0
; CHECK-NEXT:    copyw $r4 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r2 = 0
; CHECK-NEXT:    copyw $r4 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r1 = 0
; CHECK-NEXT:    copyw $r4 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ugt <4 x i64> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_uge(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_uge:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.geu $r3 = $r3, $r7
; CHECK-NEXT:    compd.geu $r0 = $r0, $r4
; CHECK-NEXT:    compd.geu $r2 = $r2, $r6
; CHECK-NEXT:    compd.geu $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r4 = $r3
; CHECK-NEXT:    make $r3 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r3 = 0
; CHECK-NEXT:    copyw $r4 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r2 = 0
; CHECK-NEXT:    copyw $r4 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r1 = 0
; CHECK-NEXT:    copyw $r4 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp uge <4 x i64> %a, %b
  ret <4 x i1> %r
}

define <4 x i1> @test_icmp_ult(<4 x i64> %a, <4 x i64> %b) #0 {
; CHECK-LABEL: test_icmp_ult:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.ltu $r3 = $r3, $r7
; CHECK-NEXT:    compd.ltu $r0 = $r0, $r4
; CHECK-NEXT:    compd.ltu $r2 = $r2, $r6
; CHECK-NEXT:    compd.ltu $r1 = $r1, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyw $r4 = $r3
; CHECK-NEXT:    make $r3 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r3 = 0
; CHECK-NEXT:    copyw $r4 = $r2
; CHECK-NEXT:    make $r2 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r2 = 0
; CHECK-NEXT:    copyw $r4 = $r1
; CHECK-NEXT:    make $r1 = -1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r1 = 0
; CHECK-NEXT:    copyw $r4 = $r0
; CHECK-NEXT:    make $r0 = -1
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.weqz $r4 ? $r0 = 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = icmp ult <4 x i64> %a, %b
  ret <4 x i1> %r
}

declare <4 x i64> @llvm.abs.v4i64(<4 x i64>, i1) #0

define <4 x i64> @test_abs(<4 x i64> %a) #0 {
; CHECK-LABEL: test_abs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    absd $r0 = $r0
; CHECK-NEXT:    absd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    absd $r2 = $r2
; CHECK-NEXT:    absd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = call <4 x i64> @llvm.abs.v4i64(<4 x i64> %a, i1 false)
  ret <4 x i64> %r
}

define <4 x i64> @test_insertelement0(<4 x i64> %a, i64 %x) #0 {
; CHECK-LABEL: test_insertelement0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i64> %a, i64 %x, i64 0
  ret <4 x i64> %i
}

define <4 x i64> @test_insertelement1(<4 x i64> %a, i64 %x) #0 {
; CHECK-LABEL: test_insertelement1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r1 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i64> %a, i64 %x, i64 1
  ret <4 x i64> %i
}

define <4 x i64> @test_insertelement2(<4 x i64> %a, i64 %x) #0 {
; CHECK-LABEL: test_insertelement2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r2 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i64> %a, i64 %x, i64 2
  ret <4 x i64> %i
}

define <4 x i64> @test_insertelement3(<4 x i64> %a, i64 %x) #0 {
; CHECK-LABEL: test_insertelement3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i64> %a, i64 %x, i64 3
  ret <4 x i64> %i
}

define <4 x i64> @test_insertelement(<4 x i64> %a, i64 %x, i64 %p) #0 {
; CHECK-LABEL: test_insertelement:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.eq $r6 = $r5, 3
; CHECK-NEXT:    compd.eq $r7 = $r5, 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r6 ? $r3 = $r4
; CHECK-NEXT:    compd.eq $r6 = $r5, 1
; CHECK-NEXT:    compd.eq $r5 = $r5, 0
; CHECK-NEXT:    cmoved.odd $r7 ? $r2 = $r4
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.odd $r6 ? $r1 = $r4
; CHECK-NEXT:    cmoved.odd $r5 ? $r0 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %i = insertelement <4 x i64> %a, i64 %x, i64 %p
  ret <4 x i64> %i
}

define <4 x i8> @trunc_to_v4i8(<4 x i64> %a) {
; CHECK-LABEL: trunc_to_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %r = trunc <4 x i64> %a to <4 x i8>
  ret <4 x i8> %r
}

define <4 x i8> @trunc_to_v4i8_buildvector(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) {
; CHECK-LABEL: trunc_to_v4i8_buildvector:
; CHECK:       # %bb.0:
; CHECK-NEXT:    insf $r2 = $r3, 15, 8
; CHECK-NEXT:    insf $r0 = $r1, 15, 8
; CHECK-NEXT:    ;;
; CHECK-NEXT:    insf $r0 = $r2, 31, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v0 = insertelement <4 x i64> undef, i64 %arg1, i32 0
  %v1 = insertelement <4 x i64> %v0, i64 %arg2, i32 1
  %v2 = insertelement <4 x i64> %v1, i64 %arg3, i32 2
  %v3 = insertelement <4 x i64> %v2, i64 %arg4, i32 3
  %conv = trunc <4 x i64> %v3 to <4 x i8>
  ret <4 x i8> %conv
}

define <4 x i64> @concat(<2 x i64> %a, <2 x i64> %b){
; CHECK-LABEL: concat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v = shufflevector <2 x i64> %a, <2 x i64> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i64> %v
}

define <4 x i64> @revconcat(<2 x i64> %b, <2 x i64> %a){
; CHECK-LABEL: revconcat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    copyd $r4 = $r1
; CHECK-NEXT:    copyd $r5 = $r0
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r2 = $r5
; CHECK-NEXT:    copyd $r3 = $r4
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %v = shufflevector <2 x i64> %a, <2 x i64> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i64> %v
}

define <4 x i64> @MULWDP(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: MULWDP:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulwdp $r6r7 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwdp $r0r1 = $r2, $r0
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = sext <4 x i32> %a to <4 x i64>
  %1 = sext <4 x i32> %b to <4 x i64>
  %mul = mul nsw <4 x i64> %1, %0
  ret <4 x i64> %mul
}

define <4 x i64> @MULSUWDP(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: MULSUWDP:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulsuwdp $r6r7 = $r1, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulsuwdp $r0r1 = $r0, $r2
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = sext <4 x i32> %a to <4 x i64>
  %1 = zext <4 x i32> %b to <4 x i64>
  %mul = mul nsw <4 x i64> %1, %0
  ret <4 x i64> %mul
}

define <4 x i64> @MULUWDP(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: MULUWDP:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    muluwdp $r6r7 = $r3, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwdp $r0r1 = $r2, $r0
; CHECK-NEXT:    copyd $r2 = $r6
; CHECK-NEXT:    copyd $r3 = $r7
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = zext <4 x i32> %a to <4 x i64>
  %1 = zext <4 x i32> %b to <4 x i64>
  %mul = mul nuw <4 x i64> %1, %0
  ret <4 x i64> %mul
}

define <4 x i64> @MADDWDP(<4 x i64> %0, <4 x i32> %1, <4 x i32> %2) {
; CHECK-LABEL: MADDWDP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulwdp $r10r11 = $r7, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulwdp $r4r5 = $r6, $r4
; CHECK-NEXT:    addd $r2 = $r10, $r2
; CHECK-NEXT:    addd $r3 = $r11, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r1 = $r5, $r1
; CHECK-NEXT:    addd $r0 = $r4, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = sext <4 x i32> %1 to <4 x i64>
  %5 = sext <4 x i32> %2 to <4 x i64>
  %6 = mul nsw <4 x i64> %5, %4
  %7 = add <4 x i64> %6, %0
  ret <4 x i64> %7
}

define <4 x i64> @MADDSUWDP(<4 x i64> %0, <4 x i32> %1, <4 x i32> %2) {
; CHECK-LABEL: MADDSUWDP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mulsuwdp $r10r11 = $r5, $r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    mulsuwdp $r4r5 = $r4, $r6
; CHECK-NEXT:    addd $r2 = $r10, $r2
; CHECK-NEXT:    addd $r3 = $r11, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r1 = $r5, $r1
; CHECK-NEXT:    addd $r0 = $r4, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = sext <4 x i32> %1 to <4 x i64>
  %5 = zext <4 x i32> %2 to <4 x i64>
  %6 = mul nsw <4 x i64> %5, %4
  %7 = add <4 x i64> %6, %0
  ret <4 x i64> %7
}

define <4 x i64> @MADDUWDP(<4 x i64> %0, <4 x i32> %1, <4 x i32> %2) {
; CHECK-LABEL: MADDUWDP:
; CHECK:       # %bb.0:
; CHECK-NEXT:    muluwdp $r10r11 = $r7, $r5
; CHECK-NEXT:    ;;
; CHECK-NEXT:    muluwdp $r4r5 = $r6, $r4
; CHECK-NEXT:    addd $r2 = $r10, $r2
; CHECK-NEXT:    addd $r3 = $r11, $r3
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addd $r1 = $r5, $r1
; CHECK-NEXT:    addd $r0 = $r4, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = zext <4 x i32> %1 to <4 x i64>
  %5 = zext <4 x i32> %2 to <4 x i64>
  %6 = mul nuw <4 x i64> %5, %4
  %7 = add <4 x i64> %6, %0
  ret <4 x i64> %7
}

attributes #0 = { nounwind }
