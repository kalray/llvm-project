; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --frame-pointer=none -o - %s | FileCheck -check-prefix=FP-NONE %s
; RUN: llc --frame-pointer=all -o - %s | FileCheck -check-prefix=FP-ALL %s

target triple = "kvx-kalray-cos"

; int fn1(int a, int b, int c, int d, int e,
;         int f, int g, int h, int i, int j,
;         int k, int l, int m, int n, int o) {
;   fn3(a, c);
;   return a + b + c + d + e +
;          f + g + h + i + j +
;          k + l + m + n + o;
; }

define i32 @fn1(i32 %a, i32 %b, i32 %c, i32 %d, i32 %e, i32 %f, i32 %g, i32 %h, i32 %i, i32 %j, i32 %k, i32 %l, i32 %m, i32 %n, i32 %o) {
; FP-NONE-LABEL: fn1:
; FP-NONE:       # %bb.0: # %entry
; FP-NONE-NEXT:    addd $r12 = $r12, -128
; FP-NONE-NEXT:    get $r16 = $ra
; FP-NONE-NEXT:    ;; # (end cycle 0)
; FP-NONE-NEXT:    sd 120[$r12] = $r16
; FP-NONE-NEXT:    ;; # (end cycle 1)
; FP-NONE-NEXT:    so 88[$r12] = $r28r29r30r31
; FP-NONE-NEXT:    ;; # (end cycle 2)
; FP-NONE-NEXT:    so 56[$r12] = $r24r25r26r27
; FP-NONE-NEXT:    ;; # (end cycle 3)
; FP-NONE-NEXT:    so 24[$r12] = $r20r21r22r23
; FP-NONE-NEXT:    ;; # (end cycle 4)
; FP-NONE-NEXT:    sq 8[$r12] = $r18r19
; FP-NONE-NEXT:    ;; # (end cycle 5)
; FP-NONE-NEXT:    sd 0[$r12] = $r11
; FP-NONE-NEXT:    copyd $r19 = $r10
; FP-NONE-NEXT:    copyd $r20 = $r9
; FP-NONE-NEXT:    copyd $r21 = $r8
; FP-NONE-NEXT:    ;; # (end cycle 6)
; FP-NONE-NEXT:    copyd $r22 = $r7
; FP-NONE-NEXT:    copyd $r23 = $r6
; FP-NONE-NEXT:    copyd $r24 = $r5
; FP-NONE-NEXT:    copyd $r25 = $r4
; FP-NONE-NEXT:    ;; # (end cycle 7)
; FP-NONE-NEXT:    copyd $r26 = $r3
; FP-NONE-NEXT:    copyd $r27 = $r2
; FP-NONE-NEXT:    copyd $r28 = $r1
; FP-NONE-NEXT:    copyd $r29 = $r0
; FP-NONE-NEXT:    ;; # (end cycle 8)
; FP-NONE-NEXT:    lwz $r30 = 144[$r12]
; FP-NONE-NEXT:    ;; # (end cycle 9)
; FP-NONE-NEXT:    lwz $r31 = 136[$r12]
; FP-NONE-NEXT:    ;; # (end cycle 10)
; FP-NONE-NEXT:    copyd $r1 = $r27
; FP-NONE-NEXT:    lwz $r18 = 128[$r12]
; FP-NONE-NEXT:    call fn3
; FP-NONE-NEXT:    ;; # (end cycle 11)
; FP-NONE-NEXT:    addw $r0 = $r28, $r29
; FP-NONE-NEXT:    ld $r1 = 0[$r12]
; FP-NONE-NEXT:    ;; # (end cycle 0)
; FP-NONE-NEXT:    addw $r0 = $r0, $r27
; FP-NONE-NEXT:    ;; # (end cycle 1)
; FP-NONE-NEXT:    addw $r0 = $r0, $r26
; FP-NONE-NEXT:    ;; # (end cycle 2)
; FP-NONE-NEXT:    addw $r0 = $r0, $r25
; FP-NONE-NEXT:    ;; # (end cycle 3)
; FP-NONE-NEXT:    addw $r0 = $r0, $r24
; FP-NONE-NEXT:    ;; # (end cycle 4)
; FP-NONE-NEXT:    addw $r0 = $r0, $r23
; FP-NONE-NEXT:    ;; # (end cycle 5)
; FP-NONE-NEXT:    addw $r0 = $r0, $r22
; FP-NONE-NEXT:    ;; # (end cycle 6)
; FP-NONE-NEXT:    addw $r0 = $r0, $r21
; FP-NONE-NEXT:    ;; # (end cycle 7)
; FP-NONE-NEXT:    addw $r0 = $r0, $r20
; FP-NONE-NEXT:    ;; # (end cycle 8)
; FP-NONE-NEXT:    addw $r0 = $r0, $r19
; FP-NONE-NEXT:    ;; # (end cycle 9)
; FP-NONE-NEXT:    addw $r0 = $r0, $r1
; FP-NONE-NEXT:    ;; # (end cycle 10)
; FP-NONE-NEXT:    lq $r18r19 = 8[$r12]
; FP-NONE-NEXT:    addw $r0 = $r0, $r18
; FP-NONE-NEXT:    ;; # (end cycle 11)
; FP-NONE-NEXT:    lo $r20r21r22r23 = 24[$r12]
; FP-NONE-NEXT:    addw $r0 = $r0, $r31
; FP-NONE-NEXT:    ;; # (end cycle 12)
; FP-NONE-NEXT:    lo $r24r25r26r27 = 56[$r12]
; FP-NONE-NEXT:    addw $r0 = $r0, $r30
; FP-NONE-NEXT:    ;; # (end cycle 13)
; FP-NONE-NEXT:    lo $r28r29r30r31 = 88[$r12]
; FP-NONE-NEXT:    ;; # (end cycle 14)
; FP-NONE-NEXT:    ld $r16 = 120[$r12]
; FP-NONE-NEXT:    ;; # (end cycle 15)
; FP-NONE-NEXT:    set $ra = $r16
; FP-NONE-NEXT:    addd $r12 = $r12, 128
; FP-NONE-NEXT:    ;; # (end cycle 20)
; FP-NONE-NEXT:    ret
; FP-NONE-NEXT:    ;;
;
; FP-ALL-LABEL: fn1:
; FP-ALL:       # %bb.0: # %entry
; FP-ALL-NEXT:    addd $r12 = $r12, -160
; FP-ALL-NEXT:    get $r16 = $ra
; FP-ALL-NEXT:    ;; # (end cycle 0)
; FP-ALL-NEXT:    sd 152[$r12] = $r16
; FP-ALL-NEXT:    ;; # (end cycle 1)
; FP-ALL-NEXT:    sd 144[$r12] = $r14
; FP-ALL-NEXT:    addd $r14 = $r12, 144
; FP-ALL-NEXT:    ;; # (end cycle 2)
; FP-ALL-NEXT:    so 112[$r12] = $r28r29r30r31
; FP-ALL-NEXT:    ;; # (end cycle 3)
; FP-ALL-NEXT:    so 80[$r12] = $r24r25r26r27
; FP-ALL-NEXT:    ;; # (end cycle 4)
; FP-ALL-NEXT:    so 48[$r12] = $r20r21r22r23
; FP-ALL-NEXT:    ;; # (end cycle 5)
; FP-ALL-NEXT:    sq 32[$r12] = $r18r19
; FP-ALL-NEXT:    ;; # (end cycle 6)
; FP-ALL-NEXT:    sd -120[$r14] = $r11
; FP-ALL-NEXT:    copyd $r19 = $r10
; FP-ALL-NEXT:    copyd $r20 = $r9
; FP-ALL-NEXT:    copyd $r21 = $r8
; FP-ALL-NEXT:    ;; # (end cycle 7)
; FP-ALL-NEXT:    copyd $r22 = $r7
; FP-ALL-NEXT:    copyd $r23 = $r6
; FP-ALL-NEXT:    copyd $r24 = $r5
; FP-ALL-NEXT:    copyd $r25 = $r4
; FP-ALL-NEXT:    ;; # (end cycle 8)
; FP-ALL-NEXT:    copyd $r26 = $r3
; FP-ALL-NEXT:    copyd $r27 = $r2
; FP-ALL-NEXT:    copyd $r28 = $r1
; FP-ALL-NEXT:    copyd $r29 = $r0
; FP-ALL-NEXT:    ;; # (end cycle 9)
; FP-ALL-NEXT:    lwz $r30 = 32[$r14]
; FP-ALL-NEXT:    ;; # (end cycle 10)
; FP-ALL-NEXT:    lwz $r31 = 24[$r14]
; FP-ALL-NEXT:    ;; # (end cycle 11)
; FP-ALL-NEXT:    copyd $r1 = $r27
; FP-ALL-NEXT:    lwz $r18 = 16[$r14]
; FP-ALL-NEXT:    call fn3
; FP-ALL-NEXT:    ;; # (end cycle 12)
; FP-ALL-NEXT:    addw $r0 = $r28, $r29
; FP-ALL-NEXT:    ld $r1 = -120[$r14]
; FP-ALL-NEXT:    ;; # (end cycle 0)
; FP-ALL-NEXT:    addw $r0 = $r0, $r27
; FP-ALL-NEXT:    ;; # (end cycle 1)
; FP-ALL-NEXT:    addw $r0 = $r0, $r26
; FP-ALL-NEXT:    ;; # (end cycle 2)
; FP-ALL-NEXT:    addw $r0 = $r0, $r25
; FP-ALL-NEXT:    ;; # (end cycle 3)
; FP-ALL-NEXT:    addw $r0 = $r0, $r24
; FP-ALL-NEXT:    ;; # (end cycle 4)
; FP-ALL-NEXT:    addw $r0 = $r0, $r23
; FP-ALL-NEXT:    ;; # (end cycle 5)
; FP-ALL-NEXT:    addw $r0 = $r0, $r22
; FP-ALL-NEXT:    ;; # (end cycle 6)
; FP-ALL-NEXT:    addw $r0 = $r0, $r21
; FP-ALL-NEXT:    ;; # (end cycle 7)
; FP-ALL-NEXT:    addw $r0 = $r0, $r20
; FP-ALL-NEXT:    ;; # (end cycle 8)
; FP-ALL-NEXT:    addw $r0 = $r0, $r19
; FP-ALL-NEXT:    ;; # (end cycle 9)
; FP-ALL-NEXT:    addw $r0 = $r0, $r1
; FP-ALL-NEXT:    ;; # (end cycle 10)
; FP-ALL-NEXT:    addw $r0 = $r0, $r18
; FP-ALL-NEXT:    ;; # (end cycle 11)
; FP-ALL-NEXT:    addw $r0 = $r0, $r31
; FP-ALL-NEXT:    ;; # (end cycle 12)
; FP-ALL-NEXT:    addw $r0 = $r0, $r30
; FP-ALL-NEXT:    addd $r12 = $r14, -144
; FP-ALL-NEXT:    ;; # (end cycle 13)
; FP-ALL-NEXT:    lq $r18r19 = 32[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 0)
; FP-ALL-NEXT:    lo $r20r21r22r23 = 48[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 1)
; FP-ALL-NEXT:    lo $r24r25r26r27 = 80[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 2)
; FP-ALL-NEXT:    lo $r28r29r30r31 = 112[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 3)
; FP-ALL-NEXT:    ld $r14 = 144[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 4)
; FP-ALL-NEXT:    ld $r16 = 152[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 5)
; FP-ALL-NEXT:    set $ra = $r16
; FP-ALL-NEXT:    addd $r12 = $r12, 160
; FP-ALL-NEXT:    ;; # (end cycle 10)
; FP-ALL-NEXT:    ret
; FP-ALL-NEXT:    ;;
entry:
  %call = tail call i32 bitcast (i32 (...)* @fn3 to i32 (i32, i32)*)(i32 %a, i32 %c)
  %add = add nsw i32 %b, %a
  %add1 = add nsw i32 %add, %c
  %add2 = add nsw i32 %add1, %d
  %add3 = add nsw i32 %add2, %e
  %add4 = add nsw i32 %add3, %f
  %add5 = add nsw i32 %add4, %g
  %add6 = add nsw i32 %add5, %h
  %add7 = add nsw i32 %add6, %i
  %add8 = add nsw i32 %add7, %j
  %add9 = add nsw i32 %add8, %k
  %add10 = add nsw i32 %add9, %l
  %add11 = add nsw i32 %add10, %m
  %add12 = add nsw i32 %add11, %n
  %add13 = add nsw i32 %add12, %o
  ret i32 %add13
}

declare dso_local i32 @fn3(...)
