# RUN: llc -mtriple kvx-kalray-cos -run-pass=prologepilog -o - %s | FileCheck %s
--- |
  ; ModuleID = '<stdin>'
  source_filename = "<stdin>"
  target datalayout = "e-S256-p:64:64-i1:8-i8:8-i16:16-i32:32-i64:64-v64:64-v128:128-v256:256-v512:256-v1024:256-f16:16-f32:32-f64:64-a:0:64-m:e-n32:64"
  target triple = "kvx-kalray-cos"
  
  @v = external dso_local local_unnamed_addr global ptr, align 8
  
  define i32 @e(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, ptr nocapture readnone %12) {
    %14 = alloca i32, align 64
    store volatile i32 0, ptr %14, align 64
    %15 = load ptr, ptr @v, align 8
    %16 = icmp ne ptr %15, %12
    %17 = zext i1 %16 to i32
    ret i32 %17
  }
  
  declare void @_Unwind_SjLj_Register({ ptr, i64, [4 x i64], ptr, ptr, [5 x ptr ] }*)
  
  declare void @_Unwind_SjLj_Unregister({ ptr, i64, [4 x i64], ptr, ptr, [5 x ptr ] }*)
  
  ; Function Attrs: nofree nosync nounwind readnone willreturn
  declare ptr @llvm.frameaddress.p0i8(i32 immarg) #0
  
  ; Function Attrs: nofree nosync nounwind willreturn
  declare ptr @llvm.stacksave() #1
  
  ; Function Attrs: nofree nosync nounwind willreturn
  declare void @llvm.stackrestore(ptr ) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.eh.sjlj.setup.dispatch() #2
  
  ; Function Attrs: nounwind readnone
  declare ptr @llvm.eh.sjlj.lsda() #3
  
  ; Function Attrs: nounwind readnone
  declare void @llvm.eh.sjlj.callsite(i32) #3
  
  ; Function Attrs: nounwind
  declare void @llvm.eh.sjlj.functioncontext(ptr ) #2
  
  attributes #0 = { nofree nosync nounwind readnone willreturn }
  attributes #1 = { nofree nosync nounwind willreturn }
  attributes #2 = { nounwind }
  attributes #3 = { nounwind readnone }

...
---
name:            e
alignment:       64
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    64
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 0, size: 8, alignment: 32, stack-id: default, 
      isImmutable: false, isAliased: false, callee-saved-register: '', 
      callee-saved-restored: true, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 64, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: e
  ; CHECK: $r0 = LDp 128, $r12, 0
  ; CHECK-NOT: $r0 =
  ; CHECK: $r1 = MAKEi64 @v
  ; CHECK-NOT: $r1 =
  ; CHECK-NOT: $r0 =
  ; CHECK: $r1 = LDri10 0, killed $r1, 0 :: (dereferenceable load {{.*}} from @v)
  ; CHECK-NOT: $r1 =
  ; CHECK-NOT: $r0 =
  ; CHECK: $r0 = COMPDrr killed $r1, killed $r0, 0
  bb.0 (%ir-block.13):
    $r0 = LDp 0, %fixed-stack.0, 0 :: (load 8 from %fixed-stack.0, align 32)
    $r1 = MAKEi16 0
    SWp 0, %stack.0, killed $r1 :: (volatile store 4 into %ir.14, align 64)
    $r1 = MAKEi64 @v
    $r1 = LDri10 0, killed $r1, 0 :: (dereferenceable load 8 from @v)
    $r0 = COMPDrr killed $r1, killed $r0, 0
    RET implicit $ra, implicit $r0
...

