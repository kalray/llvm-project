; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --frame-pointer=none -o - %s | FileCheck -check-prefix=FP-NONE %s
; RUN: llc --frame-pointer=all -o - %s | FileCheck -check-prefix=FP-ALL %s

target triple = "kvx-kalray-cos"

; int g(int*, int*);
;
; int f(int sz) {
;   int *a = __builtin_alloca_with_align(sz, 1024);
;   int *b = __builtin_alloca_with_align(8, 256);
;   g(a, b);
;   return *a;
; }

define i32 @f(i32 %sz) {
; FP-NONE-LABEL: f:
; FP-NONE:       # %bb.0: # %entry
; FP-NONE-NEXT:    sxwd $r0 = $r0
; FP-NONE-NEXT:    addd $r12 = $r12, -256
; FP-NONE-NEXT:    get $r16 = $ra
; FP-NONE-NEXT:    ;; # (end cycle 0)
; FP-NONE-NEXT:    sd 248[$r12] = $r16
; FP-NONE-NEXT:    addd $r0 = $r0, 31
; FP-NONE-NEXT:    ;; # (end cycle 1)
; FP-NONE-NEXT:    sd 240[$r12] = $r14
; FP-NONE-NEXT:    andd $r0 = $r0, -32
; FP-NONE-NEXT:    addd $r14 = $r12, 240
; FP-NONE-NEXT:    ;; # (end cycle 2)
; FP-NONE-NEXT:    sd 232[$r12] = $r18
; FP-NONE-NEXT:    sbfd $r0 = $r0, $r12
; FP-NONE-NEXT:    ;; # (end cycle 3)
; FP-NONE-NEXT:    andd $r18 = $r0, -128
; FP-NONE-NEXT:    ;; # (end cycle 4)
; FP-NONE-NEXT:    copyd $r12 = $r18
; FP-NONE-NEXT:    ;;
; FP-NONE-NEXT:    copyd $r0 = $r18
; FP-NONE-NEXT:    addd $r1 = $r14, -144
; FP-NONE-NEXT:    call g
; FP-NONE-NEXT:    ;; # (end cycle 0)
; FP-NONE-NEXT:    lwz $r0 = 0[$r18]
; FP-NONE-NEXT:    addd $r12 = $r14, -240
; FP-NONE-NEXT:    ;; # (end cycle 0)
; FP-NONE-NEXT:    ld $r18 = 232[$r12]
; FP-NONE-NEXT:    ;; # (end cycle 0)
; FP-NONE-NEXT:    ld $r14 = 240[$r12]
; FP-NONE-NEXT:    ;; # (end cycle 1)
; FP-NONE-NEXT:    ld $r16 = 248[$r12]
; FP-NONE-NEXT:    ;; # (end cycle 2)
; FP-NONE-NEXT:    set $ra = $r16
; FP-NONE-NEXT:    addd $r12 = $r12, 256
; FP-NONE-NEXT:    ;; # (end cycle 7)
; FP-NONE-NEXT:    ret
; FP-NONE-NEXT:    ;;
;
; FP-ALL-LABEL: f:
; FP-ALL:       # %bb.0: # %entry
; FP-ALL-NEXT:    sxwd $r0 = $r0
; FP-ALL-NEXT:    addd $r12 = $r12, -256
; FP-ALL-NEXT:    get $r16 = $ra
; FP-ALL-NEXT:    ;; # (end cycle 0)
; FP-ALL-NEXT:    sd 248[$r12] = $r16
; FP-ALL-NEXT:    addd $r0 = $r0, 31
; FP-ALL-NEXT:    ;; # (end cycle 1)
; FP-ALL-NEXT:    sd 240[$r12] = $r14
; FP-ALL-NEXT:    andd $r0 = $r0, -32
; FP-ALL-NEXT:    addd $r14 = $r12, 240
; FP-ALL-NEXT:    ;; # (end cycle 2)
; FP-ALL-NEXT:    sd 232[$r12] = $r18
; FP-ALL-NEXT:    sbfd $r0 = $r0, $r12
; FP-ALL-NEXT:    ;; # (end cycle 3)
; FP-ALL-NEXT:    andd $r18 = $r0, -128
; FP-ALL-NEXT:    ;; # (end cycle 4)
; FP-ALL-NEXT:    copyd $r12 = $r18
; FP-ALL-NEXT:    ;;
; FP-ALL-NEXT:    copyd $r0 = $r18
; FP-ALL-NEXT:    addd $r1 = $r14, -144
; FP-ALL-NEXT:    call g
; FP-ALL-NEXT:    ;; # (end cycle 0)
; FP-ALL-NEXT:    lwz $r0 = 0[$r18]
; FP-ALL-NEXT:    addd $r12 = $r14, -240
; FP-ALL-NEXT:    ;; # (end cycle 0)
; FP-ALL-NEXT:    ld $r18 = 232[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 0)
; FP-ALL-NEXT:    ld $r14 = 240[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 1)
; FP-ALL-NEXT:    ld $r16 = 248[$r12]
; FP-ALL-NEXT:    ;; # (end cycle 2)
; FP-ALL-NEXT:    set $ra = $r16
; FP-ALL-NEXT:    addd $r12 = $r12, 256
; FP-ALL-NEXT:    ;; # (end cycle 7)
; FP-ALL-NEXT:    ret
; FP-ALL-NEXT:    ;;
entry:
  %conv = sext i32 %sz to i64
  %0 = alloca i8, i64 %conv, align 128
  %1 = alloca [2 x i32], align 32
  %call = call i32 @g(ptr nonnull %0, ptr nonnull %1)
  %2 = load i32, ptr %0, align 128
  ret i32 %2
}

declare i32 @g(ptr, ptr) local_unnamed_addr
