; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define void @await(){
; CHECK-LABEL: await:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    await
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  tail call void @llvm.kvx.await()
  ret void
}

declare void @llvm.kvx.await() #1

define void @barrier(){
; CHECK-LABEL: barrier:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    barrier
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  tail call void @llvm.kvx.barrier()
  ret void
}

declare void @llvm.kvx.barrier() #1

define i32 @get(){
; CHECK-LABEL: get:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    get $r0 = $ps
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.get(i32 1)
  %conv = trunc i64 %0 to i32
  ret i32 %conv
}

declare i64 @llvm.kvx.get(i32) #3

define void @wfxl(){
; CHECK-LABEL: wfxl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #APP
; CHECK-NEXT:    wfxl $pm0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  tail call void asm sideeffect "wfxl $$pm0, $0", "r,~{$pm0}"(i64 2)
  ret void
}

declare void @llvm.kvx.wfxl(i32, i64) #1

define void @wfxm(){
; CHECK-LABEL: wfxm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #APP
; CHECK-NEXT:    wfxl $pm0, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  tail call void asm sideeffect "wfxl $$pm0, $0", "r,~{$pm0}"(i64 2)
  ret void
}

declare void @llvm.kvx.wfxm(i32, i64) #1

define void @set(){
; CHECK-LABEL: set:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r0 = 2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #APP
; CHECK-NEXT:    set $ps = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  tail call void asm sideeffect "set $$ps = $0", "r,~{$ps}"(i64 2)
  ret void
}

declare void @llvm.kvx.set(i32, i64) #1

define void @sleep(){
; CHECK-LABEL: sleep:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sleep
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  tail call void @llvm.kvx.sleep()
  ret void
}

declare void @llvm.kvx.sleep() #1

define void @stop(){
; CHECK-LABEL: stop:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    stop
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  tail call void @llvm.kvx.stop()
  ret void
}

declare void @llvm.kvx.stop() #1

define void @syncgroup(i64 %sg){
; CHECK-LABEL: syncgroup:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    syncgroup $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  tail call void @llvm.kvx.syncgroup(i64 %sg)
  ret void
}

declare void @llvm.kvx.syncgroup(i64) #1

define void @waitit(i64 %sg){
; CHECK-LABEL: waitit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    waitit $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.waitit(i64 %sg)
  ret void
}

declare i32 @llvm.kvx.waitit(i64) #1

