; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV1
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV2
; RUN: clang -march=kv3-1 -O2 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <8 x i16> @widenbho(<8 x i8> %0) {
; CHECK-LABEL: widenbho:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxmbhq $r1 = $r0
; CHECK-NEXT:    sxlbhq $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <8 x i8> %0, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %2, i32 0)
  %4 = shufflevector <8 x i8> %0, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %4, i32 0)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

declare <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8>, i32)

define <8 x i16> @widenbho_z(<8 x i8> %0) {
; CV1-LABEL: widenbho_z:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r1 = $r0, 0x80004000200010
; CV1-NEXT:    sbmm8 $r2 = $r0, 0x8000400020001
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenbho_z:
; CV2:       # %bb.0:
; CV2-NEXT:    zxmbhq $r1 = $r0
; CV2-NEXT:    zxlbhq $r2 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r2
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <8 x i8> %0, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %2, i32 1)
  %4 = shufflevector <8 x i8> %0, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %4, i32 1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <8 x i16> @widenbho_q(<8 x i8> %0) {
; CHECK-LABEL: widenbho_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r1 = $r0, 0x8000400020001000
; CHECK-NEXT:    sbmm8 $r2 = $r0, 0x800040002000100
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <8 x i8> %0, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %2, i32 2)
  %4 = shufflevector <8 x i8> %0, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %4, i32 2)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <2 x i16> @widenbhp(<2 x i8> %0) {
; CHECK-LABEL: widenbhp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i16> @llvm.kvx.widenint.v2i16(<2 x i8> %0, i32 0)
  ret <2 x i16> %2
}

declare <2 x i16> @llvm.kvx.widenint.v2i16(<2 x i8>, i32)

define <2 x i16> @widenbhp_z(<2 x i8> %0) {
; CHECK-LABEL: widenbhp_z:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x20001
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i16> @llvm.kvx.widenint.v2i16(<2 x i8> %0, i32 1)
  ret <2 x i16> %2
}

define <2 x i16> @widenbhp_q(<2 x i8> %0) {
; CHECK-LABEL: widenbhp_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x2000100
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i16> @llvm.kvx.widenint.v2i16(<2 x i8> %0, i32 2)
  ret <2 x i16> %2
}

define <4 x i16> @widenbhq(<4 x i8> %0) {
; CHECK-LABEL: widenbhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlbhq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %0, i32 0)
  ret <4 x i16> %2
}

define <4 x i16> @widenbhq_z(<4 x i8> %0) {
; CV1-LABEL: widenbhq_z:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x8000400020001
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenbhq_z:
; CV2:       # %bb.0:
; CV2-NEXT:    zxlbhq $r0 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %0, i32 1)
  ret <4 x i16> %2
}

define <4 x i16> @widenbhq_q(<4 x i8> %0) {
; CHECK-LABEL: widenbhq_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x800040002000100
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %0, i32 2)
  ret <4 x i16> %2
}

define void @widenbhv(<32 x i16>* noalias nocapture sret(<32 x i16>) align 32 %0, <32 x i8> %1) {
; CV1-LABEL: widenbhv:
; CV1:       # %bb.0:
; CV1-NEXT:    sxlbhq $r4 = $r2
; CV1-NEXT:    sxmbhq $r5 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlbhq $r8 = $r0
; CV1-NEXT:    sxmbhq $r9 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlbhq $r6 = $r3
; CV1-NEXT:    sxlbhq $r10 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sxmbhq $r7 = $r3
; CV1-NEXT:    sxmbhq $r11 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    so 32[$r15] = $r4r5r6r7
; CV1-NEXT:    ;;
; CV1-NEXT:    so 0[$r15] = $r8r9r10r11
; CV1-NEXT:    copyd $r0 = $r15
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenbhv:
; CV2:       # %bb.0:
; CV2-NEXT:    sxlbhq $r4 = $r2
; CV2-NEXT:    sxmbhq $r5 = $r2
; CV2-NEXT:    sxlbhq $r8 = $r0
; CV2-NEXT:    sxmbhq $r9 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    sxlbhq $r6 = $r3
; CV2-NEXT:    sxmbhq $r7 = $r3
; CV2-NEXT:    sxlbhq $r10 = $r1
; CV2-NEXT:    sxmbhq $r11 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    so 32[$r15] = $r4r5r6r7
; CV2-NEXT:    ;;
; CV2-NEXT:    so 0[$r15] = $r8r9r10r11
; CV2-NEXT:    copyd $r0 = $r15
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %3, i32 0)
  %5 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %5, i32 0)
  %7 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %7, i32 0)
  %9 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %9, i32 0)
  %11 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %11, i32 0)
  %13 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %14 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %13, i32 0)
  %15 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %16 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %15, i32 0)
  %17 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %18 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %17, i32 0)
  %19 = shufflevector <4 x i16> %4, <4 x i16> %6, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20 = shufflevector <4 x i16> %8, <4 x i16> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = shufflevector <4 x i16> %12, <4 x i16> %14, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <4 x i16> %16, <4 x i16> %18, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = shufflevector <8 x i16> %19, <8 x i16> %20, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24 = shufflevector <8 x i16> %21, <8 x i16> %22, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25 = shufflevector <16 x i16> %23, <16 x i16> %24, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  store <32 x i16> %25, <32 x i16>* %0
  ret void
}

define void @widenbhv_z(<32 x i16>* noalias nocapture sret(<32 x i16>) align 32 %0, <32 x i8> %1) {
; CV1-LABEL: widenbhv_z:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r4 = $r2, 0x8000400020001
; CV1-NEXT:    sbmm8 $r5 = $r2, 0x80004000200010
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r8 = $r0, 0x8000400020001
; CV1-NEXT:    sbmm8 $r9 = $r0, 0x80004000200010
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r6 = $r3, 0x8000400020001
; CV1-NEXT:    sbmm8 $r10 = $r1, 0x8000400020001
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r7 = $r3, 0x80004000200010
; CV1-NEXT:    sbmm8 $r11 = $r1, 0x80004000200010
; CV1-NEXT:    ;;
; CV1-NEXT:    so 32[$r15] = $r4r5r6r7
; CV1-NEXT:    ;;
; CV1-NEXT:    so 0[$r15] = $r8r9r10r11
; CV1-NEXT:    copyd $r0 = $r15
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenbhv_z:
; CV2:       # %bb.0:
; CV2-NEXT:    zxlbhq $r4 = $r2
; CV2-NEXT:    zxmbhq $r5 = $r2
; CV2-NEXT:    zxlbhq $r8 = $r0
; CV2-NEXT:    zxmbhq $r9 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    zxlbhq $r6 = $r3
; CV2-NEXT:    zxmbhq $r7 = $r3
; CV2-NEXT:    zxlbhq $r10 = $r1
; CV2-NEXT:    zxmbhq $r11 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    so 32[$r15] = $r4r5r6r7
; CV2-NEXT:    ;;
; CV2-NEXT:    so 0[$r15] = $r8r9r10r11
; CV2-NEXT:    copyd $r0 = $r15
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %3, i32 1)
  %5 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %5, i32 1)
  %7 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %7, i32 1)
  %9 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %9, i32 1)
  %11 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %11, i32 1)
  %13 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %14 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %13, i32 1)
  %15 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %16 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %15, i32 1)
  %17 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %18 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %17, i32 1)
  %19 = shufflevector <4 x i16> %4, <4 x i16> %6, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20 = shufflevector <4 x i16> %8, <4 x i16> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = shufflevector <4 x i16> %12, <4 x i16> %14, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <4 x i16> %16, <4 x i16> %18, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = shufflevector <8 x i16> %19, <8 x i16> %20, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24 = shufflevector <8 x i16> %21, <8 x i16> %22, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25 = shufflevector <16 x i16> %23, <16 x i16> %24, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  store <32 x i16> %25, <32 x i16>* %0
  ret void
}

define void @widenbhv_q(<32 x i16>* noalias nocapture sret(<32 x i16>) align 32 %0, <32 x i8> %1) {
; CHECK-LABEL: widenbhv_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r4 = $r2, 0x800040002000100
; CHECK-NEXT:    sbmm8 $r5 = $r2, 0x8000400020001000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r8 = $r0, 0x800040002000100
; CHECK-NEXT:    sbmm8 $r9 = $r0, 0x8000400020001000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r6 = $r3, 0x800040002000100
; CHECK-NEXT:    sbmm8 $r10 = $r1, 0x800040002000100
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r7 = $r3, 0x8000400020001000
; CHECK-NEXT:    sbmm8 $r11 = $r1, 0x8000400020001000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 32[$r15] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 0[$r15] = $r8r9r10r11
; CHECK-NEXT:    copyd $r0 = $r15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %3, i32 2)
  %5 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %6 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %5, i32 2)
  %7 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %7, i32 2)
  %9 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %10 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %9, i32 2)
  %11 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %12 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %11, i32 2)
  %13 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %14 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %13, i32 2)
  %15 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %16 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %15, i32 2)
  %17 = shufflevector <32 x i8> %1, <32 x i8> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %18 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %17, i32 2)
  %19 = shufflevector <4 x i16> %4, <4 x i16> %6, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20 = shufflevector <4 x i16> %8, <4 x i16> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = shufflevector <4 x i16> %12, <4 x i16> %14, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <4 x i16> %16, <4 x i16> %18, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = shufflevector <8 x i16> %19, <8 x i16> %20, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24 = shufflevector <8 x i16> %21, <8 x i16> %22, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25 = shufflevector <16 x i16> %23, <16 x i16> %24, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  store <32 x i16> %25, <32 x i16>* %0
  ret void
}

define <16 x i16> @widenbhx(<16 x i8> %0) {
; CV1-LABEL: widenbhx:
; CV1:       # %bb.0:
; CV1-NEXT:    sxlbhq $r4 = $r0
; CV1-NEXT:    sxmbhq $r5 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    sxlbhq $r2 = $r1
; CV1-NEXT:    sxmbhq $r3 = $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenbhx:
; CV2:       # %bb.0:
; CV2-NEXT:    sxlbhq $r2 = $r1
; CV2-NEXT:    sxmbhq $r3 = $r1
; CV2-NEXT:    sxlbhq $r4 = $r0
; CV2-NEXT:    sxmbhq $r5 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %2, i32 0)
  %4 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %4, i32 0)
  %6 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %6, i32 0)
  %8 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %8, i32 0)
  %10 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11 = shufflevector <4 x i16> %7, <4 x i16> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x i16> %12
}

define <16 x i16> @widenbhx_z(<16 x i8> %0) {
; CV1-LABEL: widenbhx_z:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r4 = $r0, 0x8000400020001
; CV1-NEXT:    sbmm8 $r5 = $r0, 0x80004000200010
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    sbmm8 $r2 = $r1, 0x8000400020001
; CV1-NEXT:    sbmm8 $r3 = $r1, 0x80004000200010
; CV1-NEXT:    ;;
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenbhx_z:
; CV2:       # %bb.0:
; CV2-NEXT:    zxlbhq $r2 = $r1
; CV2-NEXT:    zxmbhq $r3 = $r1
; CV2-NEXT:    zxlbhq $r4 = $r0
; CV2-NEXT:    zxmbhq $r5 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %2, i32 1)
  %4 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %4, i32 1)
  %6 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %6, i32 1)
  %8 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %8, i32 1)
  %10 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11 = shufflevector <4 x i16> %7, <4 x i16> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x i16> %12
}

define <16 x i16> @widenbhx_q(<16 x i8> %0) {
; CHECK-LABEL: widenbhx_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r4 = $r0, 0x800040002000100
; CHECK-NEXT:    sbmm8 $r5 = $r0, 0x8000400020001000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    sbmm8 $r2 = $r1, 0x800040002000100
; CHECK-NEXT:    sbmm8 $r3 = $r1, 0x8000400020001000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %2, i32 2)
  %4 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %4, i32 2)
  %6 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %6, i32 2)
  %8 = shufflevector <16 x i8> %0, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9 = tail call <4 x i16> @llvm.kvx.widenint.v4i16(<4 x i8> %8, i32 2)
  %10 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11 = shufflevector <4 x i16> %7, <4 x i16> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x i16> %12
}

define <8 x i32> @widenhwo(<8 x i16> %0) {
; CV1-LABEL: widenhwo:
; CV1:       # %bb.0:
; CV1-NEXT:    sxlhwp $r4 = $r0
; CV1-NEXT:    sxmhwp $r5 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    sxlhwp $r2 = $r1
; CV1-NEXT:    sxmhwp $r3 = $r1
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenhwo:
; CV2:       # %bb.0:
; CV2-NEXT:    sxlhwp $r2 = $r1
; CV2-NEXT:    sxmhwp $r3 = $r1
; CV2-NEXT:    sxlhwp $r4 = $r0
; CV2-NEXT:    sxmhwp $r5 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %2, i32 0)
  %4 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %4, i32 0)
  %6 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %6, i32 0)
  %8 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %8, i32 0)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

declare <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16>, i32)

define <8 x i32> @widenhwo_z(<8 x i16> %0) {
; CV1-LABEL: widenhwo_z:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r4 = $r0, 0x80400000201
; CV1-NEXT:    sbmm8 $r5 = $r0, 0x804000002010
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    sbmm8 $r2 = $r1, 0x80400000201
; CV1-NEXT:    sbmm8 $r3 = $r1, 0x804000002010
; CV1-NEXT:    ;;
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenhwo_z:
; CV2:       # %bb.0:
; CV2-NEXT:    zxlhwp $r2 = $r1
; CV2-NEXT:    zxmhwp $r3 = $r1
; CV2-NEXT:    zxlhwp $r4 = $r0
; CV2-NEXT:    zxmhwp $r5 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %2, i32 1)
  %4 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %4, i32 1)
  %6 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %6, i32 1)
  %8 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %8, i32 1)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

define <8 x i32> @widenhwo_q(<8 x i16> %0) {
; CV1-LABEL: widenhwo_q:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r2 = 0x804000002010000
; CV1-NEXT:    make $r3 = 0x8040000020100000
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r4 = $r0, $r2
; CV1-NEXT:    sbmm8 $r5 = $r0, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    sbmm8 $r2 = $r1, $r2
; CV1-NEXT:    sbmm8 $r3 = $r1, $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenhwo_q:
; CV2:       # %bb.0:
; CV2-NEXT:    make $r2 = 0x804000002010000
; CV2-NEXT:    make $r3 = 0x8040000020100000
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r2 = $r1, $r2
; CV2-NEXT:    sbmm8 $r3 = $r1, $r3
; CV2-NEXT:    sbmm8 $r4 = $r0, $r2
; CV2-NEXT:    sbmm8 $r5 = $r0, $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %2, i32 2)
  %4 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %4, i32 2)
  %6 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %6, i32 2)
  %8 = shufflevector <8 x i16> %0, <8 x i16> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %8, i32 2)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

define <2 x i32> @widenhwp(<2 x i16> %0) {
; CHECK-LABEL: widenhwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxlhwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %0, i32 0)
  ret <2 x i32> %2
}

define <2 x i32> @widenhwp_z(<2 x i16> %0) {
; CV1-LABEL: widenhwp_z:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r0 = $r0, 0x80400000201
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenhwp_z:
; CV2:       # %bb.0:
; CV2-NEXT:    zxlhwp $r0 = $r0
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %0, i32 1)
  ret <2 x i32> %2
}

define <2 x i32> @widenhwp_q(<2 x i16> %0) {
; CHECK-LABEL: widenhwp_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x804000002010000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %0, i32 2)
  ret <2 x i32> %2
}

define <4 x i32> @widenhwq(<4 x i16> %0) {
; CHECK-LABEL: widenhwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxmhwp $r1 = $r0
; CHECK-NEXT:    sxlhwp $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %2, i32 0)
  %4 = shufflevector <4 x i16> %0, <4 x i16> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %4, i32 0)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <4 x i32> @widenhwq_z(<4 x i16> %0) {
; CV1-LABEL: widenhwq_z:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r1 = $r0, 0x804000002010
; CV1-NEXT:    sbmm8 $r2 = $r0, 0x80400000201
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenhwq_z:
; CV2:       # %bb.0:
; CV2-NEXT:    zxmhwp $r1 = $r0
; CV2-NEXT:    zxlhwp $r2 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r2
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %2, i32 1)
  %4 = shufflevector <4 x i16> %0, <4 x i16> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %4, i32 1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <4 x i32> @widenhwq_q(<4 x i16> %0) {
; CHECK-LABEL: widenhwq_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r1 = 0x804000002010000
; CHECK-NEXT:    make $r3 = 0x8040000020100000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r0, $r3
; CHECK-NEXT:    sbmm8 $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i16> %0, <4 x i16> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %2, i32 2)
  %4 = shufflevector <4 x i16> %0, <4 x i16> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %4, i32 2)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define void @widenhwx(<16 x i32>* noalias nocapture sret(<16 x i32>) align 32 %0, <16 x i16> %1) {
; CV1-LABEL: widenhwx:
; CV1:       # %bb.0:
; CV1-NEXT:    sxlhwp $r4 = $r2
; CV1-NEXT:    sxmhwp $r5 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlhwp $r8 = $r0
; CV1-NEXT:    sxmhwp $r9 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    sxlhwp $r6 = $r3
; CV1-NEXT:    sxlhwp $r10 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    sxmhwp $r7 = $r3
; CV1-NEXT:    sxmhwp $r11 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    so 32[$r15] = $r4r5r6r7
; CV1-NEXT:    ;;
; CV1-NEXT:    so 0[$r15] = $r8r9r10r11
; CV1-NEXT:    copyd $r0 = $r15
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenhwx:
; CV2:       # %bb.0:
; CV2-NEXT:    sxlhwp $r4 = $r2
; CV2-NEXT:    sxmhwp $r5 = $r2
; CV2-NEXT:    sxlhwp $r8 = $r0
; CV2-NEXT:    sxmhwp $r9 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    sxlhwp $r6 = $r3
; CV2-NEXT:    sxmhwp $r7 = $r3
; CV2-NEXT:    sxlhwp $r10 = $r1
; CV2-NEXT:    sxmhwp $r11 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    so 32[$r15] = $r4r5r6r7
; CV2-NEXT:    ;;
; CV2-NEXT:    so 0[$r15] = $r8r9r10r11
; CV2-NEXT:    copyd $r0 = $r15
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 0, i32 1>
  %4 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %3, i32 0)
  %5 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 2, i32 3>
  %6 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %5, i32 0)
  %7 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %7, i32 0)
  %9 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %9, i32 0)
  %11 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 8, i32 9>
  %12 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %11, i32 0)
  %13 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 10, i32 11>
  %14 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %13, i32 0)
  %15 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 12, i32 13>
  %16 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %15, i32 0)
  %17 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 14, i32 15>
  %18 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %17, i32 0)
  %19 = shufflevector <2 x i32> %4, <2 x i32> %6, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = shufflevector <2 x i32> %8, <2 x i32> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %21 = shufflevector <2 x i32> %12, <2 x i32> %14, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <2 x i32> %16, <2 x i32> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = shufflevector <4 x i32> %19, <4 x i32> %20, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %24 = shufflevector <4 x i32> %21, <4 x i32> %22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %25 = shufflevector <8 x i32> %23, <8 x i32> %24, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i32> %25, <16 x i32>* %0
  ret void
}

define void @widenhwx_z(<16 x i32>* noalias nocapture sret(<16 x i32>) align 32 %0, <16 x i16> %1) {
; CV1-LABEL: widenhwx_z:
; CV1:       # %bb.0:
; CV1-NEXT:    sbmm8 $r4 = $r2, 0x80400000201
; CV1-NEXT:    sbmm8 $r5 = $r2, 0x804000002010
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r8 = $r0, 0x80400000201
; CV1-NEXT:    sbmm8 $r9 = $r0, 0x804000002010
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r6 = $r3, 0x80400000201
; CV1-NEXT:    sbmm8 $r10 = $r1, 0x80400000201
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r7 = $r3, 0x804000002010
; CV1-NEXT:    sbmm8 $r11 = $r1, 0x804000002010
; CV1-NEXT:    ;;
; CV1-NEXT:    so 32[$r15] = $r4r5r6r7
; CV1-NEXT:    ;;
; CV1-NEXT:    so 0[$r15] = $r8r9r10r11
; CV1-NEXT:    copyd $r0 = $r15
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenhwx_z:
; CV2:       # %bb.0:
; CV2-NEXT:    zxlhwp $r4 = $r2
; CV2-NEXT:    zxmhwp $r5 = $r2
; CV2-NEXT:    zxlhwp $r8 = $r0
; CV2-NEXT:    zxmhwp $r9 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    zxlhwp $r6 = $r3
; CV2-NEXT:    zxmhwp $r7 = $r3
; CV2-NEXT:    zxlhwp $r10 = $r1
; CV2-NEXT:    zxmhwp $r11 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    so 32[$r15] = $r4r5r6r7
; CV2-NEXT:    ;;
; CV2-NEXT:    so 0[$r15] = $r8r9r10r11
; CV2-NEXT:    copyd $r0 = $r15
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 0, i32 1>
  %4 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %3, i32 1)
  %5 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 2, i32 3>
  %6 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %5, i32 1)
  %7 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %7, i32 1)
  %9 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %9, i32 1)
  %11 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 8, i32 9>
  %12 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %11, i32 1)
  %13 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 10, i32 11>
  %14 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %13, i32 1)
  %15 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 12, i32 13>
  %16 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %15, i32 1)
  %17 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 14, i32 15>
  %18 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %17, i32 1)
  %19 = shufflevector <2 x i32> %4, <2 x i32> %6, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = shufflevector <2 x i32> %8, <2 x i32> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %21 = shufflevector <2 x i32> %12, <2 x i32> %14, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <2 x i32> %16, <2 x i32> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = shufflevector <4 x i32> %19, <4 x i32> %20, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %24 = shufflevector <4 x i32> %21, <4 x i32> %22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %25 = shufflevector <8 x i32> %23, <8 x i32> %24, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i32> %25, <16 x i32>* %0
  ret void
}

define void @widenhwx_q(<16 x i32>* noalias nocapture sret(<16 x i32>) align 32 %0, <16 x i16> %1) {
; CV1-LABEL: widenhwx_q:
; CV1:       # %bb.0:
; CV1-NEXT:    make $r4 = 0x804000002010000
; CV1-NEXT:    make $r5 = 0x8040000020100000
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r8 = $r2, $r4
; CV1-NEXT:    sbmm8 $r9 = $r2, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r32 = $r0, $r4
; CV1-NEXT:    sbmm8 $r33 = $r0, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r10 = $r3, $r4
; CV1-NEXT:    sbmm8 $r34 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r11 = $r3, $r5
; CV1-NEXT:    sbmm8 $r35 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    so 32[$r15] = $r8r9r10r11
; CV1-NEXT:    ;;
; CV1-NEXT:    so 0[$r15] = $r32r33r34r35
; CV1-NEXT:    copyd $r0 = $r15
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: widenhwx_q:
; CV2:       # %bb.0:
; CV2-NEXT:    make $r4 = 0x804000002010000
; CV2-NEXT:    make $r5 = 0x8040000020100000
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r8 = $r2, $r4
; CV2-NEXT:    sbmm8 $r9 = $r2, $r5
; CV2-NEXT:    sbmm8 $r32 = $r0, $r4
; CV2-NEXT:    sbmm8 $r33 = $r0, $r5
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r10 = $r3, $r4
; CV2-NEXT:    sbmm8 $r11 = $r3, $r5
; CV2-NEXT:    sbmm8 $r34 = $r1, $r4
; CV2-NEXT:    sbmm8 $r35 = $r1, $r5
; CV2-NEXT:    ;;
; CV2-NEXT:    so 32[$r15] = $r8r9r10r11
; CV2-NEXT:    ;;
; CV2-NEXT:    so 0[$r15] = $r32r33r34r35
; CV2-NEXT:    copyd $r0 = $r15
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 0, i32 1>
  %4 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %3, i32 2)
  %5 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 2, i32 3>
  %6 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %5, i32 2)
  %7 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %7, i32 2)
  %9 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %9, i32 2)
  %11 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 8, i32 9>
  %12 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %11, i32 2)
  %13 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 10, i32 11>
  %14 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %13, i32 2)
  %15 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 12, i32 13>
  %16 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %15, i32 2)
  %17 = shufflevector <16 x i16> %1, <16 x i16> undef, <2 x i32> <i32 14, i32 15>
  %18 = tail call <2 x i32> @llvm.kvx.widenint.v2i32(<2 x i16> %17, i32 2)
  %19 = shufflevector <2 x i32> %4, <2 x i32> %6, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = shufflevector <2 x i32> %8, <2 x i32> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %21 = shufflevector <2 x i32> %12, <2 x i32> %14, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <2 x i32> %16, <2 x i32> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = shufflevector <4 x i32> %19, <4 x i32> %20, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %24 = shufflevector <4 x i32> %21, <4 x i32> %22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %25 = shufflevector <8 x i32> %23, <8 x i32> %24, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i32> %25, <16 x i32>* %0
  ret void
}

define void @widenwdo(<8 x i64>* noalias nocapture sret(<8 x i64>) align 32 %0, <8 x i32> %1) {
; CHECK-LABEL: widenwdo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r4 = $r2
; CHECK-NEXT:    srad $r5 = $r2, 32
; CHECK-NEXT:    sxwd $r8 = $r0
; CHECK-NEXT:    srad $r9 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sxwd $r6 = $r3
; CHECK-NEXT:    srad $r7 = $r3, 32
; CHECK-NEXT:    sxwd $r10 = $r1
; CHECK-NEXT:    srad $r11 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 32[$r15] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 0[$r15] = $r8r9r10r11
; CHECK-NEXT:    copyd $r0 = $r15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <8 x i32> %1, i64 0
  %4 = tail call i64 @llvm.kvx.widenint.i64(i32 %3, i32 0)
  %5 = extractelement <8 x i32> %1, i64 1
  %6 = tail call i64 @llvm.kvx.widenint.i64(i32 %5, i32 0)
  %7 = extractelement <8 x i32> %1, i64 2
  %8 = tail call i64 @llvm.kvx.widenint.i64(i32 %7, i32 0)
  %9 = extractelement <8 x i32> %1, i64 3
  %10 = tail call i64 @llvm.kvx.widenint.i64(i32 %9, i32 0)
  %11 = extractelement <8 x i32> %1, i64 4
  %12 = tail call i64 @llvm.kvx.widenint.i64(i32 %11, i32 0)
  %13 = extractelement <8 x i32> %1, i64 5
  %14 = tail call i64 @llvm.kvx.widenint.i64(i32 %13, i32 0)
  %15 = extractelement <8 x i32> %1, i64 6
  %16 = tail call i64 @llvm.kvx.widenint.i64(i32 %15, i32 0)
  %17 = extractelement <8 x i32> %1, i64 7
  %18 = tail call i64 @llvm.kvx.widenint.i64(i32 %17, i32 0)
  %19 = insertelement <8 x i64> undef, i64 %4, i32 0
  %20 = insertelement <8 x i64> %19, i64 %6, i32 1
  %21 = insertelement <8 x i64> %20, i64 %8, i32 2
  %22 = insertelement <8 x i64> %21, i64 %10, i32 3
  %23 = insertelement <8 x i64> %22, i64 %12, i32 4
  %24 = insertelement <8 x i64> %23, i64 %14, i32 5
  %25 = insertelement <8 x i64> %24, i64 %16, i32 6
  %26 = insertelement <8 x i64> %25, i64 %18, i32 7
  store <8 x i64> %26, <8 x i64>* %0
  ret void
}

declare i64 @llvm.kvx.widenint.i64(i32, i32)

define void @widenwdo_z(<8 x i64>* noalias nocapture sret(<8 x i64>) align 32 %0, <8 x i32> %1) {
; CHECK-LABEL: widenwdo_z:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r4 = $r2
; CHECK-NEXT:    srld $r5 = $r2, 32
; CHECK-NEXT:    zxwd $r8 = $r0
; CHECK-NEXT:    srld $r9 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    zxwd $r6 = $r3
; CHECK-NEXT:    srld $r7 = $r3, 32
; CHECK-NEXT:    zxwd $r10 = $r1
; CHECK-NEXT:    srld $r11 = $r1, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 32[$r15] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 0[$r15] = $r8r9r10r11
; CHECK-NEXT:    copyd $r0 = $r15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <8 x i32> %1, i64 0
  %4 = tail call i64 @llvm.kvx.widenint.i64(i32 %3, i32 1)
  %5 = extractelement <8 x i32> %1, i64 1
  %6 = tail call i64 @llvm.kvx.widenint.i64(i32 %5, i32 1)
  %7 = extractelement <8 x i32> %1, i64 2
  %8 = tail call i64 @llvm.kvx.widenint.i64(i32 %7, i32 1)
  %9 = extractelement <8 x i32> %1, i64 3
  %10 = tail call i64 @llvm.kvx.widenint.i64(i32 %9, i32 1)
  %11 = extractelement <8 x i32> %1, i64 4
  %12 = tail call i64 @llvm.kvx.widenint.i64(i32 %11, i32 1)
  %13 = extractelement <8 x i32> %1, i64 5
  %14 = tail call i64 @llvm.kvx.widenint.i64(i32 %13, i32 1)
  %15 = extractelement <8 x i32> %1, i64 6
  %16 = tail call i64 @llvm.kvx.widenint.i64(i32 %15, i32 1)
  %17 = extractelement <8 x i32> %1, i64 7
  %18 = tail call i64 @llvm.kvx.widenint.i64(i32 %17, i32 1)
  %19 = insertelement <8 x i64> undef, i64 %4, i32 0
  %20 = insertelement <8 x i64> %19, i64 %6, i32 1
  %21 = insertelement <8 x i64> %20, i64 %8, i32 2
  %22 = insertelement <8 x i64> %21, i64 %10, i32 3
  %23 = insertelement <8 x i64> %22, i64 %12, i32 4
  %24 = insertelement <8 x i64> %23, i64 %14, i32 5
  %25 = insertelement <8 x i64> %24, i64 %16, i32 6
  %26 = insertelement <8 x i64> %25, i64 %18, i32 7
  store <8 x i64> %26, <8 x i64>* %0
  ret void
}

define void @widenwdo_q(<8 x i64>* noalias nocapture sret(<8 x i64>) align 32 %0, <8 x i32> %1) {
; CHECK-LABEL: widenwdo_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slld $r4 = $r2, 32
; CHECK-NEXT:    andd $r5 = $r2, 0xffffffff00000000
; CHECK-NEXT:    slld $r8 = $r0, 32
; CHECK-NEXT:    andd $r9 = $r0, 0xffffffff00000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    slld $r6 = $r3, 32
; CHECK-NEXT:    andd $r7 = $r3, 0xffffffff00000000
; CHECK-NEXT:    slld $r10 = $r1, 32
; CHECK-NEXT:    andd $r11 = $r1, 0xffffffff00000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 32[$r15] = $r4r5r6r7
; CHECK-NEXT:    ;;
; CHECK-NEXT:    so 0[$r15] = $r8r9r10r11
; CHECK-NEXT:    copyd $r0 = $r15
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %3 = extractelement <8 x i32> %1, i64 0
  %4 = tail call i64 @llvm.kvx.widenint.i64(i32 %3, i32 2)
  %5 = extractelement <8 x i32> %1, i64 1
  %6 = tail call i64 @llvm.kvx.widenint.i64(i32 %5, i32 2)
  %7 = extractelement <8 x i32> %1, i64 2
  %8 = tail call i64 @llvm.kvx.widenint.i64(i32 %7, i32 2)
  %9 = extractelement <8 x i32> %1, i64 3
  %10 = tail call i64 @llvm.kvx.widenint.i64(i32 %9, i32 2)
  %11 = extractelement <8 x i32> %1, i64 4
  %12 = tail call i64 @llvm.kvx.widenint.i64(i32 %11, i32 2)
  %13 = extractelement <8 x i32> %1, i64 5
  %14 = tail call i64 @llvm.kvx.widenint.i64(i32 %13, i32 2)
  %15 = extractelement <8 x i32> %1, i64 6
  %16 = tail call i64 @llvm.kvx.widenint.i64(i32 %15, i32 2)
  %17 = extractelement <8 x i32> %1, i64 7
  %18 = tail call i64 @llvm.kvx.widenint.i64(i32 %17, i32 2)
  %19 = insertelement <8 x i64> undef, i64 %4, i32 0
  %20 = insertelement <8 x i64> %19, i64 %6, i32 1
  %21 = insertelement <8 x i64> %20, i64 %8, i32 2
  %22 = insertelement <8 x i64> %21, i64 %10, i32 3
  %23 = insertelement <8 x i64> %22, i64 %12, i32 4
  %24 = insertelement <8 x i64> %23, i64 %14, i32 5
  %25 = insertelement <8 x i64> %24, i64 %16, i32 6
  %26 = insertelement <8 x i64> %25, i64 %18, i32 7
  store <8 x i64> %26, <8 x i64>* %0
  ret void
}

define <2 x i64> @widenwdp(<2 x i32> %0) {
; CHECK-LABEL: widenwdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srad $r1 = $r0, 32
; CHECK-NEXT:    sxwd $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = tail call i64 @llvm.kvx.widenint.i64(i32 %2, i32 0)
  %4 = extractelement <2 x i32> %0, i64 1
  %5 = tail call i64 @llvm.kvx.widenint.i64(i32 %4, i32 0)
  %6 = insertelement <2 x i64> undef, i64 %3, i32 0
  %7 = insertelement <2 x i64> %6, i64 %5, i32 1
  ret <2 x i64> %7
}

define <2 x i64> @widenwdp_z(<2 x i32> %0) {
; CHECK-LABEL: widenwdp_z:
; CHECK:       # %bb.0:
; CHECK-NEXT:    srld $r1 = $r0, 32
; CHECK-NEXT:    zxwd $r2 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = tail call i64 @llvm.kvx.widenint.i64(i32 %2, i32 1)
  %4 = extractelement <2 x i32> %0, i64 1
  %5 = tail call i64 @llvm.kvx.widenint.i64(i32 %4, i32 1)
  %6 = insertelement <2 x i64> undef, i64 %3, i32 0
  %7 = insertelement <2 x i64> %6, i64 %5, i32 1
  ret <2 x i64> %7
}

define <2 x i64> @widenwdp_q(<2 x i32> %0) {
; CHECK-LABEL: widenwdp_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andd $r1 = $r0, 0xffffffff00000000
; CHECK-NEXT:    slld $r2 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i32> %0, i64 0
  %3 = tail call i64 @llvm.kvx.widenint.i64(i32 %2, i32 2)
  %4 = extractelement <2 x i32> %0, i64 1
  %5 = tail call i64 @llvm.kvx.widenint.i64(i32 %4, i32 2)
  %6 = insertelement <2 x i64> undef, i64 %3, i32 0
  %7 = insertelement <2 x i64> %6, i64 %5, i32 1
  ret <2 x i64> %7
}

define <4 x i64> @widenwdq(<4 x i32> %0) {
; CHECK-LABEL: widenwdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sxwd $r2 = $r1
; CHECK-NEXT:    srad $r3 = $r1, 32
; CHECK-NEXT:    sxwd $r4 = $r0
; CHECK-NEXT:    srad $r5 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i32> %0, i64 0
  %3 = tail call i64 @llvm.kvx.widenint.i64(i32 %2, i32 0)
  %4 = extractelement <4 x i32> %0, i64 1
  %5 = tail call i64 @llvm.kvx.widenint.i64(i32 %4, i32 0)
  %6 = extractelement <4 x i32> %0, i64 2
  %7 = tail call i64 @llvm.kvx.widenint.i64(i32 %6, i32 0)
  %8 = extractelement <4 x i32> %0, i64 3
  %9 = tail call i64 @llvm.kvx.widenint.i64(i32 %8, i32 0)
  %10 = insertelement <4 x i64> undef, i64 %3, i32 0
  %11 = insertelement <4 x i64> %10, i64 %5, i32 1
  %12 = insertelement <4 x i64> %11, i64 %7, i32 2
  %13 = insertelement <4 x i64> %12, i64 %9, i32 3
  ret <4 x i64> %13
}

define <4 x i64> @widenwdq_z(<4 x i32> %0) {
; CHECK-LABEL: widenwdq_z:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r2 = $r1
; CHECK-NEXT:    srld $r3 = $r1, 32
; CHECK-NEXT:    zxwd $r4 = $r0
; CHECK-NEXT:    srld $r5 = $r0, 32
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i32> %0, i64 0
  %3 = tail call i64 @llvm.kvx.widenint.i64(i32 %2, i32 1)
  %4 = extractelement <4 x i32> %0, i64 1
  %5 = tail call i64 @llvm.kvx.widenint.i64(i32 %4, i32 1)
  %6 = extractelement <4 x i32> %0, i64 2
  %7 = tail call i64 @llvm.kvx.widenint.i64(i32 %6, i32 1)
  %8 = extractelement <4 x i32> %0, i64 3
  %9 = tail call i64 @llvm.kvx.widenint.i64(i32 %8, i32 1)
  %10 = insertelement <4 x i64> undef, i64 %3, i32 0
  %11 = insertelement <4 x i64> %10, i64 %5, i32 1
  %12 = insertelement <4 x i64> %11, i64 %7, i32 2
  %13 = insertelement <4 x i64> %12, i64 %9, i32 3
  ret <4 x i64> %13
}

define <4 x i64> @widenwdq_q(<4 x i32> %0) {
; CHECK-LABEL: widenwdq_q:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slld $r2 = $r1, 32
; CHECK-NEXT:    andd $r3 = $r1, 0xffffffff00000000
; CHECK-NEXT:    slld $r4 = $r0, 32
; CHECK-NEXT:    andd $r5 = $r0, 0xffffffff00000000
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r4
; CHECK-NEXT:    copyd $r1 = $r5
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i32> %0, i64 0
  %3 = tail call i64 @llvm.kvx.widenint.i64(i32 %2, i32 2)
  %4 = extractelement <4 x i32> %0, i64 1
  %5 = tail call i64 @llvm.kvx.widenint.i64(i32 %4, i32 2)
  %6 = extractelement <4 x i32> %0, i64 2
  %7 = tail call i64 @llvm.kvx.widenint.i64(i32 %6, i32 2)
  %8 = extractelement <4 x i32> %0, i64 3
  %9 = tail call i64 @llvm.kvx.widenint.i64(i32 %8, i32 2)
  %10 = insertelement <4 x i64> undef, i64 %3, i32 0
  %11 = insertelement <4 x i64> %10, i64 %5, i32 1
  %12 = insertelement <4 x i64> %11, i64 %7, i32 2
  %13 = insertelement <4 x i64> %12, i64 %9, i32 3
  ret <4 x i64> %13
}

