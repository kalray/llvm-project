; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK
; RUN: clang -march=kv3-1 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @cbsw(i32 %0) {
; CHECK-LABEL: cbsw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.bitcnt.i32(i32 %0, i32 0)
  ret i32 %2
}

declare i32 @llvm.kvx.bitcnt.i32(i32, i32)

define i32 @clzw(i32 %0) {
; CHECK-LABEL: clzw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.bitcnt.i32(i32 %0, i32 1)
  ret i32 %2
}

define i32 @clsw(i32 %0) {
; CHECK-LABEL: clsw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clsw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.bitcnt.i32(i32 %0, i32 2)
  ret i32 %2
}

define i32 @ctzw(i32 %0) {
; CHECK-LABEL: ctzw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.bitcnt.i32(i32 %0, i32 3)
  ret i32 %2
}

define <2 x i32> @cbswp(<2 x i32> %0) {
; CHECK-LABEL: cbswp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %0, i32 0)
  ret <2 x i32> %2
}

declare <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32>, i32)

define <2 x i32> @clzwp(<2 x i32> %0) {
; CHECK-LABEL: clzwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %0, i32 1)
  ret <2 x i32> %2
}

define <2 x i32> @clswp(<2 x i32> %0) {
; CHECK-LABEL: clswp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %0, i32 2)
  ret <2 x i32> %2
}

define <2 x i32> @ctzwp(<2 x i32> %0) {
; CHECK-LABEL: ctzwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %0, i32 3)
  ret <2 x i32> %2
}

define <4 x i32> @cbswq(<4 x i32> %0) {
; CHECK-LABEL: cbswq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    cbswp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %2, i32 0)
  %4 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %4, i32 0)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <4 x i32> @clzwq(<4 x i32> %0) {
; CHECK-LABEL: clzwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    clzwp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %2, i32 1)
  %4 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %4, i32 1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <4 x i32> @clswq(<4 x i32> %0) {
; CHECK-LABEL: clswq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    clswp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %2, i32 2)
  %4 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %4, i32 2)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <4 x i32> @ctzwq(<4 x i32> %0) {
; CHECK-LABEL: ctzwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ctzwp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %2, i32 3)
  %4 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %4, i32 3)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @cbswo(<8 x i32> %0) {
; CHECK-LABEL: cbswo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    cbswp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cbswp $r2 = $r2
; CHECK-NEXT:    cbswp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %2, i32 0)
  %4 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %4, i32 0)
  %6 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %6, i32 0)
  %8 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %8, i32 0)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

define <8 x i32> @clzwo(<8 x i32> %0) {
; CHECK-LABEL: clzwo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    clzwp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clzwp $r2 = $r2
; CHECK-NEXT:    clzwp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %2, i32 1)
  %4 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %4, i32 1)
  %6 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %6, i32 1)
  %8 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %8, i32 1)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

define <8 x i32> @clswo(<8 x i32> %0) {
; CHECK-LABEL: clswo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    clswp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clswp $r2 = $r2
; CHECK-NEXT:    clswp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %2, i32 2)
  %4 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %4, i32 2)
  %6 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %6, i32 2)
  %8 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %8, i32 2)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

define <8 x i32> @ctzwo(<8 x i32> %0) {
; CHECK-LABEL: ctzwo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ctzwp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ctzwp $r2 = $r2
; CHECK-NEXT:    ctzwp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %2, i32 3)
  %4 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %4, i32 3)
  %6 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %6, i32 3)
  %8 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.bitcnt.v2i32(<2 x i32> %8, i32 3)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

define i64 @cbsd(i64 %0) {
; CHECK-LABEL: cbsd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %0, i32 0)
  ret i64 %2
}

declare i64 @llvm.kvx.bitcnt.i64(i64, i32)

define i64 @clzd(i64 %0) {
; CHECK-LABEL: clzd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %0, i32 1)
  ret i64 %2
}

define i64 @clsd(i64 %0) {
; CHECK-LABEL: clsd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clsd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %0, i32 2)
  ret i64 %2
}

define i64 @ctzd(i64 %0) {
; CHECK-LABEL: ctzd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %0, i32 3)
  ret i64 %2
}

define <2 x i64> @cbsdp(<2 x i64> %0) {
; CHECK-LABEL: cbsdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    cbsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %2, i32 0)
  %4 = extractelement <2 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %4, i32 0)
  %6 = insertelement <2 x i64> undef, i64 %3, i32 0
  %7 = insertelement <2 x i64> %6, i64 %5, i32 1
  ret <2 x i64> %7
}

define <2 x i64> @clzdp(<2 x i64> %0) {
; CHECK-LABEL: clzdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %2, i32 1)
  %4 = extractelement <2 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %4, i32 1)
  %6 = insertelement <2 x i64> undef, i64 %3, i32 0
  %7 = insertelement <2 x i64> %6, i64 %5, i32 1
  ret <2 x i64> %7
}

define <2 x i64> @clsdp(<2 x i64> %0) {
; CHECK-LABEL: clsdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clsd $r0 = $r0
; CHECK-NEXT:    clsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %2, i32 2)
  %4 = extractelement <2 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %4, i32 2)
  %6 = insertelement <2 x i64> undef, i64 %3, i32 0
  %7 = insertelement <2 x i64> %6, i64 %5, i32 1
  ret <2 x i64> %7
}

define <2 x i64> @ctzdp(<2 x i64> %0) {
; CHECK-LABEL: ctzdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ctzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %2, i32 3)
  %4 = extractelement <2 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %4, i32 3)
  %6 = insertelement <2 x i64> undef, i64 %3, i32 0
  %7 = insertelement <2 x i64> %6, i64 %5, i32 1
  ret <2 x i64> %7
}

define <4 x i64> @cbsdq(<4 x i64> %0) {
; CHECK-LABEL: cbsdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    cbsd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cbsd $r2 = $r2
; CHECK-NEXT:    cbsd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %2, i32 0)
  %4 = extractelement <4 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %4, i32 0)
  %6 = extractelement <4 x i64> %0, i64 2
  %7 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %6, i32 0)
  %8 = extractelement <4 x i64> %0, i64 3
  %9 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %8, i32 0)
  %10 = insertelement <4 x i64> undef, i64 %3, i32 0
  %11 = insertelement <4 x i64> %10, i64 %5, i32 1
  %12 = insertelement <4 x i64> %11, i64 %7, i32 2
  %13 = insertelement <4 x i64> %12, i64 %9, i32 3
  ret <4 x i64> %13
}

define <4 x i64> @clzdq(<4 x i64> %0) {
; CHECK-LABEL: clzdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clzd $r2 = $r2
; CHECK-NEXT:    clzd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %2, i32 1)
  %4 = extractelement <4 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %4, i32 1)
  %6 = extractelement <4 x i64> %0, i64 2
  %7 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %6, i32 1)
  %8 = extractelement <4 x i64> %0, i64 3
  %9 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %8, i32 1)
  %10 = insertelement <4 x i64> undef, i64 %3, i32 0
  %11 = insertelement <4 x i64> %10, i64 %5, i32 1
  %12 = insertelement <4 x i64> %11, i64 %7, i32 2
  %13 = insertelement <4 x i64> %12, i64 %9, i32 3
  ret <4 x i64> %13
}

define <4 x i64> @clsdq(<4 x i64> %0) {
; CHECK-LABEL: clsdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clsd $r0 = $r0
; CHECK-NEXT:    clsd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clsd $r2 = $r2
; CHECK-NEXT:    clsd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %2, i32 2)
  %4 = extractelement <4 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %4, i32 2)
  %6 = extractelement <4 x i64> %0, i64 2
  %7 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %6, i32 2)
  %8 = extractelement <4 x i64> %0, i64 3
  %9 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %8, i32 2)
  %10 = insertelement <4 x i64> undef, i64 %3, i32 0
  %11 = insertelement <4 x i64> %10, i64 %5, i32 1
  %12 = insertelement <4 x i64> %11, i64 %7, i32 2
  %13 = insertelement <4 x i64> %12, i64 %9, i32 3
  ret <4 x i64> %13
}

define <4 x i64> @ctzdq(<4 x i64> %0) {
; CHECK-LABEL: ctzdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ctzd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ctzd $r2 = $r2
; CHECK-NEXT:    ctzd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <4 x i64> %0, i64 0
  %3 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %2, i32 3)
  %4 = extractelement <4 x i64> %0, i64 1
  %5 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %4, i32 3)
  %6 = extractelement <4 x i64> %0, i64 2
  %7 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %6, i32 3)
  %8 = extractelement <4 x i64> %0, i64 3
  %9 = tail call i64 @llvm.kvx.bitcnt.i64(i64 %8, i32 3)
  %10 = insertelement <4 x i64> undef, i64 %3, i32 0
  %11 = insertelement <4 x i64> %10, i64 %5, i32 1
  %12 = insertelement <4 x i64> %11, i64 %7, i32 2
  %13 = insertelement <4 x i64> %12, i64 %9, i32 3
  ret <4 x i64> %13
}

