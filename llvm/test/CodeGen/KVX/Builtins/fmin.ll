; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define float @fminw(float %0, float %1) {
; ALL-LABEL: fminw:
; ALL:       # %bb.0:
; ALL-NEXT:    fminw $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call float @llvm.kvx.min.f32(float %0, float %1)
  ret float %3
}

declare float @llvm.kvx.min.f32(float, float)

define double @fmind(double %0, double %1) {
; ALL-LABEL: fmind:
; ALL:       # %bb.0:
; ALL-NEXT:    fmind $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call double @llvm.kvx.min.f64(double %0, double %1)
  ret double %3
}

declare double @llvm.kvx.min.f64(double, double)

define half @fminh(half %0, half %1) {
; ALL-LABEL: fminh:
; ALL:       # %bb.0:
; ALL-NEXT:    fminhq $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call half @llvm.kvx.min.f16(half %0, half %1)
  ret half %3
}

declare half @llvm.kvx.min.f16(half, half)

define <2 x half> @fminhp(<2 x half> %0, <2 x half> %1) {
; ALL-LABEL: fminhp:
; ALL:       # %bb.0:
; ALL-NEXT:    fminhq $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <2 x half> @llvm.kvx.min.v2f16(<2 x half> %0, <2 x half> %1)
  ret <2 x half> %3
}

declare <2 x half> @llvm.kvx.min.v2f16(<2 x half>, <2 x half>)

define <4 x half> @fminhq(<4 x half> %0, <4 x half> %1) {
; ALL-LABEL: fminhq:
; ALL:       # %bb.0:
; ALL-NEXT:    fminhq $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <4 x half> @llvm.kvx.min.v4f16(<4 x half> %0, <4 x half> %1)
  ret <4 x half> %3
}

declare <4 x half> @llvm.kvx.min.v4f16(<4 x half>, <4 x half>)

define <8 x half> @fminho(<8 x half> %0, <8 x half> %1) {
; ALL-LABEL: fminho:
; ALL:       # %bb.0:
; ALL-NEXT:    fminhq $r0 = $r0, $r2
; ALL-NEXT:    fminhq $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = shufflevector <8 x half> %1, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = tail call <4 x half> @llvm.kvx.min.v4f16(<4 x half> %3, <4 x half> %4)
  %6 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = shufflevector <8 x half> %1, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8 = tail call <4 x half> @llvm.kvx.min.v4f16(<4 x half> %6, <4 x half> %7)
  %9 = shufflevector <4 x half> %5, <4 x half> %8, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x half> %9
}

define <16 x half> @fminhx(<16 x half> %0, <16 x half> %1) {
; CV1-LABEL: fminhx:
; CV1:       # %bb.0:
; CV1-NEXT:    fminhq $r0 = $r0, $r4
; CV1-NEXT:    fminhq $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    fminhq $r2 = $r2, $r6
; CV1-NEXT:    fminhq $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fminhx:
; CV2:       # %bb.0:
; CV2-NEXT:    fminhq $r0 = $r0, $r4
; CV2-NEXT:    fminhq $r1 = $r1, $r5
; CV2-NEXT:    fminhq $r2 = $r2, $r6
; CV2-NEXT:    fminhq $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = shufflevector <16 x half> %1, <16 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = tail call <4 x half> @llvm.kvx.min.v4f16(<4 x half> %3, <4 x half> %4)
  %6 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = shufflevector <16 x half> %1, <16 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8 = tail call <4 x half> @llvm.kvx.min.v4f16(<4 x half> %6, <4 x half> %7)
  %9 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %10 = shufflevector <16 x half> %1, <16 x half> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %11 = tail call <4 x half> @llvm.kvx.min.v4f16(<4 x half> %9, <4 x half> %10)
  %12 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x half> %1, <16 x half> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x half> @llvm.kvx.min.v4f16(<4 x half> %12, <4 x half> %13)
  %15 = shufflevector <4 x half> %5, <4 x half> %8, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %16 = shufflevector <4 x half> %11, <4 x half> %14, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <8 x half> %15, <8 x half> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x half> %17
}

define <2 x float> @fminwp(<2 x float> %0, <2 x float> %1) {
; ALL-LABEL: fminwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fminwp $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.min.v2f32(<2 x float> %0, <2 x float> %1)
  ret <2 x float> %3
}

declare <2 x float> @llvm.kvx.min.v2f32(<2 x float>, <2 x float>)

define <4 x float> @fminwq(<4 x float> %0, <4 x float> %1) {
; ALL-LABEL: fminwq:
; ALL:       # %bb.0:
; ALL-NEXT:    fminwp $r0 = $r0, $r2
; ALL-NEXT:    fminwp $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x float> %1, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %5 = tail call <2 x float> @llvm.kvx.min.v2f32(<2 x float> %3, <2 x float> %4)
  %6 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %7 = shufflevector <4 x float> %1, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <2 x float> @llvm.kvx.min.v2f32(<2 x float> %6, <2 x float> %7)
  %9 = shufflevector <2 x float> %5, <2 x float> %8, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %9
}

define <8 x float> @fminwo(<8 x float> %0, <8 x float> %1) {
; CV1-LABEL: fminwo:
; CV1:       # %bb.0:
; CV1-NEXT:    fminwp $r0 = $r0, $r4
; CV1-NEXT:    fminwp $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    fminwp $r2 = $r2, $r6
; CV1-NEXT:    fminwp $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fminwo:
; CV2:       # %bb.0:
; CV2-NEXT:    fminwp $r0 = $r0, $r4
; CV2-NEXT:    fminwp $r1 = $r1, $r5
; CV2-NEXT:    fminwp $r2 = $r2, $r6
; CV2-NEXT:    fminwp $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %5 = tail call <2 x float> @llvm.kvx.min.v2f32(<2 x float> %3, <2 x float> %4)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %7 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <2 x float> @llvm.kvx.min.v2f32(<2 x float> %6, <2 x float> %7)
  %9 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %10 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %11 = tail call <2 x float> @llvm.kvx.min.v2f32(<2 x float> %9, <2 x float> %10)
  %12 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x float> @llvm.kvx.min.v2f32(<2 x float> %12, <2 x float> %13)
  %15 = shufflevector <2 x float> %5, <2 x float> %8, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16 = shufflevector <2 x float> %11, <2 x float> %14, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <4 x float> %15, <4 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %17
}

define <2 x double> @fmindp(<2 x double> %0, <2 x double> %1) {
; ALL-LABEL: fmindp:
; ALL:       # %bb.0:
; ALL-NEXT:    fmind $r0 = $r0, $r2
; ALL-NEXT:    fmind $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = extractelement <2 x double> %0, i64 0
  %4 = extractelement <2 x double> %1, i64 0
  %5 = tail call double @llvm.kvx.min.f64(double %3, double %4)
  %6 = extractelement <2 x double> %0, i64 1
  %7 = extractelement <2 x double> %1, i64 1
  %8 = tail call double @llvm.kvx.min.f64(double %6, double %7)
  %9 = insertelement <2 x double> undef, double %5, i32 0
  %10 = insertelement <2 x double> %9, double %8, i32 1
  ret <2 x double> %10
}

define <4 x double> @fmindq(<4 x double> %0, <4 x double> %1) {
; CV1-LABEL: fmindq:
; CV1:       # %bb.0:
; CV1-NEXT:    fmind $r0 = $r0, $r4
; CV1-NEXT:    fmind $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    fmind $r2 = $r2, $r6
; CV1-NEXT:    fmind $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fmindq:
; CV2:       # %bb.0:
; CV2-NEXT:    fmind $r0 = $r0, $r4
; CV2-NEXT:    fmind $r1 = $r1, $r5
; CV2-NEXT:    fmind $r2 = $r2, $r6
; CV2-NEXT:    fmind $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = extractelement <4 x double> %0, i64 0
  %4 = extractelement <4 x double> %1, i64 0
  %5 = tail call double @llvm.kvx.min.f64(double %3, double %4)
  %6 = extractelement <4 x double> %0, i64 1
  %7 = extractelement <4 x double> %1, i64 1
  %8 = tail call double @llvm.kvx.min.f64(double %6, double %7)
  %9 = extractelement <4 x double> %0, i64 2
  %10 = extractelement <4 x double> %1, i64 2
  %11 = tail call double @llvm.kvx.min.f64(double %9, double %10)
  %12 = extractelement <4 x double> %0, i64 3
  %13 = extractelement <4 x double> %1, i64 3
  %14 = tail call double @llvm.kvx.min.f64(double %12, double %13)
  %15 = insertelement <4 x double> undef, double %5, i32 0
  %16 = insertelement <4 x double> %15, double %8, i32 1
  %17 = insertelement <4 x double> %16, double %11, i32 2
  %18 = insertelement <4 x double> %17, double %14, i32 3
  ret <4 x double> %18
}

