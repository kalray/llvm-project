; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define double @fsrecd(double %0) {
; ALL-LABEL: fsrecd:
; ALL:       # %bb.0:
; ALL-NEXT:    fsrecd $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call double @llvm.kvx.fsrec.f64(double %0, i32 0)
  ret double %2
}

declare double @llvm.kvx.fsrec.f64(double, i32)

define <2 x double> @fsrecdp(<2 x double> %0) {
; ALL-LABEL: fsrecdp:
; ALL:       # %bb.0:
; ALL-NEXT:    fsrecd $r0 = $r0
; ALL-NEXT:    fsrecd $r1 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <2 x double> %0, i64 0
  %3 = tail call double @llvm.kvx.fsrec.f64(double %2, i32 0)
  %4 = extractelement <2 x double> %0, i64 1
  %5 = tail call double @llvm.kvx.fsrec.f64(double %4, i32 0)
  %6 = insertelement <2 x double> undef, double %3, i32 0
  %7 = insertelement <2 x double> %6, double %5, i32 1
  ret <2 x double> %7
}

define <4 x double> @fsrecdq(<4 x double> %0) {
; ALL-LABEL: fsrecdq:
; ALL:       # %bb.0:
; ALL-NEXT:    fsrecd $r0 = $r0
; ALL-NEXT:    fsrecd $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    fsrecd $r2 = $r2
; ALL-NEXT:    fsrecd $r3 = $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <4 x double> %0, i64 0
  %3 = tail call double @llvm.kvx.fsrec.f64(double %2, i32 0)
  %4 = extractelement <4 x double> %0, i64 1
  %5 = tail call double @llvm.kvx.fsrec.f64(double %4, i32 0)
  %6 = extractelement <4 x double> %0, i64 2
  %7 = tail call double @llvm.kvx.fsrec.f64(double %6, i32 0)
  %8 = extractelement <4 x double> %0, i64 3
  %9 = tail call double @llvm.kvx.fsrec.f64(double %8, i32 0)
  %10 = insertelement <4 x double> undef, double %3, i32 0
  %11 = insertelement <4 x double> %10, double %5, i32 1
  %12 = insertelement <4 x double> %11, double %7, i32 2
  %13 = insertelement <4 x double> %12, double %9, i32 3
  ret <4 x double> %13
}

define float @fsrecw(float %0) {
; ALL-LABEL: fsrecw:
; ALL:       # %bb.0:
; ALL-NEXT:    fsrecw $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call float @llvm.kvx.fsrec.f32(float %0, i32 0)
  ret float %2
}

declare float @llvm.kvx.fsrec.f32(float, i32)

define <8 x float> @fsrecwo(<8 x float> %0) {
; ALL-LABEL: fsrecwo:
; ALL:       # %bb.0:
; ALL-NEXT:    fsrecwp $r0 = $r0
; ALL-NEXT:    fsrecwp $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    fsrecwp $r2 = $r2
; ALL-NEXT:    fsrecwp $r3 = $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fsrec.v2f32(<2 x float> %2, i32 0)
  %4 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fsrec.v2f32(<2 x float> %4, i32 0)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x float> @llvm.kvx.fsrec.v2f32(<2 x float> %6, i32 0)
  %8 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x float> @llvm.kvx.fsrec.v2f32(<2 x float> %8, i32 0)
  %10 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x float> %7, <2 x float> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x float> %10, <4 x float> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %12
}

declare <2 x float> @llvm.kvx.fsrec.v2f32(<2 x float>, i32)

define <2 x float> @fsrecwp(<2 x float> %0) {
; ALL-LABEL: fsrecwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fsrecwp $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call <2 x float> @llvm.kvx.fsrec.v2f32(<2 x float> %0, i32 0)
  ret <2 x float> %2
}

define <4 x float> @fsrecwq(<4 x float> %0) {
; ALL-LABEL: fsrecwq:
; ALL:       # %bb.0:
; ALL-NEXT:    fsrecwp $r0 = $r0
; ALL-NEXT:    fsrecwp $r1 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fsrec.v2f32(<2 x float> %2, i32 0)
  %4 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fsrec.v2f32(<2 x float> %4, i32 0)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}

