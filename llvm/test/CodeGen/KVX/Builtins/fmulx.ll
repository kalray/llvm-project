; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define float @fmulxhw(half %0, half %1) {
; ALL-LABEL: fmulxhw:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulhw.s $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call float @llvm.kvx.fmulx.f32(half %0, half %1, i32 7, i32 1)
  ret float %3
}

declare float @llvm.kvx.fmulx.f32(half, half, i32, i32)

define <8 x float> @fmulxhwo(<8 x half> %0, <8 x half> %1) {
; ALL-LABEL: fmulxhwo:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulhwq.s $r4r5 = $r0, $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulhwq.s $r2r3 = $r1, $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r0 = $r4
; ALL-NEXT:    copyd $r1 = $r5
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = shufflevector <8 x half> %1, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = tail call <4 x float> @llvm.kvx.fmulx.v4f32(<4 x half> %3, <4 x half> %4, i32 7, i32 1)
  %6 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = shufflevector <8 x half> %1, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8 = tail call <4 x float> @llvm.kvx.fmulx.v4f32(<4 x half> %6, <4 x half> %7, i32 7, i32 1)
  %9 = shufflevector <4 x float> %5, <4 x float> %8, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %9
}

declare <4 x float> @llvm.kvx.fmulx.v4f32(<4 x half>, <4 x half>, i32, i32)

define <2 x float> @fmulxhwp(<2 x half> %0, <2 x half> %1) {
; ALL-LABEL: fmulxhwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulhwq.s $r0r1 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.fmulx.v2f32(<2 x half> %0, <2 x half> %1, i32 7, i32 1)
  ret <2 x float> %3
}

declare <2 x float> @llvm.kvx.fmulx.v2f32(<2 x half>, <2 x half>, i32, i32)

define <4 x float> @fmulxhwq(<4 x half> %0, <4 x half> %1) {
; ALL-LABEL: fmulxhwq:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulhwq.s $r0r1 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <4 x float> @llvm.kvx.fmulx.v4f32(<4 x half> %0, <4 x half> %1, i32 7, i32 1)
  ret <4 x float> %3
}

define double @fmulxwd(float %0, float %1) {
; ALL-LABEL: fmulxwd:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulwd.s $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call double @llvm.kvx.fmulx.f64(float %0, float %1, i32 7, i32 1)
  ret double %3
}

declare double @llvm.kvx.fmulx.f64(float, float, i32, i32)

define <2 x double> @fmulxwdp(<2 x float> %0, <2 x float> %1) {
; ALL-LABEL: fmulxwdp:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulwdp.s $r0r1 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <2 x double> @llvm.kvx.fmulx.v2f64(<2 x float> %0, <2 x float> %1, i32 7, i32 1)
  ret <2 x double> %3
}

declare <2 x double> @llvm.kvx.fmulx.v2f64(<2 x float>, <2 x float>, i32, i32)

define <4 x double> @fmulxwdq(<4 x float> %0, <4 x float> %1) {
; ALL-LABEL: fmulxwdq:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulwdp.s $r4r5 = $r0, $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    fmulwdp.s $r2r3 = $r1, $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r0 = $r4
; ALL-NEXT:    copyd $r1 = $r5
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x float> %1, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %5 = tail call <2 x double> @llvm.kvx.fmulx.v2f64(<2 x float> %3, <2 x float> %4, i32 7, i32 1)
  %6 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %7 = shufflevector <4 x float> %1, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <2 x double> @llvm.kvx.fmulx.v2f64(<2 x float> %6, <2 x float> %7, i32 7, i32 1)
  %9 = shufflevector <2 x double> %5, <2 x double> %8, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %9
}
