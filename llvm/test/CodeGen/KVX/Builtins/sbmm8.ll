; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i64 @sbmm8(i64 %0, i64 %1) {
; CHECK-LABEL: sbmm8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = tail call i64 @llvm.kvx.sbmm8(i64 %0, i64 %1)
  ret i64 %3
}

declare i64 @llvm.kvx.sbmm8(i64, i64)

define i64 @sbmm8ri10(i64 %0) {
; CHECK-LABEL: sbmm8ri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, -512
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i64 @llvm.kvx.sbmm8(i64 %0, i64 -512)
  ret i64 %2
}

define i64 @sbmm8ri37(i64 %0) {
; CHECK-LABEL: sbmm8ri37:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, -513
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i64 @llvm.kvx.sbmm8(i64 %0, i64 -513)
  ret i64 %2
}

define i64 @sbmm8ri64(i64 %0) {
; CHECK-LABEL: sbmm8ri64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmm8 $r0 = $r0, 0x2fffffffff
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i64 @llvm.kvx.sbmm8(i64 %0, i64 206158430207)
  ret i64 %2
}

define i64 @sbmmt8(i64 %0, i64 %1) {
; CHECK-LABEL: sbmmt8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmmt8 $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %3 = tail call i64 @llvm.kvx.sbmmt8(i64 %0, i64 %1)
  ret i64 %3
}

declare i64 @llvm.kvx.sbmmt8(i64, i64)

define i64 @sbmmt8ri10(i64 %0) {
; CHECK-LABEL: sbmmt8ri10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sbmmt8 $r0 = $r0, 512
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %2 = tail call i64 @llvm.kvx.sbmmt8(i64 %0, i64 512)
  ret i64 %2
}

