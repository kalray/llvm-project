; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV1
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -O2 -c -o /dev/null %s
target triple = "kvx-kalray-cos"

define <2 x i64> @madddt_rr(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: madddt_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    madddt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x i64> @llvm.kvx.madddt(<2 x i64> %0, i64 %1, i64 %2)
  ret <2 x i64> %4
}

define <2 x i64> @madddt_ri(<2 x i64> %0, i64 %1, i64 %2) {
; CV1-LABEL: madddt_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    madddt $r0r1 = $r2, 42
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 0)
;
; CV2-LABEL: madddt_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    make $r3 = 42
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    madddt $r0r1 = $r2, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 1)
  %4 = tail call <2 x i64> @llvm.kvx.madddt(<2 x i64> %0, i64 %1, i64 42)
  ret <2 x i64> %4
}

declare <2 x i64> @llvm.kvx.madddt(<2 x i64>, i64, i64)

define <2 x i64> @maddsudt_rr(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: maddsudt_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddsudt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x i64> @llvm.kvx.maddsudt(<2 x i64> %0, i64 %1, i64 %2)
  ret <2 x i64> %4
}

define <2 x i64> @maddsudt_ri(<2 x i64> %0, i64 %1, i64 %2) {
; CV1-LABEL: maddsudt_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    maddsudt $r0r1 = $r2, 42
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 0)
;
; CV2-LABEL: maddsudt_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    make $r3 = 42
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    maddsudt $r0r1 = $r2, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 1)
  %4 = tail call <2 x i64> @llvm.kvx.maddsudt(<2 x i64> %0, i64 %1, i64 42)
  ret <2 x i64> %4
}

declare <2 x i64> @llvm.kvx.maddsudt(<2 x i64>, i64, i64)

define <2 x i64> @maddudt_rr(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: maddudt_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    maddudt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x i64> @llvm.kvx.maddudt(<2 x i64> %0, i64 %1, i64 %2)
  ret <2 x i64> %4
}

define <2 x i64> @maddudt_ri(<2 x i64> %0, i64 %1, i64 %2) {
; CV1-LABEL: maddudt_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    maddudt $r0r1 = $r2, 42
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 0)
;
; CV2-LABEL: maddudt_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    make $r3 = 42
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    maddudt $r0r1 = $r2, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 1)
  %4 = tail call <2 x i64> @llvm.kvx.maddudt(<2 x i64> %0, i64 %1, i64 42)
  ret <2 x i64> %4
}

declare <2 x i64> @llvm.kvx.maddudt(<2 x i64>, i64, i64)

define <2 x i64> @madduzdt_rr(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: madduzdt_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    madduzdt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x i64> @llvm.kvx.madduzdt(<2 x i64> %0, i64 %1, i64 %2)
  ret <2 x i64> %4
}

define <2 x i64> @madduzdt_ri(<2 x i64> %0, i64 %1, i64 %2) {
; CV1-LABEL: madduzdt_ri:
; CV1:       # %bb.0:
; CV1-NEXT:    madduzdt $r0r1 = $r2, 42
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 0)
;
; CV2-LABEL: madduzdt_ri:
; CV2:       # %bb.0:
; CV2-NEXT:    make $r3 = 42
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    madduzdt $r0r1 = $r2, $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 1)
  %4 = tail call <2 x i64> @llvm.kvx.madduzdt(<2 x i64> %0, i64 %1, i64 42)
  ret <2 x i64> %4
}

declare <2 x i64> @llvm.kvx.madduzdt(<2 x i64>, i64, i64)

define <2 x i64> @msbfdt_rr(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: msbfdt_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfdt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x i64> @llvm.kvx.msbfdt(<2 x i64> %0, i64 %1, i64 %2)
  ret <2 x i64> %4
}

define <2 x i64> @msbfdt_ri(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: msbfdt_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r3 = 42
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    msbfdt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %4 = tail call <2 x i64> @llvm.kvx.msbfdt(<2 x i64> %0, i64 %1, i64 42)
  ret <2 x i64> %4
}

declare <2 x i64> @llvm.kvx.msbfdt(<2 x i64>, i64, i64)

define <2 x i64> @msbfsudt_rr(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: msbfsudt_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfsudt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x i64> @llvm.kvx.msbfsudt(<2 x i64> %0, i64 %1, i64 %2)
  ret <2 x i64> %4
}

define <2 x i64> @msbfsudt_ri(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: msbfsudt_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r3 = 42
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    msbfsudt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %4 = tail call <2 x i64> @llvm.kvx.msbfsudt(<2 x i64> %0, i64 %1, i64 42)
  ret <2 x i64> %4
}

declare <2 x i64> @llvm.kvx.msbfsudt(<2 x i64>, i64, i64)

define <2 x i64> @msbfudt_rr(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: msbfudt_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfudt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x i64> @llvm.kvx.msbfudt(<2 x i64> %0, i64 %1, i64 %2)
  ret <2 x i64> %4
}

define <2 x i64> @msbfudt_ri(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: msbfudt_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r3 = 42
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    msbfudt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %4 = tail call <2 x i64> @llvm.kvx.msbfudt(<2 x i64> %0, i64 %1, i64 42)
  ret <2 x i64> %4
}

declare <2 x i64> @llvm.kvx.msbfudt(<2 x i64>, i64, i64)

define <2 x i64> @msbfuzdt_rr(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: msbfuzdt_rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    msbfuzdt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x i64> @llvm.kvx.msbfuzdt(<2 x i64> %0, i64 %1, i64 %2)
  ret <2 x i64> %4
}

define <2 x i64> @msbfuzdt_ri(<2 x i64> %0, i64 %1, i64 %2) {
; CHECK-LABEL: msbfuzdt_ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    make $r3 = 42
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    msbfuzdt $r0r1 = $r2, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 1)
  %4 = tail call <2 x i64> @llvm.kvx.msbfuzdt(<2 x i64> %0, i64 %1, i64 42)
  ret <2 x i64> %4
}

declare <2 x i64> @llvm.kvx.msbfuzdt(<2 x i64>, i64, i64)

