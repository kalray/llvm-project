; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -mcpu=kv3-1 -o - %s | FileCheck %s --check-prefixes=ALL,CV1
; RUN: llc -O2 -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=ALL,CV2
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define double @ffmsd(double %0, double %1, double %2) {
; ALL-LABEL: ffmsd:
; ALL:       # %bb.0:
; ALL-NEXT:    ffmsd.rz $r2 = $r0, $r1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r0 = $r2
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 4)
  %4 = tail call double @llvm.kvx.ffms.f64(double %0, double %1, double %2, i32 3, i32 0)
  ret double %4
}

declare double @llvm.kvx.ffms.f64(double, double, double, i32, i32)

define <2 x double> @ffmsdp(<2 x double> %0, <2 x double> %1, <2 x double> %2) {
; ALL-LABEL: ffmsdp:
; ALL:       # %bb.0:
; ALL-NEXT:    ffmsd.rn $r5 = $r1, $r3
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ffmsd.rn $r4 = $r0, $r2
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    copyd $r0 = $r4
; ALL-NEXT:    copyd $r1 = $r5
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 5)
  %4 = tail call <2 x double> @llvm.kvx.ffms.v2f64(<2 x double> %0, <2 x double> %1, <2 x double> %2, i32 0, i32 0)
  ret <2 x double> %4
}

declare <2 x double> @llvm.kvx.ffms.v2f64(<2 x double>, <2 x double>, <2 x double>, i32, i32)

define <4 x double> @ffmsdq(<4 x double> %0, <4 x double> %1, <4 x double> %2) {
; ALL-LABEL: ffmsdq:
; ALL:       # %bb.0:
; ALL-NEXT:    ffmsd.rn $r9 = $r1, $r5
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    ffmsd.rn $r8 = $r0, $r4
; ALL-NEXT:    ;; # (end cycle 1)
; ALL-NEXT:    ffmsd.rn $r11 = $r3, $r7
; ALL-NEXT:    ;; # (end cycle 2)
; ALL-NEXT:    ffmsd.rn $r10 = $r2, $r6
; ALL-NEXT:    ;; # (end cycle 3)
; ALL-NEXT:    copyd $r0 = $r8
; ALL-NEXT:    copyd $r1 = $r9
; ALL-NEXT:    ;; # (end cycle 5)
; ALL-NEXT:    copyd $r2 = $r10
; ALL-NEXT:    copyd $r3 = $r11
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 7)
  %4 = shufflevector <4 x double> %0, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %5 = shufflevector <4 x double> %1, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x double> %2, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %7 = tail call <2 x double> @llvm.kvx.ffms.v2f64(<2 x double> %4, <2 x double> %5, <2 x double> %6, i32 0, i32 0)
  %8 = shufflevector <4 x double> %0, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %9 = shufflevector <4 x double> %1, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %10 = shufflevector <4 x double> %2, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <2 x double> @llvm.kvx.ffms.v2f64(<2 x double> %8, <2 x double> %9, <2 x double> %10, i32 0, i32 0)
  %12 = shufflevector <2 x double> %7, <2 x double> %11, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %12
}

define half @ffmsh(half %0, half %1, half %2) {
; ALL-LABEL: ffmsh:
; ALL:       # %bb.0:
; ALL-NEXT:    ffmshq.ru.s $r0 = $r1, $r2
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %4 = tail call half @llvm.kvx.ffms.f16(half %0, half %1, half %2, i32 1, i32 1)
  ret half %4
}

declare half @llvm.kvx.ffms.f16(half, half, half, i32, i32)

define <2 x half> @ffmshp(<2 x half> %0, <2 x half> %1, <2 x half> %2) {
; ALL-LABEL: ffmshp:
; ALL:       # %bb.0:
; ALL-NEXT:    ffmshq.rz.s $r0 = $r1, $r2
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x half> @llvm.kvx.ffms.v2f16(<2 x half> %0, <2 x half> %1, <2 x half> %2, i32 3, i32 1)
  ret <2 x half> %4
}

declare <2 x half> @llvm.kvx.ffms.v2f16(<2 x half>, <2 x half>, <2 x half>, i32, i32)

define <4 x half> @ffmshq(<4 x half> %0, <4 x half> %1, <4 x half> %2) {
; ALL-LABEL: ffmshq:
; ALL:       # %bb.0:
; ALL-NEXT:    ffmshq.ru.s $r0 = $r1, $r2
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %4 = tail call <4 x half> @llvm.kvx.ffms.v4f16(<4 x half> %0, <4 x half> %1, <4 x half> %2, i32 1, i32 1)
  ret <4 x half> %4
}

declare <4 x half> @llvm.kvx.ffms.v4f16(<4 x half>, <4 x half>, <4 x half>, i32, i32)

define float @ffmsw(float %0, float %1, float %2) {
; ALL-LABEL: ffmsw:
; ALL:       # %bb.0:
; ALL-NEXT:    ffmsw.rz $r2 = $r0, $r1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r0 = $r2
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 4)
  %4 = tail call float @llvm.kvx.ffms.f32(float %0, float %1, float %2, i32 3, i32 0)
  ret float %4
}

declare float @llvm.kvx.ffms.f32(float, float, float, i32, i32)

define <8 x float> @ffmswo(<8 x float> %0, <8 x float> %1, <8 x float> %2) {
; CV1-LABEL: ffmswo:
; CV1:       # %bb.0:
; CV1-NEXT:    ffmswp.rn $r9 = $r1, $r5
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    ffmswp.rn $r8 = $r0, $r4
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    ffmswp.rn $r11 = $r3, $r7
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    ffmswp.rn $r10 = $r2, $r6
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    copyd $r0 = $r8
; CV1-NEXT:    copyd $r1 = $r9
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    copyd $r2 = $r10
; CV1-NEXT:    copyd $r3 = $r11
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 7)
;
; CV2-LABEL: ffmswo:
; CV2:       # %bb.0:
; CV2-NEXT:    ffmswq.rn $r8r9 = $r0r1, $r4r5
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    ffmswq.rn $r10r11 = $r2r3, $r6r7
; CV2-NEXT:    ;; # (end cycle 1)
; CV2-NEXT:    copyd $r0 = $r8
; CV2-NEXT:    copyd $r1 = $r9
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    copyd $r2 = $r10
; CV2-NEXT:    copyd $r3 = $r11
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 5)
  %4 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6 = shufflevector <8 x float> %2, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7 = tail call <4 x float> @llvm.kvx.ffms.v4f32(<4 x float> %4, <4 x float> %5, <4 x float> %6, i32 0, i32 0)
  %8 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10 = shufflevector <8 x float> %2, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11 = tail call <4 x float> @llvm.kvx.ffms.v4f32(<4 x float> %8, <4 x float> %9, <4 x float> %10, i32 0, i32 0)
  %12 = shufflevector <4 x float> %7, <4 x float> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %12
}

declare <4 x float> @llvm.kvx.ffms.v4f32(<4 x float>, <4 x float>, <4 x float>, i32, i32)

define <2 x float> @ffmswp(<2 x float> %0, <2 x float> %1, <2 x float> %2) {
; ALL-LABEL: ffmswp:
; ALL:       # %bb.0:
; ALL-NEXT:    ffmswp.rn $r2 = $r0, $r1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    copyd $r0 = $r2
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 4)
  %4 = tail call <2 x float> @llvm.kvx.ffms.v2f32(<2 x float> %0, <2 x float> %1, <2 x float> %2, i32 0, i32 0)
  ret <2 x float> %4
}

declare <2 x float> @llvm.kvx.ffms.v2f32(<2 x float>, <2 x float>, <2 x float>, i32, i32)

define <4 x float> @ffmswq(<4 x float> %0, <4 x float> %1, <4 x float> %2) {
; CV1-LABEL: ffmswq:
; CV1:       # %bb.0:
; CV1-NEXT:    ffmswp.rn $r5 = $r1, $r3
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    ffmswp.rn $r4 = $r0, $r2
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 5)
;
; CV2-LABEL: ffmswq:
; CV2:       # %bb.0:
; CV2-NEXT:    ffmswq.rn $r4r5 = $r0r1, $r2r3
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 4)
  %4 = tail call <4 x float> @llvm.kvx.ffms.v4f32(<4 x float> %0, <4 x float> %1, <4 x float> %2, i32 0, i32 0)
  ret <4 x float> %4
}
