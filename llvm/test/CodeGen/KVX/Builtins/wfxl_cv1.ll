; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O3 -mcpu=kv3-1 -o - %s | FileCheck %s
; RUN: clang -march=kv3-1 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @wfxl_1(i64 %0) {
; CHECK-LABEL: wfxl_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $ps, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 1, i64 %0, i32 0)
  ret void
}

declare void @llvm.kvx.wfx(i32, i64, i32)

define void @wfxl_2(i64 %0) {
; CHECK-LABEL: wfxl_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $pcr, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 2, i64 %0, i32 0)
  ret void
}

define void @wfxl_4(i64 %0) {
; CHECK-LABEL: wfxl_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $cs, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 4, i64 %0, i32 0)
  ret void
}

define void @wfxl_5(i64 %0) {
; CHECK-LABEL: wfxl_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $csit, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 5, i64 %0, i32 0)
  ret void
}

define void @wfxl_10(i64 %0) {
; CHECK-LABEL: wfxl_10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $ipe, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 10, i64 %0, i32 0)
  ret void
}

define void @wfxl_11(i64 %0) {
; CHECK-LABEL: wfxl_11:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $men, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 11, i64 %0, i32 0)
  ret void
}

define void @wfxl_12(i64 %0) {
; CHECK-LABEL: wfxl_12:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $pmc, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 12, i64 %0, i32 0)
  ret void
}

define void @wfxl_18(i64 %0) {
; CHECK-LABEL: wfxl_18:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $tcr, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 18, i64 %0, i32 0)
  ret void
}

define void @wfxl_25(i64 %0) {
; CHECK-LABEL: wfxl_25:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $ile, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 25, i64 %0, i32 0)
  ret void
}

define void @wfxl_26(i64 %0) {
; CHECK-LABEL: wfxl_26:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $ill, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 26, i64 %0, i32 0)
  ret void
}

define void @wfxl_27(i64 %0) {
; CHECK-LABEL: wfxl_27:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $ilr, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 27, i64 %0, i32 0)
  ret void
}

define void @wfxl_28(i64 %0) {
; CHECK-LABEL: wfxl_28:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $mmc, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 28, i64 %0, i32 0)
  ret void
}

define void @wfxl_29(i64 %0) {
; CHECK-LABEL: wfxl_29:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $tel, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 29, i64 %0, i32 0)
  ret void
}

define void @wfxl_30(i64 %0) {
; CHECK-LABEL: wfxl_30:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $teh, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 30, i64 %0, i32 0)
  ret void
}

define void @wfxl_40(i64 %0) {
; CHECK-LABEL: wfxl_40:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $s40, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 40, i64 %0, i32 0)
  ret void
}

define void @wfxl_45(i64 %0) {
; CHECK-LABEL: wfxl_45:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $mes, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 45, i64 %0, i32 0)
  ret void
}

define void @wfxl_46(i64 %0) {
; CHECK-LABEL: wfxl_46:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $ws, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 46, i64 %0, i32 0)
  ret void
}

define void @wfxl_84(i64 %0) {
; CHECK-LABEL: wfxl_84:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $es_pl0, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 84, i64 %0, i32 0)
  ret void
}

define void @wfxl_85(i64 %0) {
; CHECK-LABEL: wfxl_85:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $es_pl1, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 85, i64 %0, i32 0)
  ret void
}

define void @wfxl_86(i64 %0) {
; CHECK-LABEL: wfxl_86:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $es_pl2, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 86, i64 %0, i32 0)
  ret void
}

define void @wfxl_87(i64 %0) {
; CHECK-LABEL: wfxl_87:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $es_pl3, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 87, i64 %0, i32 0)
  ret void
}

define void @wfxl_96(i64 %0) {
; CHECK-LABEL: wfxl_96:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $syow, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 96, i64 %0, i32 0)
  ret void
}

define void @wfxl_97(i64 %0) {
; CHECK-LABEL: wfxl_97:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $htow, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 97, i64 %0, i32 0)
  ret void
}

define void @wfxl_98(i64 %0) {
; CHECK-LABEL: wfxl_98:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $itow, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 98, i64 %0, i32 0)
  ret void
}

define void @wfxl_99(i64 %0) {
; CHECK-LABEL: wfxl_99:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $dow, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 99, i64 %0, i32 0)
  ret void
}

define void @wfxl_100(i64 %0) {
; CHECK-LABEL: wfxl_100:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $mow, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 100, i64 %0, i32 0)
  ret void
}

define void @wfxl_101(i64 %0) {
; CHECK-LABEL: wfxl_101:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $psow, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 101, i64 %0, i32 0)
  ret void
}

define void @wfxl_132(i64 %0) {
; CHECK-LABEL: wfxl_132:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $sps, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 132, i64 %0, i32 0)
  ret void
}

define void @wfxl_148(i64 %0) {
; CHECK-LABEL: wfxl_148:
; CHECK:       # %bb.0:
; CHECK-NEXT:    wfxl $es, $r0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  tail call void @llvm.kvx.wfx(i32 148, i64 %0, i32 0)
  ret void
}

