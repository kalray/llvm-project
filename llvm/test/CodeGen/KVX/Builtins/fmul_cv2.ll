; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefix=CV2
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <8 x half> @fmulho(<8 x half> %0, <8 x half> %1) {
; CV2-LABEL: fmulho:
; CV2:       # %bb.0:
; CV2-NEXT:    fmulho.ru.s $r0r1 = $r0r1, $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %3 = tail call <8 x half> @llvm.kvx.fmul.v8f16(<8 x half> %0, <8 x half> %1, i32 1, i32 1)
  ret <8 x half> %3
}

declare <8 x half> @llvm.kvx.fmul.v8f16(<8 x half>, <8 x half>, i32, i32)

define <16 x half> @fmulhx(<16 x half> %0, <16 x half> %1) {
; CV2-LABEL: fmulhx:
; CV2:       # %bb.0:
; CV2-NEXT:    fmulho.ru.s $r0r1 = $r0r1, $r4r5
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    fmulho.ru.s $r2r3 = $r2r3, $r6r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <16 x half> %0, <16 x half> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x half> %1, <16 x half> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <8 x half> @llvm.kvx.fmul.v8f16(<8 x half> %3, <8 x half> %4, i32 1, i32 1)
  %6 = shufflevector <16 x half> %0, <16 x half> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7 = shufflevector <16 x half> %1, <16 x half> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8 = tail call <8 x half> @llvm.kvx.fmul.v8f16(<8 x half> %6, <8 x half> %7, i32 1, i32 1)
  %9 = shufflevector <8 x half> %5, <8 x half> %8, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x half> %9
}

define <8 x float> @fmulwo(<8 x float> %0, <8 x float> %1) {
; CV2-LABEL: fmulwo:
; CV2:       # %bb.0:
; CV2-NEXT:    fmulwq.rn $r0r1 = $r0r1, $r4r5
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    fmulwq.rn $r2r3 = $r2r3, $r6r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = tail call <4 x float> @llvm.kvx.fmul.v4f32(<4 x float> %3, <4 x float> %4, i32 0, i32 0)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8 = tail call <4 x float> @llvm.kvx.fmul.v4f32(<4 x float> %6, <4 x float> %7, i32 0, i32 0)
  %9 = shufflevector <4 x float> %5, <4 x float> %8, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %9
}

declare <4 x float> @llvm.kvx.fmul.v4f32(<4 x float>, <4 x float>, i32, i32)

define <4 x float> @fmulwq(<4 x float> %0, <4 x float> %1) {
; CV2-LABEL: fmulwq:
; CV2:       # %bb.0:
; CV2-NEXT:    fmulwq.rn $r0r1 = $r0r1, $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 0)
  %3 = tail call <4 x float> @llvm.kvx.fmul.v4f32(<4 x float> %0, <4 x float> %1, i32 0, i32 0)
  ret <4 x float> %3
}
