; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV1
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV2
; RUN: clang -march=kv3-1 -O2 -c -o /dev/null %s
; RUN: clang -march=kv3-2 -O2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define float @fabsw(float %0) {
; CHECK-LABEL: fabsw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabsw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call float @llvm.fabs.f32(float %0)
  ret float %2
}

declare float @llvm.fabs.f32(float)

define double @fabsd(double %0) {
; CHECK-LABEL: fabsd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabsd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call double @llvm.fabs.f64(double %0)
  ret double %2
}

declare double @llvm.fabs.f64(double)

define half @fabsh(half %0) {
; CHECK-LABEL: fabsh:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call half @llvm.fabs.f16(half %0)
  ret half %2
}

declare half @llvm.fabs.f16(half)

define <8 x half> @fabsho(<8 x half> %0) {
; CHECK-LABEL: fabsho:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabshq $r0 = $r0
; CHECK-NEXT:    fabshq $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x half> @llvm.fabs.v4f16(<4 x half> %2)
  %4 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x half> @llvm.fabs.v4f16(<4 x half> %4)
  %6 = shufflevector <4 x half> %3, <4 x half> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x half> %6
}

declare <4 x half> @llvm.fabs.v4f16(<4 x half>)

define <2 x half> @fabshp(<2 x half> %0) {
; CHECK-LABEL: fabshp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x half> @llvm.fabs.v2f16(<2 x half> %0)
  ret <2 x half> %2
}

declare <2 x half> @llvm.fabs.v2f16(<2 x half>)

define <4 x half> @fabshq(<4 x half> %0) {
; CHECK-LABEL: fabshq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabshq $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <4 x half> @llvm.fabs.v4f16(<4 x half> %0)
  ret <4 x half> %2
}

define <16 x half> @fabshx(<16 x half> %0) {
; CV1-LABEL: fabshx:
; CV1:       # %bb.0:
; CV1-NEXT:    fabshq $r0 = $r0
; CV1-NEXT:    fabshq $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    fabshq $r2 = $r2
; CV1-NEXT:    fabshq $r3 = $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fabshx:
; CV2:       # %bb.0:
; CV2-NEXT:    fabshq $r0 = $r0
; CV2-NEXT:    fabshq $r1 = $r1
; CV2-NEXT:    fabshq $r2 = $r2
; CV2-NEXT:    fabshq $r3 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x half> @llvm.fabs.v4f16(<4 x half> %2)
  %4 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x half> @llvm.fabs.v4f16(<4 x half> %4)
  %6 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7 = tail call <4 x half> @llvm.fabs.v4f16(<4 x half> %6)
  %8 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9 = tail call <4 x half> @llvm.fabs.v4f16(<4 x half> %8)
  %10 = shufflevector <4 x half> %3, <4 x half> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11 = shufflevector <4 x half> %7, <4 x half> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12 = shufflevector <8 x half> %10, <8 x half> %11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x half> %12
}

define <2 x float> @fabswp(<2 x float> %0) {
; CHECK-LABEL: fabswp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %0)
  ret <2 x float> %2
}

declare <2 x float> @llvm.fabs.v2f32(<2 x float>)

define <4 x float> @fabswq(<4 x float> %0) {
; CHECK-LABEL: fabswq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabswp $r0 = $r0
; CHECK-NEXT:    fabswp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %2)
  %4 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %4)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}

define <8 x float> @fabswo(<8 x float> %0) {
; CV1-LABEL: fabswo:
; CV1:       # %bb.0:
; CV1-NEXT:    fabswp $r0 = $r0
; CV1-NEXT:    fabswp $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    fabswp $r2 = $r2
; CV1-NEXT:    fabswp $r3 = $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fabswo:
; CV2:       # %bb.0:
; CV2-NEXT:    fabswp $r0 = $r0
; CV2-NEXT:    fabswp $r1 = $r1
; CV2-NEXT:    fabswp $r2 = $r2
; CV2-NEXT:    fabswp $r3 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %2)
  %4 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %4)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %6)
  %8 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %8)
  %10 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x float> %7, <2 x float> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x float> %10, <4 x float> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %12
}

define <2 x double> @fabsdp(<2 x double> %0) {
; CHECK-LABEL: fabsdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fabsd $r0 = $r0
; CHECK-NEXT:    fabsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = extractelement <2 x double> %0, i64 0
  %3 = tail call double @llvm.fabs.f64(double %2)
  %4 = extractelement <2 x double> %0, i64 1
  %5 = tail call double @llvm.fabs.f64(double %4)
  %6 = insertelement <2 x double> undef, double %3, i32 0
  %7 = insertelement <2 x double> %6, double %5, i32 1
  ret <2 x double> %7
}

define <4 x double> @fabsdq(<4 x double> %0) {
; CV1-LABEL: fabsdq:
; CV1:       # %bb.0:
; CV1-NEXT:    fabsd $r0 = $r0
; CV1-NEXT:    fabsd $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    fabsd $r2 = $r2
; CV1-NEXT:    fabsd $r3 = $r3
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fabsdq:
; CV2:       # %bb.0:
; CV2-NEXT:    fabsd $r0 = $r0
; CV2-NEXT:    fabsd $r1 = $r1
; CV2-NEXT:    fabsd $r2 = $r2
; CV2-NEXT:    fabsd $r3 = $r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = extractelement <4 x double> %0, i64 0
  %3 = tail call double @llvm.fabs.f64(double %2)
  %4 = extractelement <4 x double> %0, i64 1
  %5 = tail call double @llvm.fabs.f64(double %4)
  %6 = extractelement <4 x double> %0, i64 2
  %7 = tail call double @llvm.fabs.f64(double %6)
  %8 = extractelement <4 x double> %0, i64 3
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = insertelement <4 x double> undef, double %3, i32 0
  %11 = insertelement <4 x double> %10, double %5, i32 1
  %12 = insertelement <4 x double> %11, double %7, i32 2
  %13 = insertelement <4 x double> %12, double %9, i32 3
  ret <4 x double> %13
}
