; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=V1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=V2
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define float @ffdmaw(<2 x float> %0, <2 x float> %1) {
; V1-LABEL: ffdmaw:
; V1:       # %bb.0:
; V1-NEXT:    fdot2w $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 0)
;
; V2-LABEL: ffdmaw:
; V2:       # %bb.0:
; V2-NEXT:    ffdmaw $r0 = $r0, $r1
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = tail call float @llvm.kvx.ffdma.f32(<2 x float> %0, <2 x float> %1, i32 7, i32 0)
  ret float %3
}

declare float @llvm.kvx.ffdma.f32(<2 x float>, <2 x float>, i32, i32)

define <2 x float> @ffdmawp(<4 x float> %0, <4 x float> %1, <2 x float> %2) {
; V1-LABEL: ffdmawp:
; V1:       # %bb.0:
; V1-NEXT:    faddwq $r0r1 = $r0r1, $r2r3
; V1-NEXT:    ;; # (end cycle 0)
; V1-NEXT:    faddwp $r0 = $r0, $r1
; V1-NEXT:    ret
; V1-NEXT:    ;; # (end cycle 4)
;
; V2-LABEL: ffdmawp:
; V2:       # %bb.0:
; V2-NEXT:    ffdmawp $r0 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %4 = tail call <2 x float> @llvm.kvx.ffdma.v2f32(<4 x float> %0, <4 x float> %1, i32 7, i32 0)
  ret <2 x float> %4
}

declare <2 x float> @llvm.kvx.ffdma.v2f32(<4 x float>, <4 x float>, i32, i32)

