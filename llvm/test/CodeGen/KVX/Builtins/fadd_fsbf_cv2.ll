; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=V2
; RUN: llc -mcpu=kv4-1 -O2 -o - %s | FileCheck %s --check-prefix=V2
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <8 x half> @faddho(<8 x half> %0, <8 x half> %1) {
; V2-LABEL: faddho:
; V2:       # %bb.0:
; V2-NEXT:    faddho.s $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = tail call <8 x half> @llvm.kvx.fadd.v8f16(<8 x half> %0, <8 x half> %1, i32 7, i32 1)
  ret <8 x half> %3
}

declare <8 x half> @llvm.kvx.fadd.v8f16(<8 x half>, <8 x half>, i32, i32)

define <16 x half> @faddhx(<16 x half> %0, <16 x half> %1) {
; V2-LABEL: faddhx:
; V2:       # %bb.0:
; V2-NEXT:    faddho.s $r0r1 = $r0r1, $r4r5
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    faddho.s $r2r3 = $r2r3, $r6r7
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <16 x half> %0, <16 x half> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x half> %1, <16 x half> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <8 x half> @llvm.kvx.fadd.v8f16(<8 x half> %3, <8 x half> %4, i32 7, i32 1)
  %6 = shufflevector <16 x half> %0, <16 x half> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7 = shufflevector <16 x half> %1, <16 x half> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8 = tail call <8 x half> @llvm.kvx.fadd.v8f16(<8 x half> %6, <8 x half> %7, i32 7, i32 1)
  %9 = shufflevector <8 x half> %5, <8 x half> %8, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x half> %9
}

define <8 x half> @fsbfho(<8 x half> %0, <8 x half> %1) {
; V2-LABEL: fsbfho:
; V2:       # %bb.0:
; V2-NEXT:    fsbfho.s $r0r1 = $r0r1, $r2r3
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 0)
  %3 = tail call <8 x half> @llvm.kvx.fsbf.v8f16(<8 x half> %0, <8 x half> %1, i32 7, i32 1)
  ret <8 x half> %3
}

declare <8 x half> @llvm.kvx.fsbf.v8f16(<8 x half>, <8 x half>, i32, i32)

define <16 x half> @fsbfhx(<16 x half> %0, <16 x half> %1) {
; V2-LABEL: fsbfhx:
; V2:       # %bb.0:
; V2-NEXT:    fsbfho.s $r0r1 = $r0r1, $r4r5
; V2-NEXT:    ;; # (end cycle 0)
; V2-NEXT:    fsbfho.s $r2r3 = $r2r3, $r6r7
; V2-NEXT:    ret
; V2-NEXT:    ;; # (end cycle 1)
  %3 = shufflevector <16 x half> %0, <16 x half> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x half> %1, <16 x half> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <8 x half> @llvm.kvx.fsbf.v8f16(<8 x half> %3, <8 x half> %4, i32 7, i32 1)
  %6 = shufflevector <16 x half> %0, <16 x half> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7 = shufflevector <16 x half> %1, <16 x half> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8 = tail call <8 x half> @llvm.kvx.fsbf.v8f16(<8 x half> %6, <8 x half> %7, i32 7, i32 1)
  %9 = shufflevector <8 x half> %5, <8 x half> %8, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x half> %9
}

