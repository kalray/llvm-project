; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -mcpu=kv3-1 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: llc -O2 -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i32 @fixedw(float %0) {
; ALL-LABEL: fixedw:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedw.rn $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.fixedw(float %0, i32 3, i32 0, i32 0)
  ret i32 %2
}

declare i32 @llvm.kvx.fixedw(float, i32, i32, i32)

define i64 @fixedd(double %0) {
; ALL-LABEL: fixedd:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedd.rn $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.fixedd(double %0, i32 3, i32 0, i32 0)
  ret i64 %2
}

declare i64 @llvm.kvx.fixedd(double, i32, i32, i32)

define i32 @fixedw_s(float %0) {
; ALL-LABEL: fixedw_s:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedw.rn.s $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.fixedw(float %0, i32 3, i32 0, i32 1)
  ret i32 %2
}

define i64 @fixedd_s(double %0) {
; ALL-LABEL: fixedd_s:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedd.rn.s $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.fixedd(double %0, i32 3, i32 0, i32 1)
  ret i64 %2
}

define i32 @fixedw_s_only(float %0) {
; ALL-LABEL: fixedw_s_only:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedw.s $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.fixedw(float %0, i32 3, i32 7, i32 1)
  ret i32 %2
}

define i64 @fixedd_s_only(double %0) {
; ALL-LABEL: fixedd_s_only:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedd.s $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.fixedd(double %0, i32 3, i32 7, i32 1)
  ret i64 %2
}

define i32 @fixeduw(float %0) {
; ALL-LABEL: fixeduw:
; ALL:       # %bb.0:
; ALL-NEXT:    fixeduw.rz $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call i32 @llvm.kvx.fixeduw(float %0, i32 3, i32 3, i32 0)
  ret i32 %2
}

declare i32 @llvm.kvx.fixeduw(float, i32, i32, i32)

define i64 @fixedud(double %0) {
; ALL-LABEL: fixedud:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedud.rz $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call i64 @llvm.kvx.fixedud(double %0, i32 3, i32 3, i32 0)
  ret i64 %2
}

declare i64 @llvm.kvx.fixedud(double, i32, i32, i32)

define <2 x double> @fixeddp(<2 x i64> %0) {
; ALL-LABEL: fixeddp:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedd.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedd.rn $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = bitcast <2 x i64> %0 to <2 x double>
  %3 = extractelement <2 x double> %2, i64 0
  %4 = tail call i64 @llvm.kvx.fixedd(double %3, i32 3, i32 0, i32 0)
  %5 = extractelement <2 x double> %2, i64 1
  %6 = tail call i64 @llvm.kvx.fixedd(double %5, i32 3, i32 0, i32 0)
  %7 = insertelement <2 x i64> undef, i64 %4, i32 0
  %8 = insertelement <2 x i64> %7, i64 %6, i32 1
  %9 = bitcast <2 x i64> %8 to <2 x double>
  ret <2 x double> %9
}

define <4 x double> @fixeddq(<4 x i64> %0) {
; ALL-LABEL: fixeddq:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedd.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedd.rn $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedd.rn $r2 = $r2, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedd.rn $r3 = $r3, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = bitcast <4 x i64> %0 to <4 x double>
  %3 = extractelement <4 x double> %2, i64 0
  %4 = tail call i64 @llvm.kvx.fixedd(double %3, i32 3, i32 0, i32 0)
  %5 = extractelement <4 x double> %2, i64 1
  %6 = tail call i64 @llvm.kvx.fixedd(double %5, i32 3, i32 0, i32 0)
  %7 = extractelement <4 x double> %2, i64 2
  %8 = tail call i64 @llvm.kvx.fixedd(double %7, i32 3, i32 0, i32 0)
  %9 = extractelement <4 x double> %2, i64 3
  %10 = tail call i64 @llvm.kvx.fixedd(double %9, i32 3, i32 0, i32 0)
  %11 = insertelement <4 x i64> undef, i64 %4, i32 0
  %12 = insertelement <4 x i64> %11, i64 %6, i32 1
  %13 = insertelement <4 x i64> %12, i64 %8, i32 2
  %14 = insertelement <4 x i64> %13, i64 %10, i32 3
  %15 = bitcast <4 x i64> %14 to <4 x double>
  ret <4 x double> %15
}

define <2 x double> @fixedudp(<2 x i64> %0) {
; ALL-LABEL: fixedudp:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedud.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedud.rn $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = bitcast <2 x i64> %0 to <2 x double>
  %3 = extractelement <2 x double> %2, i64 0
  %4 = tail call i64 @llvm.kvx.fixedud(double %3, i32 3, i32 0, i32 0)
  %5 = extractelement <2 x double> %2, i64 1
  %6 = tail call i64 @llvm.kvx.fixedud(double %5, i32 3, i32 0, i32 0)
  %7 = insertelement <2 x i64> undef, i64 %4, i32 0
  %8 = insertelement <2 x i64> %7, i64 %6, i32 1
  %9 = bitcast <2 x i64> %8 to <2 x double>
  ret <2 x double> %9
}

define <4 x double> @fixedudq(<4 x i64> %0) {
; ALL-LABEL: fixedudq:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedud.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedud.rn $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedud.rn $r2 = $r2, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedud.rn $r3 = $r3, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = bitcast <4 x i64> %0 to <4 x double>
  %3 = extractelement <4 x double> %2, i64 0
  %4 = tail call i64 @llvm.kvx.fixedud(double %3, i32 3, i32 0, i32 0)
  %5 = extractelement <4 x double> %2, i64 1
  %6 = tail call i64 @llvm.kvx.fixedud(double %5, i32 3, i32 0, i32 0)
  %7 = extractelement <4 x double> %2, i64 2
  %8 = tail call i64 @llvm.kvx.fixedud(double %7, i32 3, i32 0, i32 0)
  %9 = extractelement <4 x double> %2, i64 3
  %10 = tail call i64 @llvm.kvx.fixedud(double %9, i32 3, i32 0, i32 0)
  %11 = insertelement <4 x i64> undef, i64 %4, i32 0
  %12 = insertelement <4 x i64> %11, i64 %6, i32 1
  %13 = insertelement <4 x i64> %12, i64 %8, i32 2
  %14 = insertelement <4 x i64> %13, i64 %10, i32 3
  %15 = bitcast <4 x i64> %14 to <4 x double>
  ret <4 x double> %15
}

define <8 x i32> @fixeduwo(<8 x float> %0) {
; ALL-LABEL: fixeduwo:
; ALL:       # %bb.0:
; ALL-NEXT:    fixeduwp.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixeduwp.rn $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixeduwp.rn $r2 = $r2, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixeduwp.rn $r3 = $r3, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.fixeduwp(<2 x float> %2, i32 3, i32 0, i32 0)
  %4 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.fixeduwp(<2 x float> %4, i32 3, i32 0, i32 0)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.fixeduwp(<2 x float> %6, i32 3, i32 0, i32 0)
  %8 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.fixeduwp(<2 x float> %8, i32 3, i32 0, i32 0)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

declare <2 x i32> @llvm.kvx.fixeduwp(<2 x float>, i32, i32, i32)

define <2 x i32> @fixeduwp(<2 x float> %0) {
; ALL-LABEL: fixeduwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fixeduwp.rn $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.fixeduwp(<2 x float> %0, i32 3, i32 0, i32 0)
  ret <2 x i32> %2
}

define <4 x i32> @fixeduwq(<4 x float> %0) {
; ALL-LABEL: fixeduwq:
; ALL:       # %bb.0:
; ALL-NEXT:    fixeduwp.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixeduwp.rn $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.fixeduwp(<2 x float> %2, i32 3, i32 0, i32 0)
  %4 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.fixeduwp(<2 x float> %4, i32 3, i32 0, i32 0)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @fixedwo(<8 x float> %0) {
; ALL-LABEL: fixedwo:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedwp.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedwp.rn $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedwp.rn $r2 = $r2, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedwp.rn $r3 = $r3, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.fixedwp(<2 x float> %2, i32 3, i32 0, i32 0)
  %4 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.fixedwp(<2 x float> %4, i32 3, i32 0, i32 0)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x i32> @llvm.kvx.fixedwp(<2 x float> %6, i32 3, i32 0, i32 0)
  %8 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x i32> @llvm.kvx.fixedwp(<2 x float> %8, i32 3, i32 0, i32 0)
  %10 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x i32> %7, <2 x i32> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %12
}

declare <2 x i32> @llvm.kvx.fixedwp(<2 x float>, i32, i32, i32)

define <2 x i32> @fixedwp(<2 x float> %0) {
; ALL-LABEL: fixedwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedwp.rn $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call <2 x i32> @llvm.kvx.fixedwp(<2 x float> %0, i32 3, i32 0, i32 0)
  ret <2 x i32> %2
}

define <4 x i32> @fixedwq(<4 x float> %0) {
; ALL-LABEL: fixedwq:
; ALL:       # %bb.0:
; ALL-NEXT:    fixedwp.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    fixedwp.rn $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.fixedwp(<2 x float> %2, i32 3, i32 0, i32 0)
  %4 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.fixedwp(<2 x float> %4, i32 3, i32 0, i32 0)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

