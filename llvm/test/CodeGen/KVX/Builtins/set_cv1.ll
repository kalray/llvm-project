; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O3 -mcpu=kv3-1 -o - %s | FileCheck %s
; RUN: clang -march=kv3-1 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @set_1(i64 %0) {
; CHECK-LABEL: set_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $ps = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !2, i64 %3)
  ret void
}

declare void @llvm.write_register.i64(metadata, i64)

define void @set_2(i64 %0) {
; CHECK-LABEL: set_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $pcr = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !3, i64 %3)
  ret void
}

define void @set_3(i64 %0) {
; CHECK-LABEL: set_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    get $r16 = $ra
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r16
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    sd 16[$r12] = $r0
; CHECK-NEXT:    set $ra = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    ld $r16 = 24[$r12]
; CHECK-NEXT:    ;; # (end cycle 3)
; CHECK-NEXT:    set $ra = $r16
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 8)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !4, i64 %3)
  ret void
}

define void @set_4(i64 %0) {
; CHECK-LABEL: set_4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $cs = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !5, i64 %3)
  ret void
}

define void @set_5(i64 %0) {
; CHECK-LABEL: set_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $csit = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !6, i64 %3)
  ret void
}

define void @set_6(i64 %0) {
; CHECK-LABEL: set_6:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $aespc = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !7, i64 %3)
  ret void
}

define void @set_7(i64 %0) {
; CHECK-LABEL: set_7:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ls = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !8, i64 %3)
  ret void
}

define void @set_8(i64 %0) {
; CHECK-LABEL: set_8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $le = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !9, i64 %3)
  ret void
}

define void @set_9(i64 %0) {
; CHECK-LABEL: set_9:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $lc = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !10, i64 %3)
  ret void
}

define void @set_10(i64 %0) {
; CHECK-LABEL: set_10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ipe = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !11, i64 %3)
  ret void
}

define void @set_11(i64 %0) {
; CHECK-LABEL: set_11:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $men = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !12, i64 %3)
  ret void
}

define void @set_12(i64 %0) {
; CHECK-LABEL: set_12:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $pmc = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !13, i64 %3)
  ret void
}

define void @set_13(i64 %0) {
; CHECK-LABEL: set_13:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $pm0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !14, i64 %3)
  ret void
}

define void @set_14(i64 %0) {
; CHECK-LABEL: set_14:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $pm1 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !15, i64 %3)
  ret void
}

define void @set_15(i64 %0) {
; CHECK-LABEL: set_15:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $pm2 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !16, i64 %3)
  ret void
}

define void @set_16(i64 %0) {
; CHECK-LABEL: set_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $pm3 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !17, i64 %3)
  ret void
}

define void @set_17(i64 %0) {
; CHECK-LABEL: set_17:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $pmsa = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !18, i64 %3)
  ret void
}

define void @set_18(i64 %0) {
; CHECK-LABEL: set_18:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $tcr = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !19, i64 %3)
  ret void
}

define void @set_19(i64 %0) {
; CHECK-LABEL: set_19:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $t0v = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !20, i64 %3)
  ret void
}

define void @set_20(i64 %0) {
; CHECK-LABEL: set_20:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $t1v = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !21, i64 %3)
  ret void
}

define void @set_21(i64 %0) {
; CHECK-LABEL: set_21:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $t0r = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !22, i64 %3)
  ret void
}

define void @set_22(i64 %0) {
; CHECK-LABEL: set_22:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $t1r = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !23, i64 %3)
  ret void
}

define void @set_23(i64 %0) {
; CHECK-LABEL: set_23:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $wdv = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !24, i64 %3)
  ret void
}

define void @set_24(i64 %0) {
; CHECK-LABEL: set_24:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $wdr = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !25, i64 %3)
  ret void
}

define void @set_25(i64 %0) {
; CHECK-LABEL: set_25:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ile = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !26, i64 %3)
  ret void
}

define void @set_26(i64 %0) {
; CHECK-LABEL: set_26:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ill = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !27, i64 %3)
  ret void
}

define void @set_27(i64 %0) {
; CHECK-LABEL: set_27:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ilr = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !28, i64 %3)
  ret void
}

define void @set_28(i64 %0) {
; CHECK-LABEL: set_28:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $mmc = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !29, i64 %3)
  ret void
}

define void @set_29(i64 %0) {
; CHECK-LABEL: set_29:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $tel = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !30, i64 %3)
  ret void
}

define void @set_30(i64 %0) {
; CHECK-LABEL: set_30:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $teh = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !31, i64 %3)
  ret void
}

define void @set_40(i64 %0) {
; CHECK-LABEL: set_40:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $s40 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !32, i64 %3)
  ret void
}

define void @set_41(i64 %0) {
; CHECK-LABEL: set_41:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $dba0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !33, i64 %3)
  ret void
}

define void @set_42(i64 %0) {
; CHECK-LABEL: set_42:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $dba1 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !34, i64 %3)
  ret void
}

define void @set_43(i64 %0) {
; CHECK-LABEL: set_43:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $dwa0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !35, i64 %3)
  ret void
}

define void @set_44(i64 %0) {
; CHECK-LABEL: set_44:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $dwa1 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !36, i64 %3)
  ret void
}

define void @set_45(i64 %0) {
; CHECK-LABEL: set_45:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $mes = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !37, i64 %3)
  ret void
}

define void @set_46(i64 %0) {
; CHECK-LABEL: set_46:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ws = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !38, i64 %3)
  ret void
}

define void @set_64(i64 %0) {
; CHECK-LABEL: set_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $spc_pl0 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !39, i64 %3)
  ret void
}

define void @set_65(i64 %0) {
; CHECK-LABEL: set_65:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $spc_pl1 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !40, i64 %3)
  ret void
}

define void @set_66(i64 %0) {
; CHECK-LABEL: set_66:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $spc_pl2 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !41, i64 %3)
  ret void
}

define void @set_67(i64 %0) {
; CHECK-LABEL: set_67:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $spc_pl3 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !42, i64 %3)
  ret void
}

define void @set_72(i64 %0) {
; CHECK-LABEL: set_72:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ea_pl0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !43, i64 %3)
  ret void
}

define void @set_73(i64 %0) {
; CHECK-LABEL: set_73:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ea_pl1 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !44, i64 %3)
  ret void
}

define void @set_74(i64 %0) {
; CHECK-LABEL: set_74:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ea_pl2 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !45, i64 %3)
  ret void
}

define void @set_75(i64 %0) {
; CHECK-LABEL: set_75:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ea_pl3 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !46, i64 %3)
  ret void
}

define void @set_76(i64 %0) {
; CHECK-LABEL: set_76:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ev_pl0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !47, i64 %3)
  ret void
}

define void @set_77(i64 %0) {
; CHECK-LABEL: set_77:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ev_pl1 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !48, i64 %3)
  ret void
}

define void @set_78(i64 %0) {
; CHECK-LABEL: set_78:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ev_pl2 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !49, i64 %3)
  ret void
}

define void @set_79(i64 %0) {
; CHECK-LABEL: set_79:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ev_pl3 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !50, i64 %3)
  ret void
}

define void @set_80(i64 %0) {
; CHECK-LABEL: set_80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $sr_pl0 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !51, i64 %3)
  ret void
}

define void @set_81(i64 %0) {
; CHECK-LABEL: set_81:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $sr_pl1 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !52, i64 %3)
  ret void
}

define void @set_82(i64 %0) {
; CHECK-LABEL: set_82:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $sr_pl2 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !53, i64 %3)
  ret void
}

define void @set_83(i64 %0) {
; CHECK-LABEL: set_83:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    set $sr_pl3 = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !54, i64 %3)
  ret void
}

define void @set_84(i64 %0) {
; CHECK-LABEL: set_84:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $es_pl0 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !55, i64 %3)
  ret void
}

define void @set_85(i64 %0) {
; CHECK-LABEL: set_85:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $es_pl1 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !56, i64 %3)
  ret void
}

define void @set_86(i64 %0) {
; CHECK-LABEL: set_86:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $es_pl2 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !57, i64 %3)
  ret void
}

define void @set_87(i64 %0) {
; CHECK-LABEL: set_87:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $es_pl3 = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !58, i64 %3)
  ret void
}

define void @set_96(i64 %0) {
; CHECK-LABEL: set_96:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $syow = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !59, i64 %3)
  ret void
}

define void @set_97(i64 %0) {
; CHECK-LABEL: set_97:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $htow = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !60, i64 %3)
  ret void
}

define void @set_98(i64 %0) {
; CHECK-LABEL: set_98:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $itow = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !61, i64 %3)
  ret void
}

define void @set_99(i64 %0) {
; CHECK-LABEL: set_99:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $dow = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !62, i64 %3)
  ret void
}

define void @set_100(i64 %0) {
; CHECK-LABEL: set_100:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $mow = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !63, i64 %3)
  ret void
}

define void @set_101(i64 %0) {
; CHECK-LABEL: set_101:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $psow = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !64, i64 %3)
  ret void
}

define void @set_128(i64 %0) {
; CHECK-LABEL: set_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $spc = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !65, i64 %3)
  ret void
}

define void @set_132(i64 %0) {
; CHECK-LABEL: set_132:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    set $sps = $r0
; CHECK-NEXT:    ;; # (end cycle 2)
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;; # (end cycle 3)
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !66, i64 %3)
  ret void
}

define void @set_136(i64 %0) {
; CHECK-LABEL: set_136:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ea = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !67, i64 %3)
  ret void
}

define void @set_140(i64 %0) {
; CHECK-LABEL: set_140:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $ev = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !68, i64 %3)
  ret void
}

define void @set_144(i64 %0) {
; CHECK-LABEL: set_144:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $sr = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !69, i64 %3)
  ret void
}

define void @set_148(i64 %0) {
; CHECK-LABEL: set_148:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addd $r12 = $r12, -32
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    sd 24[$r12] = $r0
; CHECK-NEXT:    set $es = $r0
; CHECK-NEXT:    addd $r12 = $r12, 32
; CHECK-NEXT:    ;; # (end cycle 1)
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  call void @llvm.write_register.i64(metadata !70, i64 %3)
  ret void
}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!""}
!2 = !{!"$ps"}
!3 = !{!"$pcr"}
!4 = !{!"$ra"}
!5 = !{!"$cs"}
!6 = !{!"$csit"}
!7 = !{!"$aespc"}
!8 = !{!"$ls"}
!9 = !{!"$le"}
!10 = !{!"$lc"}
!11 = !{!"$ipe"}
!12 = !{!"$men"}
!13 = !{!"$pmc"}
!14 = !{!"$pm0"}
!15 = !{!"$pm1"}
!16 = !{!"$pm2"}
!17 = !{!"$pm3"}
!18 = !{!"$pmsa"}
!19 = !{!"$tcr"}
!20 = !{!"$t0v"}
!21 = !{!"$t1v"}
!22 = !{!"$t0r"}
!23 = !{!"$t1r"}
!24 = !{!"$wdv"}
!25 = !{!"$wdr"}
!26 = !{!"$ile"}
!27 = !{!"$ill"}
!28 = !{!"$ilr"}
!29 = !{!"$mmc"}
!30 = !{!"$tel"}
!31 = !{!"$teh"}
!32 = !{!"$s40"}
!33 = !{!"$dba0"}
!34 = !{!"$dba1"}
!35 = !{!"$dwa0"}
!36 = !{!"$dwa1"}
!37 = !{!"$mes"}
!38 = !{!"$ws"}
!39 = !{!"$spc_pl0"}
!40 = !{!"$spc_pl1"}
!41 = !{!"$spc_pl2"}
!42 = !{!"$spc_pl3"}
!43 = !{!"$ea_pl0"}
!44 = !{!"$ea_pl1"}
!45 = !{!"$ea_pl2"}
!46 = !{!"$ea_pl3"}
!47 = !{!"$ev_pl0"}
!48 = !{!"$ev_pl1"}
!49 = !{!"$ev_pl2"}
!50 = !{!"$ev_pl3"}
!51 = !{!"$sr_pl0"}
!52 = !{!"$sr_pl1"}
!53 = !{!"$sr_pl2"}
!54 = !{!"$sr_pl3"}
!55 = !{!"$es_pl0"}
!56 = !{!"$es_pl1"}
!57 = !{!"$es_pl2"}
!58 = !{!"$es_pl3"}
!59 = !{!"$syow"}
!60 = !{!"$htow"}
!61 = !{!"$itow"}
!62 = !{!"$dow"}
!63 = !{!"$mow"}
!64 = !{!"$psow"}
!65 = !{!"$spc"}
!66 = !{!"$sps"}
!67 = !{!"$ea"}
!68 = !{!"$ev"}
!69 = !{!"$sr"}
!70 = !{!"$es"}
