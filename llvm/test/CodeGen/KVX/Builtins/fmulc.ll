; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV2
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <2 x float> @fmulwc(<2 x float> %0, <2 x float> %1) {
; ALL-LABEL: fmulwc:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulwc.rn $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.fcmul.v2f32(<2 x float> %0, <2 x float> %1, i32 0, i32 0, i32 0)
  ret <2 x float> %3
}

declare <2 x float> @llvm.kvx.fcmul.v2f32(<2 x float>, <2 x float>, i32, i32, i32)

define <4 x float> @fmulwcp(<4 x float> %0, <4 x float> %1) {
; CV1-LABEL: fmulwcp:
; CV1:       # %bb.0:
; CV1-NEXT:    fmulwc.rn $r1 = $r1, $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    fmulwc.rn $r0 = $r0, $r2
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fmulwcp:
; CV2:       # %bb.0:
; CV2-NEXT:    fmulwcp.rn $r0r1 = $r0r1, $r2r3
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = tail call <4 x float> @llvm.kvx.fcmul.v4f32(<4 x float> %0, <4 x float> %1, i32 0, i32 0, i32 0)
  ret <4 x float> %3
}

declare <4 x float> @llvm.kvx.fcmul.v4f32(<4 x float>, <4 x float>, i32, i32, i32)

define <8 x float> @fmulwcq(<8 x float> %0, <8 x float> %1) {
; CV1-LABEL: fmulwcq:
; CV1:       # %bb.0:
; CV1-NEXT:    fmulwc.rn $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    fmulwc.rn $r0 = $r0, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    fmulwc.rn $r3 = $r3, $r7
; CV1-NEXT:    ;;
; CV1-NEXT:    fmulwc.rn $r2 = $r2, $r6
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fmulwcq:
; CV2:       # %bb.0:
; CV2-NEXT:    fmulwcp.rn $r0r1 = $r0r1, $r4r5
; CV2-NEXT:    ;;
; CV2-NEXT:    fmulwcp.rn $r2r3 = $r2r3, $r6r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %3 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = tail call <4 x float> @llvm.kvx.fcmul.v4f32(<4 x float> %3, <4 x float> %4, i32 0, i32 0, i32 0)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7 = shufflevector <8 x float> %1, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8 = tail call <4 x float> @llvm.kvx.fcmul.v4f32(<4 x float> %6, <4 x float> %7, i32 0, i32 0, i32 0)
  %9 = shufflevector <4 x float> %5, <4 x float> %8, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %9
}
