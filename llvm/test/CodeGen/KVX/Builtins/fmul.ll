; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O2 -mcpu=kv3-1 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: llc -O2 -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define double @fmuld(double %0, double %1) {
; ALL-LABEL: fmuld:
; ALL:       # %bb.0:
; ALL-NEXT:    fmuld.rz $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call double @llvm.kvx.fmul.f64(double %0, double %1, i32 3, i32 0)
  ret double %3
}

declare double @llvm.kvx.fmul.f64(double, double, i32, i32)

define <2 x double> @fmuldp(<2 x double> %0, <2 x double> %1) {
; ALL-LABEL: fmuldp:
; ALL:       # %bb.0:
; ALL-NEXT:    fmuld.rn $r0 = $r0, $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    fmuld.rn $r1 = $r1, $r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = extractelement <2 x double> %0, i64 0
  %4 = extractelement <2 x double> %1, i64 0
  %5 = tail call double @llvm.kvx.fmul.f64(double %3, double %4, i32 0, i32 0)
  %6 = extractelement <2 x double> %0, i64 1
  %7 = extractelement <2 x double> %1, i64 1
  %8 = tail call double @llvm.kvx.fmul.f64(double %6, double %7, i32 0, i32 0)
  %9 = insertelement <2 x double> undef, double %5, i32 0
  %10 = insertelement <2 x double> %9, double %8, i32 1
  ret <2 x double> %10
}

define <4 x double> @fmuldq(<4 x double> %0, <4 x double> %1) {
; ALL-LABEL: fmuldq:
; ALL:       # %bb.0:
; ALL-NEXT:    fmuld.rn $r0 = $r0, $r4
; ALL-NEXT:    ;;
; ALL-NEXT:    fmuld.rn $r1 = $r1, $r5
; ALL-NEXT:    ;;
; ALL-NEXT:    fmuld.rn $r2 = $r2, $r6
; ALL-NEXT:    ;;
; ALL-NEXT:    fmuld.rn $r3 = $r3, $r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = extractelement <4 x double> %0, i64 0
  %4 = extractelement <4 x double> %1, i64 0
  %5 = tail call double @llvm.kvx.fmul.f64(double %3, double %4, i32 0, i32 0)
  %6 = extractelement <4 x double> %0, i64 1
  %7 = extractelement <4 x double> %1, i64 1
  %8 = tail call double @llvm.kvx.fmul.f64(double %6, double %7, i32 0, i32 0)
  %9 = extractelement <4 x double> %0, i64 2
  %10 = extractelement <4 x double> %1, i64 2
  %11 = tail call double @llvm.kvx.fmul.f64(double %9, double %10, i32 0, i32 0)
  %12 = extractelement <4 x double> %0, i64 3
  %13 = extractelement <4 x double> %1, i64 3
  %14 = tail call double @llvm.kvx.fmul.f64(double %12, double %13, i32 0, i32 0)
  %15 = insertelement <4 x double> undef, double %5, i32 0
  %16 = insertelement <4 x double> %15, double %8, i32 1
  %17 = insertelement <4 x double> %16, double %11, i32 2
  %18 = insertelement <4 x double> %17, double %14, i32 3
  ret <4 x double> %18
}

define half @fmulh(half %0, half %1) {
; ALL-LABEL: fmulh:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulhq.ru.s $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call half @llvm.kvx.fmul.f16(half %0, half %1, i32 1, i32 1)
  ret half %3
}

declare half @llvm.kvx.fmul.f16(half, half, i32, i32)

define <2 x half> @fmulhp(<2 x half> %0, <2 x half> %1) {
; ALL-LABEL: fmulhp:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulhq.ru.s $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <2 x half> @llvm.kvx.fmul.v2f16(<2 x half> %0, <2 x half> %1, i32 1, i32 1)
  ret <2 x half> %3
}

declare <2 x half> @llvm.kvx.fmul.v2f16(<2 x half>, <2 x half>, i32, i32)

define <4 x half> @fmulhq(<4 x half> %0, <4 x half> %1) {
; ALL-LABEL: fmulhq:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulhq.ru.s $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <4 x half> @llvm.kvx.fmul.v4f16(<4 x half> %0, <4 x half> %1, i32 1, i32 1)
  ret <4 x half> %3
}

declare <4 x half> @llvm.kvx.fmul.v4f16(<4 x half>, <4 x half>, i32, i32)

define float @fmulw(float %0, float %1) {
; ALL-LABEL: fmulw:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulw.rz $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call float @llvm.kvx.fmul.f32(float %0, float %1, i32 3, i32 0)
  ret float %3
}

declare float @llvm.kvx.fmul.f32(float, float, i32, i32)

define <2 x float> @fmulwp(<2 x float> %0, <2 x float> %1) {
; ALL-LABEL: fmulwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fmulwp.rn $r0 = $r0, $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.fmul.v2f32(<2 x float> %0, <2 x float> %1, i32 0, i32 0)
  ret <2 x float> %3
}

declare <2 x float> @llvm.kvx.fmul.v2f32(<2 x float>, <2 x float>, i32, i32)
