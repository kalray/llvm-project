; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV1
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefixes=ALL,CV2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define <8 x float> @frsrwo(<8 x float> %0) {
; CV1-LABEL: frsrwo:
; CV1:       # %bb.0:
; CV1-NEXT:    srad $r0 = $r0, 32
; CV1-NEXT:    frsrw.rz.s $r4 = $r0
; CV1-NEXT:    srad $r6 = $r2, 32
; CV1-NEXT:    srad $r7 = $r3, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    srad $r1 = $r1, 32
; CV1-NEXT:    frsrw.rz.s $r5 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    frsrw.rz.s $r0 = $r0
; CV1-NEXT:    ;;
; CV1-NEXT:    frsrw.rz.s $r1 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    frsrw.rz.s $r2 = $r2
; CV1-NEXT:    ;;
; CV1-NEXT:    frsrw.rz.s $r6 = $r6
; CV1-NEXT:    ;;
; CV1-NEXT:    frsrw.rz.s $r3 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    frsrw.rz.s $r7 = $r7
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r4 = $r0, 63, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    insf $r5 = $r1, 63, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r2 = $r6, 63, 32
; CV1-NEXT:    ;;
; CV1-NEXT:    insf $r3 = $r7, 63, 32
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: frsrwo:
; CV2:       # %bb.0:
; CV2-NEXT:    srad $r0 = $r0, 32
; CV2-NEXT:    frsrw.rz.s $r4 = $r0
; CV2-NEXT:    srad $r7 = $r3, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    srad $r1 = $r1, 32
; CV2-NEXT:    frsrw.rz.s $r5 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    srad $r2 = $r2, 32
; CV2-NEXT:    frsrw.rz.s $r6 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    frsrw.rz.s $r0 = $r0
; CV2-NEXT:    ;;
; CV2-NEXT:    frsrw.rz.s $r1 = $r1
; CV2-NEXT:    ;;
; CV2-NEXT:    frsrw.rz.s $r2 = $r2
; CV2-NEXT:    ;;
; CV2-NEXT:    frsrw.rz.s $r3 = $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    frsrw.rz.s $r7 = $r7
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r4 = $r0, 63, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    insf $r5 = $r1, 63, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    insf $r6 = $r2, 63, 32
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r2 = $r6
; CV2-NEXT:    ;;
; CV2-NEXT:    insf $r3 = $r7, 63, 32
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %2 = extractelement <8 x float> %0, i64 0
  %3 = tail call float @llvm.kvx.frsrw(float %2, i32 3, i32 1)
  %4 = extractelement <8 x float> %0, i64 1
  %5 = tail call float @llvm.kvx.frsrw(float %4, i32 3, i32 1)
  %6 = extractelement <8 x float> %0, i64 2
  %7 = tail call float @llvm.kvx.frsrw(float %6, i32 3, i32 1)
  %8 = extractelement <8 x float> %0, i64 3
  %9 = tail call float @llvm.kvx.frsrw(float %8, i32 3, i32 1)
  %10 = extractelement <8 x float> %0, i64 4
  %11 = tail call float @llvm.kvx.frsrw(float %10, i32 3, i32 1)
  %12 = extractelement <8 x float> %0, i64 5
  %13 = tail call float @llvm.kvx.frsrw(float %12, i32 3, i32 1)
  %14 = extractelement <8 x float> %0, i64 6
  %15 = tail call float @llvm.kvx.frsrw(float %14, i32 3, i32 1)
  %16 = extractelement <8 x float> %0, i64 7
  %17 = tail call float @llvm.kvx.frsrw(float %16, i32 3, i32 1)
  %18 = insertelement <8 x float> undef, float %3, i32 0
  %19 = insertelement <8 x float> %18, float %5, i32 1
  %20 = insertelement <8 x float> %19, float %7, i32 2
  %21 = insertelement <8 x float> %20, float %9, i32 3
  %22 = insertelement <8 x float> %21, float %11, i32 4
  %23 = insertelement <8 x float> %22, float %13, i32 5
  %24 = insertelement <8 x float> %23, float %15, i32 6
  %25 = insertelement <8 x float> %24, float %17, i32 7
  ret <8 x float> %25
}

declare float @llvm.kvx.frsrw(float, i32, i32)

define <2 x float> @frsrwp(<2 x float> %0) {
; ALL-LABEL: frsrwp:
; ALL:       # %bb.0:
; ALL-NEXT:    srad $r0 = $r0, 32
; ALL-NEXT:    frsrw.rz.s $r1 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    frsrw.rz.s $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r1 = $r0, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r0 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <2 x float> %0, i64 0
  %3 = tail call float @llvm.kvx.frsrw(float %2, i32 3, i32 1)
  %4 = extractelement <2 x float> %0, i64 1
  %5 = tail call float @llvm.kvx.frsrw(float %4, i32 3, i32 1)
  %6 = insertelement <2 x float> undef, float %3, i32 0
  %7 = insertelement <2 x float> %6, float %5, i32 1
  ret <2 x float> %7
}

define <4 x float> @frsrwq(<4 x float> %0) {
; ALL-LABEL: frsrwq:
; ALL:       # %bb.0:
; ALL-NEXT:    srad $r0 = $r0, 32
; ALL-NEXT:    frsrw.rz.s $r2 = $r0
; ALL-NEXT:    srad $r3 = $r1, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    frsrw.rz.s $r0 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    frsrw.rz.s $r1 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    frsrw.rz.s $r3 = $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r2 = $r0, 63, 32
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r0 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    insf $r1 = $r3, 63, 32
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <4 x float> %0, i64 0
  %3 = tail call float @llvm.kvx.frsrw(float %2, i32 3, i32 1)
  %4 = extractelement <4 x float> %0, i64 1
  %5 = tail call float @llvm.kvx.frsrw(float %4, i32 3, i32 1)
  %6 = extractelement <4 x float> %0, i64 2
  %7 = tail call float @llvm.kvx.frsrw(float %6, i32 3, i32 1)
  %8 = extractelement <4 x float> %0, i64 3
  %9 = tail call float @llvm.kvx.frsrw(float %8, i32 3, i32 1)
  %10 = insertelement <4 x float> undef, float %3, i32 0
  %11 = insertelement <4 x float> %10, float %5, i32 1
  %12 = insertelement <4 x float> %11, float %7, i32 2
  %13 = insertelement <4 x float> %12, float %9, i32 3
  ret <4 x float> %13
}

define float @frsrw(float %0) {
; ALL-LABEL: frsrw:
; ALL:       # %bb.0:
; ALL-NEXT:    frsrw.rz $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call float @llvm.kvx.frsrw(float %0, i32 3, i32 0)
  ret float %2
}

