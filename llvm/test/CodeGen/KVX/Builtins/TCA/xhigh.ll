; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O3 -o - %s -mcpu=kv3-1 | FileCheck %s --check-prefixes=CV1
; RUN: llc -O3 -o - %s -mcpu=kv3-2 | FileCheck %s --check-prefixes=CV2
; RUN: clang -O3 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O3 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @high256(ptr nocapture %0) {
; CV1-LABEL: high256:
; CV1:       # %bb.0:
; CV1-NEXT:    xcopyo $a1 = $a48
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    xso 0[$r0] = $a1
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 4)
;
; CV2-LABEL: high256:
; CV2:       # %bb.0:
; CV2-NEXT:    xandno $a0 = $a0, $a0
; CV2-NEXT:    xsplatdo $a1 = 0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    xso 0[$r0] = $a1
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 4)
  %2 = tail call <256 x i1> @llvm.kvx.high.v256i1(<512 x i1> zeroinitializer)
  store <256 x i1> %2, ptr %0
  ret void
}

declare <256 x i1> @llvm.kvx.high.v256i1(<512 x i1>)

define void @high512(ptr nocapture %0) {
; CV1-LABEL: high512:
; CV1:       # %bb.0:
; CV1-NEXT:    xmt44d $a0a1a2a3 = $a60a61a62a63
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    xso 32[$r0] = $a3
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    xso 0[$r0] = $a2
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 5)
;
; CV2-LABEL: high512:
; CV2:       # %bb.0:
; CV2-NEXT:    xsplatdo $a0 = 0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    xsplatov $a0a1a2a3 = $a0
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    xso 32[$r0] = $a3
; CV2-NEXT:    ;; # (end cycle 8)
; CV2-NEXT:    xso 0[$r0] = $a2
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 9)
  %2 = tail call <512 x i1> @llvm.kvx.high.v512i1(<1024 x i1> zeroinitializer)
  store <512 x i1> %2, ptr %0
  ret void
}

declare <512 x i1> @llvm.kvx.high.v512i1(<1024 x i1>)

define void @high1024(ptr nocapture %0) {
; CV1-LABEL: high1024:
; CV1:       # %bb.0:
; CV1-NEXT:    xmt44d $a4a5a6a7 = $a60a61a62a63
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    xmt44d $a0a1a2a3 = $a56a57a58a59
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    xso 32[$r0] = $a5
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    xso 0[$r0] = $a4
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    xso 96[$r0] = $a7
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    xso 64[$r0] = $a6
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 7)
;
; CV2-LABEL: high1024:
; CV2:       # %bb.0:
; CV2-NEXT:    xsplatdo $a0 = 0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    xsplatov $a4a5a6a7 = $a0
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    xso 32[$r0] = $a5
; CV2-NEXT:    ;; # (end cycle 8)
; CV2-NEXT:    xso 0[$r0] = $a4
; CV2-NEXT:    ;; # (end cycle 9)
; CV2-NEXT:    xso 96[$r0] = $a7
; CV2-NEXT:    ;; # (end cycle 10)
; CV2-NEXT:    xso 64[$r0] = $a6
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 11)
  %2 = tail call <1024 x i1> @llvm.kvx.high.v1024i1(<2048 x i1> zeroinitializer)
  store <1024 x i1> %2, ptr %0
  ret void
}

declare <1024 x i1> @llvm.kvx.high.v1024i1(<2048 x i1>)

define void @xhigh2048(ptr nocapture %0) {
; CV1-LABEL: xhigh2048:
; CV1:       # %bb.0:
; CV1-NEXT:    xmt44d $a12a13a14a15 = $a48a49a50a51
; CV1-NEXT:    ;; # (end cycle 0)
; CV1-NEXT:    xmt44d $a8a9a10a11 = $a52a53a54a55
; CV1-NEXT:    ;; # (end cycle 1)
; CV1-NEXT:    xmt44d $a0a1a2a3 = $a56a57a58a59
; CV1-NEXT:    ;; # (end cycle 2)
; CV1-NEXT:    xmt44d $a0a1a2a3 = $a60a61a62a63
; CV1-NEXT:    ;; # (end cycle 3)
; CV1-NEXT:    xso 160[$r0] = $a13
; CV1-NEXT:    ;; # (end cycle 4)
; CV1-NEXT:    xso 32[$r0] = $a9
; CV1-NEXT:    ;; # (end cycle 5)
; CV1-NEXT:    xso 0[$r0] = $a8
; CV1-NEXT:    ;; # (end cycle 6)
; CV1-NEXT:    xso 96[$r0] = $a11
; CV1-NEXT:    ;; # (end cycle 7)
; CV1-NEXT:    xso 64[$r0] = $a10
; CV1-NEXT:    ;; # (end cycle 8)
; CV1-NEXT:    xso 128[$r0] = $a12
; CV1-NEXT:    ;; # (end cycle 9)
; CV1-NEXT:    xso 224[$r0] = $a15
; CV1-NEXT:    ;; # (end cycle 10)
; CV1-NEXT:    xso 192[$r0] = $a14
; CV1-NEXT:    ret
; CV1-NEXT:    ;; # (end cycle 11)
;
; CV2-LABEL: xhigh2048:
; CV2:       # %bb.0:
; CV2-NEXT:    xsplatdo $a0 = 0
; CV2-NEXT:    ;; # (end cycle 0)
; CV2-NEXT:    xsplatov $a8a9a10a11 = $a0
; CV2-NEXT:    ;; # (end cycle 4)
; CV2-NEXT:    xso 32[$r0] = $a9
; CV2-NEXT:    xcopyv $a12a13a14a15 = $a8a9a10a11
; CV2-NEXT:    ;; # (end cycle 8)
; CV2-NEXT:    xso 0[$r0] = $a8
; CV2-NEXT:    ;; # (end cycle 9)
; CV2-NEXT:    xso 96[$r0] = $a11
; CV2-NEXT:    ;; # (end cycle 10)
; CV2-NEXT:    xso 64[$r0] = $a10
; CV2-NEXT:    ;; # (end cycle 11)
; CV2-NEXT:    xso 160[$r0] = $a13
; CV2-NEXT:    ;; # (end cycle 12)
; CV2-NEXT:    xso 128[$r0] = $a12
; CV2-NEXT:    ;; # (end cycle 13)
; CV2-NEXT:    xso 224[$r0] = $a15
; CV2-NEXT:    ;; # (end cycle 14)
; CV2-NEXT:    xso 192[$r0] = $a14
; CV2-NEXT:    ret
; CV2-NEXT:    ;; # (end cycle 15)
  %2 = tail call <2048 x i1> @llvm.kvx.high.v2048i1(<4096 x i1> zeroinitializer)
  store <2048 x i1> %2, ptr %0
  ret void
}

declare <2048 x i1> @llvm.kvx.high.v2048i1(<4096 x i1>)
