; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s | FileCheck %s
; RUN: clang -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define void @c([512 x float]* %0, [512 x float]* %1, [768 x half]* %2, [512 x half]* %3, <256 x i1>* %ptr) {
; CHECK-LABEL: c:
; CHECK:       # %bb.0:
; CHECK-NEXT:    compd.ltu $r0 = $r0, 508
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fmma242hw0 $a0.lo = $a0a1, $a0, $a0
; CHECK-NEXT:    ;; # (end cycle 0)
; CHECK-NEXT:    fmma242hw1 $a0.hi = $a0a1, $a0, $a0
; CHECK-NEXT:    ;; # (end cycle 6)
; CHECK-NEXT:    fmma242hw2 $a1.lo = $a0a1, $a0, $a0
; CHECK-NEXT:    ;; # (end cycle 12)
; CHECK-NEXT:    fmma242hw3 $a1.hi = $a0a1, $a0, $a0
; CHECK-NEXT:    ;; # (end cycle 18)
; CHECK-NEXT:    xlo.us.q0 $a0a1a2a3 = 0[$r0]
; CHECK-NEXT:    ;; # (end cycle 24)
; CHECK-NEXT:    xmt44d $a0a1a2a3 = $a0a1a2a3
; CHECK-NEXT:    ;; # (end cycle 27)
; CHECK-NEXT:    xso 0[$r4] = $a0
; CHECK-NEXT:    cb.odd $r0 ? .LBB0_1
; CHECK-NEXT:    ;; # (end cycle 31)
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  br label %5

5:
  br label %6

6:
  %7 = phi <1024 x i1> [ undef, %5 ], [ %19, %18 ]
  %8 = tail call <1024 x i1> @llvm.kvx.lvc(<1024 x i1> %7, i8* nonnull undef, i32 3, i32 0)
  %9 = or i64 undef, 2
  br label %10

10:
  %11 = bitcast half* undef to i8*
  %12 = getelementptr inbounds [768 x half], [768 x half]* %2, i64 undef, i64 undef
  %13 = tail call <512 x i1> @llvm.kvx.xfmma444hw(<256 x i1> undef, <256 x i1> undef, <512 x i1> undef)
  %14 = tail call <1024 x i1> @llvm.kvx.lvc(<1024 x i1> undef, i8* nonnull undef, i32 3, i32 0)
  %15 = tail call <256 x i1> @llvm.kvx.xmovefmv(<1024 x i1> undef, i32 1)
  %16 = tail call <512 x i1> @llvm.kvx.xfmma444hw(<256 x i1> undef, <256 x i1> undef, <512 x i1> undef)
  %17 = tail call <512 x i1> @llvm.kvx.xfmma444hw(<256 x i1> undef, <256 x i1> undef, <512 x i1> undef)
  br i1 undef, label %10, label %18

18:
  %19 = tail call <1024 x i1> @llvm.kvx.xmt44d(<1024 x i1> undef)
  %20 = tail call <256 x i1> @llvm.kvx.xmovefmv(<1024 x i1> %19, i32 0)
  store <256 x i1> %20, <256 x i1>* %ptr, align 32
  %21 = icmp ult i64 undef, 508
  br i1 %21, label %6, label %22

22:
  br i1 undef, label %5, label %23

23:
  ret void
}

declare <1024 x i1> @llvm.kvx.lvc(<1024 x i1>, i8*, i32, i32)
declare <512 x i1> @llvm.kvx.xmovefmw(<1024 x i1>, i32)
declare <256 x i1> @llvm.kvx.xmovefmv(<1024 x i1>, i32)
declare <512 x i1> @llvm.kvx.xfmma444hw(<256 x i1>, <256 x i1>, <512 x i1>)
declare <1024 x i1> @llvm.kvx.xcat1024(<512 x i1>, <512 x i1>)
declare <1024 x i1> @llvm.kvx.xmt44d(<1024 x i1>)
