; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define half @fnarrowwh(float %0) {
; ALL-LABEL: fnarrowwh:
; ALL:       # %bb.0:
; ALL-NEXT:    fnarrowwh.ru.s $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = tail call half @llvm.kvx.fnarrow.f16(float %0, i32 1, i32 1)
  ret half %2
}

declare half @llvm.kvx.fnarrow.f16(float, i32, i32)

define float @fnarrowdw(double %0) {
; ALL-LABEL: fnarrowdw:
; ALL:       # %bb.0:
; ALL-NEXT:    fnarrowdw.ru.s $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = tail call float @llvm.kvx.fnarrow.f32(double %0, i32 1, i32 1)
  ret float %2
}

declare float @llvm.kvx.fnarrow.f32(double, i32, i32)

define <4 x half> @fnarrowwhq(<4 x float> %0) {
; ALL-LABEL: fnarrowwhq:
; ALL:       # %bb.0:
; ALL-NEXT:    fnarrowwhq.ru.s $r0 = $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = tail call <4 x half> @llvm.kvx.fnarrow.v4f16(<4 x float> %0, i32 1, i32 1)
  ret <4 x half> %2
}

declare <4 x half> @llvm.kvx.fnarrow.v4f16(<4 x float>, i32, i32)

define <8 x half> @fnarrowwho(<8 x float> %0) {
; ALL-LABEL: fnarrowwho:
; ALL:       # %bb.0:
; ALL-NEXT:    fnarrowwhq.ru.s $r0 = $r0r1
; ALL-NEXT:    fnarrowwhq.ru.s $r1 = $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x half> @llvm.kvx.fnarrow.v4f16(<4 x float> %2, i32 1, i32 1)
  %4 = shufflevector <8 x float> %0, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x half> @llvm.kvx.fnarrow.v4f16(<4 x float> %4, i32 1, i32 1)
  %6 = shufflevector <4 x half> %3, <4 x half> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x half> %6
}

define <2 x float> @fnarrowdwp(<2 x double> %0) {
; ALL-LABEL: fnarrowdwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fnarrowdwp.ru.s $r0 = $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 0)
  %2 = tail call <2 x float> @llvm.kvx.fnarrow.v2f32(<2 x double> %0, i32 1, i32 1)
  ret <2 x float> %2
}

declare <2 x float> @llvm.kvx.fnarrow.v2f32(<2 x double>, i32, i32)

define <4 x float> @fnarrowdwq(<4 x double> %0) {
; ALL-LABEL: fnarrowdwq:
; ALL:       # %bb.0:
; ALL-NEXT:    fnarrowdwp.ru.s $r0 = $r0r1
; ALL-NEXT:    ;; # (end cycle 0)
; ALL-NEXT:    fnarrowdwp.ru.s $r1 = $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;; # (end cycle 1)
  %2 = shufflevector <4 x double> %0, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fnarrow.v2f32(<2 x double> %2, i32 1, i32 1)
  %4 = shufflevector <4 x double> %0, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fnarrow.v2f32(<2 x double> %4, i32 1, i32 1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}
