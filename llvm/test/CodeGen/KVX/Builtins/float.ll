; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s -O2 | FileCheck %s --check-prefix=ALL
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefix=ALL
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define double @floatd_limit(i64 %0) {
; ALL-LABEL: floatd_limit:
; ALL:       # %bb.0:
; ALL-NEXT:    floatd.rz $r0 = $r0, 63
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call double @llvm.kvx.floatd(i64 %0, i32 63, i32 3, i32 0)
  ret double %2
}

declare double @llvm.kvx.floatd(i64, i32, i32, i32)

define double @floatd_s(i64 %0) {
; ALL-LABEL: floatd_s:
; ALL:       # %bb.0:
; ALL-NEXT:    floatd.rn.s $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call double @llvm.kvx.floatd(i64 %0, i32 3, i32 0, i32 1)
  ret double %2
}

define double @floatd(i64 %0) {
; ALL-LABEL: floatd:
; ALL:       # %bb.0:
; ALL-NEXT:    floatd $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call double @llvm.kvx.floatd(i64 %0, i32 3, i32 7, i32 0)
  ret double %2
}

define <2 x double> @floatdp_s(<2 x i64> %0) {
; ALL-LABEL: floatdp_s:
; ALL:       # %bb.0:
; ALL-NEXT:    floatd.rn.s $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatd.rn.s $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <2 x i64> %0, i64 0
  %3 = tail call double @llvm.kvx.floatd(i64 %2, i32 3, i32 0, i32 1)
  %4 = extractelement <2 x i64> %0, i64 1
  %5 = tail call double @llvm.kvx.floatd(i64 %4, i32 3, i32 0, i32 1)
  %6 = insertelement <2 x double> undef, double %3, i32 0
  %7 = insertelement <2 x double> %6, double %5, i32 1
  ret <2 x double> %7
}

define <2 x double> @floatdp(<2 x i64> %0) {
; ALL-LABEL: floatdp:
; ALL:       # %bb.0:
; ALL-NEXT:    floatd.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatd.rn $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <2 x i64> %0, i64 0
  %3 = tail call double @llvm.kvx.floatd(i64 %2, i32 3, i32 0, i32 0)
  %4 = extractelement <2 x i64> %0, i64 1
  %5 = tail call double @llvm.kvx.floatd(i64 %4, i32 3, i32 0, i32 0)
  %6 = insertelement <2 x double> undef, double %3, i32 0
  %7 = insertelement <2 x double> %6, double %5, i32 1
  ret <2 x double> %7
}

define <4 x double> @floatdq(<4 x i64> %0) {
; ALL-LABEL: floatdq:
; ALL:       # %bb.0:
; ALL-NEXT:    floatd.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatd.rn $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatd.rn $r2 = $r2, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatd.rn $r3 = $r3, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <4 x i64> %0, i64 0
  %3 = tail call double @llvm.kvx.floatd(i64 %2, i32 3, i32 0, i32 0)
  %4 = extractelement <4 x i64> %0, i64 1
  %5 = tail call double @llvm.kvx.floatd(i64 %4, i32 3, i32 0, i32 0)
  %6 = extractelement <4 x i64> %0, i64 2
  %7 = tail call double @llvm.kvx.floatd(i64 %6, i32 3, i32 0, i32 0)
  %8 = extractelement <4 x i64> %0, i64 3
  %9 = tail call double @llvm.kvx.floatd(i64 %8, i32 3, i32 0, i32 0)
  %10 = insertelement <4 x double> undef, double %3, i32 0
  %11 = insertelement <4 x double> %10, double %5, i32 1
  %12 = insertelement <4 x double> %11, double %7, i32 2
  %13 = insertelement <4 x double> %12, double %9, i32 3
  ret <4 x double> %13
}

define double @floatud(i64 %0) {
; ALL-LABEL: floatud:
; ALL:       # %bb.0:
; ALL-NEXT:    floatud.rz $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call double @llvm.kvx.floatud(i64 %0, i32 3, i32 3, i32 0)
  ret double %2
}

declare double @llvm.kvx.floatud(i64, i32, i32, i32)

define <2 x double> @floatudp(<2 x i64> %0) {
; ALL-LABEL: floatudp:
; ALL:       # %bb.0:
; ALL-NEXT:    floatud.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatud.rn $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <2 x i64> %0, i64 0
  %3 = tail call double @llvm.kvx.floatud(i64 %2, i32 3, i32 0, i32 0)
  %4 = extractelement <2 x i64> %0, i64 1
  %5 = tail call double @llvm.kvx.floatud(i64 %4, i32 3, i32 0, i32 0)
  %6 = insertelement <2 x double> undef, double %3, i32 0
  %7 = insertelement <2 x double> %6, double %5, i32 1
  ret <2 x double> %7
}

define <4 x double> @floatudq(<4 x i64> %0) {
; ALL-LABEL: floatudq:
; ALL:       # %bb.0:
; ALL-NEXT:    floatud.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatud.rn $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatud.rn $r2 = $r2, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatud.rn $r3 = $r3, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = extractelement <4 x i64> %0, i64 0
  %3 = tail call double @llvm.kvx.floatud(i64 %2, i32 3, i32 0, i32 0)
  %4 = extractelement <4 x i64> %0, i64 1
  %5 = tail call double @llvm.kvx.floatud(i64 %4, i32 3, i32 0, i32 0)
  %6 = extractelement <4 x i64> %0, i64 2
  %7 = tail call double @llvm.kvx.floatud(i64 %6, i32 3, i32 0, i32 0)
  %8 = extractelement <4 x i64> %0, i64 3
  %9 = tail call double @llvm.kvx.floatud(i64 %8, i32 3, i32 0, i32 0)
  %10 = insertelement <4 x double> undef, double %3, i32 0
  %11 = insertelement <4 x double> %10, double %5, i32 1
  %12 = insertelement <4 x double> %11, double %7, i32 2
  %13 = insertelement <4 x double> %12, double %9, i32 3
  ret <4 x double> %13
}

define float @floatuw(i32 %0) {
; ALL-LABEL: floatuw:
; ALL:       # %bb.0:
; ALL-NEXT:    floatuw.rz $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call float @llvm.kvx.floatuw(i32 %0, i32 3, i32 3, i32 0)
  ret float %2
}

declare float @llvm.kvx.floatuw(i32, i32, i32, i32)

define <8 x float> @floatuwo(<8 x i32> %0) {
; ALL-LABEL: floatuwo:
; ALL:       # %bb.0:
; ALL-NEXT:    floatuwp.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatuwp.rn $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatuwp.rn $r2 = $r2, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatuwp.rn $r3 = $r3, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.floatuwp(<2 x i32> %2, i32 3, i32 0, i32 0)
  %4 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.floatuwp(<2 x i32> %4, i32 3, i32 0, i32 0)
  %6 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x float> @llvm.kvx.floatuwp(<2 x i32> %6, i32 3, i32 0, i32 0)
  %8 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x float> @llvm.kvx.floatuwp(<2 x i32> %8, i32 3, i32 0, i32 0)
  %10 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x float> %7, <2 x float> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x float> %10, <4 x float> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %12
}

declare <2 x float> @llvm.kvx.floatuwp(<2 x i32>, i32, i32, i32)

define <2 x float> @floatuwp(<2 x i32> %0) {
; ALL-LABEL: floatuwp:
; ALL:       # %bb.0:
; ALL-NEXT:    floatuwp.rn $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call <2 x float> @llvm.kvx.floatuwp(<2 x i32> %0, i32 3, i32 0, i32 0)
  ret <2 x float> %2
}

define <4 x float> @floatuwq(<4 x i32> %0) {
; ALL-LABEL: floatuwq:
; ALL:       # %bb.0:
; ALL-NEXT:    floatuwp.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatuwp.rn $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.floatuwp(<2 x i32> %2, i32 3, i32 0, i32 0)
  %4 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.floatuwp(<2 x i32> %4, i32 3, i32 0, i32 0)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}

define float @floatw_s(i32 %0) {
; ALL-LABEL: floatw_s:
; ALL:       # %bb.0:
; ALL-NEXT:    floatw.rn.s $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call float @llvm.kvx.floatw(i32 %0, i32 3, i32 0, i32 1)
  ret float %2
}

declare float @llvm.kvx.floatw(i32, i32, i32, i32)

define float @floatw(i32 %0) {
; ALL-LABEL: floatw:
; ALL:       # %bb.0:
; ALL-NEXT:    floatw.rn $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call float @llvm.kvx.floatw(i32 %0, i32 3, i32 0, i32 0)
  ret float %2
}

define <8 x float> @floatwo(<8 x i32> %0) {
; ALL-LABEL: floatwo:
; ALL:       # %bb.0:
; ALL-NEXT:    floatwp.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatwp.rn $r1 = $r1, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatwp.rn $r2 = $r2, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatwp.rn $r3 = $r3, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %2, i32 3, i32 0, i32 0)
  %4 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %4, i32 3, i32 0, i32 0)
  %6 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %7 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %6, i32 3, i32 0, i32 0)
  %8 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %9 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %8, i32 3, i32 0, i32 0)
  %10 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11 = shufflevector <2 x float> %7, <2 x float> %9, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = shufflevector <4 x float> %10, <4 x float> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %12
}

declare <2 x float> @llvm.kvx.floatwp(<2 x i32>, i32, i32, i32)

define <2 x float> @floatwp(<2 x i32> %0) {
; ALL-LABEL: floatwp:
; ALL:       # %bb.0:
; ALL-NEXT:    floatwp.rn $r0 = $r0, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %0, i32 3, i32 0, i32 0)
  ret <2 x float> %2
}

define <4 x float> @floatwq_s(<4 x i32> %0) {
; ALL-LABEL: floatwq_s:
; ALL:       # %bb.0:
; ALL-NEXT:    floatwp.rn.s $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatwp.rn.s $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %2, i32 3, i32 0, i32 1)
  %4 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %4, i32 3, i32 0, i32 1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}

define <4 x float> @floatwq(<4 x i32> %0) {
; ALL-LABEL: floatwq:
; ALL:       # %bb.0:
; ALL-NEXT:    floatwp.rn $r0 = $r0, 3
; ALL-NEXT:    ;;
; ALL-NEXT:    floatwp.rn $r1 = $r1, 3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %2, i32 3, i32 0, i32 0)
  %4 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.floatwp(<2 x i32> %4, i32 3, i32 0, i32 0)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}
