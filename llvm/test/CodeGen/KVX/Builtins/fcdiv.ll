; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define double @fcdivd(double %0, double %1) {
; ALL-LABEL: fcdivd:
; ALL:       # %bb.0:
; ALL-NEXT:    fcdivd $r0 = $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call double @llvm.kvx.fcdiv.f64(double %0, double %1, i32 0)
  ret double %3
}

declare double @llvm.kvx.fcdiv.f64(double, double, i32)

define <2 x double> @fcdivdp(<2 x double> %0, <2 x double> %1) {
; ALL-LABEL: fcdivdp:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r4 = $r0
; ALL-NEXT:    copyd $r5 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivd $r0 = $r4r5
; ALL-NEXT:    copyd $r2 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivd $r1 = $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = extractelement <2 x double> %0, i64 0
  %4 = extractelement <2 x double> %1, i64 0
  %5 = tail call double @llvm.kvx.fcdiv.f64(double %3, double %4, i32 0)
  %6 = extractelement <2 x double> %0, i64 1
  %7 = extractelement <2 x double> %1, i64 1
  %8 = tail call double @llvm.kvx.fcdiv.f64(double %6, double %7, i32 0)
  %9 = insertelement <2 x double> undef, double %5, i32 0
  %10 = insertelement <2 x double> %9, double %8, i32 1
  ret <2 x double> %10
}

define <4 x double> @fcdivdq(<4 x double> %0, <4 x double> %1) {
; ALL-LABEL: fcdivdq:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r9 = $r6
; ALL-NEXT:    copyd $r10 = $r0
; ALL-NEXT:    copyd $r11 = $r4
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivd $r0 = $r10r11
; ALL-NEXT:    copyd $r4 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivd $r1 = $r4r5
; ALL-NEXT:    copyd $r8 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivd $r2 = $r8r9
; ALL-NEXT:    copyd $r6 = $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivd $r3 = $r6r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = extractelement <4 x double> %0, i64 0
  %4 = extractelement <4 x double> %1, i64 0
  %5 = tail call double @llvm.kvx.fcdiv.f64(double %3, double %4, i32 0)
  %6 = extractelement <4 x double> %0, i64 1
  %7 = extractelement <4 x double> %1, i64 1
  %8 = tail call double @llvm.kvx.fcdiv.f64(double %6, double %7, i32 0)
  %9 = extractelement <4 x double> %0, i64 2
  %10 = extractelement <4 x double> %1, i64 2
  %11 = tail call double @llvm.kvx.fcdiv.f64(double %9, double %10, i32 0)
  %12 = extractelement <4 x double> %0, i64 3
  %13 = extractelement <4 x double> %1, i64 3
  %14 = tail call double @llvm.kvx.fcdiv.f64(double %12, double %13, i32 0)
  %15 = insertelement <4 x double> undef, double %5, i32 0
  %16 = insertelement <4 x double> %15, double %8, i32 1
  %17 = insertelement <4 x double> %16, double %11, i32 2
  %18 = insertelement <4 x double> %17, double %14, i32 3
  ret <4 x double> %18
}

define float @fcdivw(float %0, float %1) {
; ALL-LABEL: fcdivw:
; ALL:       # %bb.0:
; ALL-NEXT:    fcdivw $r0 = $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call float @llvm.kvx.fcdiv.f32(float %0, float %1, i32 0)
  ret float %3
}

declare float @llvm.kvx.fcdiv.f32(float, float, i32)

define <8 x float> @fcdivwo(<8 x float> %0, <8 x float> %1) {
; ALL-LABEL: fcdivwo:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r9 = $r6
; ALL-NEXT:    copyd $r10 = $r0
; ALL-NEXT:    copyd $r11 = $r4
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivwp $r0 = $r10r11
; ALL-NEXT:    copyd $r4 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivwp $r1 = $r4r5
; ALL-NEXT:    copyd $r8 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivwp $r2 = $r8r9
; ALL-NEXT:    copyd $r6 = $r3
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivwp $r3 = $r6r7
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %5 = tail call <2 x float> @llvm.kvx.fcdiv.v2f32(<2 x float> %3, <2 x float> %4, i32 0)
  %6 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %7 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <2 x float> @llvm.kvx.fcdiv.v2f32(<2 x float> %6, <2 x float> %7, i32 0)
  %9 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %10 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %11 = tail call <2 x float> @llvm.kvx.fcdiv.v2f32(<2 x float> %9, <2 x float> %10, i32 0)
  %12 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x float> @llvm.kvx.fcdiv.v2f32(<2 x float> %12, <2 x float> %13, i32 0)
  %15 = shufflevector <2 x float> %5, <2 x float> %8, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %16 = shufflevector <2 x float> %11, <2 x float> %14, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <4 x float> %15, <4 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %17
}

declare <2 x float> @llvm.kvx.fcdiv.v2f32(<2 x float>, <2 x float>, i32)

define <2 x float> @fcdivwp(<2 x float> %0, <2 x float> %1) {
; ALL-LABEL: fcdivwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fcdivwp $r0 = $r0r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = tail call <2 x float> @llvm.kvx.fcdiv.v2f32(<2 x float> %0, <2 x float> %1, i32 0)
  ret <2 x float> %3
}

define <4 x float> @fcdivwq(<4 x float> %0, <4 x float> %1) {
; ALL-LABEL: fcdivwq:
; ALL:       # %bb.0:
; ALL-NEXT:    copyd $r4 = $r0
; ALL-NEXT:    copyd $r5 = $r2
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivwp $r0 = $r4r5
; ALL-NEXT:    copyd $r2 = $r1
; ALL-NEXT:    ;;
; ALL-NEXT:    fcdivwp $r1 = $r2r3
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %3 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x float> %1, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %5 = tail call <2 x float> @llvm.kvx.fcdiv.v2f32(<2 x float> %3, <2 x float> %4, i32 0)
  %6 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %7 = shufflevector <4 x float> %1, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <2 x float> @llvm.kvx.fcdiv.v2f32(<2 x float> %6, <2 x float> %7, i32 0)
  %9 = shufflevector <2 x float> %5, <2 x float> %8, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %9
}

