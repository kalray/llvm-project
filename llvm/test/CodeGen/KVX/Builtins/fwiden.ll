; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: llc -mcpu=kv3-2 -O2 -o - %s | FileCheck %s --check-prefix=ALL
; RUN: clang -O2 -march=kv3-1 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define float @fwidenhw(half %0) {
; ALL-LABEL: fwidenhw:
; ALL:       # %bb.0:
; ALL-NEXT:    fwidenlhw.s $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call float @llvm.kvx.fwiden.f32(half %0, i32 1)
  ret float %2
}

declare float @llvm.kvx.fwiden.f32(half, i32)

define <2 x float> @fwidenhwp(<2 x half> %0) {
; ALL-LABEL: fwidenhwp:
; ALL:       # %bb.0:
; ALL-NEXT:    fwidenlhwp.s $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call <2 x float> @llvm.kvx.fwiden.v2f32(<2 x half> %0, i32 1)
  ret <2 x float> %2
}

declare <2 x float> @llvm.kvx.fwiden.v2f32(<2 x half>, i32)

define <4 x float> @fwidenhwq(<4 x half> %0) {
; ALL-LABEL: fwidenhwq:
; ALL:       # %bb.0:
; ALL-NEXT:    fwidenlhwp.s $r0 = $r0
; ALL-NEXT:    fwidenmhwp.s $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call <4 x float> @llvm.kvx.fwiden.v4f32(<4 x half> %0, i32 1)
  ret <4 x float> %2
}

declare <4 x float> @llvm.kvx.fwiden.v4f32(<4 x half>, i32)

define <8 x float> @fwidenhwo(<8 x half> %0) {
; ALL-LABEL: fwidenhwo:
; ALL:       # %bb.0:
; ALL-NEXT:    fwidenlhwp.s $r0 = $r0
; ALL-NEXT:    fwidenmhwp.s $r5 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r1 = $r5
; ALL-NEXT:    fwidenlhwp.s $r2 = $r1
; ALL-NEXT:    fwidenmhwp.s $r3 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x float> @llvm.kvx.fwiden.v4f32(<4 x half> %2, i32 1)
  %4 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x float> @llvm.kvx.fwiden.v4f32(<4 x half> %4, i32 1)
  %6 = shufflevector <4 x float> %3, <4 x float> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %6
}

define double @fwidenwd(float %0) {
; ALL-LABEL: fwidenwd:
; ALL:       # %bb.0:
; ALL-NEXT:    fwidenlwd.s $r0 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call double @llvm.kvx.fwiden.f64(float %0, i32 1)
  ret double %2
}

declare double @llvm.kvx.fwiden.f64(float, i32)

define <2 x double> @fwidenwdp(<2 x float> %0) {
; ALL-LABEL: fwidenwdp:
; ALL:       # %bb.0:
; ALL-NEXT:    fwidenlwd.s $r0 = $r0
; ALL-NEXT:    fwidenmwd.s $r1 = $r0
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = tail call <2 x double> @llvm.kvx.fwiden.v2f64(<2 x float> %0, i32 1)
  ret <2 x double> %2
}

declare <2 x double> @llvm.kvx.fwiden.v2f64(<2 x float>, i32)

define <4 x double> @fwidenwdq(<4 x float> %0) {
; ALL-LABEL: fwidenwdq:
; ALL:       # %bb.0:
; ALL-NEXT:    fwidenlwd.s $r0 = $r0
; ALL-NEXT:    fwidenmwd.s $r5 = $r0
; ALL-NEXT:    ;;
; ALL-NEXT:    copyd $r1 = $r5
; ALL-NEXT:    fwidenlwd.s $r2 = $r1
; ALL-NEXT:    fwidenmwd.s $r3 = $r1
; ALL-NEXT:    ret
; ALL-NEXT:    ;;
  %2 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x double> @llvm.kvx.fwiden.v2f64(<2 x float> %2, i32 1)
  %4 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x double> @llvm.kvx.fwiden.v2f64(<2 x float> %4, i32 1)
  %6 = shufflevector <2 x double> %3, <2 x double> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x double> %6
}
