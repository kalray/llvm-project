; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -o - %s -mtriple=kvx-kalray-cos | FileCheck %s --check-prefixes=CHECK,CV1
; RUN: llc -mcpu=kv3-2 -o - %s | FileCheck %s --check-prefixes=CHECK,CV2
; RUN: clang -c -o /dev/null %s
; RUN: clang -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

declare i64 @llvm.kvx.sbmm8(i64, i64)

define <4 x i16> @avghq(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: avghq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avghq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

declare <4 x i16> @llvm.kvx.avghq(<4 x i16>, <4 x i16>)

define <8 x i16> @avgho(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: avgho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avghq $r0 = $r0, $r2
; CHECK-NEXT:    avghq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <16 x i16> @avghx(<16 x i16> %a, <16 x i16> %b) {
; CV1-LABEL: avghx:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    avghq $r0 = $r0, $r4
; CV1-NEXT:    avghq $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    avghq $r2 = $r2, $r6
; CV1-NEXT:    avghq $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: avghx:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    avghq $r0 = $r0, $r4
; CV2-NEXT:    avghq $r1 = $r1, $r5
; CV2-NEXT:    avghq $r2 = $r2, $r6
; CV2-NEXT:    avghq $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.avghq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

define <2 x i32> @avgwp(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: avgwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.avgwp(<2 x i32>, <2 x i32>)

define <4 x i32> @avgwq(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: avgwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgwp $r0 = $r0, $r2
; CHECK-NEXT:    avgwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @avgwo(<8 x i32> %a, <8 x i32> %b) {
; CV1-LABEL: avgwo:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    avgwp $r0 = $r0, $r4
; CV1-NEXT:    avgwp $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    avgwp $r2 = $r2, $r6
; CV1-NEXT:    avgwp $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: avgwo:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    avgwp $r0 = $r0, $r4
; CV2-NEXT:    avgwp $r1 = $r1, $r5
; CV2-NEXT:    avgwp $r2 = $r2, $r6
; CV2-NEXT:    avgwp $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.avgwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

define <4 x i16> @avguhq(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: avguhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

declare <4 x i16> @llvm.kvx.avguhq(<4 x i16>, <4 x i16>)

define <8 x i16> @avguho(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: avguho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguhq $r0 = $r0, $r2
; CHECK-NEXT:    avguhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <16 x i16> @avguhx(<16 x i16> %a, <16 x i16> %b) {
; CV1-LABEL: avguhx:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    avguhq $r0 = $r0, $r4
; CV1-NEXT:    avguhq $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    avguhq $r2 = $r2, $r6
; CV1-NEXT:    avguhq $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: avguhx:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    avguhq $r0 = $r0, $r4
; CV2-NEXT:    avguhq $r1 = $r1, $r5
; CV2-NEXT:    avguhq $r2 = $r2, $r6
; CV2-NEXT:    avguhq $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.avguhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

define <2 x i32> @avguwp(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: avguwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.avguwp(<2 x i32>, <2 x i32>)

define <4 x i32> @avguwq(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: avguwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguwp $r0 = $r0, $r2
; CHECK-NEXT:    avguwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @avguwo(<8 x i32> %a, <8 x i32> %b) {
; CV1-LABEL: avguwo:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    avguwp $r0 = $r0, $r4
; CV1-NEXT:    avguwp $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    avguwp $r2 = $r2, $r6
; CV1-NEXT:    avguwp $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: avguwo:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    avguwp $r0 = $r0, $r4
; CV2-NEXT:    avguwp $r1 = $r1, $r5
; CV2-NEXT:    avguwp $r2 = $r2, $r6
; CV2-NEXT:    avguwp $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.avguwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

define <4 x i16> @avgrhq(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: avgrhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

declare <4 x i16> @llvm.kvx.avgrhq(<4 x i16>, <4 x i16>)

define <8 x i16> @avgrho(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: avgrho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrhq $r0 = $r0, $r2
; CHECK-NEXT:    avgrhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <16 x i16> @avgrhx(<16 x i16> %a, <16 x i16> %b) {
; CV1-LABEL: avgrhx:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    avgrhq $r0 = $r0, $r4
; CV1-NEXT:    avgrhq $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    avgrhq $r2 = $r2, $r6
; CV1-NEXT:    avgrhq $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: avgrhx:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    avgrhq $r0 = $r0, $r4
; CV2-NEXT:    avgrhq $r1 = $r1, $r5
; CV2-NEXT:    avgrhq $r2 = $r2, $r6
; CV2-NEXT:    avgrhq $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.avgrhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

define <2 x i32> @avgrwp(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: avgrwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.avgrwp(<2 x i32>, <2 x i32>)

define <4 x i32> @avgrwq(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: avgrwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrwp $r0 = $r0, $r2
; CHECK-NEXT:    avgrwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @avgrwo(<8 x i32> %a, <8 x i32> %b) {
; CV1-LABEL: avgrwo:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    avgrwp $r0 = $r0, $r4
; CV1-NEXT:    avgrwp $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    avgrwp $r2 = $r2, $r6
; CV1-NEXT:    avgrwp $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: avgrwo:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    avgrwp $r0 = $r0, $r4
; CV2-NEXT:    avgrwp $r1 = $r1, $r5
; CV2-NEXT:    avgrwp $r2 = $r2, $r6
; CV2-NEXT:    avgrwp $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.avgrwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

define <4 x i16> @avgruhq(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: avgruhq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruhq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

declare <4 x i16> @llvm.kvx.avgruhq(<4 x i16>, <4 x i16>)

define <8 x i16> @avgruho(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: avgruho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruhq $r0 = $r0, $r2
; CHECK-NEXT:    avgruhq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <16 x i16> @avgruhx(<16 x i16> %a, <16 x i16> %b) {
; CV1-LABEL: avgruhx:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    avgruhq $r0 = $r0, $r4
; CV1-NEXT:    avgruhq $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    avgruhq $r2 = $r2, $r6
; CV1-NEXT:    avgruhq $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: avgruhx:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    avgruhq $r0 = $r0, $r4
; CV2-NEXT:    avgruhq $r1 = $r1, $r5
; CV2-NEXT:    avgruhq $r2 = $r2, $r6
; CV2-NEXT:    avgruhq $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.avgruhq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

define <2 x i32> @avgruwp(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: avgruwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.avgruwp(<2 x i32>, <2 x i32>)

define <4 x i32> @avgruwq(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: avgruwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruwp $r0 = $r0, $r2
; CHECK-NEXT:    avgruwp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @avgruwo(<8 x i32> %a, <8 x i32> %b) {
; CV1-LABEL: avgruwo:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    avgruwp $r0 = $r0, $r4
; CV1-NEXT:    avgruwp $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    avgruwp $r2 = $r2, $r6
; CV1-NEXT:    avgruwp $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: avgruwo:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    avgruwp $r0 = $r0, $r4
; CV2-NEXT:    avgruwp $r1 = $r1, $r5
; CV2-NEXT:    avgruwp $r2 = $r2, $r6
; CV2-NEXT:    avgruwp $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.avgruwp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

define <4 x i16> @addshq(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: addshq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addshq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

declare <4 x i16> @llvm.kvx.addshq(<4 x i16>, <4 x i16>)

define <8 x i16> @addsho(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: addsho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addshq $r0 = $r0, $r2
; CHECK-NEXT:    addshq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <16 x i16> @addshx(<16 x i16> %a, <16 x i16> %b) {
; CV1-LABEL: addshx:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    addshq $r0 = $r0, $r4
; CV1-NEXT:    addshq $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    addshq $r2 = $r2, $r6
; CV1-NEXT:    addshq $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: addshx:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    addshq $r0 = $r0, $r4
; CV2-NEXT:    addshq $r1 = $r1, $r5
; CV2-NEXT:    addshq $r2 = $r2, $r6
; CV2-NEXT:    addshq $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

define <2 x i32> @addswp(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: addswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addswp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.addswp(<2 x i32>, <2 x i32>)

define <4 x i32> @addswq(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: addswq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addswp $r0 = $r0, $r2
; CHECK-NEXT:    addswp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @addswo(<8 x i32> %a, <8 x i32> %b) {
; CV1-LABEL: addswo:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    addswp $r0 = $r0, $r4
; CV1-NEXT:    addswp $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    addswp $r2 = $r2, $r6
; CV1-NEXT:    addswp $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: addswo:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    addswp $r0 = $r0, $r4
; CV2-NEXT:    addswp $r1 = $r1, $r5
; CV2-NEXT:    addswp $r2 = $r2, $r6
; CV2-NEXT:    addswp $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

define <2 x i64> @addsdp(<2 x i64> %a, <2 x i64> %b) {
; CHECK-LABEL: addsdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addsd $r0 = $r0, $r2
; CHECK-NEXT:    addsd $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.addsd(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.addsd(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

declare i64 @llvm.kvx.addsd(i64, i64)

define <4 x i64> @addsdq(<4 x i64> %a, <4 x i64> %b) {
; CV1-LABEL: addsdq:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    addsd $r0 = $r0, $r4
; CV1-NEXT:    addsd $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    addsd $r2 = $r2, $r6
; CV1-NEXT:    addsd $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: addsdq:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    addsd $r0 = $r0, $r4
; CV2-NEXT:    addsd $r1 = $r1, $r5
; CV2-NEXT:    addsd $r2 = $r2, $r6
; CV2-NEXT:    addsd $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.addsd(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.addsd(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.addsd(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.addsd(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

define <4 x i16> @addshqs(<4 x i16> %a, i16 %b) {
; CHECK-LABEL: addshqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8.@ $r1 = $r1, 0x2010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addshq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

define <8 x i16> @addshos(<8 x i16> %a, i16 %b) {
; CHECK-LABEL: addshos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8.@ $r2 = $r2, 0x2010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addshq $r0 = $r0, $r2
; CHECK-NEXT:    addshq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <16 x i16> @addshxs(<16 x i16> %a, i16 %b) {
; CV1-LABEL: addshxs:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8.@ $r4 = $r4, 0x2010201
; CV1-NEXT:    ;;
; CV1-NEXT:    addshq $r0 = $r0, $r4
; CV1-NEXT:    addshq $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    addshq $r2 = $r2, $r4
; CV1-NEXT:    addshq $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: addshxs:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbmm8.@ $r4 = $r4, 0x2010201
; CV2-NEXT:    ;;
; CV2-NEXT:    addshq $r0 = $r0, $r4
; CV2-NEXT:    addshq $r1 = $r1, $r4
; CV2-NEXT:    addshq $r2 = $r2, $r4
; CV2-NEXT:    addshq $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.addshq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

define <2 x i32> @addswps(<2 x i32> %a, i32 %b) {
; CHECK-LABEL: addswps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8.@ $r1 = $r1, 0x8040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addswp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

define <4 x i32> @addswqs(<4 x i32> %a, i32 %b) {
; CHECK-LABEL: addswqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8.@ $r2 = $r2, 0x8040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    addswp $r0 = $r0, $r2
; CHECK-NEXT:    addswp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @addswos(<8 x i32> %a, i32 %b) {
; CV1-LABEL: addswos:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8.@ $r4 = $r4, 0x8040201
; CV1-NEXT:    ;;
; CV1-NEXT:    addswp $r0 = $r0, $r4
; CV1-NEXT:    addswp $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    addswp $r2 = $r2, $r4
; CV1-NEXT:    addswp $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: addswos:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbmm8.@ $r4 = $r4, 0x8040201
; CV2-NEXT:    ;;
; CV2-NEXT:    addswp $r0 = $r0, $r4
; CV2-NEXT:    addswp $r1 = $r1, $r4
; CV2-NEXT:    addswp $r2 = $r2, $r4
; CV2-NEXT:    addswp $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.addswp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

define <2 x i64> @addsdps(<2 x i64> %a, i64 %b) {
; CHECK-LABEL: addsdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addsd $r0 = $r0, $r2
; CHECK-NEXT:    addsd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.addsd(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.addsd(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

define <4 x i64> @addsdqs(<4 x i64> %a, i64 %b) {
; CV1-LABEL: addsdqs:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    addsd $r0 = $r0, $r4
; CV1-NEXT:    addsd $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    addsd $r2 = $r2, $r4
; CV1-NEXT:    addsd $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: addsdqs:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    addsd $r0 = $r0, $r4
; CV2-NEXT:    addsd $r1 = $r1, $r4
; CV2-NEXT:    addsd $r2 = $r2, $r4
; CV2-NEXT:    addsd $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.addsd(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.addsd(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.addsd(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.addsd(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

define <4 x i16> @sbfshq(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: sbfshq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfshq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %0
}

declare <4 x i16> @llvm.kvx.sbfshq(<4 x i16>, <4 x i16>)

define <8 x i16> @sbfsho(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: sbfsho:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfshq $r0 = $r0, $r2
; CHECK-NEXT:    sbfshq $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <8 x i16> %b, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <16 x i16> @sbfshx(<16 x i16> %a, <16 x i16> %b) {
; CV1-LABEL: sbfshx:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbfshq $r0 = $r0, $r4
; CV1-NEXT:    sbfshq $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfshq $r2 = $r2, $r6
; CV1-NEXT:    sbfshq $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sbfshx:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbfshq $r0 = $r0, $r4
; CV2-NEXT:    sbfshq $r1 = $r1, $r5
; CV2-NEXT:    sbfshq $r2 = $r2, $r6
; CV2-NEXT:    sbfshq $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %0, <4 x i16> %1)
  %3 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %3, <4 x i16> %4)
  %6 = shufflevector <4 x i16> %2, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %7, <4 x i16> %8)
  %10 = shufflevector <4 x i16> %9, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %6, <16 x i16> %10, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %13 = shufflevector <16 x i16> %b, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %14 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %12, <4 x i16> %13)
  %15 = shufflevector <4 x i16> %14, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <16 x i16> %11, <16 x i16> %15, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %16
}

define <2 x i32> @sbfswp(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: sbfswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfswp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.sbfswp(<2 x i32>, <2 x i32>)

define <4 x i32> @sbfswq(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: sbfswq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfswp $r0 = $r0, $r2
; CHECK-NEXT:    sbfswp $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <4 x i32> %b, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @sbfswo(<8 x i32> %a, <8 x i32> %b) {
; CV1-LABEL: sbfswo:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbfswp $r0 = $r0, $r4
; CV1-NEXT:    sbfswp $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfswp $r2 = $r2, $r6
; CV1-NEXT:    sbfswp $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sbfswo:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbfswp $r0 = $r0, $r4
; CV2-NEXT:    sbfswp $r1 = $r1, $r5
; CV2-NEXT:    sbfswp $r2 = $r2, $r6
; CV2-NEXT:    sbfswp $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %2 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %0, <2 x i32> %1)
  %3 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %4 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %3, <2 x i32> %4)
  %6 = shufflevector <2 x i32> %2, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %9 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %7, <2 x i32> %8)
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %6, <8 x i32> %10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %13 = shufflevector <8 x i32> %b, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %14 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %12, <2 x i32> %13)
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = shufflevector <8 x i32> %11, <8 x i32> %15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %16
}

define <2 x i64> @sbfsdp(<2 x i64> %a, <2 x i64> %b) {
; CHECK-LABEL: sbfsdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfsd $r0 = $r0, $r2
; CHECK-NEXT:    sbfsd $r1 = $r1, $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = extractelement <2 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.sbfsd(i64 %0, i64 %1)
  %3 = insertelement <2 x i64> undef, i64 %2, i64 0
  %4 = extractelement <2 x i64> %a, i64 1
  %5 = extractelement <2 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.sbfsd(i64 %4, i64 %5)
  %7 = insertelement <2 x i64> %3, i64 %6, i64 1
  ret <2 x i64> %7
}

declare i64 @llvm.kvx.sbfsd(i64, i64)

define <4 x i64> @sbfsdq(<4 x i64> %a, <4 x i64> %b) {
; CV1-LABEL: sbfsdq:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbfsd $r0 = $r0, $r4
; CV1-NEXT:    sbfsd $r1 = $r1, $r5
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfsd $r2 = $r2, $r6
; CV1-NEXT:    sbfsd $r3 = $r3, $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sbfsdq:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbfsd $r0 = $r0, $r4
; CV2-NEXT:    sbfsd $r1 = $r1, $r5
; CV2-NEXT:    sbfsd $r2 = $r2, $r6
; CV2-NEXT:    sbfsd $r3 = $r3, $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = extractelement <4 x i64> %b, i64 0
  %2 = tail call i64 @llvm.kvx.sbfsd(i64 %0, i64 %1)
  %3 = insertelement <4 x i64> undef, i64 %2, i64 0
  %4 = extractelement <4 x i64> %a, i64 1
  %5 = extractelement <4 x i64> %b, i64 1
  %6 = tail call i64 @llvm.kvx.sbfsd(i64 %4, i64 %5)
  %7 = insertelement <4 x i64> %3, i64 %6, i64 1
  %8 = extractelement <4 x i64> %a, i64 2
  %9 = extractelement <4 x i64> %b, i64 2
  %10 = tail call i64 @llvm.kvx.sbfsd(i64 %8, i64 %9)
  %11 = insertelement <4 x i64> %7, i64 %10, i64 2
  %12 = extractelement <4 x i64> %a, i64 3
  %13 = extractelement <4 x i64> %b, i64 3
  %14 = tail call i64 @llvm.kvx.sbfsd(i64 %12, i64 %13)
  %15 = insertelement <4 x i64> %11, i64 %14, i64 3
  ret <4 x i64> %15
}

define <4 x i16> @sbfshqs(<4 x i16> %a, i16 %b) {
; CHECK-LABEL: sbfshqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8.@ $r1 = $r1, 0x2010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfshq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %a, <4 x i16> %1)
  ret <4 x i16> %2
}

define <8 x i16> @sbfshos(<8 x i16> %a, i16 %b) {
; CHECK-LABEL: sbfshos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8.@ $r2 = $r2, 0x2010201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfshq $r0 = $r0, $r2
; CHECK-NEXT:    sbfshq $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <8 x i16> %a, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %6
}

define <16 x i16> @sbfshxs(<16 x i16> %a, i16 %b) {
; CV1-LABEL: sbfshxs:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8.@ $r4 = $r4, 0x2010201
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfshq $r0 = $r0, $r4
; CV1-NEXT:    sbfshq $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfshq $r2 = $r2, $r4
; CV1-NEXT:    sbfshq $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sbfshxs:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbmm8.@ $r4 = $r4, 0x2010201
; CV2-NEXT:    ;;
; CV2-NEXT:    sbfshq $r0 = $r0, $r4
; CV2-NEXT:    sbfshq $r1 = $r1, $r4
; CV2-NEXT:    sbfshq $r2 = $r2, $r4
; CV2-NEXT:    sbfshq $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %conv = sext i16 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 144398866404409857)
  %1 = bitcast i64 %0 to <4 x i16>
  %2 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %2, <4 x i16> %1)
  %4 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %4, <4 x i16> %1)
  %6 = shufflevector <4 x i16> %3, <4 x i16> %5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %7, <4 x i16> %1)
  %9 = shufflevector <4 x i16> %8, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <16 x i16> %6, <16 x i16> %9, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = shufflevector <16 x i16> %a, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %12 = tail call <4 x i16> @llvm.kvx.sbfshq(<4 x i16> %11, <4 x i16> %1)
  %13 = shufflevector <4 x i16> %12, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <16 x i16> %10, <16 x i16> %13, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>
  ret <16 x i16> %14
}

define <2 x i32> @sbfswps(<2 x i32> %a, i32 %b) {
; CHECK-LABEL: sbfswps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8.@ $r1 = $r1, 0x8040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfswp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %a, <2 x i32> %1)
  ret <2 x i32> %2
}

define <4 x i32> @sbfswqs(<4 x i32> %a, i32 %b) {
; CHECK-LABEL: sbfswqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8.@ $r2 = $r2, 0x8040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbfswp $r0 = $r0, $r2
; CHECK-NEXT:    sbfswp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <4 x i32> %a, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %6
}

define <8 x i32> @sbfswos(<8 x i32> %a, i32 %b) {
; CV1-LABEL: sbfswos:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbmm8.@ $r4 = $r4, 0x8040201
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfswp $r0 = $r0, $r4
; CV1-NEXT:    sbfswp $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfswp $r2 = $r2, $r4
; CV1-NEXT:    sbfswp $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sbfswos:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbmm8.@ $r4 = $r4, 0x8040201
; CV2-NEXT:    ;;
; CV2-NEXT:    sbfswp $r0 = $r0, $r4
; CV2-NEXT:    sbfswp $r1 = $r1, $r4
; CV2-NEXT:    sbfswp $r2 = $r2, $r4
; CV2-NEXT:    sbfswp $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %conv = sext i32 %b to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x i32>
  %2 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %2, <2 x i32> %1)
  %4 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %4, <2 x i32> %1)
  %6 = shufflevector <2 x i32> %3, <2 x i32> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %7, <2 x i32> %1)
  %9 = shufflevector <2 x i32> %8, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x i32> %6, <8 x i32> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x i32> %a, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x i32> @llvm.kvx.sbfswp(<2 x i32> %11, <2 x i32> %1)
  %13 = shufflevector <2 x i32> %12, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x i32> %10, <8 x i32> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %14
}

define <2 x i64> @sbfsdps(<2 x i64> %a, i64 %b) {
; CHECK-LABEL: sbfsdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfsd $r0 = $r0, $r2
; CHECK-NEXT:    sbfsd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.sbfsd(i64 %0, i64 %b)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.sbfsd(i64 %3, i64 %b)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

define <4 x i64> @sbfsdqs(<4 x i64> %a, i64 %b) {
; CV1-LABEL: sbfsdqs:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    sbfsd $r0 = $r0, $r4
; CV1-NEXT:    sbfsd $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    sbfsd $r2 = $r2, $r4
; CV1-NEXT:    sbfsd $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: sbfsdqs:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    sbfsd $r0 = $r0, $r4
; CV2-NEXT:    sbfsd $r1 = $r1, $r4
; CV2-NEXT:    sbfsd $r2 = $r2, $r4
; CV2-NEXT:    sbfsd $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %a, i64 0
  %1 = tail call i64 @llvm.kvx.sbfsd(i64 %0, i64 %b)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %a, i64 1
  %4 = tail call i64 @llvm.kvx.sbfsd(i64 %3, i64 %b)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %a, i64 2
  %7 = tail call i64 @llvm.kvx.sbfsd(i64 %6, i64 %b)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %a, i64 3
  %10 = tail call i64 @llvm.kvx.sbfsd(i64 %9, i64 %b)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

define <2 x i32> @clswp(<2 x i32> %v) {
; CHECK-LABEL: clswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %v)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.clswp(<2 x i32>)

define <4 x i32> @clswq(<4 x i32> %v) {
; CHECK-LABEL: clswq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    clswp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %0)
  %2 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

define <8 x i32> @clswo(<8 x i32> %v) {
; CHECK-LABEL: clswo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clswp $r0 = $r0
; CHECK-NEXT:    clswp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clswp $r2 = $r2
; CHECK-NEXT:    clswp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %0)
  %2 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %5)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.clswp(<2 x i32> %9)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

define <2 x i64> @clsdp(<2 x i64> %v) {
; CHECK-LABEL: clsdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clsd $r0 = $r0
; CHECK-NEXT:    clsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.clsd(i64 %0)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.clsd(i64 %3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

declare i64 @llvm.kvx.clsd(i64)

define <4 x i64> @clsdq(<4 x i64> %v) {
; CHECK-LABEL: clsdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clsd $r0 = $r0
; CHECK-NEXT:    clsd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clsd $r2 = $r2
; CHECK-NEXT:    clsd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.clsd(i64 %0)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.clsd(i64 %3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %v, i64 2
  %7 = tail call i64 @llvm.kvx.clsd(i64 %6)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %v, i64 3
  %10 = tail call i64 @llvm.kvx.clsd(i64 %9)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

define <2 x i32> @clzwp(<2 x i32> %v) {
; CHECK-LABEL: clzwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %v)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.clzwp(<2 x i32>)

define <4 x i32> @clzwq(<4 x i32> %v) {
; CHECK-LABEL: clzwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    clzwp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %0)
  %2 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

define <8 x i32> @clzwo(<8 x i32> %v) {
; CHECK-LABEL: clzwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzwp $r0 = $r0
; CHECK-NEXT:    clzwp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clzwp $r2 = $r2
; CHECK-NEXT:    clzwp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %0)
  %2 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %5)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.clzwp(<2 x i32> %9)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

define <2 x i64> @clzdp(<2 x i64> %v) {
; CHECK-LABEL: clzdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.clzd(i64 %0)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.clzd(i64 %3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

declare i64 @llvm.kvx.clzd(i64)

define <4 x i64> @clzdq(<4 x i64> %v) {
; CHECK-LABEL: clzdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    clzd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    clzd $r2 = $r2
; CHECK-NEXT:    clzd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.clzd(i64 %0)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.clzd(i64 %3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %v, i64 2
  %7 = tail call i64 @llvm.kvx.clzd(i64 %6)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %v, i64 3
  %10 = tail call i64 @llvm.kvx.clzd(i64 %9)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

define <2 x i32> @ctzwp(<2 x i32> %v) {
; CHECK-LABEL: ctzwp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %v)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.ctzwp(<2 x i32>)

define <4 x i32> @ctzwq(<4 x i32> %v) {
; CHECK-LABEL: ctzwq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ctzwp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %0)
  %2 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

define <8 x i32> @ctzwo(<8 x i32> %v) {
; CHECK-LABEL: ctzwo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzwp $r0 = $r0
; CHECK-NEXT:    ctzwp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ctzwp $r2 = $r2
; CHECK-NEXT:    ctzwp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %0)
  %2 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %5)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.ctzwp(<2 x i32> %9)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

define <2 x i64> @ctzdp(<2 x i64> %v) {
; CHECK-LABEL: ctzdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ctzd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.ctzd(i64 %0)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.ctzd(i64 %3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

declare i64 @llvm.kvx.ctzd(i64)

define <4 x i64> @ctzdq(<4 x i64> %v) {
; CHECK-LABEL: ctzdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ctzd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    ctzd $r2 = $r2
; CHECK-NEXT:    ctzd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.ctzd(i64 %0)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.ctzd(i64 %3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %v, i64 2
  %7 = tail call i64 @llvm.kvx.ctzd(i64 %6)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %v, i64 3
  %10 = tail call i64 @llvm.kvx.ctzd(i64 %9)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

define <2 x i32> @cbswp(<2 x i32> %v) {
; CHECK-LABEL: cbswp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %v)
  ret <2 x i32> %0
}

declare <2 x i32> @llvm.kvx.cbswp(<2 x i32>)

define <4 x i32> @cbswq(<4 x i32> %v) {
; CHECK-LABEL: cbswq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    cbswp $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %0)
  %2 = shufflevector <4 x i32> %v, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %4
}

define <8 x i32> @cbswo(<8 x i32> %v) {
; CHECK-LABEL: cbswo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbswp $r0 = $r0
; CHECK-NEXT:    cbswp $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cbswp $r2 = $r2
; CHECK-NEXT:    cbswp $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %1 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %0)
  %2 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %3 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %2)
  %4 = shufflevector <2 x i32> %1, <2 x i32> %3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %5 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %6 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %5)
  %7 = shufflevector <2 x i32> %6, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %8 = shufflevector <8 x i32> %4, <8 x i32> %7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %9 = shufflevector <8 x i32> %v, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %10 = tail call <2 x i32> @llvm.kvx.cbswp(<2 x i32> %9)
  %11 = shufflevector <2 x i32> %10, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = shufflevector <8 x i32> %8, <8 x i32> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x i32> %12
}

define <2 x i64> @cbsdp(<2 x i64> %v) {
; CHECK-LABEL: cbsdp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    cbsd $r1 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.cbsd(i64 %0)
  %2 = insertelement <2 x i64> undef, i64 %1, i64 0
  %3 = extractelement <2 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.cbsd(i64 %3)
  %5 = insertelement <2 x i64> %2, i64 %4, i64 1
  ret <2 x i64> %5
}

declare i64 @llvm.kvx.cbsd(i64)

define <4 x i64> @cbsdq(<4 x i64> %v) {
; CHECK-LABEL: cbsdq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    cbsd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cbsd $r2 = $r2
; CHECK-NEXT:    cbsd $r3 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <4 x i64> %v, i64 0
  %1 = tail call i64 @llvm.kvx.cbsd(i64 %0)
  %2 = insertelement <4 x i64> undef, i64 %1, i64 0
  %3 = extractelement <4 x i64> %v, i64 1
  %4 = tail call i64 @llvm.kvx.cbsd(i64 %3)
  %5 = insertelement <4 x i64> %2, i64 %4, i64 1
  %6 = extractelement <4 x i64> %v, i64 2
  %7 = tail call i64 @llvm.kvx.cbsd(i64 %6)
  %8 = insertelement <4 x i64> %5, i64 %7, i64 2
  %9 = extractelement <4 x i64> %v, i64 3
  %10 = tail call i64 @llvm.kvx.cbsd(i64 %9)
  %11 = insertelement <4 x i64> %8, i64 %10, i64 3
  ret <4 x i64> %11
}

define <2 x float> @fminwps(<2 x float> %v1, float %v2) {
; CHECK-LABEL: fminwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fminwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %v1, <2 x float> %1)
  ret <2 x float> %2
}

declare <2 x float> @llvm.kvx.fminwp(<2 x float>, <2 x float>)

define <4 x float> @fminwqs(<4 x float> %v1, float %v2) {
; CHECK-LABEL: fminwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r2 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fminwp $r0 = $r0, $r2
; CHECK-NEXT:    fminwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = shufflevector <4 x float> %v1, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %2, <2 x float> %1)
  %4 = shufflevector <4 x float> %v1, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %4, <2 x float> %1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}

define <8 x float> @fminwos(<8 x float> %v1, float %v2) {
; CV1-LABEL: fminwos:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    fwidenlwd $r4 = $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    fixedd.rz $r4 = $r4, 0
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CV1-NEXT:    ;;
; CV1-NEXT:    fminwp $r0 = $r0, $r4
; CV1-NEXT:    fminwp $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    fminwp $r2 = $r2, $r4
; CV1-NEXT:    fminwp $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fminwos:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    fwidenlwd $r4 = $r4
; CV2-NEXT:    ;;
; CV2-NEXT:    fixedd.rz $r4 = $r4, 0
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CV2-NEXT:    ;;
; CV2-NEXT:    fminwp $r0 = $r0, $r4
; CV2-NEXT:    fminwp $r1 = $r1, $r4
; CV2-NEXT:    fminwp $r2 = $r2, $r4
; CV2-NEXT:    fminwp $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %2, <2 x float> %1)
  %4 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %4, <2 x float> %1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %7, <2 x float> %1)
  %9 = shufflevector <2 x float> %8, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x float> %6, <8 x float> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x float> @llvm.kvx.fminwp(<2 x float> %11, <2 x float> %1)
  %13 = shufflevector <2 x float> %12, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x float> %10, <8 x float> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x float> %14
}

define <2 x double> @fmindps(<2 x double> %v1, double %v2) {
; CHECK-LABEL: fmindps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmind $r0 = $r0, $r2
; CHECK-NEXT:    fmind $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x double> %v1, i64 0
  %1 = tail call double @llvm.kvx.fmind(double %0, double %v2)
  %2 = insertelement <2 x double> undef, double %1, i64 0
  %3 = extractelement <2 x double> %v1, i64 1
  %4 = tail call double @llvm.kvx.fmind(double %3, double %v2)
  %5 = insertelement <2 x double> %2, double %4, i64 1
  ret <2 x double> %5
}

declare double @llvm.kvx.fmind(double, double)

define <4 x double> @fmindqs(<4 x double> %v1, double %v2) {
; CV1-LABEL: fmindqs:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    fmind $r0 = $r0, $r4
; CV1-NEXT:    fmind $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    fmind $r2 = $r2, $r4
; CV1-NEXT:    fmind $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fmindqs:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    fmind $r0 = $r0, $r4
; CV2-NEXT:    fmind $r1 = $r1, $r4
; CV2-NEXT:    fmind $r2 = $r2, $r4
; CV2-NEXT:    fmind $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = extractelement <4 x double> %v1, i64 0
  %1 = tail call double @llvm.kvx.fmind(double %0, double %v2)
  %2 = insertelement <4 x double> undef, double %1, i64 0
  %3 = extractelement <4 x double> %v1, i64 1
  %4 = tail call double @llvm.kvx.fmind(double %3, double %v2)
  %5 = insertelement <4 x double> %2, double %4, i64 1
  %6 = extractelement <4 x double> %v1, i64 2
  %7 = tail call double @llvm.kvx.fmind(double %6, double %v2)
  %8 = insertelement <4 x double> %5, double %7, i64 2
  %9 = extractelement <4 x double> %v1, i64 3
  %10 = tail call double @llvm.kvx.fmind(double %9, double %v2)
  %11 = insertelement <4 x double> %8, double %10, i64 3
  ret <4 x double> %11
}

define <2 x float> @fmaxwps(<2 x float> %v1, float %v2) {
; CHECK-LABEL: fmaxwps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r1 = $r1, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r1 = $r1, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmaxwp $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %v1, <2 x float> %1)
  ret <2 x float> %2
}

declare <2 x float> @llvm.kvx.fmaxwp(<2 x float>, <2 x float>)

define <4 x float> @fmaxwqs(<4 x float> %v1, float %v2) {
; CHECK-LABEL: fmaxwqs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedd.rz $r2 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    sbmm8 $r2 = $r2, 0x804020108040201
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fmaxwp $r0 = $r0, $r2
; CHECK-NEXT:    fmaxwp $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = shufflevector <4 x float> %v1, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %2, <2 x float> %1)
  %4 = shufflevector <4 x float> %v1, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %4, <2 x float> %1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %6
}

define <8 x float> @fmaxwos(<8 x float> %v1, float %v2) {
; CV1-LABEL: fmaxwos:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    fwidenlwd $r4 = $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    fixedd.rz $r4 = $r4, 0
; CV1-NEXT:    ;;
; CV1-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CV1-NEXT:    ;;
; CV1-NEXT:    fmaxwp $r0 = $r0, $r4
; CV1-NEXT:    fmaxwp $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    fmaxwp $r2 = $r2, $r4
; CV1-NEXT:    fmaxwp $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fmaxwos:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    fwidenlwd $r4 = $r4
; CV2-NEXT:    ;;
; CV2-NEXT:    fixedd.rz $r4 = $r4, 0
; CV2-NEXT:    ;;
; CV2-NEXT:    sbmm8 $r4 = $r4, 0x804020108040201
; CV2-NEXT:    ;;
; CV2-NEXT:    fmaxwp $r0 = $r0, $r4
; CV2-NEXT:    fmaxwp $r1 = $r1, $r4
; CV2-NEXT:    fmaxwp $r2 = $r2, $r4
; CV2-NEXT:    fmaxwp $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %conv = fptosi float %v2 to i64
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %conv, i64 577588855662969345)
  %1 = bitcast i64 %0 to <2 x float>
  %2 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %3 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %2, <2 x float> %1)
  %4 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %5 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %4, <2 x float> %1)
  %6 = shufflevector <2 x float> %3, <2 x float> %5, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %8 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %7, <2 x float> %1)
  %9 = shufflevector <2 x float> %8, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = shufflevector <8 x float> %6, <8 x float> %9, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 undef, i32 undef>
  %11 = shufflevector <8 x float> %v1, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %12 = tail call <2 x float> @llvm.kvx.fmaxwp(<2 x float> %11, <2 x float> %1)
  %13 = shufflevector <2 x float> %12, <2 x float> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = shufflevector <8 x float> %10, <8 x float> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  ret <8 x float> %14
}

define <2 x double> @fmaxdps(<2 x double> %v1, double %v2) {
; CHECK-LABEL: fmaxdps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmaxd $r0 = $r0, $r2
; CHECK-NEXT:    fmaxd $r1 = $r1, $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = extractelement <2 x double> %v1, i64 0
  %1 = tail call double @llvm.kvx.fmaxd(double %0, double %v2)
  %2 = insertelement <2 x double> undef, double %1, i64 0
  %3 = extractelement <2 x double> %v1, i64 1
  %4 = tail call double @llvm.kvx.fmaxd(double %3, double %v2)
  %5 = insertelement <2 x double> %2, double %4, i64 1
  ret <2 x double> %5
}

declare double @llvm.kvx.fmaxd(double, double)

define <4 x double> @fmaxdqs(<4 x double> %v1, double %v2) {
; CV1-LABEL: fmaxdqs:
; CV1:       # %bb.0: # %entry
; CV1-NEXT:    fmaxd $r0 = $r0, $r4
; CV1-NEXT:    fmaxd $r1 = $r1, $r4
; CV1-NEXT:    ;;
; CV1-NEXT:    fmaxd $r2 = $r2, $r4
; CV1-NEXT:    fmaxd $r3 = $r3, $r4
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: fmaxdqs:
; CV2:       # %bb.0: # %entry
; CV2-NEXT:    fmaxd $r0 = $r0, $r4
; CV2-NEXT:    fmaxd $r1 = $r1, $r4
; CV2-NEXT:    fmaxd $r2 = $r2, $r4
; CV2-NEXT:    fmaxd $r3 = $r3, $r4
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
entry:
  %0 = extractelement <4 x double> %v1, i64 0
  %1 = tail call double @llvm.kvx.fmaxd(double %0, double %v2)
  %2 = insertelement <4 x double> undef, double %1, i64 0
  %3 = extractelement <4 x double> %v1, i64 1
  %4 = tail call double @llvm.kvx.fmaxd(double %3, double %v2)
  %5 = insertelement <4 x double> %2, double %4, i64 1
  %6 = extractelement <4 x double> %v1, i64 2
  %7 = tail call double @llvm.kvx.fmaxd(double %6, double %v2)
  %8 = insertelement <4 x double> %5, double %7, i64 2
  %9 = extractelement <4 x double> %v1, i64 3
  %10 = tail call double @llvm.kvx.fmaxd(double %9, double %v2)
  %11 = insertelement <4 x double> %8, double %10, i64 3
  ret <4 x double> %11
}
