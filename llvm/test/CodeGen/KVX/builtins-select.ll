; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=kv3-1 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV1
; RUN: llc -mcpu=kv3-2 -o - %s -O2 | FileCheck %s --check-prefixes=CHECK,CV2
; RUN: clang -O2 -c -o /dev/null %s
; RUN: clang -O2 -march=kv3-2 -c -o /dev/null %s

target triple = "kvx-kalray-cos"

define i64 @selectd(i64 %0, i64 %1, i64 %2) {
; CHECK-LABEL: selectd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = tail call i64 @llvm.kvx.select.i64(i64 %0, i64 %1, i64 %2, i32 7)
  ret i64 %4
}

declare i64 @llvm.kvx.select.i64(i64, i64, i64, i32)

define <2 x i64> @selectdp(<2 x i64> %0, <2 x i64> %1, <2 x i64> %2) {
; CHECK-LABEL: selectdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.even $r4 ? $r2 = $r0
; CHECK-NEXT:    cmoved.even $r5 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = extractelement <2 x i64> %0, i64 0
  %5 = extractelement <2 x i64> %1, i64 0
  %6 = extractelement <2 x i64> %2, i64 0
  %7 = tail call i64 @llvm.kvx.select.i64(i64 %4, i64 %5, i64 %6, i32 7)
  %8 = extractelement <2 x i64> %0, i64 1
  %9 = extractelement <2 x i64> %1, i64 1
  %10 = extractelement <2 x i64> %2, i64 1
  %11 = tail call i64 @llvm.kvx.select.i64(i64 %8, i64 %9, i64 %10, i32 7)
  %12 = insertelement <2 x i64> undef, i64 %7, i32 0
  %13 = insertelement <2 x i64> %12, i64 %11, i32 1
  ret <2 x i64> %13
}

define <4 x i64> @selectdq(<4 x i64> %0, <4 x i64> %1, <4 x i64> %2) {
; CV1-LABEL: selectdq:
; CV1:       # %bb.0:
; CV1-NEXT:    cmoved.even $r8 ? $r4 = $r0
; CV1-NEXT:    cmoved.even $r9 ? $r5 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    cmoved.even $r10 ? $r6 = $r2
; CV1-NEXT:    cmoved.even $r11 ? $r7 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r2 = $r6
; CV1-NEXT:    copyd $r3 = $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: selectdq:
; CV2:       # %bb.0:
; CV2-NEXT:    cmoved.even $r8 ? $r4 = $r0
; CV2-NEXT:    cmoved.even $r9 ? $r5 = $r1
; CV2-NEXT:    cmoved.even $r10 ? $r6 = $r2
; CV2-NEXT:    cmoved.even $r11 ? $r7 = $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    copyd $r2 = $r6
; CV2-NEXT:    copyd $r3 = $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %4 = extractelement <4 x i64> %0, i64 0
  %5 = extractelement <4 x i64> %1, i64 0
  %6 = extractelement <4 x i64> %2, i64 0
  %7 = tail call i64 @llvm.kvx.select.i64(i64 %4, i64 %5, i64 %6, i32 7)
  %8 = extractelement <4 x i64> %0, i64 1
  %9 = extractelement <4 x i64> %1, i64 1
  %10 = extractelement <4 x i64> %2, i64 1
  %11 = tail call i64 @llvm.kvx.select.i64(i64 %8, i64 %9, i64 %10, i32 7)
  %12 = extractelement <4 x i64> %0, i64 2
  %13 = extractelement <4 x i64> %1, i64 2
  %14 = extractelement <4 x i64> %2, i64 2
  %15 = tail call i64 @llvm.kvx.select.i64(i64 %12, i64 %13, i64 %14, i32 7)
  %16 = extractelement <4 x i64> %0, i64 3
  %17 = extractelement <4 x i64> %1, i64 3
  %18 = extractelement <4 x i64> %2, i64 3
  %19 = tail call i64 @llvm.kvx.select.i64(i64 %16, i64 %17, i64 %18, i32 7)
  %20 = insertelement <4 x i64> undef, i64 %7, i32 0
  %21 = insertelement <4 x i64> %20, i64 %11, i32 1
  %22 = insertelement <4 x i64> %21, i64 %15, i32 2
  %23 = insertelement <4 x i64> %22, i64 %19, i32 3
  ret <4 x i64> %23
}

define double @selectfd(double %0, double %1, double %2) {
; CHECK-LABEL: selectfd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fixedud.rz $r2 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = fptoui double %2 to i64
  %5 = tail call double @llvm.kvx.select.f64(double %0, double %1, i64 %4, i32 7)
  ret double %5
}

declare double @llvm.kvx.select.f64(double, double, i64, i32)

define <2 x double> @selectfdp(<2 x double> %0, <2 x double> %1, <2 x double> %2) {
; CHECK-LABEL: selectfdp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmoved.even $r4 ? $r2 = $r0
; CHECK-NEXT:    cmoved.even $r5 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = extractelement <2 x double> %0, i64 0
  %5 = extractelement <2 x double> %1, i64 0
  %6 = bitcast <2 x double> %2 to <2 x i64>
  %7 = extractelement <2 x i64> %6, i64 0
  %8 = tail call double @llvm.kvx.select.f64(double %4, double %5, i64 %7, i32 7)
  %9 = extractelement <2 x double> %0, i64 1
  %10 = extractelement <2 x double> %1, i64 1
  %11 = extractelement <2 x i64> %6, i64 1
  %12 = tail call double @llvm.kvx.select.f64(double %9, double %10, i64 %11, i32 7)
  %13 = insertelement <2 x double> undef, double %8, i32 0
  %14 = insertelement <2 x double> %13, double %12, i32 1
  ret <2 x double> %14
}

define <4 x double> @selectfdq(<4 x double> %0, <4 x double> %1, <4 x double> %2) {
; CV1-LABEL: selectfdq:
; CV1:       # %bb.0:
; CV1-NEXT:    cmoved.even $r8 ? $r4 = $r0
; CV1-NEXT:    cmoved.even $r9 ? $r5 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    cmoved.even $r10 ? $r6 = $r2
; CV1-NEXT:    cmoved.even $r11 ? $r7 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r2 = $r6
; CV1-NEXT:    copyd $r3 = $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: selectfdq:
; CV2:       # %bb.0:
; CV2-NEXT:    cmoved.even $r8 ? $r4 = $r0
; CV2-NEXT:    cmoved.even $r9 ? $r5 = $r1
; CV2-NEXT:    cmoved.even $r10 ? $r6 = $r2
; CV2-NEXT:    cmoved.even $r11 ? $r7 = $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    copyd $r2 = $r6
; CV2-NEXT:    copyd $r3 = $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %4 = extractelement <4 x double> %0, i64 0
  %5 = extractelement <4 x double> %1, i64 0
  %6 = bitcast <4 x double> %2 to <4 x i64>
  %7 = extractelement <4 x i64> %6, i64 0
  %8 = tail call double @llvm.kvx.select.f64(double %4, double %5, i64 %7, i32 7)
  %9 = extractelement <4 x double> %0, i64 1
  %10 = extractelement <4 x double> %1, i64 1
  %11 = extractelement <4 x i64> %6, i64 1
  %12 = tail call double @llvm.kvx.select.f64(double %9, double %10, i64 %11, i32 7)
  %13 = extractelement <4 x double> %0, i64 2
  %14 = extractelement <4 x double> %1, i64 2
  %15 = extractelement <4 x i64> %6, i64 2
  %16 = tail call double @llvm.kvx.select.f64(double %13, double %14, i64 %15, i32 7)
  %17 = extractelement <4 x double> %0, i64 3
  %18 = extractelement <4 x double> %1, i64 3
  %19 = extractelement <4 x i64> %6, i64 3
  %20 = tail call double @llvm.kvx.select.f64(double %17, double %18, i64 %19, i32 7)
  %21 = insertelement <4 x double> undef, double %8, i32 0
  %22 = insertelement <4 x double> %21, double %12, i32 1
  %23 = insertelement <4 x double> %22, double %16, i32 2
  %24 = insertelement <4 x double> %23, double %20, i32 3
  ret <4 x double> %24
}

define float @selectfw(float %0, float %1, float %2) {
; CHECK-LABEL: selectfw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fwidenlwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fixedud.rz $r2 = $r2, 0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = fptoui float %2 to i64
  %5 = tail call float @llvm.kvx.select.f32(float %0, float %1, i64 %4, i32 7)
  ret float %5
}

declare float @llvm.kvx.select.f32(float, float, i64, i32)

define <2 x float> @selectfwp(<2 x float> %0, <2 x float> %1, <2 x i32> %2) {
; CHECK-LABEL: selectfwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovewp.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = tail call <2 x float> @llvm.kvx.select.vec.v2f32(<2 x float> %0, <2 x float> %1, <2 x i32> %2, i32 7)
  ret <2 x float> %4
}

declare <2 x float> @llvm.kvx.select.vec.v2f32(<2 x float>, <2 x float>, <2 x i32>, i32)

define <4 x float> @selectfwq(<4 x float> %0, <4 x float> %1, <4 x i32> %2) {
; CHECK-LABEL: selectfwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovewp.even $r4 ? $r2 = $r0
; CHECK-NEXT:    cmovewp.even $r5 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %5 = shufflevector <4 x float> %1, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i32> %2, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %7 = tail call <2 x float> @llvm.kvx.select.vec.v2f32(<2 x float> %4, <2 x float> %5, <2 x i32> %6, i32 7)
  %8 = shufflevector <4 x float> %0, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %9 = shufflevector <4 x float> %1, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %10 = shufflevector <4 x i32> %2, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <2 x float> @llvm.kvx.select.vec.v2f32(<2 x float> %8, <2 x float> %9, <2 x i32> %10, i32 7)
  %12 = shufflevector <2 x float> %7, <2 x float> %11, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x float> %12
}

define <8 x float> @selectfwo(<8 x float> %0, <8 x float> %1, <8 x i32> %2) {
; CV1-LABEL: selectfwo:
; CV1:       # %bb.0:
; CV1-NEXT:    cmovewp.even $r8 ? $r4 = $r0
; CV1-NEXT:    cmovewp.even $r9 ? $r5 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    cmovewp.even $r10 ? $r6 = $r2
; CV1-NEXT:    cmovewp.even $r11 ? $r7 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r2 = $r6
; CV1-NEXT:    copyd $r3 = $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: selectfwo:
; CV2:       # %bb.0:
; CV2-NEXT:    cmovewp.even $r8 ? $r4 = $r0
; CV2-NEXT:    cmovewp.even $r9 ? $r5 = $r1
; CV2-NEXT:    cmovewp.even $r10 ? $r6 = $r2
; CV2-NEXT:    cmovewp.even $r11 ? $r7 = $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    copyd $r2 = $r6
; CV2-NEXT:    copyd $r3 = $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %4 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %5 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <8 x i32> %2, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %7 = tail call <2 x float> @llvm.kvx.select.vec.v2f32(<2 x float> %4, <2 x float> %5, <2 x i32> %6, i32 7)
  %8 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %9 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 2, i32 3>
  %10 = shufflevector <8 x i32> %2, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <2 x float> @llvm.kvx.select.vec.v2f32(<2 x float> %8, <2 x float> %9, <2 x i32> %10, i32 7)
  %12 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %13 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 4, i32 5>
  %14 = shufflevector <8 x i32> %2, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %15 = tail call <2 x float> @llvm.kvx.select.vec.v2f32(<2 x float> %12, <2 x float> %13, <2 x i32> %14, i32 7)
  %16 = shufflevector <8 x float> %0, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %17 = shufflevector <8 x float> %1, <8 x float> undef, <2 x i32> <i32 6, i32 7>
  %18 = shufflevector <8 x i32> %2, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %19 = tail call <2 x float> @llvm.kvx.select.vec.v2f32(<2 x float> %16, <2 x float> %17, <2 x i32> %18, i32 7)
  %20 = shufflevector <2 x float> %7, <2 x float> %11, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %21 = shufflevector <2 x float> %15, <2 x float> %19, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <4 x float> %20, <4 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x float> %22
}

define <8 x half> @selectfho(<8 x half> %0, <8 x half> %1, <8 x i16> %2) {
; CHECK-LABEL: selectfho:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovehq.even $r4 ? $r2 = $r0
; CHECK-NEXT:    cmovehq.even $r5 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = shufflevector <8 x half> %1, <8 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6 = shufflevector <8 x i16> %2, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7 = tail call <4 x half> @llvm.kvx.select.vec.v4f16(<4 x half> %4, <4 x half> %5, <4 x i16> %6, i32 7)
  %8 = shufflevector <8 x half> %0, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9 = shufflevector <8 x half> %1, <8 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10 = shufflevector <8 x i16> %2, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11 = tail call <4 x half> @llvm.kvx.select.vec.v4f16(<4 x half> %8, <4 x half> %9, <4 x i16> %10, i32 7)
  %12 = shufflevector <4 x half> %7, <4 x half> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x half> %12
}

declare <4 x half> @llvm.kvx.select.vec.v4f16(<4 x half>, <4 x half>, <4 x i16>, i32)

define <2 x half> @selectfhp(<2 x half> %0, <2 x half> %1, <2 x i16> %2) {
; CHECK-LABEL: selectfhp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovehq.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = tail call <2 x half> @llvm.kvx.select.vec.v2f16(<2 x half> %0, <2 x half> %1, <2 x i16> %2, i32 7)
  ret <2 x half> %4
}

declare <2 x half> @llvm.kvx.select.vec.v2f16(<2 x half>, <2 x half>, <2 x i16>, i32)

define <4 x half> @selectfhq(<4 x half> %0, <4 x half> %1, <4 x i16> %2) {
; CHECK-LABEL: selectfhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovehq.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = tail call <4 x half> @llvm.kvx.select.vec.v4f16(<4 x half> %0, <4 x half> %1, <4 x i16> %2, i32 7)
  ret <4 x half> %4
}

define <16 x half> @selectfhx(<16 x half> %0, <16 x half> %1, <16 x i16> %2) {
; CV1-LABEL: selectfhx:
; CV1:       # %bb.0:
; CV1-NEXT:    cmovehq.even $r8 ? $r4 = $r0
; CV1-NEXT:    cmovehq.even $r9 ? $r5 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    cmovehq.even $r10 ? $r6 = $r2
; CV1-NEXT:    cmovehq.even $r11 ? $r7 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r2 = $r6
; CV1-NEXT:    copyd $r3 = $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: selectfhx:
; CV2:       # %bb.0:
; CV2-NEXT:    cmovehq.even $r8 ? $r4 = $r0
; CV2-NEXT:    cmovehq.even $r9 ? $r5 = $r1
; CV2-NEXT:    cmovehq.even $r10 ? $r6 = $r2
; CV2-NEXT:    cmovehq.even $r11 ? $r7 = $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    copyd $r2 = $r6
; CV2-NEXT:    copyd $r3 = $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %4 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = shufflevector <16 x half> %1, <16 x half> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6 = shufflevector <16 x i16> %2, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7 = tail call <4 x half> @llvm.kvx.select.vec.v4f16(<4 x half> %4, <4 x half> %5, <4 x i16> %6, i32 7)
  %8 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9 = shufflevector <16 x half> %1, <16 x half> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10 = shufflevector <16 x i16> %2, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11 = tail call <4 x half> @llvm.kvx.select.vec.v4f16(<4 x half> %8, <4 x half> %9, <4 x i16> %10, i32 7)
  %12 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %13 = shufflevector <16 x half> %1, <16 x half> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %14 = shufflevector <16 x i16> %2, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %15 = tail call <4 x half> @llvm.kvx.select.vec.v4f16(<4 x half> %12, <4 x half> %13, <4 x i16> %14, i32 7)
  %16 = shufflevector <16 x half> %0, <16 x half> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %17 = shufflevector <16 x half> %1, <16 x half> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %18 = shufflevector <16 x i16> %2, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %19 = tail call <4 x half> @llvm.kvx.select.vec.v4f16(<4 x half> %16, <4 x half> %17, <4 x i16> %18, i32 7)
  %20 = shufflevector <4 x half> %7, <4 x half> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = shufflevector <4 x half> %15, <4 x half> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <8 x half> %20, <8 x half> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x half> %22
}

define <8 x i16> @selectho(<8 x i16> %0, <8 x i16> %1, <8 x i16> %2) {
; CHECK-LABEL: selectho:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovehq.even $r4 ? $r2 = $r0
; CHECK-NEXT:    cmovehq.even $r5 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = shufflevector <8 x i16> %0, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = shufflevector <8 x i16> %1, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6 = shufflevector <8 x i16> %2, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7 = tail call <4 x i16> @llvm.kvx.select.vec.v4i16(<4 x i16> %4, <4 x i16> %5, <4 x i16> %6, i32 7)
  %8 = shufflevector <8 x i16> %0, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9 = shufflevector <8 x i16> %1, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10 = shufflevector <8 x i16> %2, <8 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11 = tail call <4 x i16> @llvm.kvx.select.vec.v4i16(<4 x i16> %8, <4 x i16> %9, <4 x i16> %10, i32 7)
  %12 = shufflevector <4 x i16> %7, <4 x i16> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i16> %12
}

declare <4 x i16> @llvm.kvx.select.vec.v4i16(<4 x i16>, <4 x i16>, <4 x i16>, i32)

define <2 x i16> @selecthp(<2 x i16> %0, <2 x i16> %1, <2 x i16> %2) {
; CHECK-LABEL: selecthp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovehq.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = tail call <2 x i16> @llvm.kvx.select.vec.v2i16(<2 x i16> %0, <2 x i16> %1, <2 x i16> %2, i32 7)
  ret <2 x i16> %4
}

declare <2 x i16> @llvm.kvx.select.vec.v2i16(<2 x i16>, <2 x i16>, <2 x i16>, i32)

define <4 x i16> @selecthq(<4 x i16> %0, <4 x i16> %1, <4 x i16> %2) {
; CHECK-LABEL: selecthq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovehq.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = tail call <4 x i16> @llvm.kvx.select.vec.v4i16(<4 x i16> %0, <4 x i16> %1, <4 x i16> %2, i32 7)
  ret <4 x i16> %4
}

define <16 x i16> @selecthx(<16 x i16> %0, <16 x i16> %1, <16 x i16> %2) {
; CV1-LABEL: selecthx:
; CV1:       # %bb.0:
; CV1-NEXT:    cmovehq.even $r8 ? $r4 = $r0
; CV1-NEXT:    cmovehq.even $r9 ? $r5 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    cmovehq.even $r10 ? $r6 = $r2
; CV1-NEXT:    cmovehq.even $r11 ? $r7 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r2 = $r6
; CV1-NEXT:    copyd $r3 = $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: selecthx:
; CV2:       # %bb.0:
; CV2-NEXT:    cmovehq.even $r8 ? $r4 = $r0
; CV2-NEXT:    cmovehq.even $r9 ? $r5 = $r1
; CV2-NEXT:    cmovehq.even $r10 ? $r6 = $r2
; CV2-NEXT:    cmovehq.even $r11 ? $r7 = $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    copyd $r2 = $r6
; CV2-NEXT:    copyd $r3 = $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %4 = shufflevector <16 x i16> %0, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5 = shufflevector <16 x i16> %1, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6 = shufflevector <16 x i16> %2, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7 = tail call <4 x i16> @llvm.kvx.select.vec.v4i16(<4 x i16> %4, <4 x i16> %5, <4 x i16> %6, i32 7)
  %8 = shufflevector <16 x i16> %0, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9 = shufflevector <16 x i16> %1, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10 = shufflevector <16 x i16> %2, <16 x i16> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11 = tail call <4 x i16> @llvm.kvx.select.vec.v4i16(<4 x i16> %8, <4 x i16> %9, <4 x i16> %10, i32 7)
  %12 = shufflevector <16 x i16> %0, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %13 = shufflevector <16 x i16> %1, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %14 = shufflevector <16 x i16> %2, <16 x i16> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %15 = tail call <4 x i16> @llvm.kvx.select.vec.v4i16(<4 x i16> %12, <4 x i16> %13, <4 x i16> %14, i32 7)
  %16 = shufflevector <16 x i16> %0, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %17 = shufflevector <16 x i16> %1, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %18 = shufflevector <16 x i16> %2, <16 x i16> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %19 = tail call <4 x i16> @llvm.kvx.select.vec.v4i16(<4 x i16> %16, <4 x i16> %17, <4 x i16> %18, i32 7)
  %20 = shufflevector <4 x i16> %7, <4 x i16> %11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = shufflevector <4 x i16> %15, <4 x i16> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <8 x i16> %20, <8 x i16> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  ret <16 x i16> %22
}

define i32 @selectw(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: selectw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    zxwd $r2 = $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    cmoved.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = zext i32 %2 to i64
  %5 = tail call i32 @llvm.kvx.select.i32(i32 %0, i32 %1, i64 %4, i32 7)
  ret i32 %5
}

declare i32 @llvm.kvx.select.i32(i32, i32, i64, i32)

define <8 x i32> @selectwo(<8 x i32> %0, <8 x i32> %1, <8 x i32> %2) {
; CV1-LABEL: selectwo:
; CV1:       # %bb.0:
; CV1-NEXT:    cmovewp.even $r8 ? $r4 = $r0
; CV1-NEXT:    cmovewp.even $r9 ? $r5 = $r1
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r0 = $r4
; CV1-NEXT:    copyd $r1 = $r5
; CV1-NEXT:    cmovewp.even $r10 ? $r6 = $r2
; CV1-NEXT:    cmovewp.even $r11 ? $r7 = $r3
; CV1-NEXT:    ;;
; CV1-NEXT:    copyd $r2 = $r6
; CV1-NEXT:    copyd $r3 = $r7
; CV1-NEXT:    ret
; CV1-NEXT:    ;;
;
; CV2-LABEL: selectwo:
; CV2:       # %bb.0:
; CV2-NEXT:    cmovewp.even $r8 ? $r4 = $r0
; CV2-NEXT:    cmovewp.even $r9 ? $r5 = $r1
; CV2-NEXT:    cmovewp.even $r10 ? $r6 = $r2
; CV2-NEXT:    cmovewp.even $r11 ? $r7 = $r3
; CV2-NEXT:    ;;
; CV2-NEXT:    copyd $r0 = $r4
; CV2-NEXT:    copyd $r1 = $r5
; CV2-NEXT:    copyd $r2 = $r6
; CV2-NEXT:    copyd $r3 = $r7
; CV2-NEXT:    ret
; CV2-NEXT:    ;;
  %4 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = shufflevector <8 x i32> %1, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <8 x i32> %2, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  %7 = tail call <2 x i32> @llvm.kvx.select.vec.v2i32(<2 x i32> %4, <2 x i32> %5, <2 x i32> %6, i32 7)
  %8 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %9 = shufflevector <8 x i32> %1, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %10 = shufflevector <8 x i32> %2, <8 x i32> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <2 x i32> @llvm.kvx.select.vec.v2i32(<2 x i32> %8, <2 x i32> %9, <2 x i32> %10, i32 7)
  %12 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %13 = shufflevector <8 x i32> %1, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %14 = shufflevector <8 x i32> %2, <8 x i32> undef, <2 x i32> <i32 4, i32 5>
  %15 = tail call <2 x i32> @llvm.kvx.select.vec.v2i32(<2 x i32> %12, <2 x i32> %13, <2 x i32> %14, i32 7)
  %16 = shufflevector <8 x i32> %0, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %17 = shufflevector <8 x i32> %1, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %18 = shufflevector <8 x i32> %2, <8 x i32> undef, <2 x i32> <i32 6, i32 7>
  %19 = tail call <2 x i32> @llvm.kvx.select.vec.v2i32(<2 x i32> %16, <2 x i32> %17, <2 x i32> %18, i32 7)
  %20 = shufflevector <2 x i32> %7, <2 x i32> %11, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %21 = shufflevector <2 x i32> %15, <2 x i32> %19, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <4 x i32> %20, <4 x i32> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i32> %22
}

declare <2 x i32> @llvm.kvx.select.vec.v2i32(<2 x i32>, <2 x i32>, <2 x i32>, i32)

define <2 x i32> @selectwp(<2 x i32> %0, <2 x i32> %1, <2 x i32> %2) {
; CHECK-LABEL: selectwp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovewp.even $r2 ? $r1 = $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = tail call <2 x i32> @llvm.kvx.select.vec.v2i32(<2 x i32> %0, <2 x i32> %1, <2 x i32> %2, i32 7)
  ret <2 x i32> %4
}

define <4 x i32> @selectwq(<4 x i32> %0, <4 x i32> %1, <4 x i32> %2) {
; CHECK-LABEL: selectwq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmovewp.even $r4 ? $r2 = $r0
; CHECK-NEXT:    cmovewp.even $r5 ? $r3 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    copyd $r1 = $r3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
  %4 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = shufflevector <4 x i32> %1, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i32> %2, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %7 = tail call <2 x i32> @llvm.kvx.select.vec.v2i32(<2 x i32> %4, <2 x i32> %5, <2 x i32> %6, i32 7)
  %8 = shufflevector <4 x i32> %0, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %9 = shufflevector <4 x i32> %1, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %10 = shufflevector <4 x i32> %2, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <2 x i32> @llvm.kvx.select.vec.v2i32(<2 x i32> %8, <2 x i32> %9, <2 x i32> %10, i32 7)
  %12 = shufflevector <2 x i32> %7, <2 x i32> %11, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  ret <4 x i32> %12
}

