; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define <2 x float> @eq(<2 x float> %a, <2 x float> %b){
; CHECK-LABEL: eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnwp.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq <2 x float> %a, %b
  %sext = sext <2 x i1> %cmp to <2 x i32>
  %0 = bitcast <2 x i32> %sext to <2 x float>
  ret <2 x float> %0
}

define <2 x float> @neq(<2 x float> %a, <2 x float> %b){
; CHECK-LABEL: neq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnwp.une $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une <2 x float> %a, %b
  %sext = sext <2 x i1> %cmp to <2 x i32>
  %0 = bitcast <2 x i32> %sext to <2 x float>
  ret <2 x float> %0
}

define <2 x float> @gt(<2 x float> %a, <2 x float> %b){
; CHECK-LABEL: gt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnwp.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ogt <2 x float> %a, %b
  %sext = sext <2 x i1> %cmp to <2 x i32>
  %0 = bitcast <2 x i32> %sext to <2 x float>
  ret <2 x float> %0
}

define <2 x float> @lt(<2 x float> %a, <2 x float> %b){
; CHECK-LABEL: lt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnwp.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt <2 x float> %a, %b
  %sext = sext <2 x i1> %cmp to <2 x i32>
  %0 = bitcast <2 x i32> %sext to <2 x float>
  ret <2 x float> %0
}

define <2 x float> @gte(<2 x float> %a, <2 x float> %b){
; CHECK-LABEL: gte:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnwp.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oge <2 x float> %a, %b
  %sext = sext <2 x i1> %cmp to <2 x i32>
  %0 = bitcast <2 x i32> %sext to <2 x float>
  ret <2 x float> %0
}

define <2 x float> @lte(<2 x float> %a, <2 x float> %b){
; CHECK-LABEL: lte:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnwp.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ole <2 x float> %a, %b
  %sext = sext <2 x i1> %cmp to <2 x i32>
  %0 = bitcast <2 x i32> %sext to <2 x float>
  ret <2 x float> %0
}

