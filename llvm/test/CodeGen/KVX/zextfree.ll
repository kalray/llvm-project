; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define i64 @maddw_reg(i32 %a, i32 %b, i32 %c){
; CHECK-LABEL: maddw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maddw $r0 = $r2, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = mul i32 %c, %b
  %add = add i32 %mul, %a
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @maddw_imm(i32 %a, i32 %b){
; CHECK-LABEL: maddw_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maddw $r0 = $r1, 10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = mul i32 %b, 10
  %add = add i32 %mul, %a
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @addx2w_reg(i32 %a, i32 %b){
; CHECK-LABEL: addx2w_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addx2w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 1
  %add = add i32 %shl, %a
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @addx4w_reg(i32 %a, i32 %b){
; CHECK-LABEL: addx4w_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addx4w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 2
  %add = add i32 %shl, %a
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @addx8w_reg(i32 %a, i32 %b){
; CHECK-LABEL: addx8w_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addx8w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 3
  %add = add i32 %shl, %a
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @addx16w_reg(i32 %a, i32 %b){
; CHECK-LABEL: addx16w_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addx16w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 4
  %add = add i32 %shl, %a
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @addx2w_imm(i32 %a, i32 %b){
; CHECK-LABEL: addx2w_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addx2w $r0 = $r1, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 1
  %add = add i32 %shl, 16
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @addx4w_imm(i32 %a, i32 %b){
; CHECK-LABEL: addx4w_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addx4w $r0 = $r1, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 2
  %add = add i32 %shl, 16
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @addx8w_imm(i32 %a, i32 %b){
; CHECK-LABEL: addx8w_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addx8w $r0 = $r1, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 3
  %add = add i32 %shl, 16
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @addx16w_imm(i32 %a, i32 %b){
; CHECK-LABEL: addx16w_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addx16w $r0 = $r1, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 4
  %add = add i32 %shl, 16
  %conv = zext i32 %add to i64
  ret i64 %conv
}

define i64 @sbfx2w_reg(i32 %a, i32 %b){
; CHECK-LABEL: sbfx2w_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 1
  %sub = sub i32 %a, %shl
  %conv = zext i32 %sub to i64
  ret i64 %conv
}

define i64 @sbfx4w_reg(i32 %a, i32 %b){
; CHECK-LABEL: sbfx4w_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 2
  %sub = sub i32 %a, %shl
  %conv = zext i32 %sub to i64
  ret i64 %conv
}

define i64 @sbfx8w_reg(i32 %a, i32 %b){
; CHECK-LABEL: sbfx8w_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 3
  %sub = sub i32 %a, %shl
  %conv = zext i32 %sub to i64
  ret i64 %conv
}

define i64 @sbfx16w_reg(i32 %a, i32 %b){
; CHECK-LABEL: sbfx16w_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16w $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 4
  %sub = sub i32 %a, %shl
  %conv = zext i32 %sub to i64
  ret i64 %conv
}

define i64 @sbfx2w_imm(i32 %a, i32 %b){
; CHECK-LABEL: sbfx2w_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx2w $r0 = $r1, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 1
  %sub = sub i32 16, %shl
  %conv = zext i32 %sub to i64
  ret i64 %conv
}

define i64 @sbfx4w_imm(i32 %a, i32 %b){
; CHECK-LABEL: sbfx4w_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx4w $r0 = $r1, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 2
  %sub = sub i32 16, %shl
  %conv = zext i32 %sub to i64
  ret i64 %conv
}

define i64 @sbfx8w_imm(i32 %a, i32 %b){
; CHECK-LABEL: sbfx8w_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx8w $r0 = $r1, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 3
  %sub = sub i32 16, %shl
  %conv = zext i32 %sub to i64
  ret i64 %conv
}

define i64 @sbfx16w_imm(i32 %a, i32 %b){
; CHECK-LABEL: sbfx16w_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfx16w $r0 = $r1, 16
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %b, 4
  %sub = sub i32 16, %shl
  %conv = zext i32 %sub to i64
  ret i64 %conv
}

define i64 @andw_reg(i32 %a, i32 %b){
; CHECK-LABEL: andw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %b, %a
  %conv = zext i32 %and to i64
  ret i64 %conv
}

define i64 @andw_imm10(i32 %a){
; CHECK-LABEL: andw_imm10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %a, 10
  %conv = zext i32 %and to i64
  ret i64 %conv
}

define i64 @andw_imm37(i32 %a){
; CHECK-LABEL: andw_imm37:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andw $r0 = $r0, 0x8000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %and = and i32 %a, 32768
  %conv = zext i32 %and to i64
  ret i64 %conv
}

define i64 @orw_reg(i32 %a, i32 %b){
; CHECK-LABEL: orw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor i32 %b, %a
  %conv = zext i32 %xor to i64
  ret i64 %conv
}

define i64 @orw_imm10(i32 %a){
; CHECK-LABEL: orw_imm10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r0, 10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor i32 %a, 10
  %conv = zext i32 %xor to i64
  ret i64 %conv
}

define i64 @orw_imm37(i32 %a){
; CHECK-LABEL: orw_imm37:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r0, 0x8000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor i32 %a, 32768
  %conv = zext i32 %xor to i64
  ret i64 %conv
}

define i64 @sllw_reg(i32 %a, i32 %b){
; CHECK-LABEL: sllw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %a, %b
  %conv = zext i32 %shl to i64
  ret i64 %conv
}

define i64 @sllw_imm(i32 %a){
; CHECK-LABEL: sllw_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, 10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %a, 10
  %conv = zext i32 %shl to i64
  ret i64 %conv
}

define i64 @srlw_reg(i32 %a, i32 %b){
; CHECK-LABEL: srlw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shr = lshr i32 %a, %b
  %conv = zext i32 %shr to i64
  ret i64 %conv
}

define i64 @srlw_imm(i32 %a){
; CHECK-LABEL: srlw_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, 10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shr = lshr i32 %a, 10
  %conv = zext i32 %shr to i64
  ret i64 %conv
}

define i64 @xorw_reg(i32 %a, i32 %b){
; CHECK-LABEL: xorw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor i32 %b, %a
  %conv = zext i32 %xor to i64
  ret i64 %conv
}

define i64 @xorw_imm10(i32 %a){
; CHECK-LABEL: xorw_imm10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r0, 10
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor i32 %a, 10
  %conv = zext i32 %xor to i64
  ret i64 %conv
}

define i64 @xorw_imm37(i32 %a){
; CHECK-LABEL: xorw_imm37:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw $r0 = $r0, 0x8000
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %xor = xor i32 %a, 32768
  %conv = zext i32 %xor to i64
  ret i64 %conv
}

define i64 @minw_reg(i32 %a, i32 %b){
; CHECK-LABEL: minw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    minuw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ult i32 %a, %b
  %cond = select i1 %cmp, i32 %a, i32 %b
  %conv = zext i32 %cond to i64
  ret i64 %conv
}

define i64 @maxw_reg(i32 %a, i32 %b){
; CHECK-LABEL: maxw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    maxuw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ugt i32 %a, %b
  %cond = select i1 %cmp, i32 %a, i32 %b
  %conv = zext i32 %cond to i64
  ret i64 %conv
}

define i64 @mulw_reg(i32 %a, i32 %b){
; CHECK-LABEL: mulw_reg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mulw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %mul = mul i32 %b, %a
  %conv = zext i32 %mul to i64
  ret i64 %conv
}

define i64 @and_srl_to_extfz(i32 %a){
; CHECK-LABEL: and_srl_to_extfz:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extfz $r0 = $r0, 9, 8
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shr = lshr i32 %a, 8
  %and = and i32 %shr, 3
  %conv = zext i32 %and to i64
  ret i64 %conv
}

define i64 @shl_i8(i32 %a, i8 %b){
; CHECK-LABEL: shl_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv2 = zext i8 %b to i32
  %shl = shl i32 %a, %conv2
  %conv1 = zext i32 %shl to i64
  ret i64 %conv1
}

define i64 @shl_u8(i32 %a, i8 %b){
; CHECK-LABEL: shl_u8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i8 %b to i32
  %shl = shl i32 %a, %conv
  %conv1 = zext i32 %shl to i64
  ret i64 %conv1
}

define i64 @shl_i16(i32 %a, i16 %b){
; CHECK-LABEL: shl_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv2 = zext i16 %b to i32
  %shl = shl i32 %a, %conv2
  %conv1 = zext i32 %shl to i64
  ret i64 %conv1
}

define i64 @shl_u16(i32 %a, i16 %b){
; CHECK-LABEL: shl_u16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i32
  %shl = shl i32 %a, %conv
  %conv1 = zext i32 %shl to i64
  ret i64 %conv1
}

define i64 @shl_i32(i32 %a, i32 %b){
; CHECK-LABEL: shl_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %a, %b
  %conv = zext i32 %shl to i64
  ret i64 %conv
}

define i64 @shl_u32(i32 %a, i32 %b){
; CHECK-LABEL: shl_u32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shl = shl i32 %a, %b
  %conv = zext i32 %shl to i64
  ret i64 %conv
}

define i64 @shl_i64(i32 %a, i64 %b){
; CHECK-LABEL: shl_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sh_prom = trunc i64 %b to i32
  %shl = shl i32 %a, %sh_prom
  %conv = zext i32 %shl to i64
  ret i64 %conv
}

define i64 @shl_u64(i32 %a, i64 %b){
; CHECK-LABEL: shl_u64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sllw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sh_prom = trunc i64 %b to i32
  %shl = shl i32 %a, %sh_prom
  %conv = zext i32 %shl to i64
  ret i64 %conv
}

define i64 @srl_i8(i32 %a, i8 %b){
; CHECK-LABEL: srl_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv2 = zext i8 %b to i32
  %shr = lshr i32 %a, %conv2
  %conv1 = zext i32 %shr to i64
  ret i64 %conv1
}

define i64 @srl_u8(i32 %a, i8 %b){
; CHECK-LABEL: srl_u8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i8 %b to i32
  %shr = lshr i32 %a, %conv
  %conv1 = zext i32 %shr to i64
  ret i64 %conv1
}

define i64 @srl_i16(i32 %a, i16 %b){
; CHECK-LABEL: srl_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv2 = zext i16 %b to i32
  %shr = lshr i32 %a, %conv2
  %conv1 = zext i32 %shr to i64
  ret i64 %conv1
}

define i64 @srl_u16(i32 %a, i16 %b){
; CHECK-LABEL: srl_u16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i16 %b to i32
  %shr = lshr i32 %a, %conv
  %conv1 = zext i32 %shr to i64
  ret i64 %conv1
}

define i64 @srl_i32(i32 %a, i32 %b){
; CHECK-LABEL: srl_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shr = lshr i32 %a, %b
  %conv = zext i32 %shr to i64
  ret i64 %conv
}

define i64 @srl_u32(i32 %a, i32 %b){
; CHECK-LABEL: srl_u32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %shr = lshr i32 %a, %b
  %conv = zext i32 %shr to i64
  ret i64 %conv
}

define i64 @srl_i64(i32 %a, i64 %b){
; CHECK-LABEL: srl_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sh_prom = trunc i64 %b to i32
  %shr = lshr i32 %a, %sh_prom
  %conv = zext i32 %shr to i64
  ret i64 %conv
}

define i64 @srl_u64(i32 %a, i64 %b){
; CHECK-LABEL: srl_u64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srlw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %sh_prom = trunc i64 %b to i32
  %shr = lshr i32 %a, %sh_prom
  %conv = zext i32 %shr to i64
  ret i64 %conv
}

define i64 @landw_i64(i32 %a, i32 %b){
; CHECK-LABEL: landw_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    landw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, 0
  %cmp1 = icmp ne i32 %b, 0
  %0 = and i1 %cmp, %cmp1
  %conv = zext i1 %0 to i64
  ret i64 %conv
}

define i32 @landw_i32(i32 %a, i32 %b){
; CHECK-LABEL: landw_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    landw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i32 %a, 0
  %cmp1 = icmp ne i32 %b, 0
  %0 = and i1 %cmp, %cmp1
  %land.ext = zext i1 %0 to i32
  ret i32 %land.ext
}

define i64 @lnandw_i64(i32 %a, i32 %b){
; CHECK-LABEL: lnandw_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lnandw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, 0
  %cmp1 = icmp eq i32 %b, 0
  %0 = or i1 %cmp, %cmp1
  %conv = zext i1 %0 to i64
  ret i64 %conv
}

define i32 @lnandw_i32(i32 %a, i32 %b){
; CHECK-LABEL: lnandw_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lnandw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i32 %a, 0
  %cmp1 = icmp eq i32 %b, 0
  %0 = or i1 %cmp, %cmp1
  %lor.ext = zext i1 %0 to i32
  ret i32 %lor.ext
}

define i64 @landd_i64(i64 %a, i64 %b){
; CHECK-LABEL: landd_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    landd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i64 %a, 0
  %cmp1 = icmp ne i64 %b, 0
  %0 = and i1 %cmp, %cmp1
  %conv = zext i1 %0 to i64
  ret i64 %conv
}

define i32 @landd_i32(i64 %a, i64 %b){
; CHECK-LABEL: landd_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    landd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp ne i64 %a, 0
  %cmp1 = icmp ne i64 %b, 0
  %0 = and i1 %cmp, %cmp1
  %land.ext = zext i1 %0 to i32
  ret i32 %land.ext
}

define i64 @lnandd_i64(i64 %a, i64 %b){
; CHECK-LABEL: lnandd_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lnandd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %a, 0
  %cmp1 = icmp eq i64 %b, 0
  %0 = or i1 %cmp, %cmp1
  %conv = zext i1 %0 to i64
  ret i64 %conv
}

define i32 @lnandd_i32(i64 %a, i64 %b){
; CHECK-LABEL: lnandd_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lnandd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = icmp eq i64 %a, 0
  %cmp1 = icmp eq i64 %b, 0
  %0 = or i1 %cmp, %cmp1
  %lor.ext = zext i1 %0 to i32
  ret i32 %lor.ext
}

define i64 @lnandd_f16(half %a, half %b){
; CHECK-LABEL: lnandd_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    make $r2 = 0x0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r2
; CHECK-NEXT:    fcompnhq.oeq $r1 = $r1, $r2
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    andw $r1 = $r1, 1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    orw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq half %a, 0xH0000
  %cmp1 = fcmp oeq half %b, 0xH0000
  %0 = or i1 %cmp, %cmp1
  %conv = zext i1 %0 to i64
  ret i64 %conv
}

define i64 @lorw_i32(i32 %a, i32 %b){
; CHECK-LABEL: lorw_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lorw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or i32 %b, %a
  %cmp = icmp ne i32 %or, 0
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @lord_i64(i64 %a, i64 %b){
; CHECK-LABEL: lord_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or i64 %b, %a
  %cmp = icmp ne i64 %or, 0
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @lnorw_i32(i32 %a, i32 %b){
; CHECK-LABEL: lnorw_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lnorw $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or i32 %b, %a
  %cmp = icmp eq i32 %or, 0
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}

define i64 @lnord_i64(i64 %a, i64 %b){
; CHECK-LABEL: lnord_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lnord $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %or = or i64 %b, %a
  %cmp = icmp eq i64 %or, 0
  %conv1 = zext i1 %cmp to i64
  ret i64 %conv1
}
