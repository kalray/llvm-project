; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O3 -o - %s | FileCheck %s
target triple = "kvx-kalray-cos"

define i32 @eq16(half %x, half %y) {
; CHECK-LABEL: eq16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne16(half %x, half %y) {
; CHECK-LABEL: ne16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.une $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ge16(half %x, half %y) {
; CHECK-LABEL: ge16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oge half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @lt16(half %x, half %y) {
; CHECK-LABEL: lt16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @gt16(half %x, half %y) {
; CHECK-LABEL: gt16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ogt half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @le16(half %x, half %y) {
; CHECK-LABEL: le16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ole half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @eq32(float %x, float %y) {
; CHECK-LABEL: eq32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne32(float %x, float %y) {
; CHECK-LABEL: ne32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.une $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ge32(float %x, float %y) {
; CHECK-LABEL: ge32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oge float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @lt32(float %x, float %y) {
; CHECK-LABEL: lt32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @gt32(float %x, float %y) {
; CHECK-LABEL: gt32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ogt float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @le32(float %x, float %y) {
; CHECK-LABEL: le32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ole float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @eq64(double %x, double %y) {
; CHECK-LABEL: eq64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oeq double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne64(double %x, double %y) {
; CHECK-LABEL: ne64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.une $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp une double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ge64(double %x, double %y) {
; CHECK-LABEL: ge64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp oge double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @lt64(double %x, double %y) {
; CHECK-LABEL: lt64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp olt double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @gt64(double %x, double %y) {
; CHECK-LABEL: gt64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ogt double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @le64(double %x, double %y) {
; CHECK-LABEL: le64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp ole double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @eq16_2(half %x, half %y) {
; CHECK-LABEL: eq16_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast oeq half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne16_2(half %x, half %y) {
; CHECK-LABEL: ne16_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.one $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast une half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ge16_2(half %x, half %y) {
; CHECK-LABEL: ge16_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast oge half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @lt16_2(half %x, half %y) {
; CHECK-LABEL: lt16_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast olt half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @gt16_2(half %x, half %y) {
; CHECK-LABEL: gt16_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.olt $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast ogt half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @le16_2(half %x, half %y) {
; CHECK-LABEL: le16_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompnhq.oge $r0 = $r1, $r0
; CHECK-NEXT:    ;;
; CHECK-NEXT:    andw $r0 = $r0, 1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast ole half %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @eq32_2(float %x, float %y) {
; CHECK-LABEL: eq32_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast oeq float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne32_2(float %x, float %y) {
; CHECK-LABEL: ne32_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.one $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast une float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ge32_2(float %x, float %y) {
; CHECK-LABEL: ge32_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast oge float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @lt32_2(float %x, float %y) {
; CHECK-LABEL: lt32_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast olt float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @gt32_2(float %x, float %y) {
; CHECK-LABEL: gt32_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast ogt float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @le32_2(float %x, float %y) {
; CHECK-LABEL: le32_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompw.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast ole float %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @eq64_2(double %x, double %y) {
; CHECK-LABEL: eq64_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oeq $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast oeq double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne64_2(double %x, double %y) {
; CHECK-LABEL: ne64_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.one $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast une double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ge64_2(double %x, double %y) {
; CHECK-LABEL: ge64_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast oge double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @lt64_2(double %x, double %y) {
; CHECK-LABEL: lt64_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast olt double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @gt64_2(double %x, double %y) {
; CHECK-LABEL: gt64_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.olt $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast ogt double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @le64_2(double %x, double %y) {
; CHECK-LABEL: le64_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcompd.oge $r0 = $r1, $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %cmp = fcmp fast ole double %x, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}
