; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 | FileCheck %s
target triple = "kvx-kalray-cos"

define i32 @abdw(i32 %v1, i32 %v2){
; CHECK-LABEL: abdw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.abdw(i32 %v1, i32 %v2)
  ret i32 %0
}

declare i32 @llvm.kvx.abdw(i32, i32) #1

define i64 @abdd(i64 %v1, i64 %v2){
; CHECK-LABEL: abdd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    abdd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.abdd(i64 %v1, i64 %v2)
  ret i64 %0
}

declare i64 @llvm.kvx.abdd(i64, i64) #1

define i32 @addsw(i32 %v1, i32 %v2){
; CHECK-LABEL: addsw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addsw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.addsw(i32 %v1, i32 %v2)
  ret i32 %0
}

declare i32 @llvm.kvx.addsw(i32, i32) #1

define i64 @addsd(i64 %v1, i64 %v2){
; CHECK-LABEL: addsd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addsd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.addsd(i64 %v1, i64 %v2)
  ret i64 %0
}

declare i64 @llvm.kvx.addsd(i64, i64) #1

define i32 @sbfsw(i32 %v1, i32 %v2){
; CHECK-LABEL: sbfsw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfsw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.sbfsw(i32 %v1, i32 %v2)
  ret i32 %0
}

declare i32 @llvm.kvx.sbfsw(i32, i32) #1

define i64 @sbfsd(i64 %v1, i64 %v2){
; CHECK-LABEL: sbfsd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfsd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.sbfsd(i64 %v1, i64 %v2)
  ret i64 %0
}

declare i64 @llvm.kvx.sbfsd(i64, i64) #1

define i64 @adddc(i64 %v1, i64 %v2){
; CHECK-LABEL: adddc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd.c $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.addd(i64 %v1, i64 %v2, i32 1)
  ret i64 %0
}

declare i64 @llvm.kvx.addd(i64, i64, i32) #1

define i64 @adddci(i64 %v1, i64 %v2){
; CHECK-LABEL: adddci:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addd.ci $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.addd(i64 %v1, i64 %v2, i32 2)
  ret i64 %0
}

define i64 @sbfdc(i64 %v1, i64 %v2){
; CHECK-LABEL: sbfdc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfd.c $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.sbfd(i64 %v1, i64 %v2, i32 1)
  ret i64 %0
}

declare i64 @llvm.kvx.sbfd(i64, i64, i32) #1

define i64 @sbfdci(i64 %v1, i64 %v2){
; CHECK-LABEL: sbfdci:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbfd.ci $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.sbfd(i64 %v1, i64 %v2, i32 2)
  ret i64 %0
}

define i32 @avgw(i32 %v1, i32 %v2){
; CHECK-LABEL: avgw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.avgw(i32 %v1, i32 %v2)
  ret i32 %0
}

declare i32 @llvm.kvx.avgw(i32, i32) #1

define i32 @avguw(i32 %v1, i32 %v2){
; CHECK-LABEL: avguw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avguw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.avguw(i32 %v1, i32 %v2)
  ret i32 %0
}

declare i32 @llvm.kvx.avguw(i32, i32) #1

define i32 @avgrw(i32 %v1, i32 %v2){
; CHECK-LABEL: avgrw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgrw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.avgrw(i32 %v1, i32 %v2)
  ret i32 %0
}

declare i32 @llvm.kvx.avgrw(i32, i32) #1

define i32 @avgruw(i32 %v1, i32 %v2){
; CHECK-LABEL: avgruw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    avgruw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.avgruw(i32 %v1, i32 %v2)
  ret i32 %0
}

declare i32 @llvm.kvx.avgruw(i32, i32) #1

define i64 @cbsd(i64 %l){
; CHECK-LABEL: cbsd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbsd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.cbsd(i64 %l)
  ret i64 %0
}

declare i64 @llvm.kvx.cbsd(i64) #1

define i32 @cbsw(i32 %i){
; CHECK-LABEL: cbsw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbsw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.cbsw(i32 %i)
  ret i32 %0
}

declare i32 @llvm.kvx.cbsw(i32) #1

define i64 @clzd(i64 %l){
; CHECK-LABEL: clzd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.clzd(i64 %l)
  ret i64 %0
}

declare i64 @llvm.kvx.clzd(i64) #1

define i32 @clzw(i32 %i){
; CHECK-LABEL: clzw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clzw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.clzw(i32 %i)
  ret i32 %0
}

declare i32 @llvm.kvx.clzw(i32) #1

define i64 @ctzd(i64 %l){
; CHECK-LABEL: ctzd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.ctzd(i64 %l)
  ret i64 %0
}

declare i64 @llvm.kvx.ctzd(i64) #1

define i32 @ctzw(i32 %i){
; CHECK-LABEL: ctzw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ctzw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.ctzw(i32 %i)
  ret i32 %0
}

declare i32 @llvm.kvx.ctzw(i32) #1

define float @fabsw(float %v){
; CHECK-LABEL: fabsw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fabsw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fabsw(float %v)
  ret float %0
}

declare float @llvm.kvx.fabsw(float) #1

define double @fabsd(double %v){
; CHECK-LABEL: fabsd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fabsd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fabsd(double %v)
  ret double %0
}

declare double @llvm.kvx.fabsd(double) #1

define float @fnegw(float %v){
; CHECK-LABEL: fnegw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fnegw(float %v)
  ret float %0
}

declare float @llvm.kvx.fnegw(float) #1

define double @fnegd(double %v){
; CHECK-LABEL: fnegd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnegd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fnegd(double %v)
  ret double %0
}

declare double @llvm.kvx.fnegd(double) #1

define float @fmaxw(float %v1, float %v2){
; CHECK-LABEL: fmaxw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmaxw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fmaxw(float %v1, float %v2)
  ret float %0
}

declare float @llvm.kvx.fmaxw(float, float) #1

define double @fmaxd(double %v1, double %v2){
; CHECK-LABEL: fmaxd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmaxd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fmaxd(double %v1, double %v2)
  ret double %0
}

declare double @llvm.kvx.fmaxd(double, double) #1

define float @fminw(float %v1, float %v2){
; CHECK-LABEL: fminw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fminw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fminw(float %v1, float %v2)
  ret float %0
}

declare float @llvm.kvx.fminw(float, float) #1

define double @fmind(double %v1, double %v2){
; CHECK-LABEL: fmind:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmind $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fmind(double %v1, double %v2)
  ret double %0
}

declare double @llvm.kvx.fmind(double, double) #1

define float @frecw(float %a){
; CHECK-LABEL: frecw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    frecw.rz $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.frecw(float %a, i32 3, i32 0)
  ret float %0
}

declare float @llvm.kvx.frecw(float, i32, i32) #1

define float @frsrw(float %a){
; CHECK-LABEL: frsrw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    frsrw.rz $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.frsrw(float %a, i32 3, i32 0)
  ret float %0
}

declare float @llvm.kvx.frsrw(float, i32, i32) #1

define float @faddw(float %v1, float %v2){
; CHECK-LABEL: faddw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    faddw.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.faddw(float %v1, float %v2, i32 3, i32 0)
  ret float %0
}

declare float @llvm.kvx.faddw(float, float, i32, i32) #1

define double @faddd(float %v1, float %v2){
; CHECK-LABEL: faddd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fwidenlwd $r0 = $r0
; CHECK-NEXT:    fwidenlwd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    faddd.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = fpext float %v1 to double
  %conv1 = fpext float %v2 to double
  %0 = tail call double @llvm.kvx.faddd(double %conv, double %conv1, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.faddd(double, double, i32, i32) #1

define float @fsbfw(float %v1, float %v2){
; CHECK-LABEL: fsbfw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fsbfw.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fsbfw(float %v1, float %v2, i32 3, i32 0)
  ret float %0
}

declare float @llvm.kvx.fsbfw(float, float, i32, i32) #1

define double @fsbfd(double %v1, double %v2){
; CHECK-LABEL: fsbfd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fsbfd.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fsbfd(double %v1, double %v2, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.fsbfd(double, double, i32, i32) #1

define float @fmulw(float %v1, float %v2){
; CHECK-LABEL: fmulw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulw.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fmulw(float %v1, float %v2, i32 3, i32 0)
  ret float %0
}

declare float @llvm.kvx.fmulw(float, float, i32, i32) #1

define double @fmuld(double %v1, double %v2){
; CHECK-LABEL: fmuld:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmuld.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fmuld(double %v1, double %v2, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.fmuld(double, double, i32, i32) #1

define double @fmulwd(float %v1, float %v2){
; CHECK-LABEL: fmulwd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fmulwd.rz $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fmulwd(float %v1, float %v2, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.fmulwd(float, float, i32, i32) #1

define float @ffmaw(float %a, float %b, float %c){
; CHECK-LABEL: ffmaw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmaw.rz $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.ffmaw(float %a, float %b, float %c, i32 3, i32 0)
  ret float %0
}

declare float @llvm.kvx.ffmaw(float, float, float, i32, i32) #1

define double @ffmad(double %a, double %b, double %c){
; CHECK-LABEL: ffmad:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmad.rz $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.ffmad(double %a, double %b, double %c, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.ffmad(double, double, double, i32, i32) #1

define double @ffmawd(float %a, float %b, double %c){
; CHECK-LABEL: ffmawd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmawd.rz $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.ffmawd(float %a, float %b, double %c, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.ffmawd(float, float, double, i32, i32) #1

define float @ffmsw(float %a, float %b, float %c){
; CHECK-LABEL: ffmsw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmsw.rz $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.ffmsw(float %a, float %b, float %c, i32 3, i32 0)
  ret float %0
}

declare float @llvm.kvx.ffmsw(float, float, float, i32, i32) #1

define float @ffmsw_(float %a, float %b, float %c){
; CHECK-LABEL: ffmsw_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmsw $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.ffmsw(float %a, float %b, float %c, i32 7, i32 0)
  ret float %0
}

define double @ffmsd(double %a, double %b, double %c){
; CHECK-LABEL: ffmsd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmsd.rz $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.ffmsd(double %a, double %b, double %c, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.ffmsd(double, double, double, i32, i32) #1

define double @ffmswd(float %a, float %b, double %c){
; CHECK-LABEL: ffmswd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ffmswd.rz $r2 = $r0, $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    copyd $r0 = $r2
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.ffmswd(float %a, float %b, double %c, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.ffmswd(float, float, double, i32, i32) #1

define float @floatw(i32 %x){
; CHECK-LABEL: floatw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatw.rn $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.floatw(i32 %x, i64 3, i32 0, i32 0)
  ret float %0
}

define float @floatw_s(i32 %x){
; CHECK-LABEL: floatw_s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatw.rn.s $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.floatw(i32 %x, i64 3, i32 0, i32 1)
  ret float %0
}

declare float @llvm.kvx.floatw(i32, i64, i32, i32) #1

define double @floatd(i64 %x){
; CHECK-LABEL: floatd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatd.rn $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.floatd(i64 %x, i64 3, i32 0, i32 0)
  ret double %0
}

declare double @llvm.kvx.floatd(i64, i64, i32, i32) #1

define float @floatuw(i32 %x){
; CHECK-LABEL: floatuw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatuw.rz $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.floatuw(i32 %x, i64 3, i32 3, i32 0)
  ret float %0
}

declare float @llvm.kvx.floatuw(i32, i64, i32, i32) #1

define double @floatud(i64 %x){
; CHECK-LABEL: floatud:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    floatud.rz $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.floatud(i64 %x, i64 3, i32 3, i32 0)
  ret double %0
}

declare double @llvm.kvx.floatud(i64, i64, i32, i32) #1

define i32 @fixedw(float %x){
; CHECK-LABEL: fixedw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fixedw.rn $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.fixedw(float %x, i64 3, i32 0, i32 0)
  ret i32 %0
}

define i32 @fixedw_s(float %x){
; CHECK-LABEL: fixedw_s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fixedw.rn.s $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.fixedw(float %x, i64 3, i32 0, i32 1)
  ret i32 %0
}

declare i32 @llvm.kvx.fixedw(float, i64, i32, i32) #1

define i64 @fixedd(double %x){
; CHECK-LABEL: fixedd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fixedd.rn $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.fixedd(double %x, i64 3, i32 0, i32 0)
  ret i64 %0
}

declare i64 @llvm.kvx.fixedd(double, i64, i32, i32) #1

define i32 @fixeduw(float %x){
; CHECK-LABEL: fixeduw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fixeduw.rz $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.fixeduw(float %x, i64 3, i32 3, i32 0)
  ret i32 %0
}

declare i32 @llvm.kvx.fixeduw(float, i64, i32, i32) #1

define i64 @fixedud(double %x){
; CHECK-LABEL: fixedud:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fixedud.rz $r0 = $r0, 3
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.fixedud(double %x, i64 3, i32 3, i32 0)
  ret i64 %0
}

declare i64 @llvm.kvx.fixedud(double, i64, i32, i32) #1

define float @fcdivw(float %v1, float %v2){
; CHECK-LABEL: fcdivw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcdivw $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fcdivw(float %v1, float %v2, i32 0)
  ret float %0
}

declare float @llvm.kvx.fcdivw(float, float, i32) #1

define double @fcdivd(double %v1, double %v2){
; CHECK-LABEL: fcdivd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcdivd $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fcdivd(double %v1, double %v2, i32 0)
  ret double %0
}

declare double @llvm.kvx.fcdivd(double, double, i32) #1

define float @fsdivw(float %v1, float %v2){
; CHECK-LABEL: fsdivw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fsdivw $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fsdivw(float %v1, float %v2, i32 0)
  ret float %0
}

declare float @llvm.kvx.fsdivw(float, float, i32) #1

define double @fsdivd(double %v1, double %v2){
; CHECK-LABEL: fsdivd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fsdivd $r0 = $r0r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fsdivd(double %v1, double %v2, i32 0)
  ret double %0
}

declare double @llvm.kvx.fsdivd(double, double, i32) #1

define float @fsrecw(float %v){
; CHECK-LABEL: fsrecw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fsrecw $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call float @llvm.kvx.fsrecw(float %v, i32 0)
  ret float %0
}

declare float @llvm.kvx.fsrecw(float, i32) #1

define double @fsrecd(double %v){
; CHECK-LABEL: fsrecd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fsrecd $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call double @llvm.kvx.fsrecd(double %v, i32 0)
  ret double %0
}

declare double @llvm.kvx.fsrecd(double, i32) #1

define i64 @sbmm8(i64 %a, i64 %b){
; CHECK-LABEL: sbmm8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmm8 $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.sbmm8(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.kvx.sbmm8(i64, i64) #1

define i64 @sbmmt8(i64 %a, i64 %b){
; CHECK-LABEL: sbmmt8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sbmmt8 $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.sbmmt8(i64 %a, i64 %b)
  ret i64 %0
}

declare i64 @llvm.kvx.sbmmt8(i64, i64) #1

define i64 @satd(i64 %v, i8 %b){
; CHECK-LABEL: satd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    zxbd $r1 = $r1
; CHECK-NEXT:    ;;
; CHECK-NEXT:    satd $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %conv = zext i8 %b to i32
  %0 = tail call i64 @llvm.kvx.satd(i64 %v, i32 %conv)
  ret i64 %0
}

declare i64 @llvm.kvx.satd(i64, i32) #1

define i32 @stsuw(i32 %x, i32 %y){
; CHECK-LABEL: stsuw:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    stsuw $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.stsuw(i32 %x, i32 %y)
  ret i32 %0
}

declare i32 @llvm.kvx.stsuw(i32, i32) #1

define i64 @stsud(i64 %x, i64 %y){
; CHECK-LABEL: stsud:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    stsud $r0 = $r0, $r1
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i64 @llvm.kvx.stsud(i64 %x, i64 %y)
  ret i64 %0
}

declare i64 @llvm.kvx.stsud(i64, i64) #1

define i16 @fnarrowwh(float %v){
; CHECK-LABEL: fnarrowwh:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fnarrowwh.rn $r0 = $r0
; CHECK-NEXT:    ret
; CHECK-NEXT:    ;;
entry:
  %0 = tail call i32 @llvm.kvx.fnarrowwh(float %v, i32 0, i32 0)
  %conv = trunc i32 %0 to i16
  ret i16 %conv
}

declare i32 @llvm.kvx.fnarrowwh(float, i32, i32) #1

