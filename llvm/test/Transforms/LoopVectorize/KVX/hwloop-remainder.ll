; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=loop-vectorize < %s | FileCheck %s

target triple = "kvx-kalray-cos"

define void @matrix_mul_const(i32 %0, i32* nocapture %1, i16* nocapture readonly %2, i16 %3) local_unnamed_addr #0 {
; CHECK-LABEL: @matrix_mul_const(
; CHECK-NEXT:    [[TMP5:%.*]] = icmp sgt i32 [[TMP0:%.*]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[TMP6:%.*]], label [[TMP56:%.*]]
; CHECK:       6:
; CHECK-NEXT:    [[TMP7:%.*]] = sext i16 [[TMP3:%.*]] to i32
; CHECK-NEXT:    [[TMP8:%.*]] = sext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP10:%.*]] = add nsw i64 [[TMP9]], -1
; CHECK-NEXT:    [[TMP11:%.*]] = mul i64 [[TMP10]], [[TMP8]]
; CHECK-NEXT:    [[TMP12:%.*]] = shl i64 [[TMP11]], 2
; CHECK-NEXT:    [[TMP13:%.*]] = shl nuw nsw i64 [[TMP9]], 2
; CHECK-NEXT:    [[TMP14:%.*]] = add i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[SCEVGEP:%.*]] = getelementptr i8, ptr [[TMP1:%.*]], i64 [[TMP14]]
; CHECK-NEXT:    [[TMP15:%.*]] = shl nsw i64 [[TMP8]], 2
; CHECK-NEXT:    [[TMP16:%.*]] = shl i64 [[TMP11]], 1
; CHECK-NEXT:    [[TMP17:%.*]] = shl nuw nsw i64 [[TMP9]], 1
; CHECK-NEXT:    [[TMP18:%.*]] = add i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[SCEVGEP1:%.*]] = getelementptr i8, ptr [[TMP2:%.*]], i64 [[TMP18]]
; CHECK-NEXT:    [[TMP19:%.*]] = shl nsw i64 [[TMP8]], 1
; CHECK-NEXT:    br label [[ITER_CHECK:%.*]]
; CHECK:       iter.check:
; CHECK-NEXT:    [[TMP20:%.*]] = phi i64 [ 0, [[TMP6]] ], [ [[TMP54:%.*]], [[TMP53:%.*]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = mul nsw i64 [[TMP20]], [[TMP8]]
; CHECK-NEXT:    [[TMP22:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP9]], 8
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; CHECK:       vector.memcheck:
; CHECK-NEXT:    [[BOUND0:%.*]] = icmp ult ptr [[TMP1]], [[SCEVGEP1]]
; CHECK-NEXT:    [[BOUND1:%.*]] = icmp ult ptr [[TMP2]], [[SCEVGEP]]
; CHECK-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]
; CHECK-NEXT:    [[STRIDE_CHECK:%.*]] = icmp slt i64 [[TMP15]], 0
; CHECK-NEXT:    [[TMP23:%.*]] = or i1 [[FOUND_CONFLICT]], [[STRIDE_CHECK]]
; CHECK-NEXT:    [[STRIDE_CHECK2:%.*]] = icmp slt i64 [[TMP19]], 0
; CHECK-NEXT:    [[TMP24:%.*]] = or i1 [[TMP23]], [[STRIDE_CHECK2]]
; CHECK-NEXT:    br i1 [[TMP24]], label [[VEC_EPILOG_SCALAR_PH]], label [[VECTOR_MAIN_LOOP_ITER_CHECK:%.*]]
; CHECK:       vector.main.loop.iter.check:
; CHECK-NEXT:    [[MIN_ITERS_CHECK3:%.*]] = icmp ult i64 [[TMP9]], 16
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK3]], label [[VEC_EPILOG_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP9]], 16
; CHECK-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP9]], [[N_MOD_VF]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <16 x i32> poison, i32 [[TMP7]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <16 x i32> [[BROADCAST_SPLATINSERT]], <16 x i32> poison, <16 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = add i64 [[INDEX]], 0
; CHECK-NEXT:    [[TMP26:%.*]] = add nsw i64 [[TMP25]], [[TMP21]]
; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr inbounds i16, ptr [[TMP2]], i64 [[TMP26]]
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr inbounds i16, ptr [[TMP27]], i32 0
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <16 x i16>, ptr [[TMP28]], align 2, !alias.scope [[META0:![0-9]+]]
; CHECK-NEXT:    [[TMP29:%.*]] = sext <16 x i16> [[WIDE_LOAD]] to <16 x i32>
; CHECK-NEXT:    [[TMP30:%.*]] = mul nsw <16 x i32> [[TMP29]], [[BROADCAST_SPLAT]]
; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i64 [[TMP26]]
; CHECK-NEXT:    [[TMP32:%.*]] = getelementptr inbounds i32, ptr [[TMP31]], i32 0
; CHECK-NEXT:    store <16 x i32> [[TMP30]], ptr [[TMP32]], align 4, !alias.scope [[META3:![0-9]+]], !noalias [[META0]]
; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16
; CHECK-NEXT:    [[TMP33:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP33]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP9]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[CMP_N]], label [[TMP53]], label [[VEC_EPILOG_ITER_CHECK:%.*]]
; CHECK:       vec.epilog.iter.check:
; CHECK-NEXT:    [[N_VEC_REMAINING:%.*]] = sub i64 [[TMP9]], [[N_VEC]]
; CHECK-NEXT:    [[MIN_EPILOG_ITERS_CHECK:%.*]] = icmp ult i64 [[N_VEC_REMAINING]], 8
; CHECK-NEXT:    br i1 [[MIN_EPILOG_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH]], label [[VEC_EPILOG_PH]]
; CHECK:       vec.epilog.ph:
; CHECK-NEXT:    [[VEC_EPILOG_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
; CHECK-NEXT:    [[N_MOD_VF4:%.*]] = urem i64 [[TMP9]], 8
; CHECK-NEXT:    [[N_VEC5:%.*]] = sub i64 [[TMP9]], [[N_MOD_VF4]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT9:%.*]] = insertelement <8 x i32> poison, i32 [[TMP7]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT10:%.*]] = shufflevector <8 x i32> [[BROADCAST_SPLATINSERT9]], <8 x i32> poison, <8 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VEC_EPILOG_VECTOR_BODY:%.*]]
; CHECK:       vec.epilog.vector.body:
; CHECK-NEXT:    [[INDEX7:%.*]] = phi i64 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT11:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = add i64 [[INDEX7]], 0
; CHECK-NEXT:    [[TMP35:%.*]] = add nsw i64 [[TMP34]], [[TMP21]]
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr inbounds i16, ptr [[TMP2]], i64 [[TMP35]]
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr inbounds i16, ptr [[TMP36]], i32 0
; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <8 x i16>, ptr [[TMP37]], align 2, !alias.scope [[META8:![0-9]+]]
; CHECK-NEXT:    [[TMP38:%.*]] = sext <8 x i16> [[WIDE_LOAD8]] to <8 x i32>
; CHECK-NEXT:    [[TMP39:%.*]] = mul nsw <8 x i32> [[TMP38]], [[BROADCAST_SPLAT10]]
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i64 [[TMP35]]
; CHECK-NEXT:    [[TMP41:%.*]] = getelementptr inbounds i32, ptr [[TMP40]], i32 0
; CHECK-NEXT:    store <8 x i32> [[TMP39]], ptr [[TMP41]], align 4, !alias.scope [[META11:![0-9]+]], !noalias [[META8]]
; CHECK-NEXT:    [[INDEX_NEXT11]] = add nuw i64 [[INDEX7]], 8
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[INDEX_NEXT11]], [[N_VEC5]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP13:![0-9]+]]
; CHECK:       vec.epilog.middle.block:
; CHECK-NEXT:    [[CMP_N6:%.*]] = icmp eq i64 [[TMP9]], [[N_VEC5]]
; CHECK-NEXT:    br i1 [[CMP_N6]], label [[TMP53]], label [[VEC_EPILOG_SCALAR_PH]]
; CHECK:       vec.epilog.scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC5]], [[VEC_EPILOG_MIDDLE_BLOCK]] ], [ [[N_VEC]], [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MEMCHECK]] ], [ 0, [[ITER_CHECK]] ]
; CHECK-NEXT:    br label [[TMP43:%.*]]
; CHECK:       43:
; CHECK-NEXT:    [[TMP44:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[VEC_EPILOG_SCALAR_PH]] ], [ [[TMP51:%.*]], [[TMP43]] ]
; CHECK-NEXT:    [[TMP45:%.*]] = add nsw i64 [[TMP44]], [[TMP21]]
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr inbounds i16, ptr [[TMP2]], i64 [[TMP45]]
; CHECK-NEXT:    [[TMP47:%.*]] = load i16, ptr [[TMP46]], align 2
; CHECK-NEXT:    [[TMP48:%.*]] = sext i16 [[TMP47]] to i32
; CHECK-NEXT:    [[TMP49:%.*]] = mul nsw i32 [[TMP48]], [[TMP7]]
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i64 [[TMP45]]
; CHECK-NEXT:    store i32 [[TMP49]], ptr [[TMP50]], align 4
; CHECK-NEXT:    [[TMP51]] = add nuw nsw i64 [[TMP44]], 1
; CHECK-NEXT:    [[TMP52:%.*]] = icmp eq i64 [[TMP51]], [[TMP22]]
; CHECK-NEXT:    br i1 [[TMP52]], label [[TMP53]], label [[TMP43]], !llvm.loop [[LOOP14:![0-9]+]]
; CHECK:       53:
; CHECK-NEXT:    [[TMP54]] = add nuw nsw i64 [[TMP20]], 1
; CHECK-NEXT:    [[TMP55:%.*]] = icmp eq i64 [[TMP54]], [[TMP9]]
; CHECK-NEXT:    br i1 [[TMP55]], label [[DOTLOOPEXIT:%.*]], label [[ITER_CHECK]]
; CHECK:       .loopexit:
; CHECK-NEXT:    br label [[TMP56]]
; CHECK:       56:
; CHECK-NEXT:    ret void
;

  %5 = icmp sgt i32 %0, 0
  br i1 %5, label %6, label %27

6:                                                ; preds = %4
  %7 = sext i16 %3 to i32
  %8 = sext i32 %0 to i64
  %9 = zext i32 %0 to i64
  br label %10

10:                                               ; preds = %6, %24
  %11 = phi i64 [ 0, %6 ], [ %25, %24 ]
  %12 = mul nsw i64 %11, %8
  %13 = zext i32 %0 to i64
  br label %14

14:                                               ; preds = %10, %14
  %15 = phi i64 [ 0, %10 ], [ %22, %14 ]
  %16 = add nsw i64 %15, %12
  %17 = getelementptr inbounds i16, i16* %2, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = mul nsw i32 %19, %7
  %21 = getelementptr inbounds i32, i32* %1, i64 %16
  store i32 %20, i32* %21, align 4
  %22 = add nuw nsw i64 %15, 1
  %23 = icmp eq i64 %22, %13
  br i1 %23, label %24, label %14

24:                                               ; preds = %14
  %25 = add nuw nsw i64 %11, 1
  %26 = icmp eq i64 %25, %9
  br i1 %26, label %27, label %10

27:                                               ; preds = %24, %4
  ret void
}

attributes #0 = { nofree norecurse nounwind uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
