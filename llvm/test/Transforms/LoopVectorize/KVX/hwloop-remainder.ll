; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -loop-vectorize < %s | FileCheck %s

target triple = "kvx-kalray-cos"

define void @matrix_mul_const(i32 %0, i32* nocapture %1, i16* nocapture readonly %2, i16 %3) local_unnamed_addr #0 {
; CHECK-LABEL: @matrix_mul_const(
; CHECK-NEXT:    [[TMP5:%.*]] = icmp sgt i32 [[TMP0:%.*]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[TMP6:%.*]], label [[TMP40:%.*]]
; CHECK:       6:
; CHECK-NEXT:    [[TMP7:%.*]] = sext i16 [[TMP3:%.*]] to i32
; CHECK-NEXT:    [[TMP8:%.*]] = sext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    br label [[TMP10:%.*]]
; CHECK:       10:
; CHECK-NEXT:    [[TMP11:%.*]] = phi i64 [ 0, [[TMP6]] ], [ [[TMP38:%.*]], [[TMP37:%.*]] ]
; CHECK-NEXT:    [[TMP12:%.*]] = mul i64 [[TMP8]], [[TMP11]]
; CHECK-NEXT:    [[SCEVGEP:%.*]] = getelementptr i32, i32* [[TMP1:%.*]], i64 [[TMP12]]
; CHECK-NEXT:    [[SCEVGEP1:%.*]] = bitcast i32* [[SCEVGEP]] to i8*
; CHECK-NEXT:    [[TMP13:%.*]] = add i64 [[TMP9]], [[TMP12]]
; CHECK-NEXT:    [[SCEVGEP2:%.*]] = getelementptr i32, i32* [[TMP1]], i64 [[TMP13]]
; CHECK-NEXT:    [[SCEVGEP23:%.*]] = bitcast i32* [[SCEVGEP2]] to i8*
; CHECK-NEXT:    [[SCEVGEP4:%.*]] = getelementptr i16, i16* [[TMP2:%.*]], i64 [[TMP12]]
; CHECK-NEXT:    [[SCEVGEP45:%.*]] = bitcast i16* [[SCEVGEP4]] to i8*
; CHECK-NEXT:    [[SCEVGEP6:%.*]] = getelementptr i16, i16* [[TMP2]], i64 [[TMP13]]
; CHECK-NEXT:    [[SCEVGEP67:%.*]] = bitcast i16* [[SCEVGEP6]] to i8*
; CHECK-NEXT:    [[TMP14:%.*]] = mul nsw i64 [[TMP11]], [[TMP8]]
; CHECK-NEXT:    [[TMP15:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP9]], 2
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; CHECK:       vector.memcheck:
; CHECK-NEXT:    [[BOUND0:%.*]] = icmp ult i8* [[SCEVGEP1]], [[SCEVGEP67]]
; CHECK-NEXT:    [[BOUND1:%.*]] = icmp ult i8* [[SCEVGEP45]], [[SCEVGEP23]]
; CHECK-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]
; CHECK-NEXT:    [[MEMCHECK_CONFLICT:%.*]] = and i1 [[FOUND_CONFLICT]], true
; CHECK-NEXT:    br i1 [[MEMCHECK_CONFLICT]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP9]], 2
; CHECK-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP9]], [[N_MOD_VF]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <2 x i32> poison, i32 [[TMP7]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <2 x i32> [[BROADCAST_SPLATINSERT]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = add i64 [[INDEX]], 0
; CHECK-NEXT:    [[TMP17:%.*]] = add nsw i64 [[TMP16]], [[TMP14]]
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i16, i16* [[TMP2]], i64 [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr inbounds i16, i16* [[TMP18]], i32 0
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i16* [[TMP19]] to <2 x i16>*
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <2 x i16>, <2 x i16>* [[TMP20]], align 2, !alias.scope !0
; CHECK-NEXT:    [[TMP21:%.*]] = sext <2 x i16> [[WIDE_LOAD]] to <2 x i32>
; CHECK-NEXT:    [[TMP22:%.*]] = mul nsw <2 x i32> [[TMP21]], [[BROADCAST_SPLAT]]
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i32, i32* [[TMP1]], i64 [[TMP17]]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr inbounds i32, i32* [[TMP23]], i32 0
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast i32* [[TMP24]] to <2 x i32>*
; CHECK-NEXT:    store <2 x i32> [[TMP22]], <2 x i32>* [[TMP25]], align 4, !alias.scope !3, !noalias !0
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 2
; CHECK-NEXT:    [[TMP26:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP26]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], [[LOOP5:!llvm.loop !.*]]
; CHECK:       middle.block:
; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP9]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[CMP_N]], label [[TMP37]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[TMP10]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; CHECK-NEXT:    br label [[TMP27:%.*]]
; CHECK:       27:
; CHECK-NEXT:    [[TMP28:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[TMP35:%.*]], [[TMP27]] ]
; CHECK-NEXT:    [[TMP29:%.*]] = add nsw i64 [[TMP28]], [[TMP14]]
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr inbounds i16, i16* [[TMP2]], i64 [[TMP29]]
; CHECK-NEXT:    [[TMP31:%.*]] = load i16, i16* [[TMP30]], align 2
; CHECK-NEXT:    [[TMP32:%.*]] = sext i16 [[TMP31]] to i32
; CHECK-NEXT:    [[TMP33:%.*]] = mul nsw i32 [[TMP32]], [[TMP7]]
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr inbounds i32, i32* [[TMP1]], i64 [[TMP29]]
; CHECK-NEXT:    store i32 [[TMP33]], i32* [[TMP34]], align 4
; CHECK-NEXT:    [[TMP35]] = add nuw nsw i64 [[TMP28]], 1
; CHECK-NEXT:    [[TMP36:%.*]] = icmp eq i64 [[TMP35]], [[TMP15]]
; CHECK-NEXT:    br i1 [[TMP36]], label [[TMP37]], label [[TMP27]], [[LOOP7:!llvm.loop !.*]]
; CHECK:       37:
; CHECK-NEXT:    [[TMP38]] = add nuw nsw i64 [[TMP11]], 1
; CHECK-NEXT:    [[TMP39:%.*]] = icmp eq i64 [[TMP38]], [[TMP9]]
; CHECK-NEXT:    br i1 [[TMP39]], label [[DOTLOOPEXIT:%.*]], label [[TMP10]]
; CHECK:       .loopexit:
; CHECK-NEXT:    br label [[TMP40]]
; CHECK:       40:
; CHECK-NEXT:    ret void
;

  %5 = icmp sgt i32 %0, 0
  br i1 %5, label %6, label %27

6:                                                ; preds = %4
  %7 = sext i16 %3 to i32
  %8 = sext i32 %0 to i64
  %9 = zext i32 %0 to i64
  br label %10

10:                                               ; preds = %6, %24
  %11 = phi i64 [ 0, %6 ], [ %25, %24 ]
  %12 = mul nsw i64 %11, %8
  %13 = zext i32 %0 to i64
  br label %14

14:                                               ; preds = %10, %14
  %15 = phi i64 [ 0, %10 ], [ %22, %14 ]
  %16 = add nsw i64 %15, %12
  %17 = getelementptr inbounds i16, i16* %2, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = mul nsw i32 %19, %7
  %21 = getelementptr inbounds i32, i32* %1, i64 %16
  store i32 %20, i32* %21, align 4
  %22 = add nuw nsw i64 %15, 1
  %23 = icmp eq i64 %22, %13
  br i1 %23, label %24, label %14

24:                                               ; preds = %14
  %25 = add nuw nsw i64 %11, 1
  %26 = icmp eq i64 %25, %9
  br i1 %26, label %27, label %10

27:                                               ; preds = %24, %4
  ret void
}

attributes #0 = { nofree norecurse nounwind uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
